{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/keep/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/images/avatar.svg","path":"images/avatar.svg","modified":1,"renderable":1},{"_id":"themes/keep/source/images/bg.svg","path":"images/bg.svg","modified":1,"renderable":1},{"_id":"themes/keep/source/images/bg2.svg","path":"images/bg2.svg","modified":1,"renderable":1},{"_id":"themes/keep/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/keep/source/js/back2top.js","path":"js/back2top.js","modified":1,"renderable":1},{"_id":"themes/keep/source/js/code-block.js","path":"js/code-block.js","modified":1,"renderable":1},{"_id":"themes/keep/source/js/header-shrink.js","path":"js/header-shrink.js","modified":1,"renderable":1},{"_id":"themes/keep/source/js/lazyload.js","path":"js/lazyload.js","modified":1,"renderable":1},{"_id":"themes/keep/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/keep/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/keep/source/js/toggle-theme.js","path":"js/toggle-theme.js","modified":1,"renderable":1},{"_id":"themes/keep/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/keep/source/css/common/animated.styl","path":"css/common/animated.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/css/common/basic.styl","path":"css/common/basic.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/css/common/css-variables.styl","path":"css/common/css-variables.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/css/common/keep-style.styl","path":"css/common/keep-style.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/css/common/markdown.styl","path":"css/common/markdown.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/css/common/stylus-variables.styl","path":"css/common/stylus-variables.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/css/layout/page.styl","path":"css/layout/page.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/font/css/brands.min.css","path":"font/css/brands.min.css","modified":1,"renderable":1},{"_id":"themes/keep/source/font/css/fontawesome.min.css","path":"font/css/fontawesome.min.css","modified":1,"renderable":1},{"_id":"themes/keep/source/font/css/regular.min.css","path":"font/css/regular.min.css","modified":1,"renderable":1},{"_id":"themes/keep/source/font/css/solid.min.css","path":"font/css/solid.min.css","modified":1,"renderable":1},{"_id":"themes/keep/source/font/webfonts/fa-brands-400.ttf","path":"font/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/keep/source/font/webfonts/fa-brands-400.woff2","path":"font/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/keep/source/font/webfonts/fa-regular-400.ttf","path":"font/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/keep/source/font/webfonts/fa-regular-400.woff2","path":"font/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/keep/source/font/webfonts/fa-solid-900.ttf","path":"font/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/keep/source/font/webfonts/fa-solid-900.woff2","path":"font/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/keep/source/font/webfonts/fa-v4compatibility.ttf","path":"font/webfonts/fa-v4compatibility.ttf","modified":1,"renderable":1},{"_id":"themes/keep/source/font/webfonts/fa-v4compatibility.woff2","path":"font/webfonts/fa-v4compatibility.woff2","modified":1,"renderable":1},{"_id":"themes/keep/source/images/brands/aliyun.png","path":"images/brands/aliyun.png","modified":1,"renderable":1},{"_id":"themes/keep/source/images/brands/gitee.png","path":"images/brands/gitee.png","modified":1,"renderable":1},{"_id":"themes/keep/source/images/brands/cloudflare.png","path":"images/brands/cloudflare.png","modified":1,"renderable":1},{"_id":"themes/keep/source/images/brands/github.png","path":"images/brands/github.png","modified":1,"renderable":1},{"_id":"themes/keep/source/images/brands/netlify.png","path":"images/brands/netlify.png","modified":1,"renderable":1},{"_id":"themes/keep/source/images/brands/tencent_cloud.png","path":"images/brands/tencent_cloud.png","modified":1,"renderable":1},{"_id":"themes/keep/source/images/brands/upyun.png","path":"images/brands/upyun.png","modified":1,"renderable":1},{"_id":"themes/keep/source/images/brands/vercel.png","path":"images/brands/vercel.png","modified":1,"renderable":1},{"_id":"themes/keep/source/js/libs/anime.min.js","path":"js/libs/anime.min.js","modified":1,"renderable":1},{"_id":"themes/keep/source/js/libs/pjax.min.js","path":"js/libs/pjax.min.js","modified":1,"renderable":1},{"_id":"themes/keep/source/js/page/category-page.js","path":"js/page/category-page.js","modified":1,"renderable":1},{"_id":"themes/keep/source/js/page/home-page.js","path":"js/page/home-page.js","modified":1,"renderable":1},{"_id":"themes/keep/source/js/page/links-page.js","path":"js/page/links-page.js","modified":1,"renderable":1},{"_id":"themes/keep/source/js/page/photos-page.js","path":"js/page/photos-page.js","modified":1,"renderable":1},{"_id":"themes/keep/source/js/page/tools-page.js","path":"js/page/tools-page.js","modified":1,"renderable":1},{"_id":"themes/keep/source/js/post/copyright-info.js","path":"js/post/copyright-info.js","modified":1,"renderable":1},{"_id":"themes/keep/source/js/post/post-helper.js","path":"js/post/post-helper.js","modified":1,"renderable":1},{"_id":"themes/keep/source/js/post/share.js","path":"js/post/share.js","modified":1,"renderable":1},{"_id":"themes/keep/source/js/post/toc.js","path":"js/post/toc.js","modified":1,"renderable":1},{"_id":"themes/keep/source/css/common/code-block/code-block.styl","path":"css/common/code-block/code-block.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/css/common/code-block/code-theme.styl","path":"css/common/code-block/code-theme.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/css/common/code-block/highlight.styl","path":"css/common/code-block/highlight.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/css/common/tags/keep-button.styl","path":"css/common/tags/keep-button.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/css/common/tags/keep-note.styl","path":"css/common/tags/keep-note.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/css/common/tags/keep-tabs.styl","path":"css/common/tags/keep-tabs.styl","modified":1,"renderable":1},{"_id":"source/background/001.webp","path":"background/001.webp","modified":1,"renderable":0},{"_id":"source/background/002.webp","path":"background/002.webp","modified":1,"renderable":0},{"_id":"source/background/003.webp","path":"background/003.webp","modified":1,"renderable":0},{"_id":"source/background/004.webp","path":"background/004.webp","modified":1,"renderable":0},{"_id":"source/background/005.webp","path":"background/005.webp","modified":1,"renderable":0},{"_id":"source/background/006.webp","path":"background/006.webp","modified":1,"renderable":0},{"_id":"source/background/007.webp","path":"background/007.webp","modified":1,"renderable":0},{"_id":"source/background/008.webp","path":"background/008.webp","modified":1,"renderable":0},{"_id":"source/background/009.webp","path":"background/009.webp","modified":1,"renderable":0},{"_id":"source/background/010.webp","path":"background/010.webp","modified":1,"renderable":0},{"_id":"source/background/011.webp","path":"background/011.webp","modified":1,"renderable":0},{"_id":"source/background/012.webp","path":"background/012.webp","modified":1,"renderable":0},{"_id":"source/background/013.webp","path":"background/013.webp","modified":1,"renderable":0},{"_id":"source/background/013_up.webp","path":"background/013_up.webp","modified":1,"renderable":0},{"_id":"source/background/014.webp","path":"background/014.webp","modified":1,"renderable":0},{"_id":"source/background/015.webp","path":"background/015.webp","modified":1,"renderable":0},{"_id":"source/background/016.webp","path":"background/016.webp","modified":1,"renderable":0},{"_id":"source/background/017.webp","path":"background/017.webp","modified":1,"renderable":0},{"_id":"source/background/018.webp","path":"background/018.webp","modified":1,"renderable":0},{"_id":"source/background/019.webp","path":"background/019.webp","modified":1,"renderable":0},{"_id":"source/background/020.webp","path":"background/020.webp","modified":1,"renderable":0},{"_id":"source/background/021.webp","path":"background/021.webp","modified":1,"renderable":0},{"_id":"source/background/022.webp","path":"background/022.webp","modified":1,"renderable":0},{"_id":"source/background/023.webp","path":"background/023.webp","modified":1,"renderable":0},{"_id":"source/font/FiraCode-Regular.ttf","path":"font/FiraCode-Regular.ttf","modified":1,"renderable":0},{"_id":"source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":0},{"_id":"source/img/qq.jpg","path":"img/qq.jpg","modified":1,"renderable":0},{"_id":"source/img/wechat.jpg","path":"img/wechat.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/manifest.json","hash":"1b0fae97891c808f83e85ac40f28114167e18071","modified":1757817371054},{"_id":"source/_data/links.yml","hash":"c61633333be777dfcf5d45ce7c97445510d38aab","modified":1757914605281},{"_id":"source/_posts/hello-world.md","hash":"ecd69f09308376f864b958b0d638fe8ed2ea52f0","modified":1757817371009},{"_id":"source/about/index.md","hash":"e6219195ab28149a01882a1ff4836dc41e88d147","modified":1757921600611},{"_id":"source/categories/index.md","hash":"bd247f635cb22cabf9105a3b04544f393f801557","modified":1757921527490},{"_id":"source/background/003.webp","hash":"06960efae139f508127ccdc9984713631fa4ebf4","modified":1757817371050},{"_id":"source/css/custom.css","hash":"c86c831b2fbc6f80e8def637fdf69cc443cc5e7b","modified":1757920351986},{"_id":"source/link/index.md","hash":"f26ba3bd281ff03303b1412da974295bca599c3f","modified":1757817371054},{"_id":"source/img/qq.jpg","hash":"bc6517b574c33ef134e0b535810af25b5e2a3a5b","modified":1757853480964},{"_id":"source/tags/index.md","hash":"5a68cd4d74c871982a73d0c23f28d95ff90ea6ff","modified":1757921583330},{"_id":"source/_posts/C-Plus-Plus/新标准.md","hash":"f0eec6c5e9e6a01242d5284534526b57f1eee73e","modified":1757817371009},{"_id":"source/_posts/C-Plus-Plus/语法.md","hash":"cbb8a632a9fda774818d53977b6b2e0fa214abb3","modified":1757817371009},{"_id":"source/_posts/C语言/标准库.md","hash":"411027e3dfa8e189d445b46e47aff3e055b2c4ce","modified":1757817371009},{"_id":"source/_posts/LeetCode/leetcode-1477.md","hash":"856fe2aea6d6061ca7bee24a005400a26abc6815","modified":1757817371009},{"_id":"source/_posts/LeetCode/leetcode-31.md","hash":"dfc5414c67026b5f68c4b63f2ed058a7a2d81157","modified":1757817371009},{"_id":"source/_posts/主题样例/Mdmdt主题演示demo.md","hash":"7aa3604cd8e4e508bf174eabb041e70a2f484982","modified":1757921403131},{"_id":"source/_posts/主题样例/readme.en.md","hash":"97d8b98b24275eae36b435f9a70855107090969e","modified":1757817371047},{"_id":"source/_posts/主题样例/readme.md","hash":"4c8b9493e6335abda303f4dcef32800c4305104e","modified":1757817371047},{"_id":"source/_posts/程序/string分割.md","hash":"db8e047c0cb9f488391e674b1daaf590b38314da","modified":1757817371048},{"_id":"source/_posts/程序/获取文件大小.md","hash":"b57bf57466af295580b8e4baedd3c31c96d82f14","modified":1757817371049},{"_id":"source/_posts/算法/SortAlgorithem.md","hash":"2aa7802c3cf99efe9f8df61e2e8dc5d63d1a3dce","modified":1757921395539},{"_id":"source/_posts/网络编程/Linux的IO多路复用.md","hash":"8ecf8c2c6832d85f328be526c754d2c830417788","modified":1757817371049},{"_id":"source/_posts/网络编程/TCP协议和UDP协议.md","hash":"43f33cb129a2c2439e3fc42bcc9caceb94263e32","modified":1757817371049},{"_id":"source/_posts/网络编程/epoll的LT模式和ET模式.md","hash":"2f51f2ad2a59b6f3e8ef43b88ee013332e35d761","modified":1757817371049},{"_id":"source/_posts/系统编程/多进程.md","hash":"14c98c74e7cb0349dc8e94b2bba11b0ec275d32a","modified":1757817371049},{"_id":"source/_posts/网络编程/socket.md","hash":"41a39d1017851c3387474119d0811687aff1fcf5","modified":1757817371049},{"_id":"source/_posts/系统编程/标准IO.md","hash":"5c58526a01c1d8f4f5d9a21e443220ae13f93ccf","modified":1757817371049},{"_id":"source/_posts/系统编程/系统调用.md","hash":"753cfb13457747e0a9bcf35a3721b7348c6c8588","modified":1757817371049},{"_id":"source/_posts/C-Plus-Plus/STL/map.md","hash":"9c9eb7639d584fdcd3eed9b024daef239331e52c","modified":1757817371008},{"_id":"source/_posts/C-Plus-Plus/STL/set.md","hash":"f406db93024013e0567dcd7c6026adf6b8f8e475","modified":1757817371008},{"_id":"source/_posts/C-Plus-Plus/c-plus-plus-14/shared_lock.md","hash":"1a215057d1275fa04844c0411db0d6695180da58","modified":1757817371008},{"_id":"source/_posts/C-Plus-Plus/c-plus-plus-14/shared_timed_mutex.md","hash":"24d97a362f7e20c0419a96719ff88bd7e011f01c","modified":1757817371008},{"_id":"source/_posts/C-Plus-Plus/c-plus-plus-17/nodiscard.md","hash":"c571e31a574436eddc1bd5a3150a711aa53aba33","modified":1757817371008},{"_id":"source/_posts/C-Plus-Plus/对象模型/内存对齐.md","hash":"93bee55a864118b7423ea03801f339a0600d90d9","modified":1757817371008},{"_id":"source/_posts/C-Plus-Plus/并发/内存序.md","hash":"ea442cfd02b5629521c87027bc24c401b8a0b216","modified":1757817371008},{"_id":"source/_posts/C-Plus-Plus/并发/原子操作.md","hash":"0bbb34602771e257b888851da6f523fe03e86531","modified":1757817371009},{"_id":"source/_posts/数据结构/image/image-20250623201450979.png","hash":"5be048a20b3ce5e90993f4af84cc225172c827cd","modified":1757817371048},{"_id":"source/_posts/数据结构/堆/大顶堆.md","hash":"312511d95040b359dcfe546ed26ec6b7f674a731","modified":1757817371048},{"_id":"source/_posts/数据结构/树/BinarySearchTree.md","hash":"1b6f675e6eb8fd99cbddae6db2279de11e57f1d4","modified":1757817371048},{"_id":"source/_posts/数据结构/树/BalancedBinarySearchTree(AVL).md","hash":"9af359ae31e3fca053fb41fa2e026d31a27aa69b","modified":1757817371048},{"_id":"source/_posts/数据结构/树/BinaryTree.md","hash":"e9f79b7ce456743e8f186dbdfc458d0421712edc","modified":1757817371048},{"_id":"source/_posts/数据结构/树/CompleteBinaryTree.md","hash":"3320cbb517759fa3e323f5794eed2fcd80f74260","modified":1757817371048},{"_id":"source/_posts/数据结构/树/FullBinaryTree.md","hash":"fae1b50c148936ce6d6295b8a78607db152228cc","modified":1757817371048},{"_id":"source/_posts/数据结构/树/RBTree.md","hash":"9baba695cc268a01b68cccccc58905d4bc6bc7a2","modified":1757817371048},{"_id":"source/background/002.webp","hash":"c868b30959bb0d3a516aa99da2937fe7df128ac9","modified":1757817371050},{"_id":"source/background/007.webp","hash":"0834f5bb7c5ced6ef4a91f0f4fe3c10a4aa75980","modified":1757817371050},{"_id":"source/background/009.webp","hash":"1fede8dfffcc436f782645439bcd75106105036d","modified":1757817371050},{"_id":"source/background/010.webp","hash":"0b23ea05d29947ca7315e0db5853c0ba4a9295b2","modified":1757817371050},{"_id":"source/background/017.webp","hash":"6ff3d4c82f986f3a72a4a05e26a0ba72cdc1152d","modified":1757817371052},{"_id":"source/background/018.webp","hash":"c7bc1213ba066379d2806e0a62606a888d489085","modified":1757817371052},{"_id":"source/background/023.webp","hash":"ea07c5ff2b42f90d29c7c25dd5e47e669a93f7a6","modified":1757817371053},{"_id":"source/background/004.webp","hash":"0a65570bf47864b2a968c3a1aac818e518723daf","modified":1757817371050},{"_id":"source/background/006.webp","hash":"f45e2e8122235d3add61413d359d61a3acbb7019","modified":1757817371050},{"_id":"source/background/008.webp","hash":"2e5dedf619a46218b2e02eac46669cc4eb8812da","modified":1757817371050},{"_id":"source/background/012.webp","hash":"3b93a4dcb2cad91ad0cbf8fae45cace8cc337511","modified":1757817371051},{"_id":"source/background/021.webp","hash":"657eb2ca190332268b894841a8d403388b5a31b4","modified":1757817371053},{"_id":"source/background/022.webp","hash":"71140891318eaada83a3a796a75033dad8239a3b","modified":1757817371053},{"_id":"source/_posts/网络编程/image/Pasted_image_20250610210518.png","hash":"5592a750636ca7af16ad643c6d127ddde76e0fe2","modified":1757817371049},{"_id":"source/background/001.webp","hash":"6f59a612a698ad124bbba4902d407bc3d1ba511a","modified":1757817371049},{"_id":"source/background/005.webp","hash":"d8fb95cb3fe8c94b5a5844d03dc971571212dc4a","modified":1757817371050},{"_id":"source/background/013.webp","hash":"369be7f60db7f5795e64723d64bf7cc86988b523","modified":1757817371051},{"_id":"source/background/016.webp","hash":"9dc032191e3b97bfa432231a98ad2a7dedc783fd","modified":1757817371052},{"_id":"source/background/020.webp","hash":"aa831e0d86eb2b939b317ebb55947358a2b52654","modified":1757817371053},{"_id":"source/_posts/主题样例/img/mdmdt-ui-2.png","hash":"1d624549fd065c08864b318a57a073d721b3f7b2","modified":1757817371036},{"_id":"source/background/011.webp","hash":"bd913f1948c2c75b1cb93ff2937350926a3c6cdb","modified":1757817371051},{"_id":"source/background/019.webp","hash":"103165a1d40e25eeaf726ec0075da0341986be12","modified":1757817371053},{"_id":"source/font/FiraCode-Regular.ttf","hash":"693adff323e9ea4d2275b54ab049f561ef39f0b6","modified":1757919028795},{"_id":"source/img/wechat.jpg","hash":"b442c6a2571d30dcebbb91ce7d1bc0fe57ac10b7","modified":1757853025358},{"_id":"source/background/015.webp","hash":"fecbebb898246cf9cca283dd81599dc32f70ee53","modified":1757817371052},{"_id":"source/_posts/主题样例/img/mdmdt-ui-4.png","hash":"6419659c1958782997717ca278b38eecbe0bf732","modified":1757817371039},{"_id":"source/background/014.webp","hash":"cdb6b22c9394375a21b10bd7be03934adcad01c6","modified":1757817371052},{"_id":"source/_posts/主题样例/img/mdmdt-mermaid.png","hash":"2c49a7cb5ada56b857195fee1e09aab628638a4e","modified":1757817371024},{"_id":"source/_posts/主题样例/img/mdmdt-ui-1.png","hash":"6bc83d857d72885c17c9a0c72289ef55cc535f20","modified":1757817371035},{"_id":"themes/keep/.commitlintrc.js","hash":"3925f491e830dcb684933589cec3d4be8db0ff26","modified":1757838828580},{"_id":"themes/keep/.editorconfig","hash":"a1c91f0a086bf92fddb02ccf23578ec2b51c099c","modified":1757838828580},{"_id":"themes/keep/.gitignore","hash":"c4cd17a16e43203c7ae1ad41079a671e98ea52d5","modified":1757838828580},{"_id":"themes/keep/.npmignore","hash":"5f1a11e233e883dace7de8daac9e0f4d2ace6b1d","modified":1757838828581},{"_id":"themes/keep/.prettierrc","hash":"459178a4dff70a0885b6f5a49eb6a6265eea3083","modified":1757838828581},{"_id":"themes/keep/.stylelintrc.js","hash":"63ce9d43e8675a8cb771332c81c89ba7a60b5516","modified":1757838828581},{"_id":"themes/keep/CHANGELOG.md","hash":"4c4c9e68c5c4cdcf35eb7ae2c9eaa897bfccb540","modified":1757838828581},{"_id":"themes/keep/README.md","hash":"1ee61586bb39b2a14e9461b944a6f9c04f7ec4a2","modified":1757838828581},{"_id":"themes/keep/LICENSE","hash":"a2f9ffbf32eeb6284afa81bc4fb4c27b80d044e9","modified":1757838828581},{"_id":"themes/keep/_config.yml","hash":"9853a2a41df98e9092eb7a156f580534122e0ff2","modified":1757915255777},{"_id":"themes/keep/package.json","hash":"9cd589514a9ffb62b8f28fa4971243673afd8846","modified":1757838828583},{"_id":"themes/keep/.github/FUNDING.yml","hash":"19b9fddc1871ee1e16738677cfe145877b761dd2","modified":1757838828580},{"_id":"themes/keep/.husky/commit-msg","hash":"acb6c4e5a6a3c713df9264e4d36798d6326580bb","modified":1757838828580},{"_id":"themes/keep/.husky/pre-commit","hash":"12a9c8125c55c9cc29620696a0fa050ee61f9a2b","modified":1757838828581},{"_id":"themes/keep/docs/README_zh-CN.md","hash":"e4f0a41da84aa634db3af2d98b5e14853e7dd126","modified":1757838828581},{"_id":"themes/keep/docs/README_zh-TW.md","hash":"a5aff58ae6c6565ec7db3bc7af6c438e79140048","modified":1757838828581},{"_id":"themes/keep/languages/zh-CN.yml","hash":"228967e3d1cf3497fd8d5830ced9314996f2da4a","modified":1757838828581},{"_id":"themes/keep/languages/en.yml","hash":"9ab7552e21e29ecc6c8ecbb3d06e5c548fdefcb7","modified":1757838828581},{"_id":"themes/keep/languages/zh-TW.yml","hash":"cf74458204218a5daf21ad458663fba7eecedf63","modified":1757838828581},{"_id":"themes/keep/layout/index.ejs","hash":"f5fee4e079a9c2c23059ebde4cd89ec723e310c6","modified":1757838828583},{"_id":"themes/keep/layout/layout.ejs","hash":"e03731246bc99439eca82547081539618832a216","modified":1757838828583},{"_id":"themes/keep/layout/page.ejs","hash":"dd33bcf446dbfdc1f4d3b2f19c5df2a9c2bf0691","modified":1757838828583},{"_id":"themes/keep/.github/ISSUE_TEMPLATE/bug-report.yml","hash":"d872ebbc85b61dc0103b93516784033284807d59","modified":1757838828580},{"_id":"themes/keep/.github/ISSUE_TEMPLATE/config.yml","hash":"d036c45203d964b8642807ef275807e695fc9811","modified":1757838828580},{"_id":"themes/keep/.github/ISSUE_TEMPLATE/feature-request.yml","hash":"a0456b92b6b1af4ab74f882512884fee67dbd600","modified":1757838828580},{"_id":"themes/keep/.github/ISSUE_TEMPLATE/other.yml","hash":"cdf70b46a9d58b0930f6c9b3ab25ba5401335974","modified":1757838828580},{"_id":"themes/keep/.github/workflows/auto-merge.yml","hash":"1597492ba41e12feaab01e4a6cd0a2d6a49df826","modified":1757838828580},{"_id":"themes/keep/.github/workflows/release.yml","hash":"9eec7ec60c3a4efdb8b2703896728318fc8c439b","modified":1757838828580},{"_id":"themes/keep/layout/_page/404.ejs","hash":"374939be71b9b29ef4a955e1fdf1d2b70f0b4f0b","modified":1757838828581},{"_id":"themes/keep/layout/_page/archive.ejs","hash":"e753c99c041f34f27d673e8c8da2f362ebeb2358","modified":1757838828581},{"_id":"themes/keep/layout/_page/category-archive.ejs","hash":"e2de765f080bf8d0d9ceaa1ba9b27634ba012899","modified":1757838828581},{"_id":"themes/keep/layout/_page/category.ejs","hash":"1017f39232f667321b5c1da95162be4efae6c213","modified":1757838828581},{"_id":"themes/keep/layout/_page/home.ejs","hash":"29e067d21ee8ed982bab86e40efabdee00e8c0f2","modified":1757838828581},{"_id":"themes/keep/layout/_page/post.ejs","hash":"299fb38707592bc364726706b6892d741cc6ef6d","modified":1757838828581},{"_id":"themes/keep/layout/_page/tag-archive.ejs","hash":"a3c1f8e59a338a9b81262474019efd475648dc3d","modified":1757838828581},{"_id":"themes/keep/layout/_page/tag.ejs","hash":"f3907b6b3e8a48dc943755be6c59a7fd98086977","modified":1757838828581},{"_id":"themes/keep/layout/_partial/archive-list.ejs","hash":"5dfacab1f5414fd73ce767a829654e5106cfaeef","modified":1757838828581},{"_id":"themes/keep/layout/_partial/first-screen.ejs","hash":"e8bc63ed8dd3600efa29c5a3f3b3c31df55b8ded","modified":1757838828582},{"_id":"themes/keep/layout/_partial/footer.ejs","hash":"24994accc955e4a1fddb7d30391cea1a17e1d3ef","modified":1757838828582},{"_id":"themes/keep/layout/_partial/head.ejs","hash":"2c70c748c6bd5d16869c4b70cc0122cb6ee3af78","modified":1757838828582},{"_id":"themes/keep/layout/_partial/header.ejs","hash":"9ff7e63634cb5b838d62e7a7ac40db8f108dbbcc","modified":1757838828582},{"_id":"themes/keep/layout/_partial/image-mask.ejs","hash":"e785b4ca258ce378354216038ef544ca6ef4af51","modified":1757838828582},{"_id":"themes/keep/layout/_partial/local-search.ejs","hash":"18207b298e413fc6b89efc07aa63e8c95a06e56c","modified":1757838828582},{"_id":"themes/keep/layout/_partial/paginator.ejs","hash":"2220318bc63cf8d7bb3fb985a992148526883422","modified":1757838828582},{"_id":"themes/keep/layout/_partial/progress-bar.ejs","hash":"0cda69a94f292073d13c36f409680b40527b9db0","modified":1757838828582},{"_id":"themes/keep/layout/_partial/scripts.ejs","hash":"81b33dfcf049165bd188936a4d56d2c76966134b","modified":1757838828582},{"_id":"themes/keep/layout/_partial/side-tools.ejs","hash":"1ac47d009d222ed9c1f44aab3039e744bf53e823","modified":1757838828582},{"_id":"themes/keep/layout/_partial/toc.ejs","hash":"d07b24faf6d317e198b0d2f1e7ad54e38619b862","modified":1757838828582},{"_id":"themes/keep/layout/_template/friends-link.ejs","hash":"f051cd24f3e6ae9b8d014ce2058df62fe7da0995","modified":1757838828582},{"_id":"themes/keep/layout/_template/page-template.ejs","hash":"41a5caf1d918f5fd4b6288101dc6a81be2ea5fba","modified":1757838828583},{"_id":"themes/keep/layout/_template/photo-album.ejs","hash":"96b31a81c52f1132a77578ca49a1ea2fbae3f30a","modified":1757838828583},{"_id":"themes/keep/layout/_template/tools-nav.ejs","hash":"953a3cd3abc4ff13ea0672579afd74dc70f1e64d","modified":1757838828583},{"_id":"themes/keep/scripts/events/404-page.js","hash":"ce2800bf5bb51cb0e1b97a3197bbea22086ce95f","modified":1757838828583},{"_id":"themes/keep/scripts/events/config-handle.js","hash":"1e700776ee8f90757e0659985d36204452c39537","modified":1757838828583},{"_id":"themes/keep/scripts/events/keep-info.js","hash":"3661991ef2e3f94d01eec041d84de615a01c2ede","modified":1757838828583},{"_id":"themes/keep/scripts/filters/encrypt-handle.js","hash":"1a56f3d83be4a8fb59aafc66f824bfd45a4d5fe5","modified":1757838828583},{"_id":"themes/keep/scripts/filters/image-handle.js","hash":"a701a8c3efde5daea801ff464e86ceda6e2e79bd","modified":1757838828583},{"_id":"themes/keep/scripts/filters/link-handle.js","hash":"e6fa7d7d20876710d7e6f035d5c4cd69e6d55f6f","modified":1757838828583},{"_id":"themes/keep/scripts/helpers/export-config.js","hash":"68aeda9fbd77dfe6ba4844c9a1c14f6ed6179304","modified":1757838828583},{"_id":"themes/keep/scripts/helpers/helper.js","hash":"2d5d70902c267db1a29e38a62a9934ea8a21335f","modified":1757838828583},{"_id":"themes/keep/scripts/tags/button.js","hash":"469d602b7e6f628f39accdc01995f7d53183c6b2","modified":1757838828583},{"_id":"themes/keep/scripts/tags/index.js","hash":"253cd55481e683bdb8befdfe286cd65fb438d383","modified":1757838828583},{"_id":"themes/keep/scripts/tags/note.js","hash":"8fff007ae56c5e719f984cbaf94eb643caf1c900","modified":1757838828583},{"_id":"themes/keep/scripts/tags/tabs.js","hash":"febba0de7b1ee2ce8d08bcdb591cf1c8f8ee1256","modified":1757838828583},{"_id":"themes/keep/source/css/style.styl","hash":"06e86092bf0cabf7dac2cb4b7cec006244264c5a","modified":1757838828585},{"_id":"themes/keep/source/images/avatar.svg","hash":"aba8367cd7550e75279f707671d7146813c2a776","modified":1757838828590},{"_id":"themes/keep/source/images/bg.svg","hash":"7dfc551927ce3a789d8f4a62c59d600f2446aed5","modified":1757838828590},{"_id":"themes/keep/source/images/bg2.svg","hash":"f12bbb821857d4e41ec253f4d8025ca7e4afce3b","modified":1757838828590},{"_id":"themes/keep/source/images/logo.svg","hash":"b618728f9964a5698b1dc2548db35b3d06dd115f","modified":1757838828590},{"_id":"themes/keep/source/js/back2top.js","hash":"a20b7f4664eb0c5efaf027edb7b922e9e2ee5d79","modified":1757838828590},{"_id":"themes/keep/source/js/code-block.js","hash":"865124ef04315f541ee8adda048e435fe967e0f6","modified":1757838828591},{"_id":"themes/keep/source/js/header-shrink.js","hash":"decbdf015a59a5a69b5a4c8b2a6acbba50c8c14e","modified":1757838828591},{"_id":"themes/keep/source/js/lazyload.js","hash":"7387c79cb6e3b2f469b54b323d9886a13755b50f","modified":1757838828591},{"_id":"themes/keep/source/js/local-search.js","hash":"4962807fa7f450f37c16b633fab34653b3238384","modified":1757838828591},{"_id":"themes/keep/source/js/main.js","hash":"ed6aff5348e832e35fe0863b1821161e9688e124","modified":1757838828591},{"_id":"themes/keep/source/js/toggle-theme.js","hash":"7bd84016002d1c29f6fa55e88e106f17d672069d","modified":1757838828591},{"_id":"themes/keep/source/js/utils.js","hash":"fcef6c89a28358de73e230b82ec6dc62145698ad","modified":1757838828591},{"_id":"themes/keep/layout/_partial/comment/comment.ejs","hash":"91cce42038c5c88c3cdcf53df275d56ed0928b84","modified":1757838828582},{"_id":"themes/keep/layout/_partial/comment/config-error.ejs","hash":"5c791249d3d92310b11df74c890943914ad69c1d","modified":1757838828582},{"_id":"themes/keep/layout/_partial/comment/load-handler.ejs","hash":"f2603354acc2f8e2db1342a2b5394ffebb04e962","modified":1757838828582},{"_id":"themes/keep/layout/_partial/common/empty-content.ejs","hash":"78402dfaf5f2ab9462b31039551ca0b5a991485f","modified":1757838828582},{"_id":"themes/keep/layout/_partial/common/mermaid.ejs","hash":"05b0dbdc2e28d9c8b342829debf112bea3ee2b68","modified":1757838828582},{"_id":"themes/keep/layout/_partial/pjax/pjax.ejs","hash":"8d72e959001413d3c7d3721cf44111757982a3de","modified":1757838828582},{"_id":"themes/keep/layout/_partial/post/post-copyright-info.ejs","hash":"1fd9588d7e3970c7f5157faa077e1641a9adcab3","modified":1757838828582},{"_id":"themes/keep/layout/_partial/post/post-meta-info.ejs","hash":"7ac1076ff5baf05c155f3e4a4ec031b5b20c5e80","modified":1757838828582},{"_id":"themes/keep/layout/_partial/post/post-share.ejs","hash":"2602390e3f35117b1c2dd73edfc5764dbe94dde4","modified":1757838828582},{"_id":"themes/keep/layout/_partial/post/post-tools.ejs","hash":"3dc7035a88a71bd01c75149ca6bdf961d4ced18a","modified":1757838828582},{"_id":"themes/keep/layout/_partial/post/reward-author.ejs","hash":"153c5aba0095782ccdec88a0d5f7ca924d73707a","modified":1757838828582},{"_id":"themes/keep/source/css/common/animated.styl","hash":"d9577cd145aeb11da400f694c18052f59f0f085e","modified":1757838828583},{"_id":"themes/keep/source/css/common/basic.styl","hash":"db3443d71472fea5adaf18e079d953555e33d7f7","modified":1757838828584},{"_id":"themes/keep/source/css/common/css-variables.styl","hash":"3680408d1191006a975aeb7f20b2e262c088fdb3","modified":1757838828584},{"_id":"themes/keep/source/css/common/markdown.styl","hash":"4d332c6cc899868e8f6f6d6d71bf8e8f5cd0975f","modified":1757838828584},{"_id":"themes/keep/source/css/common/keep-style.styl","hash":"e83f4cb3c4d578b9e139f6bc10a7c9af829a02dd","modified":1757838828584},{"_id":"themes/keep/source/css/common/stylus-variables.styl","hash":"bc432788c82bd63f2b3fb19e46c68e3dc777f048","modified":1757838828584},{"_id":"themes/keep/source/css/layout/page.styl","hash":"a51be410ac9ebb8d4b123c6c4ba7da391ad3d947","modified":1757838828585},{"_id":"themes/keep/source/font/css/brands.min.css","hash":"75e0c506eff6c93d4d3311b300d251c48236b714","modified":1757838828585},{"_id":"themes/keep/source/font/css/regular.min.css","hash":"7d1c0737e27ee4c129fe5b74204c0b588dc4091c","modified":1757838828585},{"_id":"themes/keep/source/font/css/solid.min.css","hash":"65f70e8978fb1db423c007310387573b635498aa","modified":1757838828585},{"_id":"themes/keep/source/font/webfonts/fa-regular-400.woff2","hash":"07fc0ae14bb3187839082aed3bca11dfb1e04524","modified":1757838828587},{"_id":"themes/keep/source/font/webfonts/fa-regular-400.ttf","hash":"2d7890e12afb77490112ec57fe47ca0688aebda2","modified":1757838828587},{"_id":"themes/keep/source/font/webfonts/fa-v4compatibility.woff2","hash":"35794892fa2b4aede41ec686df49a1283ab2b2b3","modified":1757838828590},{"_id":"themes/keep/source/font/webfonts/fa-v4compatibility.ttf","hash":"321d89c65f1746f111341556bc62c7e217ad2544","modified":1757838828590},{"_id":"themes/keep/source/images/brands/aliyun.png","hash":"4a4464a8a66adb9ecddf2084087dd652690942d5","modified":1757838828590},{"_id":"themes/keep/source/images/brands/gitee.png","hash":"d4c79d132c914bf28386df102e7c3f0607c95369","modified":1757838828590},{"_id":"themes/keep/source/images/brands/cloudflare.png","hash":"0ca0b3b69e99c1f8c2be66bf631805a37abf8cb3","modified":1757838828590},{"_id":"themes/keep/source/images/brands/github.png","hash":"fa9ed69cd0a004f3cd334d098b8fea5ae2ac3835","modified":1757838828590},{"_id":"themes/keep/source/images/brands/netlify.png","hash":"49b178e13d71e16746bf9403a043338fb285a453","modified":1757838828590},{"_id":"themes/keep/source/images/brands/tencent_cloud.png","hash":"be5357326af6c68b7c109fe5d4f92ada5daec900","modified":1757838828590},{"_id":"themes/keep/source/images/brands/upyun.png","hash":"923dafcc484388f2a1c20356e37eaf62b85479f4","modified":1757838828590},{"_id":"themes/keep/source/images/brands/vercel.png","hash":"2b0538b5cd09f71f06f5968a6cd0ae910a96f4ca","modified":1757838828590},{"_id":"themes/keep/source/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1757838828591},{"_id":"themes/keep/source/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1757838828591},{"_id":"themes/keep/source/js/page/category-page.js","hash":"95c642a02e3409984609cc93219ab05dbc16765f","modified":1757838828591},{"_id":"themes/keep/source/js/page/home-page.js","hash":"cb9adaafc230fb178e38b9d09d29ca2e5fbde70b","modified":1757838828591},{"_id":"themes/keep/source/js/page/links-page.js","hash":"41c09beee46a5dd58387154841e5766e581b27ec","modified":1757838828591},{"_id":"themes/keep/source/js/page/photos-page.js","hash":"a1a52f415f3abca4d5a34b01df4f540f84d95009","modified":1757838828591},{"_id":"themes/keep/source/js/page/tools-page.js","hash":"60f722e459ff6c377ca0c10644e83e8748637a50","modified":1757838828591},{"_id":"themes/keep/source/js/post/copyright-info.js","hash":"fe9dee9201455c1c2a98b171046bf59ba4d7af5e","modified":1757838828591},{"_id":"themes/keep/source/js/post/post-helper.js","hash":"9fb0fb38f17859dd63daaca4a6ef3bbe6e76d7bb","modified":1757838828591},{"_id":"themes/keep/source/js/post/share.js","hash":"7ea60518e86c3b15f164592b4600c61033b8bc4a","modified":1757838828591},{"_id":"themes/keep/source/js/post/toc.js","hash":"416ad2462b2d74d662b878643a1b865d3915edde","modified":1757838828591},{"_id":"themes/keep/layout/_partial/comment/plugins/artalk.ejs","hash":"1788724a817d8362958c381feee0418277b3f8da","modified":1757838828582},{"_id":"themes/keep/layout/_partial/comment/plugins/disqus.ejs","hash":"e3ea930a445a331ed327a3e4dc41ee5ce9edeb37","modified":1757838828582},{"_id":"themes/keep/layout/_partial/comment/plugins/giscus.ejs","hash":"76d193eea7c0ee2e9cdf11fd8018f2033baaf708","modified":1757838828582},{"_id":"themes/keep/layout/_partial/comment/plugins/gitalk.ejs","hash":"36602f1864d21963a7896c4e04ade0a5ccf3b303","modified":1757838828582},{"_id":"themes/keep/layout/_partial/comment/plugins/twikoo.ejs","hash":"d9e1da32d07da0ce57fe27b8257c466f547a0853","modified":1757838828582},{"_id":"themes/keep/layout/_partial/comment/plugins/valine.ejs","hash":"3cf7eb50d3dd60200cca0d21493b1b78e681f28c","modified":1757838828582},{"_id":"themes/keep/layout/_partial/comment/plugins/waline.ejs","hash":"74df06127587d2ff6ebf5fc0e738c30d90a65202","modified":1757838828582},{"_id":"themes/keep/source/css/common/code-block/code-block.styl","hash":"e05ea3623133fa09ad351f88ae5e98f69ddd118f","modified":1757838828584},{"_id":"themes/keep/source/css/common/code-block/code-theme.styl","hash":"9f3a898ec7673ff447fbc94b8f75974fc568e241","modified":1757838828584},{"_id":"themes/keep/source/css/common/code-block/highlight.styl","hash":"163f9464e1f39e55232e6db5ca4e8e5e088daeb9","modified":1757838828584},{"_id":"themes/keep/source/css/common/tags/keep-button.styl","hash":"69254a234d544f4a92670885e611fcc0081f7194","modified":1757838828584},{"_id":"themes/keep/source/css/common/tags/keep-note.styl","hash":"2283cd5399ef56023c31ac5555a9f4305b9fcf52","modified":1757838828584},{"_id":"themes/keep/source/css/common/tags/keep-tabs.styl","hash":"57bf54ad854b4fdc775a5dd7cb03bcdfd98f0f5c","modified":1757838828584},{"_id":"themes/keep/source/css/layout/_page/404.styl","hash":"a912c3cafd8f4ec892094b47aa110f08e8ebb1c0","modified":1757838828584},{"_id":"themes/keep/source/css/layout/_page/archive.styl","hash":"52cdeff06fdbd298050e048589d51831648126bb","modified":1757838828584},{"_id":"themes/keep/source/css/layout/_page/category-archive.styl","hash":"c6a460aea465ab9f7f15b3c0dc66277775b7814c","modified":1757838828584},{"_id":"themes/keep/source/css/layout/_page/category.styl","hash":"8d78e4df40e1a88709ebdba25c44e16b407153a8","modified":1757838828584},{"_id":"themes/keep/source/css/layout/_page/home.styl","hash":"5c3b36e99efc7a1cb8180e5cc425b78aaec77773","modified":1757838828584},{"_id":"themes/keep/source/css/layout/_page/post.styl","hash":"8af4192f8bcafad68000893f56557c749cbb64a2","modified":1757838828584},{"_id":"themes/keep/source/css/layout/_page/tag-archive.styl","hash":"1e4af48b8548e6e7618a9cc55e667bf214f860b7","modified":1757838828584},{"_id":"themes/keep/source/css/layout/_page/tag.styl","hash":"c6ea2c153df7bc512fdb644945f52c25ebaf1d49","modified":1757838828584},{"_id":"themes/keep/source/css/layout/_template/friends-link.styl","hash":"d3299aa67b07671ab24f64c7ba927827b14b2e62","modified":1757838828585},{"_id":"themes/keep/source/css/layout/_template/page-template.styl","hash":"cefe0604ec6b0f168f78bf2cd2c359cea78736ce","modified":1757838828585},{"_id":"themes/keep/source/css/layout/_template/photo-album.styl","hash":"2bff4df692749c2ad4301ce670207e407150948b","modified":1757838828585},{"_id":"themes/keep/source/css/layout/_template/tools-nav.styl","hash":"3b73b4c7b491aeaac03bf1dacd2e97c3d58abf41","modified":1757838828585},{"_id":"themes/keep/source/css/layout/_partial/archive-list.styl","hash":"5deeda34c6fd0f99e51b17a9ecbecf40ab0e3498","modified":1757838828584},{"_id":"themes/keep/source/css/layout/_partial/first-screen.styl","hash":"d51eb829ce96c78b4cb154c218a207b685c78806","modified":1757838828584},{"_id":"themes/keep/source/css/layout/_partial/footer.styl","hash":"da4178feac3b4c5c8ba4b7f9673a9368030b5d81","modified":1757838828584},{"_id":"themes/keep/source/css/layout/_partial/header.styl","hash":"9423173714cbb5db17235045ca13c0e1601feae3","modified":1757838828584},{"_id":"themes/keep/source/css/layout/_partial/image-mask.styl","hash":"d3fb3d4beb0e8f3558d3010b7d28298600c2ae8f","modified":1757838828584},{"_id":"themes/keep/source/css/layout/_partial/local-search.styl","hash":"ba965eb5230054feab9aad37c7668daf10281e3f","modified":1757838828584},{"_id":"themes/keep/source/css/layout/_partial/paginator.styl","hash":"910f35374c1be836893501ab84d047e0646cfab4","modified":1757838828584},{"_id":"themes/keep/source/css/layout/_partial/post-meta-info.styl","hash":"7ab3d8452b223250b360317387088c6bc7c3e23d","modified":1757838828584},{"_id":"themes/keep/source/css/layout/_partial/progress-bar.styl","hash":"5a0ae1b59de2c95b11cfa8fca57601f6da9bc16c","modified":1757838828585},{"_id":"themes/keep/source/css/layout/_partial/side-tools.styl","hash":"0b3f0e7f6ecf8c9f215886cb46ea0cc0f3c62470","modified":1757838828585},{"_id":"themes/keep/source/css/layout/_partial/toc.styl","hash":"ad59e157e3e0abc6ac916e411b2ad94777fccb18","modified":1757838828585},{"_id":"themes/keep/source/css/layout/_partial/comment/comment.styl","hash":"ce846f38381005dd603a4baf139b337a25e4ea57","modified":1757838828584},{"_id":"themes/keep/source/css/layout/_partial/comment/gitalk.styl","hash":"6344eabedc352463b3ae25e2ee28024c70bd31a2","modified":1757838828584},{"_id":"themes/keep/source/css/layout/_partial/comment/twikoo.styl","hash":"df0b0cf4a778d1e1fbcade3d226ced1a74fdb38f","modified":1757838828584},{"_id":"themes/keep/source/css/layout/_partial/comment/valine.styl","hash":"71ef4b5b22a63d567e48f76ccfaacc79ee40e7bc","modified":1757838828584},{"_id":"themes/keep/source/css/layout/_partial/comment/waline.styl","hash":"d638fafef43f646bbd9d96265af9aae9ff514c90","modified":1757838828584},{"_id":"themes/keep/source/css/layout/_partial/common/empty-content.styl","hash":"c9dbd9242f3a4251018e42de0026c410808f3f49","modified":1757838828584},{"_id":"themes/keep/source/css/layout/_partial/post/post-copyright-info.styl","hash":"72d8d8daa0542f3fd8e23a4e8df22e9f9c895f9a","modified":1757838828584},{"_id":"themes/keep/source/css/layout/_partial/post/post-share.styl","hash":"e67474486d9c8e9fd65ec51f1b97abf0e0e619c6","modified":1757838828585},{"_id":"themes/keep/source/css/layout/_partial/post/post-tools.styl","hash":"3b24dbf319f3e912b0c68d876afdacb861ac22c6","modified":1757838828585},{"_id":"themes/keep/source/css/layout/_partial/post/reward-author.styl","hash":"765a9c4d4583bc71e7f93ec5e2c4fcbda24b959f","modified":1757838828585},{"_id":"source/_posts/主题样例/img/mdmdt-math.png","hash":"67c2dd6760c67ce2e68b4ab8178048874780cba2","modified":1757817371022},{"_id":"source/_posts/主题样例/img/mdmdt-ui-3.png","hash":"29c53be7a4d64214579b1e9484b37ef67521f14e","modified":1757817371038},{"_id":"themes/keep/source/font/css/fontawesome.min.css","hash":"c562501b761480adb1b4db14b6b09981b3510ac8","modified":1757838828585},{"_id":"themes/keep/source/font/webfonts/fa-brands-400.woff2","hash":"373361ed756b1fe68ce2f5968d467826b6973bb5","modified":1757838828587},{"_id":"themes/keep/source/font/webfonts/fa-brands-400.ttf","hash":"d8b3568e9d8a1d3c01c85520eb9ca0b49b72815d","modified":1757838828587},{"_id":"themes/keep/source/font/webfonts/fa-solid-900.woff2","hash":"97f0942c6627ddd89fb62170e5cac9a2cbd6c98c","modified":1757838828590},{"_id":"source/_posts/主题样例/img/mdmdt-blockquote.png","hash":"545815ace3d2d0315772edecd58f6c178a52890a","modified":1757817371010},{"_id":"source/_posts/主题样例/img/mdtht-light.png","hash":"dee8966527166b69bfa6ac273e9a0086600fe61a","modified":1757817371047},{"_id":"source/_posts/主题样例/img/mdmdt-list.png","hash":"3d67d31407821bbe27a628bd1774ee49e838c672","modified":1757817371021},{"_id":"source/_posts/主题样例/img/mdmdt-title.png","hash":"c8fc3a759bb798d21d87f93f36862bbe6ba85fc4","modified":1757817371034},{"_id":"source/_posts/主题样例/img/mdtht-dark.png","hash":"a22e3a93b3468563f838817ee5cc799ca5932a9a","modified":1757817371045},{"_id":"themes/keep/source/font/webfonts/fa-solid-900.ttf","hash":"e9ace557c3aa403307f1e7a2cef1c035d522b94b","modified":1757838828590},{"_id":"source/_posts/主题样例/img/mdmdt.png","hash":"de6ad0e72771def4b0f7dd80d7725a64b5ccad22","modified":1757817371042},{"_id":"source/img/avatar.png","hash":"2716769a3818d1db9148bbbc977b00d0e09760f4","modified":1757817371054},{"_id":"source/_posts/主题样例/img/mdmdt-code.png","hash":"b48561ef25e2a6826eab768bbfd9461d002a16cc","modified":1757817371014},{"_id":"source/_posts/主题样例/img/mdmdt-source.png","hash":"977f9b736b4bc207bd7fd1e96f17adb3275423f2","modified":1757817371027},{"_id":"source/_posts/主题样例/img/mdmdt-text.png","hash":"c9d5912c5fd1c31bc2fe2d52552eff2e0ecf1c8d","modified":1757817371031},{"_id":"source/_posts/主题样例/img/mdmdt-layout.png","hash":"85d9e5e64b8cfda533affc3f54d141669d78659a","modified":1757817371018},{"_id":"source/background/013_up.webp","hash":"362e7586142e03fa03e71e2f3932cbff4fce184e","modified":1757914117579},{"_id":"public/images/avatar.svg","hash":"da63213aa5052b738171a8a8f78008105551010d","modified":1757922319656},{"_id":"public/images/bg.svg","hash":"b3b9f7f8ad8820d9287a10da5929d21d4a408e9d","modified":1757922319656},{"_id":"public/images/bg2.svg","hash":"900fa9e7bc11dfb5b738708142d66ab94dcec2cd","modified":1757922319656},{"_id":"public/images/logo.svg","hash":"35ee68fa4d22f764e9d69ee321cbd0232d77517a","modified":1757922319656},{"_id":"public/images/brands/netlify.png","hash":"7a40f04de73f2c78628d164598671504e43bbd77","modified":1757922319656},{"_id":"public/img/avatar.png","hash":"d44f3a67285a1b3f3eaa3c16d202f5e8c595255e","modified":1757922319656},{"_id":"public/img/qq.jpg","hash":"0f468a39a8175b8a1e547dad9d3b633474b3f8ea","modified":1757922319656},{"_id":"public/img/wechat.jpg","hash":"c9c6972fea014743b705ae0e8df978cabe553b07","modified":1757922319656},{"_id":"public/manifest.json","hash":"c77a184193b6816fda911daa70f7705efafd7506","modified":1757922319656},{"_id":"public/css/custom.css","hash":"84af981b118cc90169b51ace0af30f7eebc1bc25","modified":1757922319656},{"_id":"public/about/index.html","hash":"9540831b0ef29615d2e905c4a825b7cecd5f67fd","modified":1757922319656},{"_id":"public/categories/index.html","hash":"ff3ec170047e1d3bb3f2ca39cc8acb1502a788f2","modified":1757922319656},{"_id":"public/link/index.html","hash":"b95d9daa3d053f074ed4e4d11ce203c3c269b4b6","modified":1757922319656},{"_id":"public/tags/index.html","hash":"2fbb1b540910d23fb3cb3ba01f7fcbf3814a8b39","modified":1757922319656},{"_id":"public/2025/08/10/网络编程/Linux的IO多路复用/index.html","hash":"269cf530897ff4041bde505dc1c128ad39271b21","modified":1757922319656},{"_id":"public/2025/08/10/网络编程/epoll的LT模式和ET模式/index.html","hash":"fd70f8184eefd4e353207ca4e5081990cb474476","modified":1757922319656},{"_id":"public/2025/07/20/数据结构/堆/大顶堆/index.html","hash":"e5bcd5ce2496c379bdc444c8b524b4b21ec45d4c","modified":1757922319656},{"_id":"public/2025/07/14/数据结构/树/RBTree/index.html","hash":"1024f7f2cac43770ec1e572b65a1671389089af4","modified":1757922319656},{"_id":"public/2025/07/13/数据结构/树/FullBinaryTree/index.html","hash":"0dfbbff0a1e08d00bbea21cf8e8cadc731c2dc29","modified":1757922319656},{"_id":"public/2025/07/12/数据结构/树/BalancedBinarySearchTree(AVL)/index.html","hash":"071d5139a45681069a0747bb384cf2b2eb1dccad","modified":1757922319656},{"_id":"public/2025/07/10/算法/SortAlgorithem/index.html","hash":"43aa046002d30364f6145b8e2cf2b11e0a3a40be","modified":1757922319656},{"_id":"public/2025/07/10/数据结构/树/BinarySearchTree/index.html","hash":"d1cc6e4168cdab78fd6045a4fc9bb780de119bc2","modified":1757922319656},{"_id":"public/2025/07/09/数据结构/树/CompleteBinaryTree/index.html","hash":"951e8d76a402714df075a9fdfcd565d8de1681bb","modified":1757922319656},{"_id":"public/2025/07/08/数据结构/树/BinaryTree/index.html","hash":"3753fb3de323f4b09802a5f1bb2f5bfc8a1328e0","modified":1757922319656},{"_id":"public/2025/07/06/C-Plus-Plus/新标准/index.html","hash":"de775c438ec2156f98536a117d576d4b362feb8e","modified":1757922319656},{"_id":"public/2025/07/06/C-Plus-Plus/语法/index.html","hash":"9def93a98cc2bb44d99aa766f68d0c0ff69cfea1","modified":1757922319656},{"_id":"public/2025/07/06/C语言/标准库/index.html","hash":"45ff7d7c6353a88d54b93785be876efcf9559498","modified":1757922319656},{"_id":"public/2025/07/06/LeetCode/leetcode-1477/index.html","hash":"ab8cddc0e871be1966c2a852117e483f3fac3de8","modified":1757922319656},{"_id":"public/2025/07/06/LeetCode/leetcode-31/index.html","hash":"8fe742f7f829b87dca7c24a4ab79a8e627bc5de8","modified":1757922319656},{"_id":"public/2025/07/06/主题样例/Mdmdt主题演示demo/index.html","hash":"36cd29f69f688061ab4ee9482aa2575498958aaf","modified":1757922319656},{"_id":"public/2025/07/06/主题样例/readme.en/index.html","hash":"b5d7638e307026f59ff92d3985566362f9a68fa3","modified":1757922319656},{"_id":"public/2025/07/06/主题样例/readme/index.html","hash":"c320cb39a43013a1c9acfe17db74c8cbbb2c13c2","modified":1757922319656},{"_id":"public/2025/07/06/程序/string分割/index.html","hash":"5928e050703f5ea63c18169336b763384a985bef","modified":1757922319656},{"_id":"public/2025/07/06/程序/获取文件大小/index.html","hash":"9c76df50cc689924e1850a72c87bb9447f94e2ea","modified":1757922319656},{"_id":"public/2025/07/06/网络编程/TCP协议和UDP协议/index.html","hash":"8bf3e0e2e302f004e202dc8a76bd326ab4971f7c","modified":1757922319656},{"_id":"public/2025/07/06/网络编程/socket/index.html","hash":"5302eac697b6dd75827ba6b1d07726b60ff16a35","modified":1757922319656},{"_id":"public/2025/07/06/系统编程/多进程/index.html","hash":"6665512e532a132b09940d86acbde03f07a0ff64","modified":1757922319656},{"_id":"public/2025/07/06/系统编程/标准IO/index.html","hash":"5a0ae35fe8885d0994f2ce7854b49fd215b109f8","modified":1757922319656},{"_id":"public/2025/07/06/系统编程/系统调用/index.html","hash":"57760881bec13b0929c922e5b20f01c4a124da7c","modified":1757922319656},{"_id":"public/2025/07/06/C-Plus-Plus/STL/map/index.html","hash":"64f3cf3c419951eadcab5c59ecaf310fe0e7b15b","modified":1757922319656},{"_id":"public/2025/07/06/C-Plus-Plus/STL/set/index.html","hash":"6ca9a20cd6bf70d803282c9fe68d18efaea4c19e","modified":1757922319656},{"_id":"public/2025/07/06/C-Plus-Plus/c-plus-plus-14/shared_lock/index.html","hash":"4d7ead3af25464eea8000ced9d4a6fd841e44bf0","modified":1757922319656},{"_id":"public/2025/07/06/C-Plus-Plus/c-plus-plus-14/shared_timed_mutex/index.html","hash":"dafabb0c978cf97f0949b4daf175381fbbe49bcf","modified":1757922319656},{"_id":"public/2025/07/06/C-Plus-Plus/c-plus-plus-17/nodiscard/index.html","hash":"736a682f2d10db87834a1141fb1d18fa8ac8330d","modified":1757922319656},{"_id":"public/2025/07/06/C-Plus-Plus/对象模型/内存对齐/index.html","hash":"e3118d767b565b845584be76b9ff494816188431","modified":1757922319656},{"_id":"public/2025/07/06/C-Plus-Plus/并发/内存序/index.html","hash":"7525b977b361e1b7fe42a639c96e57ac432457b8","modified":1757922319656},{"_id":"public/2025/07/06/C-Plus-Plus/并发/原子操作/index.html","hash":"1a81639bbcd85b388c3d3494d877e0ce483f164d","modified":1757922319656},{"_id":"public/2020/12/07/hello-world/index.html","hash":"7dd2c616f45141c250f7e9dbcb4737815856ac68","modified":1757922319656},{"_id":"public/archives/index.html","hash":"1305c0b2a54aedce8a46723e33fd6a9521b3440e","modified":1757922319656},{"_id":"public/archives/page/2/index.html","hash":"74d390107823bea911eb7226e5e8890562c4839d","modified":1757922319656},{"_id":"public/archives/page/3/index.html","hash":"a2542cc27015b4a426be3328539984bd4764d584","modified":1757922319656},{"_id":"public/archives/page/4/index.html","hash":"1c9922d82eeda9675fc8d61a8d03ef4a79fd943c","modified":1757922319656},{"_id":"public/archives/2020/index.html","hash":"6a7ba2db6f7b53a16d93bd4be07bd8720dd6bee0","modified":1757922319656},{"_id":"public/archives/2020/12/index.html","hash":"7e762518227cb883af1bcba22ed78b890c8ff62d","modified":1757922319656},{"_id":"public/archives/2025/index.html","hash":"dc105d672064657c788172c7b9f22f962d297299","modified":1757922319656},{"_id":"public/archives/2025/page/2/index.html","hash":"cad78e603c22ce7ae473c52f3db9eddb3a158c41","modified":1757922319656},{"_id":"public/archives/2025/page/3/index.html","hash":"a90c99325adc75509d0b848695aef709d682da21","modified":1757922319656},{"_id":"public/archives/2025/page/4/index.html","hash":"1b4acc581c8cf45432a04b5a9c92ce41ad952e7e","modified":1757922319656},{"_id":"public/archives/2025/07/index.html","hash":"4ad2083b583edbb607ccb1cb41e990c1e00cb429","modified":1757922319656},{"_id":"public/archives/2025/07/page/2/index.html","hash":"ddb414e5f4975cbab3cb9c4690bdfff17d111ecb","modified":1757922319656},{"_id":"public/archives/2025/07/page/3/index.html","hash":"f892bf388b981f2421240970952b62eb690436a5","modified":1757922319656},{"_id":"public/archives/2025/07/page/4/index.html","hash":"2f070b5d12e6c37d37e12a4f450f39f579a8613f","modified":1757922319656},{"_id":"public/archives/2025/08/index.html","hash":"e67ddd10d51278aa98facdac24c2b252cf7de96a","modified":1757922319656},{"_id":"public/categories/C/index.html","hash":"3fc2e10dd4da4ed38113cfc4983603e4b5430058","modified":1757922319656},{"_id":"public/categories/测试/index.html","hash":"e6515cb211169adbca780070c478ec102bd041c2","modified":1757922319656},{"_id":"public/categories/实用代码段/index.html","hash":"cf4f1b31db5fa20331d2c94fa472a0a332b1701a","modified":1757922319656},{"_id":"public/categories/算法/index.html","hash":"ca93ca51fe4e56b04b5ad43c6a06f88056e7b139","modified":1757922319656},{"_id":"public/categories/网络编程/index.html","hash":"5599504b2da59e834a8b08c1d311891b4c866f84","modified":1757922319656},{"_id":"public/categories/系统编程/index.html","hash":"d303eb78e6a2c8e291ecd271d3bf85fc97c37f6e","modified":1757922319656},{"_id":"public/categories/数据结构/index.html","hash":"56523c4b993fb78f9320bb3f4da43fd6d2c56dbf","modified":1757922319656},{"_id":"public/index.html","hash":"6c96c8d75c25b424fceec70a9ad9b7b07c9c5fb5","modified":1757922319656},{"_id":"public/page/2/index.html","hash":"6ce17fd5b478d57a86b8aa520a1567b31877611e","modified":1757922319656},{"_id":"public/page/3/index.html","hash":"09e868aac68d591a2d9c116f8afeea4d4f24ac26","modified":1757922319656},{"_id":"public/page/4/index.html","hash":"59826572bee22a09d1d5d8523f6ecec23f15505a","modified":1757922319656},{"_id":"public/tags/C/index.html","hash":"479a3ed034b7481fb7f6a20a9085554593921a00","modified":1757922319656},{"_id":"public/tags/C/page/2/index.html","hash":"8c09b57f2e9420189af6653198c72657109a0a06","modified":1757922319656},{"_id":"public/tags/测试/index.html","hash":"c269b79e37bc81023b967406ea70536491126b24","modified":1757922319656},{"_id":"public/tags/string/index.html","hash":"a8a4a993231ed418f6a7cd4e978776077d874e00","modified":1757922319656},{"_id":"public/tags/实用代码/index.html","hash":"0c12f303bb6fe83de9cf4787697b252f25c68bea","modified":1757922319656},{"_id":"public/tags/文件操作/index.html","hash":"6464d6403161eeb03221aa301c1efc895bec52cb","modified":1757922319656},{"_id":"public/tags/算法/index.html","hash":"74dc147428fb41dc7a32018f2ec38ce12c5f37b1","modified":1757922319656},{"_id":"public/tags/排序/index.html","hash":"b4bab63d3bbe489fda6456f61b3a38229953ea96","modified":1757922319656},{"_id":"public/tags/epoll/index.html","hash":"ebf89ad0a1b19d778668c52a9532e77fc4ff1e4c","modified":1757922319656},{"_id":"public/tags/socket/index.html","hash":"12ea718805f81818cb9fdc7c8a0613d7db4c57c1","modified":1757922319656},{"_id":"public/tags/Linux/index.html","hash":"253ffc0673eaa221767d0c2e47e8e62add09821f","modified":1757922319656},{"_id":"public/tags/IO多路复用/index.html","hash":"0b584d63d31b26330e9f1604bd4c052fb959687d","modified":1757922319656},{"_id":"public/tags/网络协议/index.html","hash":"fb38683fef8936c0e569e6ce5b064822397f3291","modified":1757922319656},{"_id":"public/tags/并发/index.html","hash":"3045eff2bd257dd00009080a0ff82525b82d0cc1","modified":1757922319656},{"_id":"public/tags/对象模型/index.html","hash":"27fa8e26ad7d250e94b9ed2b26dcce65076d21a5","modified":1757922319656},{"_id":"public/tags/数据结构/index.html","hash":"b8142ac2dba0e05b62d0eb32319ce23644c320c4","modified":1757922319656},{"_id":"public/tags/堆/index.html","hash":"3fce7a191598a81847fc37c87f87ddfcd1374ca4","modified":1757922319656},{"_id":"public/tags/优先级队列/index.html","hash":"bc53872983d8c02e13d1071699636117b5cac21a","modified":1757922319656},{"_id":"public/tags/二叉树/index.html","hash":"eb050dffca0726becd84151dd71011e7f635eead","modified":1757922319656},{"_id":"public/tags/树/index.html","hash":"550b11967c67fa4a87c57f221c65db9bea400df2","modified":1757922319656},{"_id":"public/tags/完全N叉树/index.html","hash":"aecaedef020fdc43fee84a5acaf4eea0d6af692c","modified":1757922319656},{"_id":"public/tags/红黑树/index.html","hash":"a5b69989766fe78953bdb88e7d0993e369628a9d","modified":1757922319656},{"_id":"public/404.html","hash":"9ff24058108cb42ddb3a941633f94259ceb0b4d8","modified":1757922319656},{"_id":"public/font/webfonts/fa-regular-400.woff2","hash":"07fc0ae14bb3187839082aed3bca11dfb1e04524","modified":1757922319656},{"_id":"public/font/webfonts/fa-regular-400.ttf","hash":"2d7890e12afb77490112ec57fe47ca0688aebda2","modified":1757922319656},{"_id":"public/font/webfonts/fa-v4compatibility.ttf","hash":"321d89c65f1746f111341556bc62c7e217ad2544","modified":1757922319656},{"_id":"public/font/webfonts/fa-v4compatibility.woff2","hash":"35794892fa2b4aede41ec686df49a1283ab2b2b3","modified":1757922319656},{"_id":"public/images/brands/gitee.png","hash":"d4c79d132c914bf28386df102e7c3f0607c95369","modified":1757922319656},{"_id":"public/images/brands/aliyun.png","hash":"4a4464a8a66adb9ecddf2084087dd652690942d5","modified":1757922319656},{"_id":"public/images/brands/github.png","hash":"fa9ed69cd0a004f3cd334d098b8fea5ae2ac3835","modified":1757922319656},{"_id":"public/images/brands/cloudflare.png","hash":"0ca0b3b69e99c1f8c2be66bf631805a37abf8cb3","modified":1757922319656},{"_id":"public/images/brands/tencent_cloud.png","hash":"be5357326af6c68b7c109fe5d4f92ada5daec900","modified":1757922319656},{"_id":"public/images/brands/upyun.png","hash":"923dafcc484388f2a1c20356e37eaf62b85479f4","modified":1757922319656},{"_id":"public/images/brands/vercel.png","hash":"2b0538b5cd09f71f06f5968a6cd0ae910a96f4ca","modified":1757922319656},{"_id":"public/background/003.webp","hash":"06960efae139f508127ccdc9984713631fa4ebf4","modified":1757922319656},{"_id":"public/font/webfonts/fa-brands-400.woff2","hash":"373361ed756b1fe68ce2f5968d467826b6973bb5","modified":1757922319656},{"_id":"public/background/002.webp","hash":"c868b30959bb0d3a516aa99da2937fe7df128ac9","modified":1757922319656},{"_id":"public/background/007.webp","hash":"0834f5bb7c5ced6ef4a91f0f4fe3c10a4aa75980","modified":1757922319656},{"_id":"public/background/009.webp","hash":"1fede8dfffcc436f782645439bcd75106105036d","modified":1757922319656},{"_id":"public/background/010.webp","hash":"0b23ea05d29947ca7315e0db5853c0ba4a9295b2","modified":1757922319656},{"_id":"public/background/017.webp","hash":"6ff3d4c82f986f3a72a4a05e26a0ba72cdc1152d","modified":1757922319656},{"_id":"public/background/018.webp","hash":"c7bc1213ba066379d2806e0a62606a888d489085","modified":1757922319656},{"_id":"public/background/023.webp","hash":"ea07c5ff2b42f90d29c7c25dd5e47e669a93f7a6","modified":1757922319656},{"_id":"public/js/code-block.js","hash":"5535eebb6781057bde2187c899a2fbf93ee56026","modified":1757922319656},{"_id":"public/js/local-search.js","hash":"1185ce4aa291a78711c6a2411ab95b5e3c9abb77","modified":1757922319656},{"_id":"public/js/lazyload.js","hash":"4869673444ca76af5b2959764d46893d74b79208","modified":1757922319656},{"_id":"public/js/main.js","hash":"2865d72670712d5aa6f7095460e9117d2f7650d5","modified":1757922319656},{"_id":"public/js/toggle-theme.js","hash":"219b451f04a84ea0b1f3ba3e61d2fc8d6f937ff2","modified":1757922319656},{"_id":"public/js/utils.js","hash":"501c17b25e8363f216d1cf25e3df8328ab617482","modified":1757922319656},{"_id":"public/js/back2top.js","hash":"855ec91cb5a282d1cc877ce97bc85ab7b3ecb4d5","modified":1757922319656},{"_id":"public/css/common/animated.css","hash":"2e64fa9e76fcc2170ed0fdc7c74f06624f8e1468","modified":1757922319656},{"_id":"public/css/common/basic.css","hash":"f124190c9db78d92c598146ca3e2995815e9f792","modified":1757922319656},{"_id":"public/css/common/keep-style.css","hash":"0c281d49b0217cdb6e64d26965b911a0a0a1530c","modified":1757922319656},{"_id":"public/css/common/css-variables.css","hash":"e98152313cce9bc5b00a7b8eb41b87ea8042788b","modified":1757922319656},{"_id":"public/css/common/markdown.css","hash":"b2451fd9be64f9178db036b1d218fa35785edef9","modified":1757922319656},{"_id":"public/css/common/stylus-variables.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1757922319656},{"_id":"public/css/layout/page.css","hash":"4045fdc646c2a99ba87af1e9d6e00d82efaf25ce","modified":1757922319656},{"_id":"public/font/css/brands.min.css","hash":"75e0c506eff6c93d4d3311b300d251c48236b714","modified":1757922319656},{"_id":"public/font/css/solid.min.css","hash":"65f70e8978fb1db423c007310387573b635498aa","modified":1757922319656},{"_id":"public/font/css/regular.min.css","hash":"7d1c0737e27ee4c129fe5b74204c0b588dc4091c","modified":1757922319656},{"_id":"public/font/css/fontawesome.min.css","hash":"c562501b761480adb1b4db14b6b09981b3510ac8","modified":1757922319656},{"_id":"public/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1757922319656},{"_id":"public/js/page/category-page.js","hash":"9f36d957418bec99ebb305ed6d71ccf29df0712c","modified":1757922319656},{"_id":"public/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1757922319656},{"_id":"public/js/page/home-page.js","hash":"12690019549b5f73f407f3a287011381a241a637","modified":1757922319656},{"_id":"public/js/page/links-page.js","hash":"d5b0bbb9fda7f6a70aa920150697cb3c889521ab","modified":1757922319656},{"_id":"public/js/page/tools-page.js","hash":"44818dabb7dd9a56d9f3e42eb3298f5102473f24","modified":1757922319656},{"_id":"public/js/page/photos-page.js","hash":"6946f492f435203eab1032cc535641dbe1d012dc","modified":1757922319656},{"_id":"public/js/post/copyright-info.js","hash":"67734a44810c0073633543e9d35b3d2526a2247c","modified":1757922319656},{"_id":"public/js/post/post-helper.js","hash":"8d5963dcc42bcc2c1edd32ba2a033ebc1d93751f","modified":1757922319656},{"_id":"public/js/post/share.js","hash":"715d46d1e0fef6f57cb5e6e4716f31636a995234","modified":1757922319656},{"_id":"public/js/post/toc.js","hash":"414262ddacdc8c1bd88dfb30684dbd87c9e142cb","modified":1757922319656},{"_id":"public/css/style.css","hash":"ff60739d0ab4444757955c9bc06a5d72a373c37b","modified":1757922319656},{"_id":"public/css/common/code-block/code-block.css","hash":"256888723f1c915e5b4cb62bccac78977739c47f","modified":1757922319656},{"_id":"public/css/common/code-block/code-theme.css","hash":"3688b6649b05c1421887427f516316538cd881be","modified":1757922319656},{"_id":"public/css/common/code-block/highlight.css","hash":"4219e6707b1b0f2eee6300120aa2336087b6d183","modified":1757922319656},{"_id":"public/css/common/tags/keep-button.css","hash":"b702a5b25e30d46969cf5a38869d9080ff23bf1d","modified":1757922319656},{"_id":"public/css/common/tags/keep-note.css","hash":"a687ae7ccafd496272f64afcd18af5b981542ae6","modified":1757922319656},{"_id":"public/css/common/tags/keep-tabs.css","hash":"6cd4866df1fa054be91d5c3535f464a076b89b7e","modified":1757922319656},{"_id":"public/js/header-shrink.js","hash":"01d8d8fe83bfbba89ebe27c317b4fd42ba317e6e","modified":1757922319656},{"_id":"public/font/webfonts/fa-brands-400.ttf","hash":"d8b3568e9d8a1d3c01c85520eb9ca0b49b72815d","modified":1757922319656},{"_id":"public/font/webfonts/fa-solid-900.woff2","hash":"97f0942c6627ddd89fb62170e5cac9a2cbd6c98c","modified":1757922319656},{"_id":"public/background/004.webp","hash":"0a65570bf47864b2a968c3a1aac818e518723daf","modified":1757922319656},{"_id":"public/background/006.webp","hash":"f45e2e8122235d3add61413d359d61a3acbb7019","modified":1757922319656},{"_id":"public/background/008.webp","hash":"2e5dedf619a46218b2e02eac46669cc4eb8812da","modified":1757922319656},{"_id":"public/background/012.webp","hash":"3b93a4dcb2cad91ad0cbf8fae45cace8cc337511","modified":1757922319656},{"_id":"public/background/021.webp","hash":"657eb2ca190332268b894841a8d403388b5a31b4","modified":1757922319656},{"_id":"public/background/022.webp","hash":"71140891318eaada83a3a796a75033dad8239a3b","modified":1757922319656},{"_id":"public/background/001.webp","hash":"6f59a612a698ad124bbba4902d407bc3d1ba511a","modified":1757922319656},{"_id":"public/background/005.webp","hash":"d8fb95cb3fe8c94b5a5844d03dc971571212dc4a","modified":1757922319656},{"_id":"public/background/013.webp","hash":"369be7f60db7f5795e64723d64bf7cc86988b523","modified":1757922319656},{"_id":"public/background/016.webp","hash":"9dc032191e3b97bfa432231a98ad2a7dedc783fd","modified":1757922319656},{"_id":"public/background/020.webp","hash":"aa831e0d86eb2b939b317ebb55947358a2b52654","modified":1757922319656},{"_id":"public/background/011.webp","hash":"bd913f1948c2c75b1cb93ff2937350926a3c6cdb","modified":1757922319656},{"_id":"public/background/019.webp","hash":"103165a1d40e25eeaf726ec0075da0341986be12","modified":1757922319656},{"_id":"public/font/FiraCode-Regular.ttf","hash":"693adff323e9ea4d2275b54ab049f561ef39f0b6","modified":1757922319656},{"_id":"public/background/015.webp","hash":"fecbebb898246cf9cca283dd81599dc32f70ee53","modified":1757922319656},{"_id":"public/font/webfonts/fa-solid-900.ttf","hash":"e9ace557c3aa403307f1e7a2cef1c035d522b94b","modified":1757922319656},{"_id":"public/background/014.webp","hash":"cdb6b22c9394375a21b10bd7be03934adcad01c6","modified":1757922319656},{"_id":"public/background/013_up.webp","hash":"362e7586142e03fa03e71e2f3932cbff4fce184e","modified":1757922319656}],"Category":[{"name":"C++","_id":"cmfktk7eh0006c04p09hgezgw"},{"name":"测试","_id":"cmfktk7em000ic04pfp4mg6zx"},{"name":"实用代码段","_id":"cmfktk7eo000nc04pbv3v4cf3"},{"name":"算法","_id":"cmfktk7er000yc04pex5y3q5b"},{"name":"网络编程","_id":"cmfktk7es0016c04p9a0m1as2"},{"name":"系统编程","_id":"cmfktk7ex001uc04pd2stckmi"},{"name":"数据结构","_id":"cmfktk7f0002bc04p8juz965i"}],"Data":[{"_id":"links","data":[{"title":"友链分组1"},{"name":"XPoet","link":"https://xpoet.cn","description":"懒惰是程序员第一生产力","avatar":"https://xpoet.cn/images/avatar.png"},{"name":"不知名艺术家","link":"https://jinzhanqi.com/","description":"love artist, love code.","avatar":"https://s3.ax1x.com/2020/11/17/DVvkB4.jpg"}]}],"Page":[{"_content":"{\n  \"name\": \"string\",\n  \"short_name\": \"LDK\",\n  \"theme_color\": \"#49b1f5\",\n  \"background_color\": \"#49b1f5\",\n  \"display\": \"standalone\",\n  \"scope\": \"/\",\n  \"start_url\": \"/\",\n  \"icons\": [\n    {\n      \"src\": \"imag/avatar.png\",\n      \"sizes\": \"82x82\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"background/001.webp\",\n      \"sizes\": \"1920x1052\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/002.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/003.webp\",\n      \"sizes\": \"1918x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/004.webp\",\n      \"sizes\": \"1728x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/005.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/006.webp\",\n      \"sizes\": \"1920x1076\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/007.webp\",\n      \"sizes\": \"1920x1035\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/008.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/009.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/010.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/011.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/012.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/013.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/014.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/015.webp\",\n      \"sizes\": \"1920x1076\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/016.webp\",\n      \"sizes\": \"1920x1074\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/017.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/018.webp\",\n      \"sizes\": \"1920x960\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/019.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/020.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/021.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/022.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/023.webp\",\n      \"sizes\": \"1920x991\",\n      \"type\": \"image/webp\"\n    }\n  ],\n  \"splash_pages\": null\n}\n","source":"manifest.json","raw":"{\n  \"name\": \"string\",\n  \"short_name\": \"LDK\",\n  \"theme_color\": \"#49b1f5\",\n  \"background_color\": \"#49b1f5\",\n  \"display\": \"standalone\",\n  \"scope\": \"/\",\n  \"start_url\": \"/\",\n  \"icons\": [\n    {\n      \"src\": \"imag/avatar.png\",\n      \"sizes\": \"82x82\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"background/001.webp\",\n      \"sizes\": \"1920x1052\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/002.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/003.webp\",\n      \"sizes\": \"1918x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/004.webp\",\n      \"sizes\": \"1728x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/005.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/006.webp\",\n      \"sizes\": \"1920x1076\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/007.webp\",\n      \"sizes\": \"1920x1035\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/008.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/009.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/010.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/011.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/012.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/013.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/014.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/015.webp\",\n      \"sizes\": \"1920x1076\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/016.webp\",\n      \"sizes\": \"1920x1074\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/017.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/018.webp\",\n      \"sizes\": \"1920x960\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/019.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/020.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/021.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/022.webp\",\n      \"sizes\": \"1920x1080\",\n      \"type\": \"image/webp\"\n    },\n    {\n      \"src\": \"background/023.webp\",\n      \"sizes\": \"1920x991\",\n      \"type\": \"image/webp\"\n    }\n  ],\n  \"splash_pages\": null\n}\n","date":"2025-09-14T02:36:11.054Z","updated":"2025-09-14T02:36:11.054Z","path":"manifest.json","layout":"false","title":"","comments":1,"_id":"cmfktk7ea0000c04p1tnu35u3","content":"{\"name\":\"string\",\"short_name\":\"LDK\",\"theme_color\":\"#49b1f5\",\"background_color\":\"#49b1f5\",\"display\":\"standalone\",\"scope\":\"/\",\"start_url\":\"/\",\"icons\":[{\"src\":\"imag/avatar.png\",\"sizes\":\"82x82\",\"type\":\"image/png\"},{\"src\":\"background/001.webp\",\"sizes\":\"1920x1052\",\"type\":\"image/webp\"},{\"src\":\"background/002.webp\",\"sizes\":\"1920x1080\",\"type\":\"image/webp\"},{\"src\":\"background/003.webp\",\"sizes\":\"1918x1080\",\"type\":\"image/webp\"},{\"src\":\"background/004.webp\",\"sizes\":\"1728x1080\",\"type\":\"image/webp\"},{\"src\":\"background/005.webp\",\"sizes\":\"1920x1080\",\"type\":\"image/webp\"},{\"src\":\"background/006.webp\",\"sizes\":\"1920x1076\",\"type\":\"image/webp\"},{\"src\":\"background/007.webp\",\"sizes\":\"1920x1035\",\"type\":\"image/webp\"},{\"src\":\"background/008.webp\",\"sizes\":\"1920x1080\",\"type\":\"image/webp\"},{\"src\":\"background/009.webp\",\"sizes\":\"1920x1080\",\"type\":\"image/webp\"},{\"src\":\"background/010.webp\",\"sizes\":\"1920x1080\",\"type\":\"image/webp\"},{\"src\":\"background/011.webp\",\"sizes\":\"1920x1080\",\"type\":\"image/webp\"},{\"src\":\"background/012.webp\",\"sizes\":\"1920x1080\",\"type\":\"image/webp\"},{\"src\":\"background/013.webp\",\"sizes\":\"1920x1080\",\"type\":\"image/webp\"},{\"src\":\"background/014.webp\",\"sizes\":\"1920x1080\",\"type\":\"image/webp\"},{\"src\":\"background/015.webp\",\"sizes\":\"1920x1076\",\"type\":\"image/webp\"},{\"src\":\"background/016.webp\",\"sizes\":\"1920x1074\",\"type\":\"image/webp\"},{\"src\":\"background/017.webp\",\"sizes\":\"1920x1080\",\"type\":\"image/webp\"},{\"src\":\"background/018.webp\",\"sizes\":\"1920x960\",\"type\":\"image/webp\"},{\"src\":\"background/019.webp\",\"sizes\":\"1920x1080\",\"type\":\"image/webp\"},{\"src\":\"background/020.webp\",\"sizes\":\"1920x1080\",\"type\":\"image/webp\"},{\"src\":\"background/021.webp\",\"sizes\":\"1920x1080\",\"type\":\"image/webp\"},{\"src\":\"background/022.webp\",\"sizes\":\"1920x1080\",\"type\":\"image/webp\"},{\"src\":\"background/023.webp\",\"sizes\":\"1920x991\",\"type\":\"image/webp\"}],\"splash_pages\":null}"},{"title":"about","date":"2025-07-06T13:00:00.000Z","type":"about","top_img":"https://s2.loli.net/2022/07/06/3z5X4J8Z6Wq9x7Y.jpg","_content":"\n## 关于我\n\n一个热爱编程的普通人，喜欢研究新技术，喜欢分享，喜欢折腾。\n\n## 关于本站","source":"about/index.md","raw":"---\ntitle: about\ndate: 2025-07-06 21:00:00\ntype: \"about\"\ntop_img: https://s2.loli.net/2022/07/06/3z5X4J8Z6Wq9x7Y.jpg\n---\n\n## 关于我\n\n一个热爱编程的普通人，喜欢研究新技术，喜欢分享，喜欢折腾。\n\n## 关于本站","updated":"2025-09-15T07:33:20.611Z","path":"about/index.html","comments":1,"layout":"page","_id":"cmfktk7ee0002c04paato9aaa","content":"<h2 id=\"关于我\">关于我</h2>\n<p>一个热爱编程的普通人，喜欢研究新技术，喜欢分享，喜欢折腾。</p>\n<h2 id=\"关于本站\">关于本站</h2>\n","secretKey":"44b51c880450b027eef69eef59791392fd1895758b7d4c8caee5875efd0a347c","iv":"1b05edef12d8b0648b3d53f92c6534bb","encryptedPassword":"c3c89bdc223ce27ed18906a2c26e4d70","encryptedContent":"784ecc766092f6841f1b9fc39d4476655b406b1e971ac4746773fa5f53aae421630db83e336ed2b862203a0206422dc3f1e37592258bf6b64e20705bdba8586cd329c15af78383b0c21e6cf2ee971d75b586261bfedf4baea09e4daea3af02ccadcd23f0226216e9fa9d409c4b935f74dfdef35c5593c66abb9856700283b04769af37c6a9de8c29c382368b50cecee173f37b5bca54b15b85136f3663278e2951f7b784923ea4f44421001e19889da7","excerpt":"","more":"<h2 id=\"关于我\">关于我</h2>\n<p>一个热爱编程的普通人，喜欢研究新技术，喜欢分享，喜欢折腾。</p>\n<h2 id=\"关于本站\">关于本站</h2>\n"},{"title":"categories","date":"2025-07-06T12:08:02.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2025-07-06 20:08:02\ntype: \"categories\"\n---\n","updated":"2025-09-15T07:32:07.490Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cmfktk7eg0004c04p1wjnfczv","content":"","secretKey":"f72d7d5c632e59a4bda8345e7914e35668ae8ff38387567db445f7f027ff0a09","iv":"8f04cba856f69afe17c252cbcccb99d1","encryptedPassword":"77fc1b4eb11420029763366bc5669bf8","encryptedContent":"df2f41d304f3c9aaffd8090879f4cb77","excerpt":"","more":""},{"_content":"\n:root {\n    --base-font-family: STKaiti;\n    --base-font-family: 'FiraCode-Regular';\n}\n\n:root {\n    --first-screen-icon-color-light: #CC6600;\n    --first-screen-icon-color-light: #CC9966;\n}\n\n:root {\n    --first-screen-font-color-light: #FFFFFF;\n    --first-screen-font-color-dark: #0099CC;\n}\n\n@font-face {\n   font-family: 'FiraCode-Regular';\n   src: url('../font/FiraCode-Regular.ttf') format('truetype');\n   font-weight: normal;\n   font-style: normal;\n}\n\n.code pre {\n  font-family: \"FiraCode-Regular\", \"Monaco\", \"Consolas\", \"Courier New\", monospace; /* 改为等宽字体，适合代码 */\n\n}","source":"css/custom.css","raw":"\n:root {\n    --base-font-family: STKaiti;\n    --base-font-family: 'FiraCode-Regular';\n}\n\n:root {\n    --first-screen-icon-color-light: #CC6600;\n    --first-screen-icon-color-light: #CC9966;\n}\n\n:root {\n    --first-screen-font-color-light: #FFFFFF;\n    --first-screen-font-color-dark: #0099CC;\n}\n\n@font-face {\n   font-family: 'FiraCode-Regular';\n   src: url('../font/FiraCode-Regular.ttf') format('truetype');\n   font-weight: normal;\n   font-style: normal;\n}\n\n.code pre {\n  font-family: \"FiraCode-Regular\", \"Monaco\", \"Consolas\", \"Courier New\", monospace; /* 改为等宽字体，适合代码 */\n\n}","date":"2025-09-15T07:12:31.986Z","updated":"2025-09-15T07:12:31.986Z","path":"css/custom.css","layout":"false","title":"","comments":1,"_id":"cmfktk7ej0008c04p6ds2axzn","content":":root{--base-font-family:STKaiti;--base-font-family:'FiraCode-Regular'}:root{--first-screen-icon-color-light:#CC6600;--first-screen-icon-color-light:#CC9966}:root{--first-screen-font-color-light:#FFFFFF;--first-screen-font-color-dark:#0099CC}@font-face{font-family:FiraCode-Regular;src:url('../font/FiraCode-Regular.ttf') format('truetype');font-weight:400;font-style:normal}.code pre{font-family:FiraCode-Regular,Monaco,Consolas,\"Courier New\",monospace}"},{"title":"友链","date":"2025-07-06T13:00:00.000Z","type":"link","top_img":"https://cdn.jsdelivr.net/gh/maoyiting/maoyiting.github.io@master/source/img/links.jpg","_content":"\n## 友链\n\n### 友链申请\n","source":"link/index.md","raw":"---\ntitle: 友链\ndate: 2025-07-06 21:00:00\ntype: \"link\"\ntop_img: https://cdn.jsdelivr.net/gh/maoyiting/maoyiting.github.io@master/source/img/links.jpg\n---\n\n## 友链\n\n### 友链申请\n","updated":"2025-09-14T02:36:11.054Z","path":"link/index.html","comments":1,"layout":"page","_id":"cmfktk7ej000ac04pe03ueiqp","content":"<h2 id=\"友链\">友链</h2>\n<h3 id=\"友链申请\">友链申请</h3>\n","secretKey":"4f54cc4fc6859dffb36acc08e8d8a65a1457fdddf9d338127c62670257a30937","iv":"362c366bc340c2684ade269643aed037","encryptedPassword":"2b8cfe696b1d4e207678753c3057b929","encryptedContent":"fb4d6830c0b2cd058357d081e399af1b0c0c06bcabee0fc5294e3e9a377620977143202c0d8f045c46aff3e8575857541fdeb2634d3fc4b2d8432534b435fa29405c669fbd5a6da1f2d1bb2086e0f715","excerpt":"","more":"<h2 id=\"友链\">友链</h2>\n<h3 id=\"友链申请\">友链申请</h3>\n"},{"title":"tags","date":"2025-07-06T12:05:22.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2025-07-06 20:05:22\ntype: \"tags\"\n---\n","updated":"2025-09-15T07:33:03.330Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cmfktk7ek000cc04phgvwe88m","content":"","secretKey":"9b8d04e065c532ccd4c995cf46413316d1b25db0bbc1ff3b27aba9928d22deb6","iv":"20c8544f0f9d488ea26fb60640413a17","encryptedPassword":"744ae66b87b0014d8f62d24805ee3cb2","encryptedContent":"5aab23cb86e99f0847a2f37ff3970420","excerpt":"","more":""}],"Post":[{"title":"Hello World","date":"2020-12-07T08:47:35.000Z","updated":"2025-09-14T02:36:11.009Z","keywords":null,"description":null,"top_img":null,"comments":1,"cover":null,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"abcjs":null,"noticeOutdate":null,"_content":"\n## Hello World\n\n### 1. 前言\n\n> Hello World\n\n### 2. 介绍\n\n> Hello World\n\n### 3. 使用\n\n> Hello World\n\n### 4. 参考资料\n\n> Hello World\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2020-12-07 16:47:35\nupdated:\ntags:\ncategories:\nkeywords:\ndescription:\ntop_img:\ncomments:\ncover:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nabcjs:\nnoticeOutdate:\n\n---\n\n## Hello World\n\n### 1. 前言\n\n> Hello World\n\n### 2. 介绍\n\n> Hello World\n\n### 3. 使用\n\n> Hello World\n\n### 4. 参考资料\n\n> Hello World\n\n","slug":"hello-world","published":1,"layout":"post","photos":[],"_id":"cmfktk7ec0001c04pfu7aa34m","content":"<h2 id=\"Hello-World\">Hello World</h2>\n<h3 id=\"1-前言\">1. 前言</h3>\n<blockquote>\n<p>Hello World</p>\n</blockquote>\n<h3 id=\"2-介绍\">2. 介绍</h3>\n<blockquote>\n<p>Hello World</p>\n</blockquote>\n<h3 id=\"3-使用\">3. 使用</h3>\n<blockquote>\n<p>Hello World</p>\n</blockquote>\n<h3 id=\"4-参考资料\">4. 参考资料</h3>\n<blockquote>\n<p>Hello World</p>\n</blockquote>\n","secretKey":"97b43b98100ff298a17ba0fdf4bad7225f63bf5f1f1a41678b4b69ad793f14cc","iv":"850263af6b9d2f3e975d90d0ae8f43db","encryptedPassword":"27691b7828810958feefa80a17d30664","encryptedContent":"f1c8ccf1101abded071ed1804233385d3cab6f820364bed67bfb92787d475863d074b59a56e6873310e11a03c5317657ebf450580df5d844a60658f27d9217a88d562736222a2514c3f00d4184981b4b523a666c818cc9e58efa3b3314aef582e35914c65c4fe1bd1076586627c66bbae545f4667e3a3acadf63f3302e6af6b7ae91e73f4f7b7f3e16b8ed85b7626156df35d9f33368dcde06aef271b32980cffb645b9285e8853335c61a2c0922258dac8785b0de12b38cfbdf3503399c4250372587e4b7be81747bde37f1f4520e8d1f8e5f83589dfb160e76f1a07d84cc3c63a168f759badd69e6f8c09ac3bc9621002bdb516acd74b8160f28a73aa3c4c2b428c950fcea9ebfcf45e673f888cd3cb749b738caf59a0ce2849a52fc303e62061e2ec42291a943141cd5661d19963a2d078e5e36ed46492eb0d3721249e4ee8cfd92a3c651a4cc54e54d94b8e8d026fbc7470e884083a890894e2784eb7e2300b9d287d10e23e501011c5c7b4674f8","excerpt":"","more":"<h2 id=\"Hello-World\">Hello World</h2>\n<h3 id=\"1-前言\">1. 前言</h3>\n<blockquote>\n<p>Hello World</p>\n</blockquote>\n<h3 id=\"2-介绍\">2. 介绍</h3>\n<blockquote>\n<p>Hello World</p>\n</blockquote>\n<h3 id=\"3-使用\">3. 使用</h3>\n<blockquote>\n<p>Hello World</p>\n</blockquote>\n<h3 id=\"4-参考资料\">4. 参考资料</h3>\n<blockquote>\n<p>Hello World</p>\n</blockquote>\n"},{"title":"C++新标准","date":"2025-07-05T16:00:00.000Z","description":"C++新标准(11～20)","_content":"\n# C++新标准\n### C++ 11\n\n语法特性：\n\n- `auto`\n- `decltype`\n- 返回类型后置(`auto`+`decltype`)\n- 右值引用\n- 列表初始化\n- 移动语义(`std::move`)\n- 万能引用(`T&&`)\n- 智能指针(`share_ptr; wake_ptr; unique_ptr`)\n- 范围for循环\n- 委托构造函数\n- 继承构造函数\n- `final`和`override`\n- `default`\n- 函数`delete`\n- `explicit`\n- `constexpr`\n- 强类型枚举(`enum class`)\n- 原始字符串字面量\n- 基于范围的`for`循环\n- `lambda`表达式\n- 内联命名空间\n- 右`>`的优化\n- `noexcept`\n- `char32_t`和`char16_t`\n\n库特性：\n\n- `chrono`库\n- `thread`库\n- `std::function`\n- `std::bind`\n- `std::move`\n- `std::forword`：与万能引用配合使用\n\n- `std::array`\n- `std::to_string()`\n- `std::tuple`(元组)\n- `std::tie`\n- `std::ref`\n- `std::make_shared`\n- 无序容器：\n  - `std::unordered_map`\n  - `std::unordered_multimap`\n  - `std::unordered_set`\n  - `std::unordered_multiset`\n- 内存模型\n- `std::async`\n- `std::forward_list`（单链表）\n\n### C++ 14\n\n- 变量模板\n\n- 泛型`lambda`参数\n\n- `lambda`初始化捕获\n\n- 放宽`constexptr`函数限制\n\n  在C++11中，constexpr函数的限制非常严格，要求其函数体仅能包含一个返回语句，且不能包含复杂的控制流语句（如循环、条件分支等）。\n\n  ```cpp\n  // C++11 constexpr阶乘函数的写法，只能使用递归\n  constexpr int factorial(int n) {\n      return n <= 1 ? 1 : (n * factorial(n - 1));\n  }\n  ```\n\n  \n\n  而在C++14中，允许在其函数体内使用更复杂的控制流结构和局部变量声明，也可以有多个返回语句，只要最终的结果能够在编译时计算得出即可。\n\n  ```cpp\n  // C++14 constexpr阶乘函数的写法，可以使用循环\n  constexpr int factorial(int n) {\n      int ret = 0;\n      for (int i = 0; i < n; ++i) {\n          ret += i;\n      }\n      return ret;\n  }\n  ```\n\n- `[[deprecated]]`(废弃标志)\n\n  标记已弃用的函数、类或其他声明。这有助于编译器在编译时发出警告，提醒开发者不应再使用某个已标记为过时的API\n\n  ```cpp\n  [[deprecated]]\n  void TriassicPeriod() {\n  \tstd::clog << \"Triassic Period: [251.9 - 208.5] million years ago.\\n\";\n  }\n  \n  [[deprecated(\"Use NeogenePeriod() instead.\")]]\t\t// 弃用并标明弃用原因\n  void JurassicPeriod() {\n  \tstd::clog << \"Jurassic Period: [201.3 - 152.1] million years ago.\\n\";\n  }\n  ```\n\n- `std::shared_timed_mutex`\n\n  超时读写锁。[shared_timed_mutex](./C++14/shared_timed_mutex.md)\n\n- `std::shared_lock`\n\n- `std::make_unique`\n\n- `std::exchange`\n\n  <mark>原子地</mark>交换一个对象的值，并返回其旧值。这个函数在处理资源管理、状态转换等场景时特别有用。\n\n  ```c++\n  #include <iostream>\n  #include <iterator>\n  #include <utility>\n  #include <vector>\n   \n  class stream\n  {\n  public:\n      using flags_type = int;\n   \n  public:\n      flags_type flags() const { return flags_; }\n   \n      // Replaces flags_ by newf, and returns the old value.\n      flags_type flags(flags_type newf) { return std::exchange(flags_, newf); }\n   \n  private:\n      flags_type flags_ = 0;\n  };\n   \n  void f() { std::cout << \"f()\"; }\n   \n  int main()\n  {\n      stream s;\n   \n      std::cout << s.flags() << '\\n';\n      std::cout << s.flags(12) << '\\n';\n      std::cout << s.flags() << \"\\n\\n\";\n   \n      std::vector<int> v;\n   \n      // Since the second template parameter has a default value, it is possible\n      // to use a braced-init-list as second argument. The expression below\n      // is equivalent to std::exchange(v, std::vector<int>{1, 2, 3, 4});\n   \n      std::exchange(v, {1, 2, 3, 4});\n   \n      std::copy(begin(v), end(v), std::ostream_iterator<int>(std::cout, \", \"));\n   \n      std::cout << \"\\n\\n\";\n   \n      void (*fun)();\n   \n      // The default value of template parameter also makes possible to use a\n      // normal function as second argument. The expression below is equivalent to\n      // std::exchange(fun, static_cast<void(*)()>(f))\n      std::exchange(fun, f);\n      fun();\n   \n      std::cout << \"\\n\\nFibonacci sequence: \";\n      for (int a{0}, b{1}; a < 100; a = std::exchange(b, a + b))\n          std::cout << a << \", \";\n      std::cout << \"...\\n\";\n  }\n  ```\n\n  输出：\n\n  ```xml\n  0\n  0\n  12\n  \n  1, 2, 3, 4,\n  \n  f()\n  \n  Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n  ```\n\n- `std::quoted`\n\n  具体使用案例：（来自`cppreference`）\n\n  ```cpp\n  #include <iomanip>\n  #include <iostream>\n  #include <sstream>\n   \n  void default_delimiter()\n  {\n      const std::string in = \"std::quoted() quotes this string and embedded \\\"quotes\\\" too\";\n      std::stringstream ss;\n      ss << std::quoted(in);\n      std::string out;\n      ss >> std::quoted(out);\n   \n      std::cout << \"Default delimiter case:\\n\"\n                   \"read in     [\" << in << \"]\\n\"\n                   \"stored as   [\" << ss.str() << \"]\\n\"\n                   \"written out [\" << out << \"]\\n\\n\";\n  }\n   \n  void custom_delimiter()\n  {\n      const char delim{'$'};\n      const char escape{'%'};\n   \n      const std::string in = \"std::quoted() quotes this string and embedded $quotes$ $too\";\n      std::stringstream ss;\n      ss << std::quoted(in, delim, escape);\n      std::string out;\n      ss >> std::quoted(out, delim, escape);\n   \n      std::cout << \"Custom delimiter case:\\n\"\n                   \"read in     [\" << in << \"]\\n\"\n                   \"stored as   [\" << ss.str() << \"]\\n\"\n                   \"written out [\" << out << \"]\\n\\n\";\n  }\n   \n  int main()\n  {\n      default_delimiter();\n      custom_delimiter();\n  }\n  ```\n\n  输出：\n\n  ```cpp\n  Default delimiter case:\n  read in     [std::quoted() quotes this string and embedded \"quotes\" too]\n  stored as   [\"std::quoted() quotes this string and embedded \\\"quotes\\\" too\"]\n  written out [std::quoted() quotes this string and embedded \"quotes\" too]\n   \n  Custom delimiter case:\n  read in     [std::quoted() quotes this string and embedded $quotes$ $too]\n  stored as   [$std::quoted() quotes this string and embedded %$quotes%$ %$too$]\n  written out [std::quoted() quotes this string and embedded $quotes$ $too]\n  ```\n\n### C++ 17\n\n- #### [nodiscard](./C++17/nodiscard.md)\n\n- \n\n### C++ 20\n\n[ddd]: ","source":"_posts/C-Plus-Plus/新标准.md","raw":"---\ntitle: C++新标准\ndate: 2025-07-06\ntags: C++\ncategories: C++\ndescription: C++新标准(11～20)\n---\n\n# C++新标准\n### C++ 11\n\n语法特性：\n\n- `auto`\n- `decltype`\n- 返回类型后置(`auto`+`decltype`)\n- 右值引用\n- 列表初始化\n- 移动语义(`std::move`)\n- 万能引用(`T&&`)\n- 智能指针(`share_ptr; wake_ptr; unique_ptr`)\n- 范围for循环\n- 委托构造函数\n- 继承构造函数\n- `final`和`override`\n- `default`\n- 函数`delete`\n- `explicit`\n- `constexpr`\n- 强类型枚举(`enum class`)\n- 原始字符串字面量\n- 基于范围的`for`循环\n- `lambda`表达式\n- 内联命名空间\n- 右`>`的优化\n- `noexcept`\n- `char32_t`和`char16_t`\n\n库特性：\n\n- `chrono`库\n- `thread`库\n- `std::function`\n- `std::bind`\n- `std::move`\n- `std::forword`：与万能引用配合使用\n\n- `std::array`\n- `std::to_string()`\n- `std::tuple`(元组)\n- `std::tie`\n- `std::ref`\n- `std::make_shared`\n- 无序容器：\n  - `std::unordered_map`\n  - `std::unordered_multimap`\n  - `std::unordered_set`\n  - `std::unordered_multiset`\n- 内存模型\n- `std::async`\n- `std::forward_list`（单链表）\n\n### C++ 14\n\n- 变量模板\n\n- 泛型`lambda`参数\n\n- `lambda`初始化捕获\n\n- 放宽`constexptr`函数限制\n\n  在C++11中，constexpr函数的限制非常严格，要求其函数体仅能包含一个返回语句，且不能包含复杂的控制流语句（如循环、条件分支等）。\n\n  ```cpp\n  // C++11 constexpr阶乘函数的写法，只能使用递归\n  constexpr int factorial(int n) {\n      return n <= 1 ? 1 : (n * factorial(n - 1));\n  }\n  ```\n\n  \n\n  而在C++14中，允许在其函数体内使用更复杂的控制流结构和局部变量声明，也可以有多个返回语句，只要最终的结果能够在编译时计算得出即可。\n\n  ```cpp\n  // C++14 constexpr阶乘函数的写法，可以使用循环\n  constexpr int factorial(int n) {\n      int ret = 0;\n      for (int i = 0; i < n; ++i) {\n          ret += i;\n      }\n      return ret;\n  }\n  ```\n\n- `[[deprecated]]`(废弃标志)\n\n  标记已弃用的函数、类或其他声明。这有助于编译器在编译时发出警告，提醒开发者不应再使用某个已标记为过时的API\n\n  ```cpp\n  [[deprecated]]\n  void TriassicPeriod() {\n  \tstd::clog << \"Triassic Period: [251.9 - 208.5] million years ago.\\n\";\n  }\n  \n  [[deprecated(\"Use NeogenePeriod() instead.\")]]\t\t// 弃用并标明弃用原因\n  void JurassicPeriod() {\n  \tstd::clog << \"Jurassic Period: [201.3 - 152.1] million years ago.\\n\";\n  }\n  ```\n\n- `std::shared_timed_mutex`\n\n  超时读写锁。[shared_timed_mutex](./C++14/shared_timed_mutex.md)\n\n- `std::shared_lock`\n\n- `std::make_unique`\n\n- `std::exchange`\n\n  <mark>原子地</mark>交换一个对象的值，并返回其旧值。这个函数在处理资源管理、状态转换等场景时特别有用。\n\n  ```c++\n  #include <iostream>\n  #include <iterator>\n  #include <utility>\n  #include <vector>\n   \n  class stream\n  {\n  public:\n      using flags_type = int;\n   \n  public:\n      flags_type flags() const { return flags_; }\n   \n      // Replaces flags_ by newf, and returns the old value.\n      flags_type flags(flags_type newf) { return std::exchange(flags_, newf); }\n   \n  private:\n      flags_type flags_ = 0;\n  };\n   \n  void f() { std::cout << \"f()\"; }\n   \n  int main()\n  {\n      stream s;\n   \n      std::cout << s.flags() << '\\n';\n      std::cout << s.flags(12) << '\\n';\n      std::cout << s.flags() << \"\\n\\n\";\n   \n      std::vector<int> v;\n   \n      // Since the second template parameter has a default value, it is possible\n      // to use a braced-init-list as second argument. The expression below\n      // is equivalent to std::exchange(v, std::vector<int>{1, 2, 3, 4});\n   \n      std::exchange(v, {1, 2, 3, 4});\n   \n      std::copy(begin(v), end(v), std::ostream_iterator<int>(std::cout, \", \"));\n   \n      std::cout << \"\\n\\n\";\n   \n      void (*fun)();\n   \n      // The default value of template parameter also makes possible to use a\n      // normal function as second argument. The expression below is equivalent to\n      // std::exchange(fun, static_cast<void(*)()>(f))\n      std::exchange(fun, f);\n      fun();\n   \n      std::cout << \"\\n\\nFibonacci sequence: \";\n      for (int a{0}, b{1}; a < 100; a = std::exchange(b, a + b))\n          std::cout << a << \", \";\n      std::cout << \"...\\n\";\n  }\n  ```\n\n  输出：\n\n  ```xml\n  0\n  0\n  12\n  \n  1, 2, 3, 4,\n  \n  f()\n  \n  Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n  ```\n\n- `std::quoted`\n\n  具体使用案例：（来自`cppreference`）\n\n  ```cpp\n  #include <iomanip>\n  #include <iostream>\n  #include <sstream>\n   \n  void default_delimiter()\n  {\n      const std::string in = \"std::quoted() quotes this string and embedded \\\"quotes\\\" too\";\n      std::stringstream ss;\n      ss << std::quoted(in);\n      std::string out;\n      ss >> std::quoted(out);\n   \n      std::cout << \"Default delimiter case:\\n\"\n                   \"read in     [\" << in << \"]\\n\"\n                   \"stored as   [\" << ss.str() << \"]\\n\"\n                   \"written out [\" << out << \"]\\n\\n\";\n  }\n   \n  void custom_delimiter()\n  {\n      const char delim{'$'};\n      const char escape{'%'};\n   \n      const std::string in = \"std::quoted() quotes this string and embedded $quotes$ $too\";\n      std::stringstream ss;\n      ss << std::quoted(in, delim, escape);\n      std::string out;\n      ss >> std::quoted(out, delim, escape);\n   \n      std::cout << \"Custom delimiter case:\\n\"\n                   \"read in     [\" << in << \"]\\n\"\n                   \"stored as   [\" << ss.str() << \"]\\n\"\n                   \"written out [\" << out << \"]\\n\\n\";\n  }\n   \n  int main()\n  {\n      default_delimiter();\n      custom_delimiter();\n  }\n  ```\n\n  输出：\n\n  ```cpp\n  Default delimiter case:\n  read in     [std::quoted() quotes this string and embedded \"quotes\" too]\n  stored as   [\"std::quoted() quotes this string and embedded \\\"quotes\\\" too\"]\n  written out [std::quoted() quotes this string and embedded \"quotes\" too]\n   \n  Custom delimiter case:\n  read in     [std::quoted() quotes this string and embedded $quotes$ $too]\n  stored as   [$std::quoted() quotes this string and embedded %$quotes%$ %$too$]\n  written out [std::quoted() quotes this string and embedded $quotes$ $too]\n  ```\n\n### C++ 17\n\n- #### [nodiscard](./C++17/nodiscard.md)\n\n- \n\n### C++ 20\n\n[ddd]: ","slug":"C-Plus-Plus/新标准","published":1,"updated":"2025-09-14T02:36:11.009Z","comments":1,"layout":"post","photos":[],"_id":"cmfktk7ef0003c04pbmt3ad4g","content":"<h1>C++新标准</h1>\n<h3 id=\"C-11\">C++ 11</h3>\n<p>语法特性：</p>\n<ul>\n<li><code>auto</code></li>\n<li><code>decltype</code></li>\n<li>返回类型后置(<code>auto</code>+<code>decltype</code>)</li>\n<li>右值引用</li>\n<li>列表初始化</li>\n<li>移动语义(<code>std::move</code>)</li>\n<li>万能引用(<code>T&amp;&amp;</code>)</li>\n<li>智能指针(<code>share_ptr; wake_ptr; unique_ptr</code>)</li>\n<li>范围for循环</li>\n<li>委托构造函数</li>\n<li>继承构造函数</li>\n<li><code>final</code>和<code>override</code></li>\n<li><code>default</code></li>\n<li>函数<code>delete</code></li>\n<li><code>explicit</code></li>\n<li><code>constexpr</code></li>\n<li>强类型枚举(<code>enum class</code>)</li>\n<li>原始字符串字面量</li>\n<li>基于范围的<code>for</code>循环</li>\n<li><code>lambda</code>表达式</li>\n<li>内联命名空间</li>\n<li>右<code>&gt;</code>的优化</li>\n<li><code>noexcept</code></li>\n<li><code>char32_t</code>和<code>char16_t</code></li>\n</ul>\n<p>库特性：</p>\n<ul>\n<li>\n<p><code>chrono</code>库</p>\n</li>\n<li>\n<p><code>thread</code>库</p>\n</li>\n<li>\n<p><code>std::function</code></p>\n</li>\n<li>\n<p><code>std::bind</code></p>\n</li>\n<li>\n<p><code>std::move</code></p>\n</li>\n<li>\n<p><code>std::forword</code>：与万能引用配合使用</p>\n</li>\n<li>\n<p><code>std::array</code></p>\n</li>\n<li>\n<p><code>std::to_string()</code></p>\n</li>\n<li>\n<p><code>std::tuple</code>(元组)</p>\n</li>\n<li>\n<p><code>std::tie</code></p>\n</li>\n<li>\n<p><code>std::ref</code></p>\n</li>\n<li>\n<p><code>std::make_shared</code></p>\n</li>\n<li>\n<p>无序容器：</p>\n<ul>\n<li><code>std::unordered_map</code></li>\n<li><code>std::unordered_multimap</code></li>\n<li><code>std::unordered_set</code></li>\n<li><code>std::unordered_multiset</code></li>\n</ul>\n</li>\n<li>\n<p>内存模型</p>\n</li>\n<li>\n<p><code>std::async</code></p>\n</li>\n<li>\n<p><code>std::forward_list</code>（单链表）</p>\n</li>\n</ul>\n<h3 id=\"C-14\">C++ 14</h3>\n<ul>\n<li>\n<p>变量模板</p>\n</li>\n<li>\n<p>泛型<code>lambda</code>参数</p>\n</li>\n<li>\n<p><code>lambda</code>初始化捕获</p>\n</li>\n<li>\n<p>放宽<code>constexptr</code>函数限制</p>\n<p>在C++11中，constexpr函数的限制非常严格，要求其函数体仅能包含一个返回语句，且不能包含复杂的控制流语句（如循环、条件分支等）。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// C++11 constexpr阶乘函数的写法，只能使用递归</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> <span class=\"title\">factorial</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n &lt;= <span class=\"number\">1</span> ? <span class=\"number\">1</span> : (n * <span class=\"built_in\">factorial</span>(n - <span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而在C++14中，允许在其函数体内使用更复杂的控制流结构和局部变量声明，也可以有多个返回语句，只要最终的结果能够在编译时计算得出即可。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// C++14 constexpr阶乘函数的写法，可以使用循环</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> <span class=\"title\">factorial</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        ret += i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>[[deprecated]]</code>(废弃标志)</p>\n<p>标记已弃用的函数、类或其他声明。这有助于编译器在编译时发出警告，提醒开发者不应再使用某个已标记为过时的API</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[deprecated]]</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TriassicPeriod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tstd::clog &lt;&lt; <span class=\"string\">&quot;Triassic Period: [251.9 - 208.5] million years ago.\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[[<span class=\"built_in\">deprecated</span>(<span class=\"string\">&quot;Use NeogenePeriod() instead.&quot;</span>)]]\t\t<span class=\"comment\">// 弃用并标明弃用原因</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">JurassicPeriod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tstd::clog &lt;&lt; <span class=\"string\">&quot;Jurassic Period: [201.3 - 152.1] million years ago.\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>std::shared_timed_mutex</code></p>\n<p>超时读写锁。<a href=\"./C++14/shared_timed_mutex.md\">shared_timed_mutex</a></p>\n</li>\n<li>\n<p><code>std::shared_lock</code></p>\n</li>\n<li>\n<p><code>std::make_unique</code></p>\n</li>\n<li>\n<p><code>std::exchange</code></p>\n<p><mark>原子地</mark>交换一个对象的值，并返回其旧值。这个函数在处理资源管理、状态转换等场景时特别有用。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;utility&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">stream</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">using</span> flags_type = <span class=\"type\">int</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">flags_type <span class=\"title\">flags</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> flags_; &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Replaces flags_ by newf, and returns the old value.</span></span><br><span class=\"line\">    <span class=\"function\">flags_type <span class=\"title\">flags</span><span class=\"params\">(flags_type newf)</span> </span>&#123; <span class=\"keyword\">return</span> std::<span class=\"built_in\">exchange</span>(flags_, newf); &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    flags_type flags_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123; std::cout &lt;&lt; <span class=\"string\">&quot;f()&quot;</span>; &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    stream s;</span><br><span class=\"line\"> </span><br><span class=\"line\">    std::cout &lt;&lt; s.<span class=\"built_in\">flags</span>() &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    std::cout &lt;&lt; s.<span class=\"built_in\">flags</span>(<span class=\"number\">12</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    std::cout &lt;&lt; s.<span class=\"built_in\">flags</span>() &lt;&lt; <span class=\"string\">&quot;\\n\\n&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    std::vector&lt;<span class=\"type\">int</span>&gt; v;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Since the second template parameter has a default value, it is possible</span></span><br><span class=\"line\">    <span class=\"comment\">// to use a braced-init-list as second argument. The expression below</span></span><br><span class=\"line\">    <span class=\"comment\">// is equivalent to std::exchange(v, std::vector&lt;int&gt;&#123;1, 2, 3, 4&#125;);</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    std::<span class=\"built_in\">exchange</span>(v, &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">    std::<span class=\"built_in\">copy</span>(<span class=\"built_in\">begin</span>(v), <span class=\"built_in\">end</span>(v), std::<span class=\"built_in\">ostream_iterator</span>&lt;<span class=\"type\">int</span>&gt;(std::cout, <span class=\"string\">&quot;, &quot;</span>));</span><br><span class=\"line\"> </span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;\\n\\n&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">void</span> (*fun)();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// The default value of template parameter also makes possible to use a</span></span><br><span class=\"line\">    <span class=\"comment\">// normal function as second argument. The expression below is equivalent to</span></span><br><span class=\"line\">    <span class=\"comment\">// std::exchange(fun, static_cast&lt;void(*)()&gt;(f))</span></span><br><span class=\"line\">    std::<span class=\"built_in\">exchange</span>(fun, f);</span><br><span class=\"line\">    <span class=\"built_in\">fun</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;\\n\\nFibonacci sequence: &quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> a&#123;<span class=\"number\">0</span>&#125;, b&#123;<span class=\"number\">1</span>&#125;; a &lt; <span class=\"number\">100</span>; a = std::<span class=\"built_in\">exchange</span>(b, a + b))</span><br><span class=\"line\">        std::cout &lt;&lt; a &lt;&lt; <span class=\"string\">&quot;, &quot;</span>;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;...\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br><span class=\"line\">0</span><br><span class=\"line\">12</span><br><span class=\"line\"></span><br><span class=\"line\">1, 2, 3, 4,</span><br><span class=\"line\"></span><br><span class=\"line\">f()</span><br><span class=\"line\"></span><br><span class=\"line\">Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>std::quoted</code></p>\n<p>具体使用案例：（来自<code>cppreference</code>）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">default_delimiter</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> std::string in = <span class=\"string\">&quot;std::quoted() quotes this string and embedded \\&quot;quotes\\&quot; too&quot;</span>;</span><br><span class=\"line\">    std::stringstream ss;</span><br><span class=\"line\">    ss &lt;&lt; std::<span class=\"built_in\">quoted</span>(in);</span><br><span class=\"line\">    std::string out;</span><br><span class=\"line\">    ss &gt;&gt; std::<span class=\"built_in\">quoted</span>(out);</span><br><span class=\"line\"> </span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Default delimiter case:\\n&quot;</span></span><br><span class=\"line\">                 <span class=\"string\">&quot;read in     [&quot;</span> &lt;&lt; in &lt;&lt; <span class=\"string\">&quot;]\\n&quot;</span></span><br><span class=\"line\">                 <span class=\"string\">&quot;stored as   [&quot;</span> &lt;&lt; ss.<span class=\"built_in\">str</span>() &lt;&lt; <span class=\"string\">&quot;]\\n&quot;</span></span><br><span class=\"line\">                 <span class=\"string\">&quot;written out [&quot;</span> &lt;&lt; out &lt;&lt; <span class=\"string\">&quot;]\\n\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">custom_delimiter</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> delim&#123;<span class=\"string\">&#x27;$&#x27;</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> escape&#123;<span class=\"string\">&#x27;%&#x27;</span>&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">const</span> std::string in = <span class=\"string\">&quot;std::quoted() quotes this string and embedded $quotes$ $too&quot;</span>;</span><br><span class=\"line\">    std::stringstream ss;</span><br><span class=\"line\">    ss &lt;&lt; std::<span class=\"built_in\">quoted</span>(in, delim, escape);</span><br><span class=\"line\">    std::string out;</span><br><span class=\"line\">    ss &gt;&gt; std::<span class=\"built_in\">quoted</span>(out, delim, escape);</span><br><span class=\"line\"> </span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Custom delimiter case:\\n&quot;</span></span><br><span class=\"line\">                 <span class=\"string\">&quot;read in     [&quot;</span> &lt;&lt; in &lt;&lt; <span class=\"string\">&quot;]\\n&quot;</span></span><br><span class=\"line\">                 <span class=\"string\">&quot;stored as   [&quot;</span> &lt;&lt; ss.<span class=\"built_in\">str</span>() &lt;&lt; <span class=\"string\">&quot;]\\n&quot;</span></span><br><span class=\"line\">                 <span class=\"string\">&quot;written out [&quot;</span> &lt;&lt; out &lt;&lt; <span class=\"string\">&quot;]\\n\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">default_delimiter</span>();</span><br><span class=\"line\">    <span class=\"built_in\">custom_delimiter</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Default delimiter <span class=\"keyword\">case</span>:</span><br><span class=\"line\">read in     [std::<span class=\"built_in\">quoted</span>() quotes <span class=\"keyword\">this</span> string <span class=\"keyword\">and</span> embedded <span class=\"string\">&quot;quotes&quot;</span> too]</span><br><span class=\"line\">stored as   [<span class=\"string\">&quot;std::quoted() quotes this string and embedded \\&quot;quotes\\&quot; too&quot;</span>]</span><br><span class=\"line\">written out [std::<span class=\"built_in\">quoted</span>() quotes <span class=\"keyword\">this</span> string <span class=\"keyword\">and</span> embedded <span class=\"string\">&quot;quotes&quot;</span> too]</span><br><span class=\"line\"> </span><br><span class=\"line\">Custom delimiter <span class=\"keyword\">case</span>:</span><br><span class=\"line\">read in     [std::<span class=\"built_in\">quoted</span>() quotes <span class=\"keyword\">this</span> string <span class=\"keyword\">and</span> embedded $quotes$ $too]</span><br><span class=\"line\">stored as   [$std::<span class=\"built_in\">quoted</span>() quotes <span class=\"keyword\">this</span> string <span class=\"keyword\">and</span> embedded %$quotes%$ %$too$]</span><br><span class=\"line\">written out [std::<span class=\"built_in\">quoted</span>() quotes <span class=\"keyword\">this</span> string <span class=\"keyword\">and</span> embedded $quotes$ $too]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"C-17\">C++ 17</h3>\n<ul>\n<li>\n<h4 id=\"nodiscard\"><a href=\"./C++17/nodiscard.md\">nodiscard</a></h4>\n</li>\n<li></li>\n</ul>\n<h3 id=\"C-20\">C++ 20</h3>\n<p>[ddd]:</p>\n","secretKey":"55c94bc212c056b16d93ff1f425787d785553d4819d91a8d145471604230c8bb","iv":"7513d867a8dd79d17ff68216903ea2c0","encryptedPassword":"5cae9651091d6a2022949eeed0a88e04","encryptedContent":"","excerpt":"","more":"<h1>C++新标准</h1>\n<h3 id=\"C-11\">C++ 11</h3>\n<p>语法特性：</p>\n<ul>\n<li><code>auto</code></li>\n<li><code>decltype</code></li>\n<li>返回类型后置(<code>auto</code>+<code>decltype</code>)</li>\n<li>右值引用</li>\n<li>列表初始化</li>\n<li>移动语义(<code>std::move</code>)</li>\n<li>万能引用(<code>T&amp;&amp;</code>)</li>\n<li>智能指针(<code>share_ptr; wake_ptr; unique_ptr</code>)</li>\n<li>范围for循环</li>\n<li>委托构造函数</li>\n<li>继承构造函数</li>\n<li><code>final</code>和<code>override</code></li>\n<li><code>default</code></li>\n<li>函数<code>delete</code></li>\n<li><code>explicit</code></li>\n<li><code>constexpr</code></li>\n<li>强类型枚举(<code>enum class</code>)</li>\n<li>原始字符串字面量</li>\n<li>基于范围的<code>for</code>循环</li>\n<li><code>lambda</code>表达式</li>\n<li>内联命名空间</li>\n<li>右<code>&gt;</code>的优化</li>\n<li><code>noexcept</code></li>\n<li><code>char32_t</code>和<code>char16_t</code></li>\n</ul>\n<p>库特性：</p>\n<ul>\n<li>\n<p><code>chrono</code>库</p>\n</li>\n<li>\n<p><code>thread</code>库</p>\n</li>\n<li>\n<p><code>std::function</code></p>\n</li>\n<li>\n<p><code>std::bind</code></p>\n</li>\n<li>\n<p><code>std::move</code></p>\n</li>\n<li>\n<p><code>std::forword</code>：与万能引用配合使用</p>\n</li>\n<li>\n<p><code>std::array</code></p>\n</li>\n<li>\n<p><code>std::to_string()</code></p>\n</li>\n<li>\n<p><code>std::tuple</code>(元组)</p>\n</li>\n<li>\n<p><code>std::tie</code></p>\n</li>\n<li>\n<p><code>std::ref</code></p>\n</li>\n<li>\n<p><code>std::make_shared</code></p>\n</li>\n<li>\n<p>无序容器：</p>\n<ul>\n<li><code>std::unordered_map</code></li>\n<li><code>std::unordered_multimap</code></li>\n<li><code>std::unordered_set</code></li>\n<li><code>std::unordered_multiset</code></li>\n</ul>\n</li>\n<li>\n<p>内存模型</p>\n</li>\n<li>\n<p><code>std::async</code></p>\n</li>\n<li>\n<p><code>std::forward_list</code>（单链表）</p>\n</li>\n</ul>\n<h3 id=\"C-14\">C++ 14</h3>\n<ul>\n<li>\n<p>变量模板</p>\n</li>\n<li>\n<p>泛型<code>lambda</code>参数</p>\n</li>\n<li>\n<p><code>lambda</code>初始化捕获</p>\n</li>\n<li>\n<p>放宽<code>constexptr</code>函数限制</p>\n<p>在C++11中，constexpr函数的限制非常严格，要求其函数体仅能包含一个返回语句，且不能包含复杂的控制流语句（如循环、条件分支等）。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// C++11 constexpr阶乘函数的写法，只能使用递归</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> <span class=\"title\">factorial</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n &lt;= <span class=\"number\">1</span> ? <span class=\"number\">1</span> : (n * <span class=\"built_in\">factorial</span>(n - <span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而在C++14中，允许在其函数体内使用更复杂的控制流结构和局部变量声明，也可以有多个返回语句，只要最终的结果能够在编译时计算得出即可。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// C++14 constexpr阶乘函数的写法，可以使用循环</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> <span class=\"title\">factorial</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        ret += i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>[[deprecated]]</code>(废弃标志)</p>\n<p>标记已弃用的函数、类或其他声明。这有助于编译器在编译时发出警告，提醒开发者不应再使用某个已标记为过时的API</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[deprecated]]</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TriassicPeriod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tstd::clog &lt;&lt; <span class=\"string\">&quot;Triassic Period: [251.9 - 208.5] million years ago.\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[[<span class=\"built_in\">deprecated</span>(<span class=\"string\">&quot;Use NeogenePeriod() instead.&quot;</span>)]]\t\t<span class=\"comment\">// 弃用并标明弃用原因</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">JurassicPeriod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tstd::clog &lt;&lt; <span class=\"string\">&quot;Jurassic Period: [201.3 - 152.1] million years ago.\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>std::shared_timed_mutex</code></p>\n<p>超时读写锁。<a href=\"./C++14/shared_timed_mutex.md\">shared_timed_mutex</a></p>\n</li>\n<li>\n<p><code>std::shared_lock</code></p>\n</li>\n<li>\n<p><code>std::make_unique</code></p>\n</li>\n<li>\n<p><code>std::exchange</code></p>\n<p><mark>原子地</mark>交换一个对象的值，并返回其旧值。这个函数在处理资源管理、状态转换等场景时特别有用。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;utility&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">stream</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">using</span> flags_type = <span class=\"type\">int</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">flags_type <span class=\"title\">flags</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> flags_; &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Replaces flags_ by newf, and returns the old value.</span></span><br><span class=\"line\">    <span class=\"function\">flags_type <span class=\"title\">flags</span><span class=\"params\">(flags_type newf)</span> </span>&#123; <span class=\"keyword\">return</span> std::<span class=\"built_in\">exchange</span>(flags_, newf); &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    flags_type flags_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123; std::cout &lt;&lt; <span class=\"string\">&quot;f()&quot;</span>; &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    stream s;</span><br><span class=\"line\"> </span><br><span class=\"line\">    std::cout &lt;&lt; s.<span class=\"built_in\">flags</span>() &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    std::cout &lt;&lt; s.<span class=\"built_in\">flags</span>(<span class=\"number\">12</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    std::cout &lt;&lt; s.<span class=\"built_in\">flags</span>() &lt;&lt; <span class=\"string\">&quot;\\n\\n&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    std::vector&lt;<span class=\"type\">int</span>&gt; v;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Since the second template parameter has a default value, it is possible</span></span><br><span class=\"line\">    <span class=\"comment\">// to use a braced-init-list as second argument. The expression below</span></span><br><span class=\"line\">    <span class=\"comment\">// is equivalent to std::exchange(v, std::vector&lt;int&gt;&#123;1, 2, 3, 4&#125;);</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    std::<span class=\"built_in\">exchange</span>(v, &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">    std::<span class=\"built_in\">copy</span>(<span class=\"built_in\">begin</span>(v), <span class=\"built_in\">end</span>(v), std::<span class=\"built_in\">ostream_iterator</span>&lt;<span class=\"type\">int</span>&gt;(std::cout, <span class=\"string\">&quot;, &quot;</span>));</span><br><span class=\"line\"> </span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;\\n\\n&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">void</span> (*fun)();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// The default value of template parameter also makes possible to use a</span></span><br><span class=\"line\">    <span class=\"comment\">// normal function as second argument. The expression below is equivalent to</span></span><br><span class=\"line\">    <span class=\"comment\">// std::exchange(fun, static_cast&lt;void(*)()&gt;(f))</span></span><br><span class=\"line\">    std::<span class=\"built_in\">exchange</span>(fun, f);</span><br><span class=\"line\">    <span class=\"built_in\">fun</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;\\n\\nFibonacci sequence: &quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> a&#123;<span class=\"number\">0</span>&#125;, b&#123;<span class=\"number\">1</span>&#125;; a &lt; <span class=\"number\">100</span>; a = std::<span class=\"built_in\">exchange</span>(b, a + b))</span><br><span class=\"line\">        std::cout &lt;&lt; a &lt;&lt; <span class=\"string\">&quot;, &quot;</span>;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;...\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br><span class=\"line\">0</span><br><span class=\"line\">12</span><br><span class=\"line\"></span><br><span class=\"line\">1, 2, 3, 4,</span><br><span class=\"line\"></span><br><span class=\"line\">f()</span><br><span class=\"line\"></span><br><span class=\"line\">Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>std::quoted</code></p>\n<p>具体使用案例：（来自<code>cppreference</code>）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">default_delimiter</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> std::string in = <span class=\"string\">&quot;std::quoted() quotes this string and embedded \\&quot;quotes\\&quot; too&quot;</span>;</span><br><span class=\"line\">    std::stringstream ss;</span><br><span class=\"line\">    ss &lt;&lt; std::<span class=\"built_in\">quoted</span>(in);</span><br><span class=\"line\">    std::string out;</span><br><span class=\"line\">    ss &gt;&gt; std::<span class=\"built_in\">quoted</span>(out);</span><br><span class=\"line\"> </span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Default delimiter case:\\n&quot;</span></span><br><span class=\"line\">                 <span class=\"string\">&quot;read in     [&quot;</span> &lt;&lt; in &lt;&lt; <span class=\"string\">&quot;]\\n&quot;</span></span><br><span class=\"line\">                 <span class=\"string\">&quot;stored as   [&quot;</span> &lt;&lt; ss.<span class=\"built_in\">str</span>() &lt;&lt; <span class=\"string\">&quot;]\\n&quot;</span></span><br><span class=\"line\">                 <span class=\"string\">&quot;written out [&quot;</span> &lt;&lt; out &lt;&lt; <span class=\"string\">&quot;]\\n\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">custom_delimiter</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> delim&#123;<span class=\"string\">&#x27;$&#x27;</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> escape&#123;<span class=\"string\">&#x27;%&#x27;</span>&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">const</span> std::string in = <span class=\"string\">&quot;std::quoted() quotes this string and embedded $quotes$ $too&quot;</span>;</span><br><span class=\"line\">    std::stringstream ss;</span><br><span class=\"line\">    ss &lt;&lt; std::<span class=\"built_in\">quoted</span>(in, delim, escape);</span><br><span class=\"line\">    std::string out;</span><br><span class=\"line\">    ss &gt;&gt; std::<span class=\"built_in\">quoted</span>(out, delim, escape);</span><br><span class=\"line\"> </span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Custom delimiter case:\\n&quot;</span></span><br><span class=\"line\">                 <span class=\"string\">&quot;read in     [&quot;</span> &lt;&lt; in &lt;&lt; <span class=\"string\">&quot;]\\n&quot;</span></span><br><span class=\"line\">                 <span class=\"string\">&quot;stored as   [&quot;</span> &lt;&lt; ss.<span class=\"built_in\">str</span>() &lt;&lt; <span class=\"string\">&quot;]\\n&quot;</span></span><br><span class=\"line\">                 <span class=\"string\">&quot;written out [&quot;</span> &lt;&lt; out &lt;&lt; <span class=\"string\">&quot;]\\n\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">default_delimiter</span>();</span><br><span class=\"line\">    <span class=\"built_in\">custom_delimiter</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Default delimiter <span class=\"keyword\">case</span>:</span><br><span class=\"line\">read in     [std::<span class=\"built_in\">quoted</span>() quotes <span class=\"keyword\">this</span> string <span class=\"keyword\">and</span> embedded <span class=\"string\">&quot;quotes&quot;</span> too]</span><br><span class=\"line\">stored as   [<span class=\"string\">&quot;std::quoted() quotes this string and embedded \\&quot;quotes\\&quot; too&quot;</span>]</span><br><span class=\"line\">written out [std::<span class=\"built_in\">quoted</span>() quotes <span class=\"keyword\">this</span> string <span class=\"keyword\">and</span> embedded <span class=\"string\">&quot;quotes&quot;</span> too]</span><br><span class=\"line\"> </span><br><span class=\"line\">Custom delimiter <span class=\"keyword\">case</span>:</span><br><span class=\"line\">read in     [std::<span class=\"built_in\">quoted</span>() quotes <span class=\"keyword\">this</span> string <span class=\"keyword\">and</span> embedded $quotes$ $too]</span><br><span class=\"line\">stored as   [$std::<span class=\"built_in\">quoted</span>() quotes <span class=\"keyword\">this</span> string <span class=\"keyword\">and</span> embedded %$quotes%$ %$too$]</span><br><span class=\"line\">written out [std::<span class=\"built_in\">quoted</span>() quotes <span class=\"keyword\">this</span> string <span class=\"keyword\">and</span> embedded $quotes$ $too]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"C-17\">C++ 17</h3>\n<ul>\n<li>\n<h4 id=\"nodiscard\"><a href=\"./C++17/nodiscard.md\">nodiscard</a></h4>\n</li>\n<li></li>\n</ul>\n<h3 id=\"C-20\">C++ 20</h3>\n<p>[ddd]:</p>\n"},{"title":"C++语法","date":"2025-07-05T16:00:00.000Z","description":"C++语法","_content":"\n## C++语法\n### 强制类型转换\n\n#### static_cast\n\n> 用于基本数据类型之间的转换，以及在类层次结构中基类和派生类之间的指针或引用的转换。它在**编译时执行，不提供运行时类型检查**。\n>\n> > 如果对象所属的类重载了强制类型转换运算符 T（如 T 是 int、int* 或其他类型名），则 static_cast 也能用来进行对象到 T 类型的转换。\n>\n> > static_cast 不能用于在不同类型的指针之间互相转换，也不能用于整型和指针之间的互相转换，当然也不能用于不同类型的引用之间的转换。因为这些属于风险比较高的转换。\n\n例：\n\n```cpp\nint a = 10;\nint b = 3;\ndouble result = static_cast<double>(a) / static_cast<double>(b);\n```\n\n#### dynamic_cast\n\n> 用于类层次结构中的指针和引用的转换，它在运行时检查类型的安全性。它要求转换的类型必须包含至少一个虚函数。\n>\n> > **如果转换失败，*dynamic_cast*会返回*nullptr***。\n\n例：\n\n```cpp\nclass Base {};\nclass Derived : public Base {};\nBase* basePtr = new Derived();\nDerived* derivedPtr = dynamic_cast<Derived*>(basePtr); // 安全的转换\n```\n\ndynamic_cast与reinterpret_cast的区别：\n\n- 用 reinterpret_cast 可以将多态基类（包含虚函数的基类）的指针强制转换为派生类的指针，但是这种转换不检查安全性，即不检查转换后的指针是否确实指向一个派生类对象。\n- dynamic_cast专门用于将多态基类的指针或引用强制转换为派生类的指针或引用，而且能够检查转换的安全性。对于不安全的指针转换，转换结果返回 nullptr 指针。\n\n#### const_cast\n\n> 仅用于去除变量的*const*属性。它主要用于操作指向常量对象的指针或引用的*const*属性。\n\n例：\n\n```cpp\nconst int a = 10;\nconst int* p = &a;\nint* q = const_cast<int*>(p);\n*q = 20; // 现在*q可以被修改\n```\n\n#### reinterpret_cast\n\n> 用于低级的强制类型转换，如改变指针类型或将指针转换为足够长度的整型。**它仅仅复制位模式，不改变值本身**。\n>\n> > [!warning]\n> >\n> > 这种转换是不安全的，因为它不保证转换结果的有效性：\n> >\n> > > 例如，执意把一个 int* 指针、函数指针或其他类型的指针转换成 string* 类型的指针也是可以的，至于以后用转换后的指针调用 string 类的成员函数引发错误，则需要程序员自行承担查找错误的烦琐工作\n\n例：\n\n```cpp\nint* a = new int;\ndouble* d = reinterpret_cast<double*>(a);\n```\n\n### 主题\n","source":"_posts/C-Plus-Plus/语法.md","raw":"---\ntitle: C++语法\ndate: 2025-07-06\ndescription: C++语法\n---\n\n## C++语法\n### 强制类型转换\n\n#### static_cast\n\n> 用于基本数据类型之间的转换，以及在类层次结构中基类和派生类之间的指针或引用的转换。它在**编译时执行，不提供运行时类型检查**。\n>\n> > 如果对象所属的类重载了强制类型转换运算符 T（如 T 是 int、int* 或其他类型名），则 static_cast 也能用来进行对象到 T 类型的转换。\n>\n> > static_cast 不能用于在不同类型的指针之间互相转换，也不能用于整型和指针之间的互相转换，当然也不能用于不同类型的引用之间的转换。因为这些属于风险比较高的转换。\n\n例：\n\n```cpp\nint a = 10;\nint b = 3;\ndouble result = static_cast<double>(a) / static_cast<double>(b);\n```\n\n#### dynamic_cast\n\n> 用于类层次结构中的指针和引用的转换，它在运行时检查类型的安全性。它要求转换的类型必须包含至少一个虚函数。\n>\n> > **如果转换失败，*dynamic_cast*会返回*nullptr***。\n\n例：\n\n```cpp\nclass Base {};\nclass Derived : public Base {};\nBase* basePtr = new Derived();\nDerived* derivedPtr = dynamic_cast<Derived*>(basePtr); // 安全的转换\n```\n\ndynamic_cast与reinterpret_cast的区别：\n\n- 用 reinterpret_cast 可以将多态基类（包含虚函数的基类）的指针强制转换为派生类的指针，但是这种转换不检查安全性，即不检查转换后的指针是否确实指向一个派生类对象。\n- dynamic_cast专门用于将多态基类的指针或引用强制转换为派生类的指针或引用，而且能够检查转换的安全性。对于不安全的指针转换，转换结果返回 nullptr 指针。\n\n#### const_cast\n\n> 仅用于去除变量的*const*属性。它主要用于操作指向常量对象的指针或引用的*const*属性。\n\n例：\n\n```cpp\nconst int a = 10;\nconst int* p = &a;\nint* q = const_cast<int*>(p);\n*q = 20; // 现在*q可以被修改\n```\n\n#### reinterpret_cast\n\n> 用于低级的强制类型转换，如改变指针类型或将指针转换为足够长度的整型。**它仅仅复制位模式，不改变值本身**。\n>\n> > [!warning]\n> >\n> > 这种转换是不安全的，因为它不保证转换结果的有效性：\n> >\n> > > 例如，执意把一个 int* 指针、函数指针或其他类型的指针转换成 string* 类型的指针也是可以的，至于以后用转换后的指针调用 string 类的成员函数引发错误，则需要程序员自行承担查找错误的烦琐工作\n\n例：\n\n```cpp\nint* a = new int;\ndouble* d = reinterpret_cast<double*>(a);\n```\n\n### 主题\n","slug":"C-Plus-Plus/语法","published":1,"updated":"2025-09-14T02:36:11.009Z","comments":1,"layout":"post","photos":[],"_id":"cmfktk7eg0005c04pfgxg8u68","content":"<h2 id=\"C-语法\">C++语法</h2>\n<h3 id=\"强制类型转换\">强制类型转换</h3>\n<h4 id=\"static-cast\">static_cast</h4>\n<blockquote>\n<p>用于基本数据类型之间的转换，以及在类层次结构中基类和派生类之间的指针或引用的转换。它在<strong>编译时执行，不提供运行时类型检查</strong>。</p>\n<blockquote>\n<p>如果对象所属的类重载了强制类型转换运算符 T（如 T 是 int、int* 或其他类型名），则 static_cast 也能用来进行对象到 T 类型的转换。</p>\n</blockquote>\n<blockquote>\n<p>static_cast 不能用于在不同类型的指针之间互相转换，也不能用于整型和指针之间的互相转换，当然也不能用于不同类型的引用之间的转换。因为这些属于风险比较高的转换。</p>\n</blockquote>\n</blockquote>\n<p>例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> b = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"type\">double</span> result = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">double</span>&gt;(a) / <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">double</span>&gt;(b);</span><br></pre></td></tr></table></figure>\n<h4 id=\"dynamic-cast\">dynamic_cast</h4>\n<blockquote>\n<p>用于类层次结构中的指针和引用的转换，它在运行时检查类型的安全性。它要求转换的类型必须包含至少一个虚函数。</p>\n<blockquote>\n<p><strong>如果转换失败，<em>dynamic_cast</em>会返回<em>nullptr</em></strong>。</p>\n</blockquote>\n</blockquote>\n<p>例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base &#123;&#125;;</span><br><span class=\"line\">Base* basePtr = <span class=\"keyword\">new</span> <span class=\"built_in\">Derived</span>();</span><br><span class=\"line\">Derived* derivedPtr = <span class=\"built_in\">dynamic_cast</span>&lt;Derived*&gt;(basePtr); <span class=\"comment\">// 安全的转换</span></span><br></pre></td></tr></table></figure>\n<p>dynamic_cast与reinterpret_cast的区别：</p>\n<ul>\n<li>用 reinterpret_cast 可以将多态基类（包含虚函数的基类）的指针强制转换为派生类的指针，但是这种转换不检查安全性，即不检查转换后的指针是否确实指向一个派生类对象。</li>\n<li>dynamic_cast专门用于将多态基类的指针或引用强制转换为派生类的指针或引用，而且能够检查转换的安全性。对于不安全的指针转换，转换结果返回 nullptr 指针。</li>\n</ul>\n<h4 id=\"const-cast\">const_cast</h4>\n<blockquote>\n<p>仅用于去除变量的<em>const</em>属性。它主要用于操作指向常量对象的指针或引用的<em>const</em>属性。</p>\n</blockquote>\n<p>例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span>* p = &amp;a;</span><br><span class=\"line\"><span class=\"type\">int</span>* q = <span class=\"built_in\">const_cast</span>&lt;<span class=\"type\">int</span>*&gt;(p);</span><br><span class=\"line\">*q = <span class=\"number\">20</span>; <span class=\"comment\">// 现在*q可以被修改</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"reinterpret-cast\">reinterpret_cast</h4>\n<blockquote>\n<p>用于低级的强制类型转换，如改变指针类型或将指针转换为足够长度的整型。<strong>它仅仅复制位模式，不改变值本身</strong>。</p>\n<blockquote>\n<p>[!warning]</p>\n<p>这种转换是不安全的，因为它不保证转换结果的有效性：</p>\n<blockquote>\n<p>例如，执意把一个 int* 指针、函数指针或其他类型的指针转换成 string* 类型的指针也是可以的，至于以后用转换后的指针调用 string 类的成员函数引发错误，则需要程序员自行承担查找错误的烦琐工作</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>* a = <span class=\"keyword\">new</span> <span class=\"type\">int</span>;</span><br><span class=\"line\"><span class=\"type\">double</span>* d = <span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">double</span>*&gt;(a);</span><br></pre></td></tr></table></figure>\n<h3 id=\"主题\">主题</h3>\n","secretKey":"41c8b5d7b33147398adfaace95ba06ba2306c179c7a2fecf91eb68206b3fd755","iv":"4928ab6609012379c02ae6efca3717cb","encryptedPassword":"679d9a25d847e19eda58dc449c54f1fa","encryptedContent":"","excerpt":"","more":"<h2 id=\"C-语法\">C++语法</h2>\n<h3 id=\"强制类型转换\">强制类型转换</h3>\n<h4 id=\"static-cast\">static_cast</h4>\n<blockquote>\n<p>用于基本数据类型之间的转换，以及在类层次结构中基类和派生类之间的指针或引用的转换。它在<strong>编译时执行，不提供运行时类型检查</strong>。</p>\n<blockquote>\n<p>如果对象所属的类重载了强制类型转换运算符 T（如 T 是 int、int* 或其他类型名），则 static_cast 也能用来进行对象到 T 类型的转换。</p>\n</blockquote>\n<blockquote>\n<p>static_cast 不能用于在不同类型的指针之间互相转换，也不能用于整型和指针之间的互相转换，当然也不能用于不同类型的引用之间的转换。因为这些属于风险比较高的转换。</p>\n</blockquote>\n</blockquote>\n<p>例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> b = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"type\">double</span> result = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">double</span>&gt;(a) / <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">double</span>&gt;(b);</span><br></pre></td></tr></table></figure>\n<h4 id=\"dynamic-cast\">dynamic_cast</h4>\n<blockquote>\n<p>用于类层次结构中的指针和引用的转换，它在运行时检查类型的安全性。它要求转换的类型必须包含至少一个虚函数。</p>\n<blockquote>\n<p><strong>如果转换失败，<em>dynamic_cast</em>会返回<em>nullptr</em></strong>。</p>\n</blockquote>\n</blockquote>\n<p>例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base &#123;&#125;;</span><br><span class=\"line\">Base* basePtr = <span class=\"keyword\">new</span> <span class=\"built_in\">Derived</span>();</span><br><span class=\"line\">Derived* derivedPtr = <span class=\"built_in\">dynamic_cast</span>&lt;Derived*&gt;(basePtr); <span class=\"comment\">// 安全的转换</span></span><br></pre></td></tr></table></figure>\n<p>dynamic_cast与reinterpret_cast的区别：</p>\n<ul>\n<li>用 reinterpret_cast 可以将多态基类（包含虚函数的基类）的指针强制转换为派生类的指针，但是这种转换不检查安全性，即不检查转换后的指针是否确实指向一个派生类对象。</li>\n<li>dynamic_cast专门用于将多态基类的指针或引用强制转换为派生类的指针或引用，而且能够检查转换的安全性。对于不安全的指针转换，转换结果返回 nullptr 指针。</li>\n</ul>\n<h4 id=\"const-cast\">const_cast</h4>\n<blockquote>\n<p>仅用于去除变量的<em>const</em>属性。它主要用于操作指向常量对象的指针或引用的<em>const</em>属性。</p>\n</blockquote>\n<p>例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span>* p = &amp;a;</span><br><span class=\"line\"><span class=\"type\">int</span>* q = <span class=\"built_in\">const_cast</span>&lt;<span class=\"type\">int</span>*&gt;(p);</span><br><span class=\"line\">*q = <span class=\"number\">20</span>; <span class=\"comment\">// 现在*q可以被修改</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"reinterpret-cast\">reinterpret_cast</h4>\n<blockquote>\n<p>用于低级的强制类型转换，如改变指针类型或将指针转换为足够长度的整型。<strong>它仅仅复制位模式，不改变值本身</strong>。</p>\n<blockquote>\n<p>[!warning]</p>\n<p>这种转换是不安全的，因为它不保证转换结果的有效性：</p>\n<blockquote>\n<p>例如，执意把一个 int* 指针、函数指针或其他类型的指针转换成 string* 类型的指针也是可以的，至于以后用转换后的指针调用 string 类的成员函数引发错误，则需要程序员自行承担查找错误的烦琐工作</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>* a = <span class=\"keyword\">new</span> <span class=\"type\">int</span>;</span><br><span class=\"line\"><span class=\"type\">double</span>* d = <span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">double</span>*&gt;(a);</span><br></pre></td></tr></table></figure>\n<h3 id=\"主题\">主题</h3>\n"},{"title":"C标准库","date":"2025-07-05T16:00:00.000Z","description":"C语言标准库函数","_content":"\n- `stdio.h`\n    - `void perror(const char* err)`\n- `stdlib.h`\n    - `int system(const char* command)`\n        在windows系统中，system函数直接在控制台调用一个command命令。  在Linux/Unix系统中，system函数会调用fork函数产生子进程，由子进程来执行shell command命令，命令执行完后随即返回原调用的进程。\n    - \n- ","source":"_posts/C语言/标准库.md","raw":"---\ntitle: C标准库\ndate: 2025-07-06\ndescription: C语言标准库函数\n---\n\n- `stdio.h`\n    - `void perror(const char* err)`\n- `stdlib.h`\n    - `int system(const char* command)`\n        在windows系统中，system函数直接在控制台调用一个command命令。  在Linux/Unix系统中，system函数会调用fork函数产生子进程，由子进程来执行shell command命令，命令执行完后随即返回原调用的进程。\n    - \n- ","slug":"C语言/标准库","published":1,"updated":"2025-09-14T02:36:11.009Z","comments":1,"layout":"post","photos":[],"_id":"cmfktk7ej0009c04p2t9rfzyd","content":"<ul>\n<li><code>stdio.h</code>\n<ul>\n<li><code>void perror(const char* err)</code></li>\n</ul>\n</li>\n<li><code>stdlib.h</code>\n<ul>\n<li><code>int system(const char* command)</code><br>\n在windows系统中，system函数直接在控制台调用一个command命令。  在Linux/Unix系统中，system函数会调用fork函数产生子进程，由子进程来执行shell command命令，命令执行完后随即返回原调用的进程。</li>\n<li></li>\n</ul>\n</li>\n<li></li>\n</ul>\n","secretKey":"9cacd538b33438659fb7479780f8673745a8ba9f9dd716f8aefb7dcf8c41c17d","iv":"ab5a59f7f52ffebcece5b7b808db2700","encryptedPassword":"3feb8cda78e2a78ac74c4a80c1a005ab","encryptedContent":"eb32a67eb3116c5edb8989cc7cc217b2d7247198d5580ad0b9894a530d94f5f0465c54502f45b53faf05af0537c152267b9428fc30d36e46da0e9f257ba0e88d1fc0ed9d781ee7950ca7a78cc2c71edc902d7cba956f64b8b1820882dfa6d0b8870c5a1ee652cf85081d74cb52ab8807b4ae1b39f3274a89b2b5eddd6c8b5ea14f96877b25f5b090b152b18aa49bf9cbdca2e98928d807e8110f3057861245bb2b584e9db8a14cf4974385a3baa3ec38902d84ad50cea5aa1aef7763e9e8341135975c2b40882b616bd6a3afdd7476e8b57b2329b7614f478a3b663edcdbf757a0e12c65a7f505530242a276c9f6aec2d68c3ecf68b5790e23e4a13682929ddb1e8f3375ceec004a6e5b1fe1329b87ce48959b399d30704cbe7552699f051c808f14ac2afd36e5b172ff3b9df5f9fbcc338a093e01436e7caef5c0edf2ab5779b320092c41406699ac21d71186f5fbbae4f8a8272ee1679ea8909917b6b2117c22b4d536fd6a8bd744c60651e080743e9a1730da196e5338c4b61311fb2e97b70ae38d1d7bf2f1e1e21bff7fd9bab51bfc9d7ed1cf4704073d2a5772b31e6ad489e8a64c97f55e2cfe7cafe8a45c25ca39590eb3fa7ea746d5117746725056022942e3324e5f74a85589e0c47e87351c9ba6330a902a70633384a457be3eb35b","excerpt":"","more":"<ul>\n<li><code>stdio.h</code>\n<ul>\n<li><code>void perror(const char* err)</code></li>\n</ul>\n</li>\n<li><code>stdlib.h</code>\n<ul>\n<li><code>int system(const char* command)</code><br>\n在windows系统中，system函数直接在控制台调用一个command命令。  在Linux/Unix系统中，system函数会调用fork函数产生子进程，由子进程来执行shell command命令，命令执行完后随即返回原调用的进程。</li>\n<li></li>\n</ul>\n</li>\n<li></li>\n</ul>\n"},{"title":"leetcode-1477","date":"2025-07-05T16:00:00.000Z","description":"找到两个和为目标值且不重复的子数组","_content":"\n#### leetcode-1477: 找两个和为目标值且不重复的子数组\n\n- 双指针\n- 动态规划\n\n```cpp\n```\n\n","source":"_posts/LeetCode/leetcode-1477.md","raw":"---\ntitle: leetcode-1477\ndate: 2025-07-06\ndescription: 找到两个和为目标值且不重复的子数组\n---\n\n#### leetcode-1477: 找两个和为目标值且不重复的子数组\n\n- 双指针\n- 动态规划\n\n```cpp\n```\n\n","slug":"LeetCode/leetcode-1477","published":1,"updated":"2025-09-14T02:36:11.009Z","comments":1,"layout":"post","photos":[],"_id":"cmfktk7ek000bc04p13qd8yem","content":"<h4 id=\"leetcode-1477-找两个和为目标值且不重复的子数组\">leetcode-1477: 找两个和为目标值且不重复的子数组</h4>\n<ul>\n<li>双指针</li>\n<li>动态规划</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","secretKey":"8719505b1f660c7296056e4dd1412ff736e8799bc98f45bfc9c8d614cbed1ff0","iv":"4515854f6831b8247822fefc6f2833f2","encryptedPassword":"96aeab38cf248411e53d0e99d594e625","encryptedContent":"8845c546a0bd4b08b0d74bee3a0e7e5dbadd7ebb0dcf53836e9641fce37991af8f058c9ba93c0568f05d7d2a777f2c5fbea30a2b0bb8803268f84d5e43789150617649ff1c5037a3fd1ea3655265e30c40f88864a0d11f9f06d0d5016e7dfebc9b4dad45de91522077c96e567326365dd77a3935c3bee565c557d3a52edd944f534ee8dea44006e25ef9a4dd054256b9e2784071a2dd4d03f57120ddcac3bfc7a3cad634119f6ab058bdfa63cf1e6233dc7973a5e75054a8c5fa5baef476c152b05d58d0511816c118de77769ae911d95a6835accb31788b39354473cb1243c96a14befd6d4876b69f377da8efdde071281ceca699d6b0acab83c718e3f91ac155e3ce4d1e2d8c6b40ed2a758c25687e5f0070129c95d7960154c03d0327d68d24461b6f6c5faff2738fa337f8a4b906c26fc02acff1d242456b3c9ea4a77fbb2d8ccf00ad80fbbf7c858c863970e4c6a8ae06175c48617590ed6a60b99352ec98e8cd99e158b6d2876c7777ff504fd15df433fafa9b9297e5b9852e817100a661cf094fc0ba1471ad02b0706364fe3c","excerpt":"","more":"<h4 id=\"leetcode-1477-找两个和为目标值且不重复的子数组\">leetcode-1477: 找两个和为目标值且不重复的子数组</h4>\n<ul>\n<li>双指针</li>\n<li>动态规划</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"leetcode-31","date":"2025-07-05T16:00:00.000Z","description":"下一个排列","_content":"\n### leetcode-31：下一个排列\n\n题目描述：[下一个排列](https://leetcode.cn/problems/next-permutation/description/)。\n\n#### 解题思路：\n\n\n\n#### 实现：\n\n","source":"_posts/LeetCode/leetcode-31.md","raw":"---\ntitle: leetcode-31\ndate: 2025-07-06\ndescription: 下一个排列\n---\n\n### leetcode-31：下一个排列\n\n题目描述：[下一个排列](https://leetcode.cn/problems/next-permutation/description/)。\n\n#### 解题思路：\n\n\n\n#### 实现：\n\n","slug":"LeetCode/leetcode-31","published":1,"updated":"2025-09-14T02:36:11.009Z","comments":1,"layout":"post","photos":[],"_id":"cmfktk7ek000dc04pdd67489b","content":"<h3 id=\"leetcode-31：下一个排列\">leetcode-31：下一个排列</h3>\n<p>题目描述：<a class=\"link\"   href=\"https://leetcode.cn/problems/next-permutation/description/\" >下一个排列<i class=\"fas fa-external-link-alt\"></i></a>。</p>\n<h4 id=\"解题思路：\">解题思路：</h4>\n<h4 id=\"实现：\">实现：</h4>\n","secretKey":"7b7956abc38d7381ffaa3bbcd84febc11a53a6790a38aae8071e35caf0132c78","iv":"f9c732a3c1906ed07dc6777c68320295","encryptedPassword":"5a80f416fd5eee858c57c3910693707d","encryptedContent":"c7dc1b3907da341b38555718bbac7d41cc0ab84c6ac5437d5ac338baaf3746cf5fd15198bf1bc7e827ca4fdfff14f8a775cc47266b7b9760287d5f081e950704ec5591d9047a9dba821e7e72297b24c4bd74bee9fa9c941be58c6f1c20f5781981a820230430c542b447d7b3e56f00fba92e876509d0a7459f76ac00f5151130d497aeb45e27dc6de67fb426d0a1c61dcb356125af7743238a48482f1aa9f027a3b93510b77f0dd8518d196ba39cf57be5d5699cafb6e9fb5cad964c38b5d4fa748fdb2a567ce14ac985a5fc87640b62f1c203aee63fc831f669c10afbe272e9abc80a4b2b396a8a79066c5805457e358fe4d0cbcb2f61ed1a7bee72c60bf698596766b87a9496bdfa2554cc52af9beb0a5683491c7531a584c2f563d1c7f6adbad25355217cee28c65dd74c03c1adc5ee7e27c71e38f08464c74c026ca81076762a3561b2d9cc0880e98a15fef560ea","excerpt":"","more":"<h3 id=\"leetcode-31：下一个排列\">leetcode-31：下一个排列</h3>\n<p>题目描述：<a class=\"link\"   href=\"https://leetcode.cn/problems/next-permutation/description/\" >下一个排列<i class=\"fas fa-external-link-alt\"></i></a>。</p>\n<h4 id=\"解题思路：\">解题思路：</h4>\n<h4 id=\"实现：\">实现：</h4>\n"},{"title":"Markdown语法测试文章","date":"2025-07-05T16:00:00.000Z","description":"Markdown渲染效果测试","_content":"\n## 关于Mdmdt主题\n**Mdmdt **是 markdown minimalism document theme 的缩写，意为: **Markdown极简文档主题**。\n**Mdmdt**[^1]是深度定制的个性化Typora主题，其目的是打造一个**清爽极简**的文档样式。\n\n> [!NOte]\n>\n> **注意：**mdmdt.css 文件中包含了亮色和暗色两者主题，会跟随系统模式自动切换亮暗主题。 `This is a single line code style`\n>\n> **Attention:** The MDMDT.CSS file contains both light and dark themes, which will automatically switch between light and dark themes according to the system mode.\n\n## 文本\n这是一段正文内容样式，以下是不同文本样式效果：**这是加粗文本样式**, <u>这是下划线样式</u>, *这是斜体字样式*,  [这是超链接样式: https://github.com/cayxc/mdmdt](https://github.com/cayxc/mdmdt),  `This is a single line code style`,  ~~这是删除线效果样式~~,  ==这是文字高亮效果==，上下标样式: $\\LaTeX$, X^2^, H~2~O, <span style='background:var(--color-2-0-c)'> 这是鼠标选中效果 </span>,  键盘键样式：<kbd>Command+Q</kbd> 🐳 😀 🇨🇳\n\nThis is a text content style and the following are the effects of different text styles: **This is a bold text style**,  [This is a hyperlink style: https://github.com/cayxc/mdmdt](https://github.com/cayxc/mdmdt), *This is the italic font style*, ~~This is the strikethrough effect style~~, <u>This is the underline style</u>, `This is a single line code style`,  keyboard key style: <kbd>Command+Q</kbd>,  $\\text{LaTeX}$ X^2^H~2~O, ==This is the text highlighting effect==, <span style='background:var(--color-2-0-c)'>This is the mouse selection effect</span>  🐳 😀 🇨🇳\n\n<!-- 这是注释内容......, This is the annotation content -->\n\n## 数学公式\n\n直接使用公式：\n\n$$\n\\alpha=\n\\begin{pmatrix}\na & b & c \\\\\nd & e & f \\\\\ng & h & i \n\\end{pmatrix} \n$$\n\n$$\nx = a + b\n$$\n\n$$\n\\begin{aligned} I &=\\int_0^{ct}\\frac{r}{\\sqrt{c^2t^2 -r^2}}\\int_0^{2\\pi} m^2(m+n) d\\theta dr\\&=\\int_0^{ct}\\frac{r}{\\sqrt{c^2t^2 -r^2}}\\end{aligned}\n$$\n\n$代入公式得到：$---$u(t,x,y) = (3x+y) c^2 t^2 + x^2(x+y)$\n\n$$\nu(t,x,y) = \\frac{1}{2\\pi c} \\frac{\\partial}{\\partial t} \\iint\\limits_{r<ct} \\frac{m^2(m+n)}{\\sqrt{c^2t^2 -r^2 }}dmdn\n$$\n\n## 列表\n\n这些是列表样式效果:\n\n\n1. 这是有序列表 A\n2. 这是有序列表 B\n\n- This is Item 1.\n- This is Item 2.\n- [ ] Something is Not TODO.\n- [x] Something is DONE.\n\n---\n\n1. 这是有序列表 A\n2. 这是有序列表 B\n    1. 这是有序列表 A\n    2. 这是有序列表 B\n\n- This is Item 1.\n- This is Item 2.\n    - This is Item 1.\n    - This is Item 2.\n\n---\n\n这是嵌套列表样式：\n\n1. 这是有序列表 A\n2. 这是有序列表 B\n    - This is Item 1.\n    - This is Item 2.\n        - [x] Something is Not TODO.\n        - [ ] Something is DONE.\n\n- 这是有序列表 A\n- 这是有序列表 B\n    1. This is Item 1.\n    2. This is Item 2.\n        - [ ] Something is Not TODO.\n        - [x] Something is DONE.\n\n## 代码\n\n单行代码样式：`composer require --dev barryvdh/laravel-ide-helper`\n\n大段代码块样式：\n\n```javascript\n/**\n  * ----------------------------------------\n  * 设置递增的 level 编号\n  * ----------------------------------------\n  * @param tag obj 标签对象\n  */\nsetLevelNumber(tag){\n   try {\n     if ((typeof tag) != 'object') {\n       throw 'setLevelNumber() 调用时参数类型错误，必须是一个h标签的对象集合！';\n     }\n     let str = tag.id;\n     if (str.lastIndexOf('.') == -1) { //如果是一级目录形式 level-1000\n       let newValue = parseInt(str.slice(6)) + 1;\n       return 'level-' + newValue;\n     }\n   } catch (err) {\n     return err;\n   }\n}\n```\n\n## 表格样式\n\n| Left-Aligned            |                Center Aligned                | Right Aligned |\n| :---------------------- | :------------------------------------------: | ------------: |\n| This is the first line  | `this is code` some wordy text and some code |          $160 |\n| This is the second line |      some code: `this is code` centered      |      $1200.99 |\n| This is the third line  |             These are some texts             |        $125.5 |\n\n## 引用文本框\n\n> [!NOTE]\n>\n> This is a Note text box ...... `this is code style`\n> > \n> > This is a Note text box ......\n\n> [!TIP]\n>\n> - `this is code` This is a Tip text box ......\n>\n> - 代码段：\n> > ```bash\n> >   these are  codes...\n> >   ...\n> > ```\n>\n> - This is a Tip text box ......\n>\n> 1. This is itemA\n> 1. This is itemB\n> 1. This is itemC\n\n> [!IMPORTANT]\n>\n> This is a Important text box ......\n>\n\n> [!WARNING]\n>\n> This is a Warning text box ......\n\n> [!CAUTION]\n>\n> `this is  code` This is a Caution text box ......\n\n## 个性化图文布局\n### 单张图片\n\n![](https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt.png)\n\n### 多图并排\n\n图片的个性化排列使用方式是将图片放到一个容器中，该容器为 `<section>`  标签，如下所示:\n\n1. 直接输入`<section>` 然后回车，如下：\n\n2. ```html\n   <section>\n   </section>\n   ```\n   \n3. 在 `<section>` 标签中插入图片，如下：\n\n```html\n   <section>\n     <!-- 想要几张图并排，就在此处插入几个 <img> 标签: <img src=\"图片的相对路径/绝对路径\"></img> -->   \n     <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-code.png\"></img>\n     <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-source.png\" style=\"width: 200px\"></img> <!-- 单独设置图片的宽度为200px -->\n     <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-title.png\"></img>\n   </section>\n```\n\n**效果预览**：\n\n<section>\n <img src=\"https://raw.gitcode.com/Li2112183373/image/blobs/22baa3d7eb76500687b96fb3f175ae03d02cf49c/mdmdt-math.png\"></img>\n <img src=\"https://raw.gitcode.com/Li2112183373/image/blobs/22baa3d7eb76500687b96fb3f175ae03d02cf49c/mdmdt-list.png\"></img>\n</section>\n\n\n---\n\n<section>\n <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-code.png\"></img>\n <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-ui-1.png\" style=\"width: 200px\"></img>\n <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png\"></img>\n</section>\n\n\n---\n\n\n\n### 多张图其他排列方式\n\n一张大图在左，多张小图在右的图片排列，如下：\n\n```html\n<!-- 一张大图在左，多张小图在右 -->\n<section> \n  <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-ui-1.png\"></img> <!-- 这是第1列 -->\n  <span style=\"width: 240px\">  <!-- 这是第2列 -->\n     <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-ui-2.png\"></img>\n \t <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-code.png\"></img>\n\t <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdtht-dark.png\"></img>\n  </span>\n</section>\n```\n**效果预览**：\n\n<section>\n <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdtht-light.png\"></img>\n <span style=\"width: 240px\">\n    <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-ui-1.png\"></img>\n \t<img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-code.png\"></img>\n\t<img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-dark\"></img>\n </span>\n</section>\n\n\n---\n\n一张大图在右，多张小图在左的图片排列，如下：\n\n```html\n<!-- 一张大图在右，多张小图在左 -->\n<section> \n <span style=\"width: 240px\"> <!-- 这是第1列 -->\n    <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-ui-2.png\"></img>\n \t<img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-code.png\"></img>\n\t<img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdtht-dark.png\"></img>\n </span>\n <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-ui-1.png\"></img> <!-- 这是第2列 -->\n</section>\n```\n**效果预览**：\n\n<section> \n <span style=\"width: 240px\">\n    <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-ui-1.png\"></img>\n    <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-ui-2.png\"></img>\n\t<img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdtht-dark.png\"></img>\n </span>\n <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdtht-light.png\"></img>\n</section>\n\n\n\n### 图文并排\n\n图文的个性化排列使用方式是将图片和文字放到一个容器中，该容器为 `<section>`  标签，如下所示:\n\n1. 直接输入 `<section>` 然后回车，如下：\n\n2. ```html\n   <section>\n       \n   </section>\n   ```\n\n3. 在 `<section>` 标签中插入图片和文字，如下：\n\n4. ```html\n   <!-- 图片和单段文字排列示例 -->\n   <section>\n       <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png\"></img>  <!-- 这是第1列 -->\n   \t<span>这是文字在右，图片在左，图片和文字各占总宽度的50%的图文并排的样式。</span> <!-- 这是第2列 -->\n   </section>\n   \n   \n   <!-- 图片和单段文字排列示例 -->\n   <section>\n   \t<span>这是文字在左，图片在右，图片和文字各占总宽度的50%的图文并排的样式。</span> \n       <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png\"></img>  \n   </section>\n   \n   \n   <!-- 图片和多段文字排列示例 -->\n   <section>\n       <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png\"></img> <!-- 这是第1列 -->\n       <span style=\"width: 150px\">  <!-- 这是第2列，且单独设置该列的宽度为150px -->\n           <span>这是多段文字......</span> \n           <span>这是文字在右，图片在左，图片和文字各占总宽度的50%的图文并排的样式。</span>\n           <span>这是多段文字......</span> \n   \t</span>\n   </section>\n   \n   \n   <!-- 图片居中，文字在两边的排列示例 -->\n   <section>\n       <span>这是第1列，这是图片居中，文字在两边的样式</span> <!-- 这是第1列 -->\n       <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdtht-dark.png\"></img>  <!-- 这是第2列, 单独设置图片的宽度为200px -->\n   \t<span>这是第3列，列的宽度比第1列小</span>          <!-- 这是第3列 -->\n   </section>\n   ```\n\n**效果预览**：\n\n<section>\n    <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-title.png\"></img> \n\t<span>这是单段文字，文字在右，图片在左，图片和文字各占总宽度的50%的图文并排的样式。</span> \n</section>\n\n\n---\n\n<section>\n\t<span>这是单段文字，文字在左，图片在右，图片和文字各占总宽度的50%的图文并排的样式。</span> <!-- 这是第1列 -->\n    <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-title.png\"></img>  <!-- 这是第2列 -->\n</section>\n\n\n---\n\n<section>\n    <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-title.png\"></img>\n    <span>\n        <span>这是多段文字......</span>\n        <span>这是文字在右，图片在左，图片和文字各占总宽度的50%的图文并排的样式。</span>\n        <span>这是多段文字......</span>\n\t</span>\n</section>\n\n\n---\n\n<section>\n    <span>这是第1列内容<br>这是图片居中，两边是文字，且两边文字设置相同宽度的样式</span> <!-- 这是第1列 -->\n    <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdtht-dark.png\"></img> <!-- 这是第2列 -->\n\t<span>这是第3列内容<br>这是图片居中，两边是文字，且两边文字设置相同宽度的样式</span> <!-- 这是第3列 -->\n</section>\n\n\n\n\n\n<section>\n    <span>这是中间是图片，两边是文字的图文样式<br>需要注意：该列文字内容较多，且未设置宽度。<strong>列的宽度比第3列大</strong></span>\n    <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdtht-dark.png\"></img>\n\t<span>这是第3列内容</span>\n</section>\n\n\n\n---\n\n图片和文字，图片设置宽度示例：\n\n```html\n<!-- 这是文字在右，图片在左的示例 -->\n<section>\n   <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png\" style=\"width:200px\"></img>\n   <span>这是文字在右，图片在左，且设置图片的宽度（如图片宽可以设置为：200px）的图文并排的样式。</span>\n</section>\n\n<!-- 这是文字在左，图片在右的示例 -->\n<section>\n    <span>这是文字在左，图片在右，设置图片宽度为 200px 的图文并排的样式！</span>\n    <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png\" style=\"width:200px\"></img>\n</section>\n```\n**效果预览**：\n\n---\n\n<section>\n   <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-title.png\" style=\"width:400px\"></img>\n   <span>这是文字在右，图片在左，且设置图片宽度（如图片宽可以设置为：400px）的图文并排的样式。</span>\n</section>\n\n<section>\n    <span>这是文字在左，图片在右，且设置图片宽度为 200px 的图文并排的样式！</span>\n    <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-title.png\" style=\"width:200px\"></img>\n</section>\n\n\n\n\n---\n\n> [!Important]\n>\n> **注意：**\n>\n> 由于图片排列的容器 `<section>` 采用的是grid布局，会根据 `<section>` 中有几列和每列里的内容自动分配每一列的宽度。\n>\n> 在进行图片、图片和文字排列时，如果将某一列的宽度设置为 xx%的形式，则该列的实际宽度并<u>不一定是内容区宽度的 xx%</u>，而是 `<section>` 容器中当前列宽度的 xx%，且当前列的宽度还受到了里面内容的影响。\n>\n> **基于以上原因，建议在单独设置某一列宽度的时候，尽可能采用具体的值（如: style=\"width: 200px\"），不要采用 xx%（如: style=\"width: 50%\"）的形式。**\n>\n> 示例：\n>\n> ```html\n> <!-- <section> 排列图片的容器，宽度为内容区（也就是书写区）的宽度 -->\n> <section>\n>    \t<!-- 此时是2列 -->\n>    \t<img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdtht-dark.png\"></img>\n>  \t<!-- 此处的 width:50% ，实际只有内容区宽度的25%（一共2列，每一列宽度50%，50%*50% => 25%）-->\n>      <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdtht-dark.png\" style=\"width:50%\"></img> \n> </section>\n> \n> <section>\n>    \t<!-- 此时是3列： img, span, span -->\n>    \t<img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png\"></img>  <!-- 第1列 -->\n> \t<span>....</span>  <!-- 第2列 -->\n> \t<span>             <!-- 第3列 -->\n>    \t<span>这是其段落他文字...</span>\n>             <!-- 此处的 width:50% ，实际只有内容区宽度的16.5%（一共3列，每一列宽度33.33%，33.33%*50% => 16.65%）-->\n>             <span style=\"width:50%\">这是多段文字</span>\n>             <span>这是其段落他文字...</span>\n> \t</span>\n> </section>\n> ```\n\n除了以上展示的排列方式，更多的排列形式，还请自行探索 ......\n\n## 图表Mermaid\n\n以下是 **Mermaid图表** 部分示例，更多图表类型请参考：[Mermaid图表](https://mermaid.js.org)\n\n```mermaid\nflowchart LR\n    A[Hard edge] -->|Link text| B(Round edge)\n    B --> C{Decision}\n    C -->|One| D[Result one]\n    C -->|Two| E[Result two]\n```\n```mermaid\nstateDiagram-v2\n    [*] --> Active\n\n    state Active {\n        [*] --> NumLockOff\n        NumLockOff --> NumLockOn : EvNumLockPressed\n        NumLockOn --> NumLockOff : EvNumLockPressed\n        --\n        [*] --> CapsLockOff\n        CapsLockOff --> CapsLockOn : EvCapsLockPressed\n        CapsLockOn --> CapsLockOff : EvCapsLockPressed\n        --\n        [*] --> ScrollLockOff\n        ScrollLockOff --> ScrollLockOn : EvScrollLockPressed\n        ScrollLockOn --> ScrollLockOff : EvScrollLockPressed\n    }\n```\n\n```mermaid\ngantt\n    dateFormat  YYYY-MM-DD\n    title       Adding GANTT diagram functionality to mermaid\n    excludes    weekends\n    %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\"sunday\") or \"weekends\", but not the word \"weekdays\".)\n\n    section A section\n    Completed task            :done,    des1, 2014-01-06,2014-01-08\n    Active task               :active,  des2, 2014-01-09, 3d\n    Future task               :         des3, after des2, 5d\n    Future task2              :         des4, after des3, 5d\n\n    section Critical tasks\n    Completed task in the critical line :crit, done, 2014-01-06,24h\n    Implement parser and jison          :crit, done, after des1, 2d\n    Create tests for parser             :crit, active, 3d\n    Future task in critical line        :crit, 5d\n    Create tests for renderer           :2d\n    Add to mermaid                      :until isadded\n    Functionality added                 :milestone, isadded, 2014-01-25, 0d\n\n    section Documentation\n    Describe gantt syntax               :active, a1, after des1, 3d\n    Add gantt diagram to demo page      :after a1  , 20h\n    Add another diagram to demo page    :doc1, after a1  , 48h\n\n    section Last section\n    Describe gantt syntax               :after doc1, 3d\n    Add gantt diagram to demo page      :20h\n    Add another diagram to demo page    :48h\n```\n\n### Flowchart\n\n### Sequence Diagram\n\n### State Diagram\n\n\n# 一级标题1\n\n## 二级标题2\n\n### 三级标题3\n\n#### 四级标题4\n##### 五级标题5\n\n###### 六级标题6\n\n# TOC目录\n\n以下是 [TOC] 目录样式\n\n[TOC]\t\n\n","source":"_posts/主题样例/Mdmdt主题演示demo.md","raw":"---\ntitle: Markdown语法测试文章\ndate: 2025-07-06\ndescription: Markdown渲染效果测试\ncategories: 测试\ntags: 测试\n---\n\n## 关于Mdmdt主题\n**Mdmdt **是 markdown minimalism document theme 的缩写，意为: **Markdown极简文档主题**。\n**Mdmdt**[^1]是深度定制的个性化Typora主题，其目的是打造一个**清爽极简**的文档样式。\n\n> [!NOte]\n>\n> **注意：**mdmdt.css 文件中包含了亮色和暗色两者主题，会跟随系统模式自动切换亮暗主题。 `This is a single line code style`\n>\n> **Attention:** The MDMDT.CSS file contains both light and dark themes, which will automatically switch between light and dark themes according to the system mode.\n\n## 文本\n这是一段正文内容样式，以下是不同文本样式效果：**这是加粗文本样式**, <u>这是下划线样式</u>, *这是斜体字样式*,  [这是超链接样式: https://github.com/cayxc/mdmdt](https://github.com/cayxc/mdmdt),  `This is a single line code style`,  ~~这是删除线效果样式~~,  ==这是文字高亮效果==，上下标样式: $\\LaTeX$, X^2^, H~2~O, <span style='background:var(--color-2-0-c)'> 这是鼠标选中效果 </span>,  键盘键样式：<kbd>Command+Q</kbd> 🐳 😀 🇨🇳\n\nThis is a text content style and the following are the effects of different text styles: **This is a bold text style**,  [This is a hyperlink style: https://github.com/cayxc/mdmdt](https://github.com/cayxc/mdmdt), *This is the italic font style*, ~~This is the strikethrough effect style~~, <u>This is the underline style</u>, `This is a single line code style`,  keyboard key style: <kbd>Command+Q</kbd>,  $\\text{LaTeX}$ X^2^H~2~O, ==This is the text highlighting effect==, <span style='background:var(--color-2-0-c)'>This is the mouse selection effect</span>  🐳 😀 🇨🇳\n\n<!-- 这是注释内容......, This is the annotation content -->\n\n## 数学公式\n\n直接使用公式：\n\n$$\n\\alpha=\n\\begin{pmatrix}\na & b & c \\\\\nd & e & f \\\\\ng & h & i \n\\end{pmatrix} \n$$\n\n$$\nx = a + b\n$$\n\n$$\n\\begin{aligned} I &=\\int_0^{ct}\\frac{r}{\\sqrt{c^2t^2 -r^2}}\\int_0^{2\\pi} m^2(m+n) d\\theta dr\\&=\\int_0^{ct}\\frac{r}{\\sqrt{c^2t^2 -r^2}}\\end{aligned}\n$$\n\n$代入公式得到：$---$u(t,x,y) = (3x+y) c^2 t^2 + x^2(x+y)$\n\n$$\nu(t,x,y) = \\frac{1}{2\\pi c} \\frac{\\partial}{\\partial t} \\iint\\limits_{r<ct} \\frac{m^2(m+n)}{\\sqrt{c^2t^2 -r^2 }}dmdn\n$$\n\n## 列表\n\n这些是列表样式效果:\n\n\n1. 这是有序列表 A\n2. 这是有序列表 B\n\n- This is Item 1.\n- This is Item 2.\n- [ ] Something is Not TODO.\n- [x] Something is DONE.\n\n---\n\n1. 这是有序列表 A\n2. 这是有序列表 B\n    1. 这是有序列表 A\n    2. 这是有序列表 B\n\n- This is Item 1.\n- This is Item 2.\n    - This is Item 1.\n    - This is Item 2.\n\n---\n\n这是嵌套列表样式：\n\n1. 这是有序列表 A\n2. 这是有序列表 B\n    - This is Item 1.\n    - This is Item 2.\n        - [x] Something is Not TODO.\n        - [ ] Something is DONE.\n\n- 这是有序列表 A\n- 这是有序列表 B\n    1. This is Item 1.\n    2. This is Item 2.\n        - [ ] Something is Not TODO.\n        - [x] Something is DONE.\n\n## 代码\n\n单行代码样式：`composer require --dev barryvdh/laravel-ide-helper`\n\n大段代码块样式：\n\n```javascript\n/**\n  * ----------------------------------------\n  * 设置递增的 level 编号\n  * ----------------------------------------\n  * @param tag obj 标签对象\n  */\nsetLevelNumber(tag){\n   try {\n     if ((typeof tag) != 'object') {\n       throw 'setLevelNumber() 调用时参数类型错误，必须是一个h标签的对象集合！';\n     }\n     let str = tag.id;\n     if (str.lastIndexOf('.') == -1) { //如果是一级目录形式 level-1000\n       let newValue = parseInt(str.slice(6)) + 1;\n       return 'level-' + newValue;\n     }\n   } catch (err) {\n     return err;\n   }\n}\n```\n\n## 表格样式\n\n| Left-Aligned            |                Center Aligned                | Right Aligned |\n| :---------------------- | :------------------------------------------: | ------------: |\n| This is the first line  | `this is code` some wordy text and some code |          $160 |\n| This is the second line |      some code: `this is code` centered      |      $1200.99 |\n| This is the third line  |             These are some texts             |        $125.5 |\n\n## 引用文本框\n\n> [!NOTE]\n>\n> This is a Note text box ...... `this is code style`\n> > \n> > This is a Note text box ......\n\n> [!TIP]\n>\n> - `this is code` This is a Tip text box ......\n>\n> - 代码段：\n> > ```bash\n> >   these are  codes...\n> >   ...\n> > ```\n>\n> - This is a Tip text box ......\n>\n> 1. This is itemA\n> 1. This is itemB\n> 1. This is itemC\n\n> [!IMPORTANT]\n>\n> This is a Important text box ......\n>\n\n> [!WARNING]\n>\n> This is a Warning text box ......\n\n> [!CAUTION]\n>\n> `this is  code` This is a Caution text box ......\n\n## 个性化图文布局\n### 单张图片\n\n![](https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt.png)\n\n### 多图并排\n\n图片的个性化排列使用方式是将图片放到一个容器中，该容器为 `<section>`  标签，如下所示:\n\n1. 直接输入`<section>` 然后回车，如下：\n\n2. ```html\n   <section>\n   </section>\n   ```\n   \n3. 在 `<section>` 标签中插入图片，如下：\n\n```html\n   <section>\n     <!-- 想要几张图并排，就在此处插入几个 <img> 标签: <img src=\"图片的相对路径/绝对路径\"></img> -->   \n     <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-code.png\"></img>\n     <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-source.png\" style=\"width: 200px\"></img> <!-- 单独设置图片的宽度为200px -->\n     <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-title.png\"></img>\n   </section>\n```\n\n**效果预览**：\n\n<section>\n <img src=\"https://raw.gitcode.com/Li2112183373/image/blobs/22baa3d7eb76500687b96fb3f175ae03d02cf49c/mdmdt-math.png\"></img>\n <img src=\"https://raw.gitcode.com/Li2112183373/image/blobs/22baa3d7eb76500687b96fb3f175ae03d02cf49c/mdmdt-list.png\"></img>\n</section>\n\n\n---\n\n<section>\n <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-code.png\"></img>\n <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-ui-1.png\" style=\"width: 200px\"></img>\n <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png\"></img>\n</section>\n\n\n---\n\n\n\n### 多张图其他排列方式\n\n一张大图在左，多张小图在右的图片排列，如下：\n\n```html\n<!-- 一张大图在左，多张小图在右 -->\n<section> \n  <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-ui-1.png\"></img> <!-- 这是第1列 -->\n  <span style=\"width: 240px\">  <!-- 这是第2列 -->\n     <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-ui-2.png\"></img>\n \t <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-code.png\"></img>\n\t <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdtht-dark.png\"></img>\n  </span>\n</section>\n```\n**效果预览**：\n\n<section>\n <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdtht-light.png\"></img>\n <span style=\"width: 240px\">\n    <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-ui-1.png\"></img>\n \t<img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-code.png\"></img>\n\t<img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-dark\"></img>\n </span>\n</section>\n\n\n---\n\n一张大图在右，多张小图在左的图片排列，如下：\n\n```html\n<!-- 一张大图在右，多张小图在左 -->\n<section> \n <span style=\"width: 240px\"> <!-- 这是第1列 -->\n    <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-ui-2.png\"></img>\n \t<img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-code.png\"></img>\n\t<img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdtht-dark.png\"></img>\n </span>\n <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-ui-1.png\"></img> <!-- 这是第2列 -->\n</section>\n```\n**效果预览**：\n\n<section> \n <span style=\"width: 240px\">\n    <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-ui-1.png\"></img>\n    <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-ui-2.png\"></img>\n\t<img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdtht-dark.png\"></img>\n </span>\n <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdtht-light.png\"></img>\n</section>\n\n\n\n### 图文并排\n\n图文的个性化排列使用方式是将图片和文字放到一个容器中，该容器为 `<section>`  标签，如下所示:\n\n1. 直接输入 `<section>` 然后回车，如下：\n\n2. ```html\n   <section>\n       \n   </section>\n   ```\n\n3. 在 `<section>` 标签中插入图片和文字，如下：\n\n4. ```html\n   <!-- 图片和单段文字排列示例 -->\n   <section>\n       <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png\"></img>  <!-- 这是第1列 -->\n   \t<span>这是文字在右，图片在左，图片和文字各占总宽度的50%的图文并排的样式。</span> <!-- 这是第2列 -->\n   </section>\n   \n   \n   <!-- 图片和单段文字排列示例 -->\n   <section>\n   \t<span>这是文字在左，图片在右，图片和文字各占总宽度的50%的图文并排的样式。</span> \n       <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png\"></img>  \n   </section>\n   \n   \n   <!-- 图片和多段文字排列示例 -->\n   <section>\n       <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png\"></img> <!-- 这是第1列 -->\n       <span style=\"width: 150px\">  <!-- 这是第2列，且单独设置该列的宽度为150px -->\n           <span>这是多段文字......</span> \n           <span>这是文字在右，图片在左，图片和文字各占总宽度的50%的图文并排的样式。</span>\n           <span>这是多段文字......</span> \n   \t</span>\n   </section>\n   \n   \n   <!-- 图片居中，文字在两边的排列示例 -->\n   <section>\n       <span>这是第1列，这是图片居中，文字在两边的样式</span> <!-- 这是第1列 -->\n       <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdtht-dark.png\"></img>  <!-- 这是第2列, 单独设置图片的宽度为200px -->\n   \t<span>这是第3列，列的宽度比第1列小</span>          <!-- 这是第3列 -->\n   </section>\n   ```\n\n**效果预览**：\n\n<section>\n    <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-title.png\"></img> \n\t<span>这是单段文字，文字在右，图片在左，图片和文字各占总宽度的50%的图文并排的样式。</span> \n</section>\n\n\n---\n\n<section>\n\t<span>这是单段文字，文字在左，图片在右，图片和文字各占总宽度的50%的图文并排的样式。</span> <!-- 这是第1列 -->\n    <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-title.png\"></img>  <!-- 这是第2列 -->\n</section>\n\n\n---\n\n<section>\n    <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-title.png\"></img>\n    <span>\n        <span>这是多段文字......</span>\n        <span>这是文字在右，图片在左，图片和文字各占总宽度的50%的图文并排的样式。</span>\n        <span>这是多段文字......</span>\n\t</span>\n</section>\n\n\n---\n\n<section>\n    <span>这是第1列内容<br>这是图片居中，两边是文字，且两边文字设置相同宽度的样式</span> <!-- 这是第1列 -->\n    <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdtht-dark.png\"></img> <!-- 这是第2列 -->\n\t<span>这是第3列内容<br>这是图片居中，两边是文字，且两边文字设置相同宽度的样式</span> <!-- 这是第3列 -->\n</section>\n\n\n\n\n\n<section>\n    <span>这是中间是图片，两边是文字的图文样式<br>需要注意：该列文字内容较多，且未设置宽度。<strong>列的宽度比第3列大</strong></span>\n    <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdtht-dark.png\"></img>\n\t<span>这是第3列内容</span>\n</section>\n\n\n\n---\n\n图片和文字，图片设置宽度示例：\n\n```html\n<!-- 这是文字在右，图片在左的示例 -->\n<section>\n   <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png\" style=\"width:200px\"></img>\n   <span>这是文字在右，图片在左，且设置图片的宽度（如图片宽可以设置为：200px）的图文并排的样式。</span>\n</section>\n\n<!-- 这是文字在左，图片在右的示例 -->\n<section>\n    <span>这是文字在左，图片在右，设置图片宽度为 200px 的图文并排的样式！</span>\n    <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png\" style=\"width:200px\"></img>\n</section>\n```\n**效果预览**：\n\n---\n\n<section>\n   <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-title.png\" style=\"width:400px\"></img>\n   <span>这是文字在右，图片在左，且设置图片宽度（如图片宽可以设置为：400px）的图文并排的样式。</span>\n</section>\n\n<section>\n    <span>这是文字在左，图片在右，且设置图片宽度为 200px 的图文并排的样式！</span>\n    <img src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-title.png\" style=\"width:200px\"></img>\n</section>\n\n\n\n\n---\n\n> [!Important]\n>\n> **注意：**\n>\n> 由于图片排列的容器 `<section>` 采用的是grid布局，会根据 `<section>` 中有几列和每列里的内容自动分配每一列的宽度。\n>\n> 在进行图片、图片和文字排列时，如果将某一列的宽度设置为 xx%的形式，则该列的实际宽度并<u>不一定是内容区宽度的 xx%</u>，而是 `<section>` 容器中当前列宽度的 xx%，且当前列的宽度还受到了里面内容的影响。\n>\n> **基于以上原因，建议在单独设置某一列宽度的时候，尽可能采用具体的值（如: style=\"width: 200px\"），不要采用 xx%（如: style=\"width: 50%\"）的形式。**\n>\n> 示例：\n>\n> ```html\n> <!-- <section> 排列图片的容器，宽度为内容区（也就是书写区）的宽度 -->\n> <section>\n>    \t<!-- 此时是2列 -->\n>    \t<img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdtht-dark.png\"></img>\n>  \t<!-- 此处的 width:50% ，实际只有内容区宽度的25%（一共2列，每一列宽度50%，50%*50% => 25%）-->\n>      <img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdtht-dark.png\" style=\"width:50%\"></img> \n> </section>\n> \n> <section>\n>    \t<!-- 此时是3列： img, span, span -->\n>    \t<img src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png\"></img>  <!-- 第1列 -->\n> \t<span>....</span>  <!-- 第2列 -->\n> \t<span>             <!-- 第3列 -->\n>    \t<span>这是其段落他文字...</span>\n>             <!-- 此处的 width:50% ，实际只有内容区宽度的16.5%（一共3列，每一列宽度33.33%，33.33%*50% => 16.65%）-->\n>             <span style=\"width:50%\">这是多段文字</span>\n>             <span>这是其段落他文字...</span>\n> \t</span>\n> </section>\n> ```\n\n除了以上展示的排列方式，更多的排列形式，还请自行探索 ......\n\n## 图表Mermaid\n\n以下是 **Mermaid图表** 部分示例，更多图表类型请参考：[Mermaid图表](https://mermaid.js.org)\n\n```mermaid\nflowchart LR\n    A[Hard edge] -->|Link text| B(Round edge)\n    B --> C{Decision}\n    C -->|One| D[Result one]\n    C -->|Two| E[Result two]\n```\n```mermaid\nstateDiagram-v2\n    [*] --> Active\n\n    state Active {\n        [*] --> NumLockOff\n        NumLockOff --> NumLockOn : EvNumLockPressed\n        NumLockOn --> NumLockOff : EvNumLockPressed\n        --\n        [*] --> CapsLockOff\n        CapsLockOff --> CapsLockOn : EvCapsLockPressed\n        CapsLockOn --> CapsLockOff : EvCapsLockPressed\n        --\n        [*] --> ScrollLockOff\n        ScrollLockOff --> ScrollLockOn : EvScrollLockPressed\n        ScrollLockOn --> ScrollLockOff : EvScrollLockPressed\n    }\n```\n\n```mermaid\ngantt\n    dateFormat  YYYY-MM-DD\n    title       Adding GANTT diagram functionality to mermaid\n    excludes    weekends\n    %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\"sunday\") or \"weekends\", but not the word \"weekdays\".)\n\n    section A section\n    Completed task            :done,    des1, 2014-01-06,2014-01-08\n    Active task               :active,  des2, 2014-01-09, 3d\n    Future task               :         des3, after des2, 5d\n    Future task2              :         des4, after des3, 5d\n\n    section Critical tasks\n    Completed task in the critical line :crit, done, 2014-01-06,24h\n    Implement parser and jison          :crit, done, after des1, 2d\n    Create tests for parser             :crit, active, 3d\n    Future task in critical line        :crit, 5d\n    Create tests for renderer           :2d\n    Add to mermaid                      :until isadded\n    Functionality added                 :milestone, isadded, 2014-01-25, 0d\n\n    section Documentation\n    Describe gantt syntax               :active, a1, after des1, 3d\n    Add gantt diagram to demo page      :after a1  , 20h\n    Add another diagram to demo page    :doc1, after a1  , 48h\n\n    section Last section\n    Describe gantt syntax               :after doc1, 3d\n    Add gantt diagram to demo page      :20h\n    Add another diagram to demo page    :48h\n```\n\n### Flowchart\n\n### Sequence Diagram\n\n### State Diagram\n\n\n# 一级标题1\n\n## 二级标题2\n\n### 三级标题3\n\n#### 四级标题4\n##### 五级标题5\n\n###### 六级标题6\n\n# TOC目录\n\n以下是 [TOC] 目录样式\n\n[TOC]\t\n\n","slug":"主题样例/Mdmdt主题演示demo","published":1,"updated":"2025-09-15T07:30:03.131Z","comments":1,"layout":"post","photos":[],"_id":"cmfktk7el000fc04p6m0vc6ct","content":"<h2 id=\"关于Mdmdt主题\">关于Mdmdt主题</h2>\n<p><strong>Mdmdt <strong>是 markdown minimalism document theme 的缩写，意为: <strong>Markdown极简文档主题</strong>。<br>\n<strong>Mdmdt</strong>[^1]是深度定制的个性化Typora主题，其目的是打造一个</strong>清爽极简</strong>的文档样式。</p>\n<blockquote>\n<p>[!NOte]</p>\n<p>**注意：**mdmdt.css 文件中包含了亮色和暗色两者主题，会跟随系统模式自动切换亮暗主题。 <code>This is a single line code style</code></p>\n<p><strong>Attention:</strong> The MDMDT.CSS file contains both light and dark themes, which will automatically switch between light and dark themes according to the system mode.</p>\n</blockquote>\n<h2 id=\"文本\">文本</h2>\n<p>这是一段正文内容样式，以下是不同文本样式效果：<strong>这是加粗文本样式</strong>, <u>这是下划线样式</u>, <em>这是斜体字样式</em>,  <a class=\"link\"   href=\"https://github.com/cayxc/mdmdt\" >这是超链接样式: https://github.com/cayxc/mdmdt<i class=\"fas fa-external-link-alt\"></i></a>,  <code>This is a single line code style</code>,  <s>这是删除线效果样式</s>,  ==这是文字高亮效果==，上下标样式: <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=%5CLaTeX\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >, X^2^, H~2~O, <span style='background:var(--color-2-0-c)'> 这是鼠标选中效果 </span>,  键盘键样式：<kbd>Command+Q</kbd> 🐳 😀 🇨🇳</p>\n<p>This is a text content style and the following are the effects of different text styles: <strong>This is a bold text style</strong>,  <a class=\"link\"   href=\"https://github.com/cayxc/mdmdt\" >This is a hyperlink style: https://github.com/cayxc/mdmdt<i class=\"fas fa-external-link-alt\"></i></a>, <em>This is the italic font style</em>, <s>This is the strikethrough effect style</s>, <u>This is the underline style</u>, <code>This is a single line code style</code>,  keyboard key style: <kbd>Command+Q</kbd>,  <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=%5Ctext%7BLaTeX%7D\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 > X^2^H~2~O, ==This is the text highlighting effect==, <span style='background:var(--color-2-0-c)'>This is the mouse selection effect</span>  🐳 😀 🇨🇳</p>\n<!-- 这是注释内容......, This is the annotation content -->\n<h2 id=\"数学公式\">数学公式</h2>\n<p>直接使用公式：</p>\n<p style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;\"><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?from=%5Calpha%3D%0A%5Cbegin%7Bpmatrix%7D%0Aa%20%26%20b%20%26%20c%20%5C%5C%0Ad%20%26%20e%20%26%20f%20%5C%5C%0Ag%20%26%20h%20%26%20i%20%0A%5Cend%7Bpmatrix%7D%20%0A\"\n                        \n                 ></p><p style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;\"><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?from=x%20%3D%20a%20%2B%20b%0A\"\n                        \n                 ></p><p style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;\"><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?from=%5Cbegin%7Baligned%7D%20I%20%26%3D%5Cint_0%5E%7Bct%7D%5Cfrac%7Br%7D%7B%5Csqrt%7Bc%5E2t%5E2%20-r%5E2%7D%7D%5Cint_0%5E%7B2%5Cpi%7D%20m%5E2%28m%2Bn%29%20d%5Ctheta%20dr%5C%26%3D%5Cint_0%5E%7Bct%7D%5Cfrac%7Br%7D%7B%5Csqrt%7Bc%5E2t%5E2%20-r%5E2%7D%7D%5Cend%7Baligned%7D%0A\"\n                        \n                 ></p><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=%E4%BB%A3%E5%85%A5%E5%85%AC%E5%BC%8F%E5%BE%97%E5%88%B0%EF%BC%9A\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >—<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=u%28t%2Cx%2Cy%29%20%3D%20(3x%2By)%20c%5E2%20t%5E2%20%2B%20x%5E2(x%2By)\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 ></p>\n<p style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;\"><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?from=u%28t%2Cx%2Cy%29%20%3D%20%5Cfrac%7B1%7D%7B2%5Cpi%20c%7D%20%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20t%7D%20%5Ciint%5Climits_%7Br%3Cct%7D%20%5Cfrac%7Bm%5E2(m%2Bn)%7D%7B%5Csqrt%7Bc%5E2t%5E2%20-r%5E2%20%7D%7Ddmdn%0A\"\n                        \n                 ></p><h2 id=\"列表\">列表</h2>\n<p>这些是列表样式效果:</p>\n<ol>\n<li>这是有序列表 A</li>\n<li>这是有序列表 B</li>\n</ol>\n<ul>\n<li>This is Item 1.</li>\n<li>This is Item 2.</li>\n<li>[ ] Something is Not TODO.</li>\n<li>[x] Something is DONE.</li>\n</ul>\n<hr>\n<ol>\n<li>这是有序列表 A</li>\n<li>这是有序列表 B\n<ol>\n<li>这是有序列表 A</li>\n<li>这是有序列表 B</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>This is Item 1.</li>\n<li>This is Item 2.\n<ul>\n<li>This is Item 1.</li>\n<li>This is Item 2.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>这是嵌套列表样式：</p>\n<ol>\n<li>这是有序列表 A</li>\n<li>这是有序列表 B\n<ul>\n<li>This is Item 1.</li>\n<li>This is Item 2.\n<ul>\n<li>[x] Something is Not TODO.</li>\n<li>[ ] Something is DONE.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>这是有序列表 A</li>\n<li>这是有序列表 B\n<ol>\n<li>This is Item 1.</li>\n<li>This is Item 2.\n<ul>\n<li>[ ] Something is Not TODO.</li>\n<li>[x] Something is DONE.</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"代码\">代码</h2>\n<p>单行代码样式：<code>composer require --dev barryvdh/laravel-ide-helper</code></p>\n<p>大段代码块样式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * ----------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">  * 设置递增的 level 编号</span></span><br><span class=\"line\"><span class=\"comment\">  * ----------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> tag obj 标签对象</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"title function_\">setLevelNumber</span>(<span class=\"params\">tag</span>)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> ((<span class=\"keyword\">typeof</span> tag) != <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;setLevelNumber() 调用时参数类型错误，必须是一个h标签的对象集合！&#x27;</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> str = tag.<span class=\"property\">id</span>;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (str.<span class=\"title function_\">lastIndexOf</span>(<span class=\"string\">&#x27;.&#x27;</span>) == -<span class=\"number\">1</span>) &#123; <span class=\"comment\">//如果是一级目录形式 level-1000</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> newValue = <span class=\"built_in\">parseInt</span>(str.<span class=\"title function_\">slice</span>(<span class=\"number\">6</span>)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">&#x27;level-&#x27;</span> + newValue;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> err;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"表格样式\">表格样式</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Left-Aligned</th>\n<th style=\"text-align:center\">Center Aligned</th>\n<th style=\"text-align:right\">Right Aligned</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">This is the first line</td>\n<td style=\"text-align:center\"><code>this is code</code> some wordy text and some code</td>\n<td style=\"text-align:right\">$160</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">This is the second line</td>\n<td style=\"text-align:center\">some code: <code>this is code</code> centered</td>\n<td style=\"text-align:right\">$1200.99</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">This is the third line</td>\n<td style=\"text-align:center\">These are some texts</td>\n<td style=\"text-align:right\">$125.5</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"引用文本框\">引用文本框</h2>\n<blockquote>\n<p>[!NOTE]</p>\n<p>This is a Note text box … <code>this is code style</code></p>\n<blockquote>\n<p>This is a Note text box …</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>[!TIP]</p>\n<ul>\n<li>\n<p><code>this is code</code> This is a Tip text box …</p>\n</li>\n<li>\n<p>代码段：</p>\n</li>\n</ul>\n<blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">these are  codes...</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>This is a Tip text box …</li>\n</ul>\n<ol>\n<li>This is itemA</li>\n<li>This is itemB</li>\n<li>This is itemC</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>[!IMPORTANT]</p>\n<p>This is a Important text box …</p>\n</blockquote>\n<blockquote>\n<p>[!WARNING]</p>\n<p>This is a Warning text box …</p>\n</blockquote>\n<blockquote>\n<p>[!CAUTION]</p>\n<p><code>this is  code</code> This is a Caution text box …</p>\n</blockquote>\n<h2 id=\"个性化图文布局\">个性化图文布局</h2>\n<h3 id=\"单张图片\">单张图片</h3>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt.png\"\n                        alt=\"\"\n                 ></p>\n<h3 id=\"多图并排\">多图并排</h3>\n<p>图片的个性化排列使用方式是将图片放到一个容器中，该容器为 <code>&lt;section&gt;</code>  标签，如下所示:</p>\n<ol>\n<li>\n<p>直接输入<code>&lt;section&gt;</code> 然后回车，如下：</p>\n</li>\n<li>\n<pre><code class=\"language-html\">&lt;section&gt;\n&lt;/section&gt;\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   </span><br><span class=\"line\">3. 在 `&lt;section&gt;` 标签中插入图片，如下：</span><br><span class=\"line\"></span><br><span class=\"line\">```html</span><br><span class=\"line\">   &lt;section&gt;</span><br><span class=\"line\">     &lt;!-- 想要几张图并排，就在此处插入几个 &lt;img&gt; 标签: &lt;img   src=&quot;图片的相对路径/绝对路径&quot; &gt;&lt;/img&gt; --&gt;   </span><br><span class=\"line\">     &lt;img   src=&quot;https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-code.png&quot; &gt;&lt;/img&gt;</span><br><span class=\"line\">     &lt;img   src=&quot;https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-source.png&quot;  style=&quot;width: 200px&quot;&gt;&lt;/img&gt; &lt;!-- 单独设置图片的宽度为200px --&gt;</span><br><span class=\"line\">     &lt;img   src=&quot;https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-title.png&quot; &gt;&lt;/img&gt;</span><br><span class=\"line\">   &lt;/section&gt;</span><br></pre></td></tr></table></figure>\n\n</code></pre>\n</li>\n</ol>\n<p><strong>效果预览</strong>：</p>\n<section>\n <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/blobs/22baa3d7eb76500687b96fb3f175ae03d02cf49c/mdmdt-math.png\"\n                        \n                 ></img>\n <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/blobs/22baa3d7eb76500687b96fb3f175ae03d02cf49c/mdmdt-list.png\"\n                        \n                 ></img>\n</section>\n<hr>\n<section>\n <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-code.png\"\n                        \n                 ></img>\n <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-ui-1.png\"\n                         style=\"width: 200px\"\n                 ></img>\n <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png\"\n                        \n                 ></img>\n</section>\n<hr>\n<h3 id=\"多张图其他排列方式\">多张图其他排列方式</h3>\n<p>一张大图在左，多张小图在右的图片排列，如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 一张大图在左，多张小图在右 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span>   <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-ui-1.png&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span> <span class=\"comment\">&lt;!-- 这是第1列 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 240px&quot;</span>&gt;</span>  <span class=\"comment\">&lt;!-- 这是第2列 --&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">img</span>   <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-ui-2.png&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span></span><br><span class=\"line\"> \t <span class=\"tag\">&lt;<span class=\"name\">img</span>   <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-code.png&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">img</span>   <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdtht-dark.png&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>效果预览</strong>：</p>\n<section>\n <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdtht-light.png\"\n                        \n                 ></img>\n <span style=\"width: 240px\">\n    <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-ui-1.png\"\n                        \n                 ></img>\n \t<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-code.png\"\n                        \n                 ></img>\n\t<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-dark\"\n                        \n                 ></img>\n </span>\n</section>\n<hr>\n<p>一张大图在右，多张小图在左的图片排列，如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 一张大图在右，多张小图在左 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span> </span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 240px&quot;</span>&gt;</span> <span class=\"comment\">&lt;!-- 这是第1列 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span>   <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-ui-2.png&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span></span><br><span class=\"line\"> \t<span class=\"tag\">&lt;<span class=\"name\">img</span>   <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-code.png&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">img</span>   <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdtht-dark.png&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">img</span>   <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-ui-1.png&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span> <span class=\"comment\">&lt;!-- 这是第2列 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>效果预览</strong>：</p>\n<section> \n <span style=\"width: 240px\">\n    <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-ui-1.png\"\n                        \n                 ></img>\n    <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-ui-2.png\"\n                        \n                 ></img>\n\t<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdtht-dark.png\"\n                        \n                 ></img>\n </span>\n <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdtht-light.png\"\n                        \n                 ></img>\n</section>\n<h3 id=\"图文并排\">图文并排</h3>\n<p>图文的个性化排列使用方式是将图片和文字放到一个容器中，该容器为 <code>&lt;section&gt;</code>  标签，如下所示:</p>\n<ol>\n<li>\n<p>直接输入 <code>&lt;section&gt;</code> 然后回车，如下：</p>\n</li>\n<li>\n<pre><code class=\"language-html\">&lt;section&gt;\n    \n&lt;/section&gt;\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">3. 在 `&lt;section&gt;` 标签中插入图片和文字，如下：</span><br><span class=\"line\"></span><br><span class=\"line\">4. ```html</span><br><span class=\"line\">   &lt;!-- 图片和单段文字排列示例 --&gt;</span><br><span class=\"line\">   &lt;section&gt;</span><br><span class=\"line\">       &lt;img   src=&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png&quot; &gt;&lt;/img&gt;  &lt;!-- 这是第1列 --&gt;</span><br><span class=\"line\">   \t&lt;span&gt;这是文字在右，图片在左，图片和文字各占总宽度的50%的图文并排的样式。&lt;/span&gt; &lt;!-- 这是第2列 --&gt;</span><br><span class=\"line\">   &lt;/section&gt;</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   &lt;!-- 图片和单段文字排列示例 --&gt;</span><br><span class=\"line\">   &lt;section&gt;</span><br><span class=\"line\">   \t&lt;span&gt;这是文字在左，图片在右，图片和文字各占总宽度的50%的图文并排的样式。&lt;/span&gt; </span><br><span class=\"line\">       &lt;img   src=&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png&quot; &gt;&lt;/img&gt;  </span><br><span class=\"line\">   &lt;/section&gt;</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   &lt;!-- 图片和多段文字排列示例 --&gt;</span><br><span class=\"line\">   &lt;section&gt;</span><br><span class=\"line\">       &lt;img   src=&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png&quot; &gt;&lt;/img&gt; &lt;!-- 这是第1列 --&gt;</span><br><span class=\"line\">       &lt;span style=&quot;width: 150px&quot;&gt;  &lt;!-- 这是第2列，且单独设置该列的宽度为150px --&gt;</span><br><span class=\"line\">           &lt;span&gt;这是多段文字......&lt;/span&gt; </span><br><span class=\"line\">           &lt;span&gt;这是文字在右，图片在左，图片和文字各占总宽度的50%的图文并排的样式。&lt;/span&gt;</span><br><span class=\"line\">           &lt;span&gt;这是多段文字......&lt;/span&gt; </span><br><span class=\"line\">   \t&lt;/span&gt;</span><br><span class=\"line\">   &lt;/section&gt;</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   &lt;!-- 图片居中，文字在两边的排列示例 --&gt;</span><br><span class=\"line\">   &lt;section&gt;</span><br><span class=\"line\">       &lt;span&gt;这是第1列，这是图片居中，文字在两边的样式&lt;/span&gt; &lt;!-- 这是第1列 --&gt;</span><br><span class=\"line\">       &lt;img   src=&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdtht-dark.png&quot; &gt;&lt;/img&gt;  &lt;!-- 这是第2列, 单独设置图片的宽度为200px --&gt;</span><br><span class=\"line\">   \t&lt;span&gt;这是第3列，列的宽度比第1列小&lt;/span&gt;          &lt;!-- 这是第3列 --&gt;</span><br><span class=\"line\">   &lt;/section&gt;</span><br></pre></td></tr></table></figure>\n\n</code></pre>\n</li>\n</ol>\n<p><strong>效果预览</strong>：</p>\n<section>\n    <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-title.png\"\n                        \n                 ></img> \n\t<span>这是单段文字，文字在右，图片在左，图片和文字各占总宽度的50%的图文并排的样式。</span> \n</section>\n<hr>\n<section>\n\t<span>这是单段文字，文字在左，图片在右，图片和文字各占总宽度的50%的图文并排的样式。</span> <!-- 这是第1列 -->\n    <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-title.png\"\n                        \n                 ></img>  <!-- 这是第2列 -->\n</section>\n<hr>\n<section>\n    <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-title.png\"\n                        \n                 ></img>\n    <span>\n        <span>这是多段文字......</span>\n        <span>这是文字在右，图片在左，图片和文字各占总宽度的50%的图文并排的样式。</span>\n        <span>这是多段文字......</span>\n\t</span>\n</section>\n<hr>\n<section>\n    <span>这是第1列内容<br>这是图片居中，两边是文字，且两边文字设置相同宽度的样式</span> <!-- 这是第1列 -->\n    <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdtht-dark.png\"\n                        \n                 ></img> <!-- 这是第2列 -->\n\t<span>这是第3列内容<br>这是图片居中，两边是文字，且两边文字设置相同宽度的样式</span> <!-- 这是第3列 -->\n</section>\n<section>\n    <span>这是中间是图片，两边是文字的图文样式<br>需要注意：该列文字内容较多，且未设置宽度。<strong>列的宽度比第3列大</strong></span>\n    <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdtht-dark.png\"\n                        \n                 ></img>\n\t<span>这是第3列内容</span>\n</section>\n<hr>\n<p>图片和文字，图片设置宽度示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 这是文字在右，图片在左的示例 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">img</span>   <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png&quot;</span>  <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:200px&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>这是文字在右，图片在左，且设置图片的宽度（如图片宽可以设置为：200px）的图文并排的样式。<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这是文字在左，图片在右的示例 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>这是文字在左，图片在右，设置图片宽度为 200px 的图文并排的样式！<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span>   <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png&quot;</span>  <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:200px&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>效果预览</strong>：</p>\n<hr>\n<section>\n   <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-title.png\"\n                         style=\"width:400px\"\n                 ></img>\n   <span>这是文字在右，图片在左，且设置图片宽度（如图片宽可以设置为：400px）的图文并排的样式。</span>\n</section>\n<section>\n    <span>这是文字在左，图片在右，且设置图片宽度为 200px 的图文并排的样式！</span>\n    <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-title.png\"\n                         style=\"width:200px\"\n                 ></img>\n</section>\n<hr>\n<blockquote>\n<p>[!Important]</p>\n<p><strong>注意：</strong></p>\n<p>由于图片排列的容器 <code>&lt;section&gt;</code> 采用的是grid布局，会根据 <code>&lt;section&gt;</code> 中有几列和每列里的内容自动分配每一列的宽度。</p>\n<p>在进行图片、图片和文字排列时，如果将某一列的宽度设置为 xx%的形式，则该列的实际宽度并<u>不一定是内容区宽度的 xx%</u>，而是 <code>&lt;section&gt;</code> 容器中当前列宽度的 xx%，且当前列的宽度还受到了里面内容的影响。</p>\n<p><strong>基于以上原因，建议在单独设置某一列宽度的时候，尽可能采用具体的值（如: style=“width: 200px”），不要采用 xx%（如: style=“width: 50%”）的形式。</strong></p>\n<p>示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;section&gt; 排列图片的容器，宽度为内容区（也就是书写区）的宽度 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">   \t<span class=\"comment\">&lt;!-- 此时是2列 --&gt;</span></span><br><span class=\"line\">   \t<span class=\"tag\">&lt;<span class=\"name\">img</span>   <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdtht-dark.png&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span></span><br><span class=\"line\"> \t<span class=\"comment\">&lt;!-- 此处的 width:50% ，实际只有内容区宽度的25%（一共2列，每一列宽度50%，50%*50% =&gt; 25%）--&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">img</span>   <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdtht-dark.png&quot;</span>  <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:50%&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">   \t<span class=\"comment\">&lt;!-- 此时是3列： img, span, span --&gt;</span></span><br><span class=\"line\">   \t<span class=\"tag\">&lt;<span class=\"name\">img</span>   <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span>  <span class=\"comment\">&lt;!-- 第1列 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>....<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>  <span class=\"comment\">&lt;!-- 第2列 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>             <span class=\"comment\">&lt;!-- 第3列 --&gt;</span></span><br><span class=\"line\">   \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>这是其段落他文字...<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 此处的 width:50% ，实际只有内容区宽度的16.5%（一共3列，每一列宽度33.33%，33.33%*50% =&gt; 16.65%）--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:50%&quot;</span>&gt;</span>这是多段文字<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>这是其段落他文字...<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>除了以上展示的排列方式，更多的排列形式，还请自行探索 …</p>\n<h2 id=\"图表Mermaid\">图表Mermaid</h2>\n<p>以下是 <strong>Mermaid图表</strong> 部分示例，更多图表类型请参考：<a class=\"link\"   href=\"https://mermaid.js.org\" >Mermaid图表<i class=\"fas fa-external-link-alt\"></i></a></p>\n<pre><code class=\"highlight mermaid\">flowchart LR\n    A[Hard edge] --&gt;|Link text| B(Round edge)\n    B --&gt; C&#123;Decision&#125;\n    C --&gt;|One| D[Result one]\n    C --&gt;|Two| E[Result two]</code></pre>\n<pre><code class=\"highlight mermaid\">stateDiagram-v2\n    [*] --&gt; Active\n\n    state Active &#123;\n        [*] --&gt; NumLockOff\n        NumLockOff --&gt; NumLockOn : EvNumLockPressed\n        NumLockOn --&gt; NumLockOff : EvNumLockPressed\n        --\n        [*] --&gt; CapsLockOff\n        CapsLockOff --&gt; CapsLockOn : EvCapsLockPressed\n        CapsLockOn --&gt; CapsLockOff : EvCapsLockPressed\n        --\n        [*] --&gt; ScrollLockOff\n        ScrollLockOff --&gt; ScrollLockOn : EvScrollLockPressed\n        ScrollLockOn --&gt; ScrollLockOff : EvScrollLockPressed\n    &#125;</code></pre>\n<pre><code class=\"highlight mermaid\">gantt\n    dateFormat  YYYY-MM-DD\n    title       Adding GANTT diagram functionality to mermaid\n    excludes    weekends\n    %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (&quot;sunday&quot;) or &quot;weekends&quot;, but not the word &quot;weekdays&quot;.)\n\n    section A section\n    Completed task            :done,    des1, 2014-01-06,2014-01-08\n    Active task               :active,  des2, 2014-01-09, 3d\n    Future task               :         des3, after des2, 5d\n    Future task2              :         des4, after des3, 5d\n\n    section Critical tasks\n    Completed task in the critical line :crit, done, 2014-01-06,24h\n    Implement parser and jison          :crit, done, after des1, 2d\n    Create tests for parser             :crit, active, 3d\n    Future task in critical line        :crit, 5d\n    Create tests for renderer           :2d\n    Add to mermaid                      :until isadded\n    Functionality added                 :milestone, isadded, 2014-01-25, 0d\n\n    section Documentation\n    Describe gantt syntax               :active, a1, after des1, 3d\n    Add gantt diagram to demo page      :after a1  , 20h\n    Add another diagram to demo page    :doc1, after a1  , 48h\n\n    section Last section\n    Describe gantt syntax               :after doc1, 3d\n    Add gantt diagram to demo page      :20h\n    Add another diagram to demo page    :48h</code></pre>\n<h3 id=\"Flowchart\">Flowchart</h3>\n<h3 id=\"Sequence-Diagram\">Sequence Diagram</h3>\n<h3 id=\"State-Diagram\">State Diagram</h3>\n<h1>一级标题1</h1>\n<h2 id=\"二级标题2\">二级标题2</h2>\n<h3 id=\"三级标题3\">三级标题3</h3>\n<h4 id=\"四级标题4\">四级标题4</h4>\n<h5 id=\"五级标题5\">五级标题5</h5>\n<h6 id=\"六级标题6\">六级标题6</h6>\n<h1>TOC目录</h1>\n<p>以下是 [TOC] 目录样式</p>\n<p>[TOC]</p>\n","secretKey":"4688196f404a72f1de076bf08b61d821f90d8ec55d9909cbb56c1dd224213b15","iv":"c1288710def6df67f46af1cce1411abf","encryptedPassword":"e103eec25ad7618469e9fabcf78a89a1","encryptedContent":"","excerpt":"","more":"<h2 id=\"关于Mdmdt主题\">关于Mdmdt主题</h2>\n<p><strong>Mdmdt <strong>是 markdown minimalism document theme 的缩写，意为: <strong>Markdown极简文档主题</strong>。<br>\n<strong>Mdmdt</strong>[^1]是深度定制的个性化Typora主题，其目的是打造一个</strong>清爽极简</strong>的文档样式。</p>\n<blockquote>\n<p>[!NOte]</p>\n<p>**注意：**mdmdt.css 文件中包含了亮色和暗色两者主题，会跟随系统模式自动切换亮暗主题。 <code>This is a single line code style</code></p>\n<p><strong>Attention:</strong> The MDMDT.CSS file contains both light and dark themes, which will automatically switch between light and dark themes according to the system mode.</p>\n</blockquote>\n<h2 id=\"文本\">文本</h2>\n<p>这是一段正文内容样式，以下是不同文本样式效果：<strong>这是加粗文本样式</strong>, <u>这是下划线样式</u>, <em>这是斜体字样式</em>,  <a class=\"link\"   href=\"https://github.com/cayxc/mdmdt\" >这是超链接样式: https://github.com/cayxc/mdmdt<i class=\"fas fa-external-link-alt\"></i></a>,  <code>This is a single line code style</code>,  <s>这是删除线效果样式</s>,  ==这是文字高亮效果==，上下标样式: <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=%5CLaTeX\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >, X^2^, H~2~O, <span style='background:var(--color-2-0-c)'> 这是鼠标选中效果 </span>,  键盘键样式：<kbd>Command+Q</kbd> 🐳 😀 🇨🇳</p>\n<p>This is a text content style and the following are the effects of different text styles: <strong>This is a bold text style</strong>,  <a class=\"link\"   href=\"https://github.com/cayxc/mdmdt\" >This is a hyperlink style: https://github.com/cayxc/mdmdt<i class=\"fas fa-external-link-alt\"></i></a>, <em>This is the italic font style</em>, <s>This is the strikethrough effect style</s>, <u>This is the underline style</u>, <code>This is a single line code style</code>,  keyboard key style: <kbd>Command+Q</kbd>,  <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=%5Ctext%7BLaTeX%7D\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 > X^2^H~2~O, ==This is the text highlighting effect==, <span style='background:var(--color-2-0-c)'>This is the mouse selection effect</span>  🐳 😀 🇨🇳</p>\n<!-- 这是注释内容......, This is the annotation content -->\n<h2 id=\"数学公式\">数学公式</h2>\n<p>直接使用公式：</p>\n<p style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;\"><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?from=%5Calpha%3D%0A%5Cbegin%7Bpmatrix%7D%0Aa%20%26%20b%20%26%20c%20%5C%5C%0Ad%20%26%20e%20%26%20f%20%5C%5C%0Ag%20%26%20h%20%26%20i%20%0A%5Cend%7Bpmatrix%7D%20%0A\"\n                        \n                 ></p><p style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;\"><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?from=x%20%3D%20a%20%2B%20b%0A\"\n                        \n                 ></p><p style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;\"><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?from=%5Cbegin%7Baligned%7D%20I%20%26%3D%5Cint_0%5E%7Bct%7D%5Cfrac%7Br%7D%7B%5Csqrt%7Bc%5E2t%5E2%20-r%5E2%7D%7D%5Cint_0%5E%7B2%5Cpi%7D%20m%5E2%28m%2Bn%29%20d%5Ctheta%20dr%5C%26%3D%5Cint_0%5E%7Bct%7D%5Cfrac%7Br%7D%7B%5Csqrt%7Bc%5E2t%5E2%20-r%5E2%7D%7D%5Cend%7Baligned%7D%0A\"\n                        \n                 ></p><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=%E4%BB%A3%E5%85%A5%E5%85%AC%E5%BC%8F%E5%BE%97%E5%88%B0%EF%BC%9A\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >—<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=u%28t%2Cx%2Cy%29%20%3D%20(3x%2By)%20c%5E2%20t%5E2%20%2B%20x%5E2(x%2By)\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 ></p>\n<p style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;\"><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?from=u%28t%2Cx%2Cy%29%20%3D%20%5Cfrac%7B1%7D%7B2%5Cpi%20c%7D%20%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20t%7D%20%5Ciint%5Climits_%7Br%3Cct%7D%20%5Cfrac%7Bm%5E2(m%2Bn)%7D%7B%5Csqrt%7Bc%5E2t%5E2%20-r%5E2%20%7D%7Ddmdn%0A\"\n                        \n                 ></p><h2 id=\"列表\">列表</h2>\n<p>这些是列表样式效果:</p>\n<ol>\n<li>这是有序列表 A</li>\n<li>这是有序列表 B</li>\n</ol>\n<ul>\n<li>This is Item 1.</li>\n<li>This is Item 2.</li>\n<li>[ ] Something is Not TODO.</li>\n<li>[x] Something is DONE.</li>\n</ul>\n<hr>\n<ol>\n<li>这是有序列表 A</li>\n<li>这是有序列表 B\n<ol>\n<li>这是有序列表 A</li>\n<li>这是有序列表 B</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>This is Item 1.</li>\n<li>This is Item 2.\n<ul>\n<li>This is Item 1.</li>\n<li>This is Item 2.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>这是嵌套列表样式：</p>\n<ol>\n<li>这是有序列表 A</li>\n<li>这是有序列表 B\n<ul>\n<li>This is Item 1.</li>\n<li>This is Item 2.\n<ul>\n<li>[x] Something is Not TODO.</li>\n<li>[ ] Something is DONE.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>这是有序列表 A</li>\n<li>这是有序列表 B\n<ol>\n<li>This is Item 1.</li>\n<li>This is Item 2.\n<ul>\n<li>[ ] Something is Not TODO.</li>\n<li>[x] Something is DONE.</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"代码\">代码</h2>\n<p>单行代码样式：<code>composer require --dev barryvdh/laravel-ide-helper</code></p>\n<p>大段代码块样式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * ----------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">  * 设置递增的 level 编号</span></span><br><span class=\"line\"><span class=\"comment\">  * ----------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> tag obj 标签对象</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"title function_\">setLevelNumber</span>(<span class=\"params\">tag</span>)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> ((<span class=\"keyword\">typeof</span> tag) != <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;setLevelNumber() 调用时参数类型错误，必须是一个h标签的对象集合！&#x27;</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> str = tag.<span class=\"property\">id</span>;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (str.<span class=\"title function_\">lastIndexOf</span>(<span class=\"string\">&#x27;.&#x27;</span>) == -<span class=\"number\">1</span>) &#123; <span class=\"comment\">//如果是一级目录形式 level-1000</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> newValue = <span class=\"built_in\">parseInt</span>(str.<span class=\"title function_\">slice</span>(<span class=\"number\">6</span>)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">&#x27;level-&#x27;</span> + newValue;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> err;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"表格样式\">表格样式</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Left-Aligned</th>\n<th style=\"text-align:center\">Center Aligned</th>\n<th style=\"text-align:right\">Right Aligned</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">This is the first line</td>\n<td style=\"text-align:center\"><code>this is code</code> some wordy text and some code</td>\n<td style=\"text-align:right\">$160</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">This is the second line</td>\n<td style=\"text-align:center\">some code: <code>this is code</code> centered</td>\n<td style=\"text-align:right\">$1200.99</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">This is the third line</td>\n<td style=\"text-align:center\">These are some texts</td>\n<td style=\"text-align:right\">$125.5</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"引用文本框\">引用文本框</h2>\n<blockquote>\n<p>[!NOTE]</p>\n<p>This is a Note text box … <code>this is code style</code></p>\n<blockquote>\n<p>This is a Note text box …</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>[!TIP]</p>\n<ul>\n<li>\n<p><code>this is code</code> This is a Tip text box …</p>\n</li>\n<li>\n<p>代码段：</p>\n</li>\n</ul>\n<blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">these are  codes...</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>This is a Tip text box …</li>\n</ul>\n<ol>\n<li>This is itemA</li>\n<li>This is itemB</li>\n<li>This is itemC</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>[!IMPORTANT]</p>\n<p>This is a Important text box …</p>\n</blockquote>\n<blockquote>\n<p>[!WARNING]</p>\n<p>This is a Warning text box …</p>\n</blockquote>\n<blockquote>\n<p>[!CAUTION]</p>\n<p><code>this is  code</code> This is a Caution text box …</p>\n</blockquote>\n<h2 id=\"个性化图文布局\">个性化图文布局</h2>\n<h3 id=\"单张图片\">单张图片</h3>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt.png\"\n                        alt=\"\"\n                 ></p>\n<h3 id=\"多图并排\">多图并排</h3>\n<p>图片的个性化排列使用方式是将图片放到一个容器中，该容器为 <code>&lt;section&gt;</code>  标签，如下所示:</p>\n<ol>\n<li>\n<p>直接输入<code>&lt;section&gt;</code> 然后回车，如下：</p>\n</li>\n<li>\n<pre><code class=\"language-html\">&lt;section&gt;\n&lt;/section&gt;\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   </span><br><span class=\"line\">3. 在 `&lt;section&gt;` 标签中插入图片，如下：</span><br><span class=\"line\"></span><br><span class=\"line\">```html</span><br><span class=\"line\">   &lt;section&gt;</span><br><span class=\"line\">     &lt;!-- 想要几张图并排，就在此处插入几个 &lt;img&gt; 标签: &lt;img   src=&quot;图片的相对路径/绝对路径&quot; &gt;&lt;/img&gt; --&gt;   </span><br><span class=\"line\">     &lt;img   src=&quot;https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-code.png&quot; &gt;&lt;/img&gt;</span><br><span class=\"line\">     &lt;img   src=&quot;https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-source.png&quot;  style=&quot;width: 200px&quot;&gt;&lt;/img&gt; &lt;!-- 单独设置图片的宽度为200px --&gt;</span><br><span class=\"line\">     &lt;img   src=&quot;https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-title.png&quot; &gt;&lt;/img&gt;</span><br><span class=\"line\">   &lt;/section&gt;</span><br></pre></td></tr></table></figure>\n\n</code></pre>\n</li>\n</ol>\n<p><strong>效果预览</strong>：</p>\n<section>\n <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/blobs/22baa3d7eb76500687b96fb3f175ae03d02cf49c/mdmdt-math.png\"\n                        \n                 ></img>\n <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/blobs/22baa3d7eb76500687b96fb3f175ae03d02cf49c/mdmdt-list.png\"\n                        \n                 ></img>\n</section>\n<hr>\n<section>\n <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-code.png\"\n                        \n                 ></img>\n <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-ui-1.png\"\n                         style=\"width: 200px\"\n                 ></img>\n <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png\"\n                        \n                 ></img>\n</section>\n<hr>\n<h3 id=\"多张图其他排列方式\">多张图其他排列方式</h3>\n<p>一张大图在左，多张小图在右的图片排列，如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 一张大图在左，多张小图在右 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span>   <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-ui-1.png&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span> <span class=\"comment\">&lt;!-- 这是第1列 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 240px&quot;</span>&gt;</span>  <span class=\"comment\">&lt;!-- 这是第2列 --&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">img</span>   <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-ui-2.png&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span></span><br><span class=\"line\"> \t <span class=\"tag\">&lt;<span class=\"name\">img</span>   <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-code.png&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">img</span>   <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdtht-dark.png&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>效果预览</strong>：</p>\n<section>\n <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdtht-light.png\"\n                        \n                 ></img>\n <span style=\"width: 240px\">\n    <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-ui-1.png\"\n                        \n                 ></img>\n \t<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-code.png\"\n                        \n                 ></img>\n\t<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-dark\"\n                        \n                 ></img>\n </span>\n</section>\n<hr>\n<p>一张大图在右，多张小图在左的图片排列，如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 一张大图在右，多张小图在左 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span> </span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 240px&quot;</span>&gt;</span> <span class=\"comment\">&lt;!-- 这是第1列 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span>   <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-ui-2.png&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span></span><br><span class=\"line\"> \t<span class=\"tag\">&lt;<span class=\"name\">img</span>   <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-code.png&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">img</span>   <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdtht-dark.png&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">img</span>   <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-ui-1.png&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span> <span class=\"comment\">&lt;!-- 这是第2列 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>效果预览</strong>：</p>\n<section> \n <span style=\"width: 240px\">\n    <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-ui-1.png\"\n                        \n                 ></img>\n    <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-ui-2.png\"\n                        \n                 ></img>\n\t<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdtht-dark.png\"\n                        \n                 ></img>\n </span>\n <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdtht-light.png\"\n                        \n                 ></img>\n</section>\n<h3 id=\"图文并排\">图文并排</h3>\n<p>图文的个性化排列使用方式是将图片和文字放到一个容器中，该容器为 <code>&lt;section&gt;</code>  标签，如下所示:</p>\n<ol>\n<li>\n<p>直接输入 <code>&lt;section&gt;</code> 然后回车，如下：</p>\n</li>\n<li>\n<pre><code class=\"language-html\">&lt;section&gt;\n    \n&lt;/section&gt;\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">3. 在 `&lt;section&gt;` 标签中插入图片和文字，如下：</span><br><span class=\"line\"></span><br><span class=\"line\">4. ```html</span><br><span class=\"line\">   &lt;!-- 图片和单段文字排列示例 --&gt;</span><br><span class=\"line\">   &lt;section&gt;</span><br><span class=\"line\">       &lt;img   src=&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png&quot; &gt;&lt;/img&gt;  &lt;!-- 这是第1列 --&gt;</span><br><span class=\"line\">   \t&lt;span&gt;这是文字在右，图片在左，图片和文字各占总宽度的50%的图文并排的样式。&lt;/span&gt; &lt;!-- 这是第2列 --&gt;</span><br><span class=\"line\">   &lt;/section&gt;</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   &lt;!-- 图片和单段文字排列示例 --&gt;</span><br><span class=\"line\">   &lt;section&gt;</span><br><span class=\"line\">   \t&lt;span&gt;这是文字在左，图片在右，图片和文字各占总宽度的50%的图文并排的样式。&lt;/span&gt; </span><br><span class=\"line\">       &lt;img   src=&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png&quot; &gt;&lt;/img&gt;  </span><br><span class=\"line\">   &lt;/section&gt;</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   &lt;!-- 图片和多段文字排列示例 --&gt;</span><br><span class=\"line\">   &lt;section&gt;</span><br><span class=\"line\">       &lt;img   src=&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png&quot; &gt;&lt;/img&gt; &lt;!-- 这是第1列 --&gt;</span><br><span class=\"line\">       &lt;span style=&quot;width: 150px&quot;&gt;  &lt;!-- 这是第2列，且单独设置该列的宽度为150px --&gt;</span><br><span class=\"line\">           &lt;span&gt;这是多段文字......&lt;/span&gt; </span><br><span class=\"line\">           &lt;span&gt;这是文字在右，图片在左，图片和文字各占总宽度的50%的图文并排的样式。&lt;/span&gt;</span><br><span class=\"line\">           &lt;span&gt;这是多段文字......&lt;/span&gt; </span><br><span class=\"line\">   \t&lt;/span&gt;</span><br><span class=\"line\">   &lt;/section&gt;</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   &lt;!-- 图片居中，文字在两边的排列示例 --&gt;</span><br><span class=\"line\">   &lt;section&gt;</span><br><span class=\"line\">       &lt;span&gt;这是第1列，这是图片居中，文字在两边的样式&lt;/span&gt; &lt;!-- 这是第1列 --&gt;</span><br><span class=\"line\">       &lt;img   src=&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdtht-dark.png&quot; &gt;&lt;/img&gt;  &lt;!-- 这是第2列, 单独设置图片的宽度为200px --&gt;</span><br><span class=\"line\">   \t&lt;span&gt;这是第3列，列的宽度比第1列小&lt;/span&gt;          &lt;!-- 这是第3列 --&gt;</span><br><span class=\"line\">   &lt;/section&gt;</span><br></pre></td></tr></table></figure>\n\n</code></pre>\n</li>\n</ol>\n<p><strong>效果预览</strong>：</p>\n<section>\n    <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-title.png\"\n                        \n                 ></img> \n\t<span>这是单段文字，文字在右，图片在左，图片和文字各占总宽度的50%的图文并排的样式。</span> \n</section>\n<hr>\n<section>\n\t<span>这是单段文字，文字在左，图片在右，图片和文字各占总宽度的50%的图文并排的样式。</span> <!-- 这是第1列 -->\n    <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-title.png\"\n                        \n                 ></img>  <!-- 这是第2列 -->\n</section>\n<hr>\n<section>\n    <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-title.png\"\n                        \n                 ></img>\n    <span>\n        <span>这是多段文字......</span>\n        <span>这是文字在右，图片在左，图片和文字各占总宽度的50%的图文并排的样式。</span>\n        <span>这是多段文字......</span>\n\t</span>\n</section>\n<hr>\n<section>\n    <span>这是第1列内容<br>这是图片居中，两边是文字，且两边文字设置相同宽度的样式</span> <!-- 这是第1列 -->\n    <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdtht-dark.png\"\n                        \n                 ></img> <!-- 这是第2列 -->\n\t<span>这是第3列内容<br>这是图片居中，两边是文字，且两边文字设置相同宽度的样式</span> <!-- 这是第3列 -->\n</section>\n<section>\n    <span>这是中间是图片，两边是文字的图文样式<br>需要注意：该列文字内容较多，且未设置宽度。<strong>列的宽度比第3列大</strong></span>\n    <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdtht-dark.png\"\n                        \n                 ></img>\n\t<span>这是第3列内容</span>\n</section>\n<hr>\n<p>图片和文字，图片设置宽度示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 这是文字在右，图片在左的示例 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">img</span>   <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png&quot;</span>  <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:200px&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>这是文字在右，图片在左，且设置图片的宽度（如图片宽可以设置为：200px）的图文并排的样式。<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这是文字在左，图片在右的示例 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>这是文字在左，图片在右，设置图片宽度为 200px 的图文并排的样式！<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span>   <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png&quot;</span>  <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:200px&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>效果预览</strong>：</p>\n<hr>\n<section>\n   <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-title.png\"\n                         style=\"width:400px\"\n                 ></img>\n   <span>这是文字在右，图片在左，且设置图片宽度（如图片宽可以设置为：400px）的图文并排的样式。</span>\n</section>\n<section>\n    <span>这是文字在左，图片在右，且设置图片宽度为 200px 的图文并排的样式！</span>\n    <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://raw.gitcode.com/Li2112183373/image/raw/main/mdmdt-title.png\"\n                         style=\"width:200px\"\n                 ></img>\n</section>\n<hr>\n<blockquote>\n<p>[!Important]</p>\n<p><strong>注意：</strong></p>\n<p>由于图片排列的容器 <code>&lt;section&gt;</code> 采用的是grid布局，会根据 <code>&lt;section&gt;</code> 中有几列和每列里的内容自动分配每一列的宽度。</p>\n<p>在进行图片、图片和文字排列时，如果将某一列的宽度设置为 xx%的形式，则该列的实际宽度并<u>不一定是内容区宽度的 xx%</u>，而是 <code>&lt;section&gt;</code> 容器中当前列宽度的 xx%，且当前列的宽度还受到了里面内容的影响。</p>\n<p><strong>基于以上原因，建议在单独设置某一列宽度的时候，尽可能采用具体的值（如: style=“width: 200px”），不要采用 xx%（如: style=“width: 50%”）的形式。</strong></p>\n<p>示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;section&gt; 排列图片的容器，宽度为内容区（也就是书写区）的宽度 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">   \t<span class=\"comment\">&lt;!-- 此时是2列 --&gt;</span></span><br><span class=\"line\">   \t<span class=\"tag\">&lt;<span class=\"name\">img</span>   <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdtht-dark.png&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span></span><br><span class=\"line\"> \t<span class=\"comment\">&lt;!-- 此处的 width:50% ，实际只有内容区宽度的25%（一共2列，每一列宽度50%，50%*50% =&gt; 25%）--&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">img</span>   <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdtht-dark.png&quot;</span>  <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:50%&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">   \t<span class=\"comment\">&lt;!-- 此时是3列： img, span, span --&gt;</span></span><br><span class=\"line\">   \t<span class=\"tag\">&lt;<span class=\"name\">img</span>   <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/LiDaoKuan/image@main/note/mdmdt-title.png&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span>  <span class=\"comment\">&lt;!-- 第1列 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>....<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>  <span class=\"comment\">&lt;!-- 第2列 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>             <span class=\"comment\">&lt;!-- 第3列 --&gt;</span></span><br><span class=\"line\">   \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>这是其段落他文字...<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 此处的 width:50% ，实际只有内容区宽度的16.5%（一共3列，每一列宽度33.33%，33.33%*50% =&gt; 16.65%）--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:50%&quot;</span>&gt;</span>这是多段文字<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>这是其段落他文字...<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>除了以上展示的排列方式，更多的排列形式，还请自行探索 …</p>\n<h2 id=\"图表Mermaid\">图表Mermaid</h2>\n<p>以下是 <strong>Mermaid图表</strong> 部分示例，更多图表类型请参考：<a class=\"link\"   href=\"https://mermaid.js.org\" >Mermaid图表<i class=\"fas fa-external-link-alt\"></i></a></p>\n<pre><code class=\"highlight mermaid\">flowchart LR\n    A[Hard edge] --&gt;|Link text| B(Round edge)\n    B --&gt; C&#123;Decision&#125;\n    C --&gt;|One| D[Result one]\n    C --&gt;|Two| E[Result two]</code></pre>\n<pre><code class=\"highlight mermaid\">stateDiagram-v2\n    [*] --&gt; Active\n\n    state Active &#123;\n        [*] --&gt; NumLockOff\n        NumLockOff --&gt; NumLockOn : EvNumLockPressed\n        NumLockOn --&gt; NumLockOff : EvNumLockPressed\n        --\n        [*] --&gt; CapsLockOff\n        CapsLockOff --&gt; CapsLockOn : EvCapsLockPressed\n        CapsLockOn --&gt; CapsLockOff : EvCapsLockPressed\n        --\n        [*] --&gt; ScrollLockOff\n        ScrollLockOff --&gt; ScrollLockOn : EvScrollLockPressed\n        ScrollLockOn --&gt; ScrollLockOff : EvScrollLockPressed\n    &#125;</code></pre>\n<pre><code class=\"highlight mermaid\">gantt\n    dateFormat  YYYY-MM-DD\n    title       Adding GANTT diagram functionality to mermaid\n    excludes    weekends\n    %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (&quot;sunday&quot;) or &quot;weekends&quot;, but not the word &quot;weekdays&quot;.)\n\n    section A section\n    Completed task            :done,    des1, 2014-01-06,2014-01-08\n    Active task               :active,  des2, 2014-01-09, 3d\n    Future task               :         des3, after des2, 5d\n    Future task2              :         des4, after des3, 5d\n\n    section Critical tasks\n    Completed task in the critical line :crit, done, 2014-01-06,24h\n    Implement parser and jison          :crit, done, after des1, 2d\n    Create tests for parser             :crit, active, 3d\n    Future task in critical line        :crit, 5d\n    Create tests for renderer           :2d\n    Add to mermaid                      :until isadded\n    Functionality added                 :milestone, isadded, 2014-01-25, 0d\n\n    section Documentation\n    Describe gantt syntax               :active, a1, after des1, 3d\n    Add gantt diagram to demo page      :after a1  , 20h\n    Add another diagram to demo page    :doc1, after a1  , 48h\n\n    section Last section\n    Describe gantt syntax               :after doc1, 3d\n    Add gantt diagram to demo page      :20h\n    Add another diagram to demo page    :48h</code></pre>\n<h3 id=\"Flowchart\">Flowchart</h3>\n<h3 id=\"Sequence-Diagram\">Sequence Diagram</h3>\n<h3 id=\"State-Diagram\">State Diagram</h3>\n<h1>一级标题1</h1>\n<h2 id=\"二级标题2\">二级标题2</h2>\n<h3 id=\"三级标题3\">三级标题3</h3>\n<h4 id=\"四级标题4\">四级标题4</h4>\n<h5 id=\"五级标题5\">五级标题5</h5>\n<h6 id=\"六级标题6\">六级标题6</h6>\n<h1>TOC目录</h1>\n<p>以下是 [TOC] 目录样式</p>\n<p>[TOC]</p>\n"},{"title":"Mdmdt theme readme","date":"2025-07-05T16:00:00.000Z","_content":"\n![typora-mdmdt-theme](./img/mdmdt.png)\n# About Mdmdt theme\n\n![Languages](https://img.shields.io/badge/languages-CSS-F34B7D.svg) ![GitHub release (latest by date including pre-releases)](https://img.shields.io/github/v/release/cayxc/Mdmdt?include_prereleases&color=blue&logo=hack-the-box) ![GitHub license](https://img.shields.io/github/license/cayxc/Mdmdt.svg) ![gitee stars](https://gitee.com/cayxc/mdmdt/badge/star.svg) ![gitee forks](https://gitee.com/cayxc/mdmdt/badge/fork.svg)\n\n#### [中文文档](./readme.md)\n\n**Mdmdt** is an abbreviation for Markdown Minimalism Document Theme, meaning: Markdown Minimalism Document Theme.**Mdmdt** is a deeply customized personalized Typora theme, aimed at creating a **refreshing and minimalist** document style. The **Mdmdt** theme has now been included in the [official Typora theme library](https://theme.typoraio.cn).\n\nCompared to the default theme style, the following aspects have been mainly modified:\n1. Simple and comfortable color matching style\n2. Modify the title style\n3. Modify the table style\n4. Modify the reference box style\n5. Add rounded corner style to the image\n6. Add highlight style to code\n7. Modify file tree, outline, and document list styles\n8. Automatic follow system's light/dark theme mode (can be set separately for light/dark themes)\n9. Modify other UI styles\n\n> [!IMPORTANT]\n>\n> **Attention**: This theme has only been tested in Windows and MacOS environments, and has not been tested in Linux environments. Please be aware when using it!\n\n# Preview\n\n![mdmdt-text](./img/mdmdt-text.png)\n![mdmdt-source](./img/mdmdt-source.png)\n![mdmdt-code](./img/mdmdt-code.png)\n![mdmdt-list](./img/mdmdt-list.png)\n![mdmdt-math](./img/mdmdt-math.png)\n![mdmdt-blockquote](./img/mdmdt-blockquote.png)\n![mdmdt-mermaid](./img/mdmdt-mermaid.png)\n![mdmdt-title](./img/mdmdt-title.png)\n\n---\n\n![mdmdt-ui-1](./img/mdmdt-ui-1.png)\n![mdmdt-ui-2](./img/mdmdt-ui-2.png)\n![mdmdt-ui-3](./img/mdmdt-ui-3.png)\n![mdmdt-ui-4](./img/mdmdt-ui-4.png)\n\n# Personalized graphic layout\n\nThis theme provides some personalized graphic and text layout solutions. For specific usage methods, please refer to the \"<u>个性化图文布局</u>\" chapter in the \"**Mdmdt主题演示demo.md**\".\n\n**Personalized graphic layout preview:**\n\n![性化图文排列](./img/mdmdt-layout.png)\n\n# Usage\n\nUsing custom themes is very simple, as follows:\n\n1. Open `Preferences` -> `Appearance` -> `Open Theme Folder`\n2. Copy the downloaded `mdmdt.css`  file to the theme folder.\n3. **Exit Typora and reopen**，In the `Menu Bar` -> `Themes`, Select **Mdmdt** theme and complete the theme switch.\n\n> [!NOTE]\n>\n> **Note:** The mdmdt.css file contains both bright and dark themes, which will automatically switch between bright and dark themes according to the system mode.\n\n##### Use separate Light/Dark theme\n\nIf you only want to use a separate bright or dark theme, the method is as follows:\n1. Open `Preferences` -> `Appearance` -> `Open Theme Folder`\n2. Copy `mdmdt-light.css` or `mdmdt-dark.css ` to the theme folder.\n3. **Exit Typora and reopen**，In the `Menu Bar` -> `Themes`, Select **Mdmdt Light** or **Mdmdt Dark** theme and complete the theme switch.\n\n# Modify font\nIf you are not satisfied with the font, you can refer to the following methods to modify the corresponding font:\n\n1. Modify the text font and find: `font-family: \"PingFang SC\", \"Microsoft YaHei UI\", \"Microsoft YaHei\", Arial, \"Helvetica Neue\", Helvetica, sans-serif;` ,  Then add the font you want to use in the first position after \"font-family:\",  such as: `font-family:  \"The font name you want to use\", \"PingFang SC\", ..., sans-serif;`; Modify the font of the text in the Windows environment and find: ` body.os-windows{...}`, Modify according to the previous method.\n\n2. Modify the code font and find: `--monospace: \"JetBrains Mono\", \"Source Code Pro\", \"Fira Code\", Consolas, Inconsolata, \"Cascadia Code\", Monaco, \"Ubuntu Mono\", monospace;`，Then add the font you want to use in its first position,  such as: `--monospace:  \"The font name you want to use\", \"JetBrains Mono\", ..., monospace;`\n\n**Attention: The prerequisite for changing the font is that the corresponding font is installed on your computer, otherwise the modification is invalid;** If you are not familiar with the \"font-family\" property of CSS, you can refer to it here: https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family\n\n# Export HTML\n\nTo export an HTML file, you can directly select the current theme to export HTML\n**If you want to export HTML files with customizable styles, you can use the Mdtht plugin:**\n\nPlugin homepage address:  [Mdtht-Github-address](https://github.com/cayxc/Mdtht)  [Mdtht-Gitee-address]( https://gitee.com/cayxc/mdtht )\nThis plugin provides the following rich features:\n\n1. Follow the system to automatically switch between bright and dark color modes.\n2. Manually switch between light and dark color modes.\n3. Automatically generate table of contents numbers and body area title indexes.\n4. You can choose to convert the first title into an article title and center the title.\n5. Automatically correct the directory hierarchy based on the position of the titles in the main text.\n6. Show/hide directory index numbers.\n7. Switch between three types of directory button styles.\n8. Automatically track the current reading area location to the current directory and upper level directory.\n9. Expand the screwdriver directory with one click.\n10. One click expand and collapse the sidebar.\n11. Catalog search.\n12. Code highlighting.\n13. Text Shadow Mode.\n\nPlease refer to the plugin homepage for specific details of **mdtht.js** plugin.\n\n\n**Export mdtht.js as an HTML rendering (Light theme)**\n\n---\n\n<img src=\"./img/mdtht-light.png\" alt=\"mdtht-light\" style=\"zoom:50%;\" />**Export mdtht.js as an HTML rendering (Dark theme)**\n\n---\n\n<img src=\"./img/mdtht-dark.png\" alt=\"mdtht-dark\" style=\"zoom:50%;\" />\n\n---\n🐳 If you like the style of this document, please provide a star 😄， If there are any issues during use, please submit them in a timely manner and I will handle them as soon as I see them.\n\n","source":"_posts/主题样例/readme.en.md","raw":"---\ntitle: Mdmdt theme readme\ndate: 2025-07-06\n---\n\n![typora-mdmdt-theme](./img/mdmdt.png)\n# About Mdmdt theme\n\n![Languages](https://img.shields.io/badge/languages-CSS-F34B7D.svg) ![GitHub release (latest by date including pre-releases)](https://img.shields.io/github/v/release/cayxc/Mdmdt?include_prereleases&color=blue&logo=hack-the-box) ![GitHub license](https://img.shields.io/github/license/cayxc/Mdmdt.svg) ![gitee stars](https://gitee.com/cayxc/mdmdt/badge/star.svg) ![gitee forks](https://gitee.com/cayxc/mdmdt/badge/fork.svg)\n\n#### [中文文档](./readme.md)\n\n**Mdmdt** is an abbreviation for Markdown Minimalism Document Theme, meaning: Markdown Minimalism Document Theme.**Mdmdt** is a deeply customized personalized Typora theme, aimed at creating a **refreshing and minimalist** document style. The **Mdmdt** theme has now been included in the [official Typora theme library](https://theme.typoraio.cn).\n\nCompared to the default theme style, the following aspects have been mainly modified:\n1. Simple and comfortable color matching style\n2. Modify the title style\n3. Modify the table style\n4. Modify the reference box style\n5. Add rounded corner style to the image\n6. Add highlight style to code\n7. Modify file tree, outline, and document list styles\n8. Automatic follow system's light/dark theme mode (can be set separately for light/dark themes)\n9. Modify other UI styles\n\n> [!IMPORTANT]\n>\n> **Attention**: This theme has only been tested in Windows and MacOS environments, and has not been tested in Linux environments. Please be aware when using it!\n\n# Preview\n\n![mdmdt-text](./img/mdmdt-text.png)\n![mdmdt-source](./img/mdmdt-source.png)\n![mdmdt-code](./img/mdmdt-code.png)\n![mdmdt-list](./img/mdmdt-list.png)\n![mdmdt-math](./img/mdmdt-math.png)\n![mdmdt-blockquote](./img/mdmdt-blockquote.png)\n![mdmdt-mermaid](./img/mdmdt-mermaid.png)\n![mdmdt-title](./img/mdmdt-title.png)\n\n---\n\n![mdmdt-ui-1](./img/mdmdt-ui-1.png)\n![mdmdt-ui-2](./img/mdmdt-ui-2.png)\n![mdmdt-ui-3](./img/mdmdt-ui-3.png)\n![mdmdt-ui-4](./img/mdmdt-ui-4.png)\n\n# Personalized graphic layout\n\nThis theme provides some personalized graphic and text layout solutions. For specific usage methods, please refer to the \"<u>个性化图文布局</u>\" chapter in the \"**Mdmdt主题演示demo.md**\".\n\n**Personalized graphic layout preview:**\n\n![性化图文排列](./img/mdmdt-layout.png)\n\n# Usage\n\nUsing custom themes is very simple, as follows:\n\n1. Open `Preferences` -> `Appearance` -> `Open Theme Folder`\n2. Copy the downloaded `mdmdt.css`  file to the theme folder.\n3. **Exit Typora and reopen**，In the `Menu Bar` -> `Themes`, Select **Mdmdt** theme and complete the theme switch.\n\n> [!NOTE]\n>\n> **Note:** The mdmdt.css file contains both bright and dark themes, which will automatically switch between bright and dark themes according to the system mode.\n\n##### Use separate Light/Dark theme\n\nIf you only want to use a separate bright or dark theme, the method is as follows:\n1. Open `Preferences` -> `Appearance` -> `Open Theme Folder`\n2. Copy `mdmdt-light.css` or `mdmdt-dark.css ` to the theme folder.\n3. **Exit Typora and reopen**，In the `Menu Bar` -> `Themes`, Select **Mdmdt Light** or **Mdmdt Dark** theme and complete the theme switch.\n\n# Modify font\nIf you are not satisfied with the font, you can refer to the following methods to modify the corresponding font:\n\n1. Modify the text font and find: `font-family: \"PingFang SC\", \"Microsoft YaHei UI\", \"Microsoft YaHei\", Arial, \"Helvetica Neue\", Helvetica, sans-serif;` ,  Then add the font you want to use in the first position after \"font-family:\",  such as: `font-family:  \"The font name you want to use\", \"PingFang SC\", ..., sans-serif;`; Modify the font of the text in the Windows environment and find: ` body.os-windows{...}`, Modify according to the previous method.\n\n2. Modify the code font and find: `--monospace: \"JetBrains Mono\", \"Source Code Pro\", \"Fira Code\", Consolas, Inconsolata, \"Cascadia Code\", Monaco, \"Ubuntu Mono\", monospace;`，Then add the font you want to use in its first position,  such as: `--monospace:  \"The font name you want to use\", \"JetBrains Mono\", ..., monospace;`\n\n**Attention: The prerequisite for changing the font is that the corresponding font is installed on your computer, otherwise the modification is invalid;** If you are not familiar with the \"font-family\" property of CSS, you can refer to it here: https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family\n\n# Export HTML\n\nTo export an HTML file, you can directly select the current theme to export HTML\n**If you want to export HTML files with customizable styles, you can use the Mdtht plugin:**\n\nPlugin homepage address:  [Mdtht-Github-address](https://github.com/cayxc/Mdtht)  [Mdtht-Gitee-address]( https://gitee.com/cayxc/mdtht )\nThis plugin provides the following rich features:\n\n1. Follow the system to automatically switch between bright and dark color modes.\n2. Manually switch between light and dark color modes.\n3. Automatically generate table of contents numbers and body area title indexes.\n4. You can choose to convert the first title into an article title and center the title.\n5. Automatically correct the directory hierarchy based on the position of the titles in the main text.\n6. Show/hide directory index numbers.\n7. Switch between three types of directory button styles.\n8. Automatically track the current reading area location to the current directory and upper level directory.\n9. Expand the screwdriver directory with one click.\n10. One click expand and collapse the sidebar.\n11. Catalog search.\n12. Code highlighting.\n13. Text Shadow Mode.\n\nPlease refer to the plugin homepage for specific details of **mdtht.js** plugin.\n\n\n**Export mdtht.js as an HTML rendering (Light theme)**\n\n---\n\n<img src=\"./img/mdtht-light.png\" alt=\"mdtht-light\" style=\"zoom:50%;\" />**Export mdtht.js as an HTML rendering (Dark theme)**\n\n---\n\n<img src=\"./img/mdtht-dark.png\" alt=\"mdtht-dark\" style=\"zoom:50%;\" />\n\n---\n🐳 If you like the style of this document, please provide a star 😄， If there are any issues during use, please submit them in a timely manner and I will handle them as soon as I see them.\n\n","slug":"主题样例/readme.en","published":1,"updated":"2025-09-14T02:36:11.047Z","comments":1,"layout":"post","photos":[],"_id":"cmfktk7el000gc04pc91wb5eu","content":"<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt.png\"\n                        alt=\"typora-mdmdt-theme\"\n                 ></p>\n<h1>About Mdmdt theme</h1>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://img.shields.io/badge/languages-CSS-F34B7D.svg\"\n                        alt=\"Languages\"\n                 > <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://img.shields.io/github/v/release/cayxc/Mdmdt?include_prereleases&amp;color=blue&amp;logo=hack-the-box\"\n                        alt=\"GitHub release (latest by date including pre-releases)\"\n                 > <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://img.shields.io/github/license/cayxc/Mdmdt.svg\"\n                        alt=\"GitHub license\"\n                 > <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://gitee.com/cayxc/mdmdt/badge/star.svg\"\n                        alt=\"gitee stars\"\n                 > <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://gitee.com/cayxc/mdmdt/badge/fork.svg\"\n                        alt=\"gitee forks\"\n                 ></p>\n<h4 id=\"中文文档\"><a href=\"./readme.md\">中文文档</a></h4>\n<p><strong>Mdmdt</strong> is an abbreviation for Markdown Minimalism Document Theme, meaning: Markdown Minimalism Document Theme.<strong>Mdmdt</strong> is a deeply customized personalized Typora theme, aimed at creating a <strong>refreshing and minimalist</strong> document style. The <strong>Mdmdt</strong> theme has now been included in the <a class=\"link\"   href=\"https://theme.typoraio.cn\" >official Typora theme library<i class=\"fas fa-external-link-alt\"></i></a>.</p>\n<p>Compared to the default theme style, the following aspects have been mainly modified:</p>\n<ol>\n<li>Simple and comfortable color matching style</li>\n<li>Modify the title style</li>\n<li>Modify the table style</li>\n<li>Modify the reference box style</li>\n<li>Add rounded corner style to the image</li>\n<li>Add highlight style to code</li>\n<li>Modify file tree, outline, and document list styles</li>\n<li>Automatic follow system’s light/dark theme mode (can be set separately for light/dark themes)</li>\n<li>Modify other UI styles</li>\n</ol>\n<blockquote>\n<p>[!IMPORTANT]</p>\n<p><strong>Attention</strong>: This theme has only been tested in Windows and MacOS environments, and has not been tested in Linux environments. Please be aware when using it!</p>\n</blockquote>\n<h1>Preview</h1>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-text.png\"\n                        alt=\"mdmdt-text\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-source.png\"\n                        alt=\"mdmdt-source\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-code.png\"\n                        alt=\"mdmdt-code\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-list.png\"\n                        alt=\"mdmdt-list\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-math.png\"\n                        alt=\"mdmdt-math\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-blockquote.png\"\n                        alt=\"mdmdt-blockquote\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-mermaid.png\"\n                        alt=\"mdmdt-mermaid\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-title.png\"\n                        alt=\"mdmdt-title\"\n                 ></p>\n<hr>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-ui-1.png\"\n                        alt=\"mdmdt-ui-1\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-ui-2.png\"\n                        alt=\"mdmdt-ui-2\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-ui-3.png\"\n                        alt=\"mdmdt-ui-3\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-ui-4.png\"\n                        alt=\"mdmdt-ui-4\"\n                 ></p>\n<h1>Personalized graphic layout</h1>\n<p>This theme provides some personalized graphic and text layout solutions. For specific usage methods, please refer to the “<u>个性化图文布局</u>” chapter in the “<strong><a class=\"link\"   href=\"http://xn--Mdmdtdemo-up6nt400a0pzash9f.md\" >Mdmdt主题演示demo.md<i class=\"fas fa-external-link-alt\"></i></a></strong>”.</p>\n<p><strong>Personalized graphic layout preview:</strong></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-layout.png\"\n                        alt=\"性化图文排列\"\n                 ></p>\n<h1>Usage</h1>\n<p>Using custom themes is very simple, as follows:</p>\n<ol>\n<li>Open <code>Preferences</code> -&gt; <code>Appearance</code> -&gt; <code>Open Theme Folder</code></li>\n<li>Copy the downloaded <code>mdmdt.css</code>  file to the theme folder.</li>\n<li><strong>Exit Typora and reopen</strong>，In the <code>Menu Bar</code> -&gt; <code>Themes</code>, Select <strong>Mdmdt</strong> theme and complete the theme switch.</li>\n</ol>\n<blockquote>\n<p>[!NOTE]</p>\n<p><strong>Note:</strong> The mdmdt.css file contains both bright and dark themes, which will automatically switch between bright and dark themes according to the system mode.</p>\n</blockquote>\n<h5 id=\"Use-separate-Light-Dark-theme\">Use separate Light/Dark theme</h5>\n<p>If you only want to use a separate bright or dark theme, the method is as follows:</p>\n<ol>\n<li>Open <code>Preferences</code> -&gt; <code>Appearance</code> -&gt; <code>Open Theme Folder</code></li>\n<li>Copy <code>mdmdt-light.css</code> or <code>mdmdt-dark.css </code> to the theme folder.</li>\n<li><strong>Exit Typora and reopen</strong>，In the <code>Menu Bar</code> -&gt; <code>Themes</code>, Select <strong>Mdmdt Light</strong> or <strong>Mdmdt Dark</strong> theme and complete the theme switch.</li>\n</ol>\n<h1>Modify font</h1>\n<p>If you are not satisfied with the font, you can refer to the following methods to modify the corresponding font:</p>\n<ol>\n<li>\n<p>Modify the text font and find: <code>font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, &quot;Helvetica Neue&quot;, Helvetica, sans-serif;</code> ,  Then add the font you want to use in the first position after “font-family:”,  such as: <code>font-family:  &quot;The font name you want to use&quot;, &quot;PingFang SC&quot;, ..., sans-serif;</code>; Modify the font of the text in the Windows environment and find: <code> body.os-windows&#123;...&#125;</code>, Modify according to the previous method.</p>\n</li>\n<li>\n<p>Modify the code font and find: <code>--monospace: &quot;JetBrains Mono&quot;, &quot;Source Code Pro&quot;, &quot;Fira Code&quot;, Consolas, Inconsolata, &quot;Cascadia Code&quot;, Monaco, &quot;Ubuntu Mono&quot;, monospace;</code>，Then add the font you want to use in its first position,  such as: <code>--monospace:  &quot;The font name you want to use&quot;, &quot;JetBrains Mono&quot;, ..., monospace;</code></p>\n</li>\n</ol>\n<p><strong>Attention: The prerequisite for changing the font is that the corresponding font is installed on your computer, otherwise the modification is invalid;</strong> If you are not familiar with the “font-family” property of CSS, you can refer to it here: <a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family\" >https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h1>Export HTML</h1>\n<p>To export an HTML file, you can directly select the current theme to export HTML<br>\n<strong>If you want to export HTML files with customizable styles, you can use the Mdtht plugin:</strong></p>\n<p>Plugin homepage address:  <a class=\"link\"   href=\"https://github.com/cayxc/Mdtht\" >Mdtht-Github-address<i class=\"fas fa-external-link-alt\"></i></a>  <a class=\"link\"   href=\"https://gitee.com/cayxc/mdtht\" >Mdtht-Gitee-address<i class=\"fas fa-external-link-alt\"></i></a><br>\nThis plugin provides the following rich features:</p>\n<ol>\n<li>Follow the system to automatically switch between bright and dark color modes.</li>\n<li>Manually switch between light and dark color modes.</li>\n<li>Automatically generate table of contents numbers and body area title indexes.</li>\n<li>You can choose to convert the first title into an article title and center the title.</li>\n<li>Automatically correct the directory hierarchy based on the position of the titles in the main text.</li>\n<li>Show/hide directory index numbers.</li>\n<li>Switch between three types of directory button styles.</li>\n<li>Automatically track the current reading area location to the current directory and upper level directory.</li>\n<li>Expand the screwdriver directory with one click.</li>\n<li>One click expand and collapse the sidebar.</li>\n<li>Catalog search.</li>\n<li>Code highlighting.</li>\n<li>Text Shadow Mode.</li>\n</ol>\n<p>Please refer to the plugin homepage for specific details of <strong>mdtht.js</strong> plugin.</p>\n<p><strong>Export mdtht.js as an HTML rendering (Light theme)</strong></p>\n<hr>\n<p><img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdtht-light.png\"\n                         alt=\"mdtht-light\" style=\"zoom:50%;\" \n                 ><strong>Export mdtht.js as an HTML rendering (Dark theme)</strong></p>\n<hr>\n<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdtht-dark.png\"\n                         alt=\"mdtht-dark\" style=\"zoom:50%;\" \n                 >\n<hr>\n<p>🐳 If you like the style of this document, please provide a star 😄， If there are any issues during use, please submit them in a timely manner and I will handle them as soon as I see them.</p>\n","secretKey":"ac9554c7de9c3a40c5a205739102b93b1b769cd9255a600f7a7d146f69f419b3","iv":"3811a214bd0f235e9daedf905807730b","encryptedPassword":"fe85e79679610c4e526d2d391d14b930","encryptedContent":"","excerpt":"","more":"<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt.png\"\n                        alt=\"typora-mdmdt-theme\"\n                 ></p>\n<h1>About Mdmdt theme</h1>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://img.shields.io/badge/languages-CSS-F34B7D.svg\"\n                        alt=\"Languages\"\n                 > <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://img.shields.io/github/v/release/cayxc/Mdmdt?include_prereleases&amp;color=blue&amp;logo=hack-the-box\"\n                        alt=\"GitHub release (latest by date including pre-releases)\"\n                 > <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://img.shields.io/github/license/cayxc/Mdmdt.svg\"\n                        alt=\"GitHub license\"\n                 > <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://gitee.com/cayxc/mdmdt/badge/star.svg\"\n                        alt=\"gitee stars\"\n                 > <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://gitee.com/cayxc/mdmdt/badge/fork.svg\"\n                        alt=\"gitee forks\"\n                 ></p>\n<h4 id=\"中文文档\"><a href=\"./readme.md\">中文文档</a></h4>\n<p><strong>Mdmdt</strong> is an abbreviation for Markdown Minimalism Document Theme, meaning: Markdown Minimalism Document Theme.<strong>Mdmdt</strong> is a deeply customized personalized Typora theme, aimed at creating a <strong>refreshing and minimalist</strong> document style. The <strong>Mdmdt</strong> theme has now been included in the <a class=\"link\"   href=\"https://theme.typoraio.cn\" >official Typora theme library<i class=\"fas fa-external-link-alt\"></i></a>.</p>\n<p>Compared to the default theme style, the following aspects have been mainly modified:</p>\n<ol>\n<li>Simple and comfortable color matching style</li>\n<li>Modify the title style</li>\n<li>Modify the table style</li>\n<li>Modify the reference box style</li>\n<li>Add rounded corner style to the image</li>\n<li>Add highlight style to code</li>\n<li>Modify file tree, outline, and document list styles</li>\n<li>Automatic follow system’s light/dark theme mode (can be set separately for light/dark themes)</li>\n<li>Modify other UI styles</li>\n</ol>\n<blockquote>\n<p>[!IMPORTANT]</p>\n<p><strong>Attention</strong>: This theme has only been tested in Windows and MacOS environments, and has not been tested in Linux environments. Please be aware when using it!</p>\n</blockquote>\n<h1>Preview</h1>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-text.png\"\n                        alt=\"mdmdt-text\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-source.png\"\n                        alt=\"mdmdt-source\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-code.png\"\n                        alt=\"mdmdt-code\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-list.png\"\n                        alt=\"mdmdt-list\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-math.png\"\n                        alt=\"mdmdt-math\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-blockquote.png\"\n                        alt=\"mdmdt-blockquote\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-mermaid.png\"\n                        alt=\"mdmdt-mermaid\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-title.png\"\n                        alt=\"mdmdt-title\"\n                 ></p>\n<hr>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-ui-1.png\"\n                        alt=\"mdmdt-ui-1\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-ui-2.png\"\n                        alt=\"mdmdt-ui-2\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-ui-3.png\"\n                        alt=\"mdmdt-ui-3\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-ui-4.png\"\n                        alt=\"mdmdt-ui-4\"\n                 ></p>\n<h1>Personalized graphic layout</h1>\n<p>This theme provides some personalized graphic and text layout solutions. For specific usage methods, please refer to the “<u>个性化图文布局</u>” chapter in the “<strong><a class=\"link\"   href=\"http://xn--Mdmdtdemo-up6nt400a0pzash9f.md\" >Mdmdt主题演示demo.md<i class=\"fas fa-external-link-alt\"></i></a></strong>”.</p>\n<p><strong>Personalized graphic layout preview:</strong></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-layout.png\"\n                        alt=\"性化图文排列\"\n                 ></p>\n<h1>Usage</h1>\n<p>Using custom themes is very simple, as follows:</p>\n<ol>\n<li>Open <code>Preferences</code> -&gt; <code>Appearance</code> -&gt; <code>Open Theme Folder</code></li>\n<li>Copy the downloaded <code>mdmdt.css</code>  file to the theme folder.</li>\n<li><strong>Exit Typora and reopen</strong>，In the <code>Menu Bar</code> -&gt; <code>Themes</code>, Select <strong>Mdmdt</strong> theme and complete the theme switch.</li>\n</ol>\n<blockquote>\n<p>[!NOTE]</p>\n<p><strong>Note:</strong> The mdmdt.css file contains both bright and dark themes, which will automatically switch between bright and dark themes according to the system mode.</p>\n</blockquote>\n<h5 id=\"Use-separate-Light-Dark-theme\">Use separate Light/Dark theme</h5>\n<p>If you only want to use a separate bright or dark theme, the method is as follows:</p>\n<ol>\n<li>Open <code>Preferences</code> -&gt; <code>Appearance</code> -&gt; <code>Open Theme Folder</code></li>\n<li>Copy <code>mdmdt-light.css</code> or <code>mdmdt-dark.css </code> to the theme folder.</li>\n<li><strong>Exit Typora and reopen</strong>，In the <code>Menu Bar</code> -&gt; <code>Themes</code>, Select <strong>Mdmdt Light</strong> or <strong>Mdmdt Dark</strong> theme and complete the theme switch.</li>\n</ol>\n<h1>Modify font</h1>\n<p>If you are not satisfied with the font, you can refer to the following methods to modify the corresponding font:</p>\n<ol>\n<li>\n<p>Modify the text font and find: <code>font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, &quot;Helvetica Neue&quot;, Helvetica, sans-serif;</code> ,  Then add the font you want to use in the first position after “font-family:”,  such as: <code>font-family:  &quot;The font name you want to use&quot;, &quot;PingFang SC&quot;, ..., sans-serif;</code>; Modify the font of the text in the Windows environment and find: <code> body.os-windows&#123;...&#125;</code>, Modify according to the previous method.</p>\n</li>\n<li>\n<p>Modify the code font and find: <code>--monospace: &quot;JetBrains Mono&quot;, &quot;Source Code Pro&quot;, &quot;Fira Code&quot;, Consolas, Inconsolata, &quot;Cascadia Code&quot;, Monaco, &quot;Ubuntu Mono&quot;, monospace;</code>，Then add the font you want to use in its first position,  such as: <code>--monospace:  &quot;The font name you want to use&quot;, &quot;JetBrains Mono&quot;, ..., monospace;</code></p>\n</li>\n</ol>\n<p><strong>Attention: The prerequisite for changing the font is that the corresponding font is installed on your computer, otherwise the modification is invalid;</strong> If you are not familiar with the “font-family” property of CSS, you can refer to it here: <a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family\" >https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h1>Export HTML</h1>\n<p>To export an HTML file, you can directly select the current theme to export HTML<br>\n<strong>If you want to export HTML files with customizable styles, you can use the Mdtht plugin:</strong></p>\n<p>Plugin homepage address:  <a class=\"link\"   href=\"https://github.com/cayxc/Mdtht\" >Mdtht-Github-address<i class=\"fas fa-external-link-alt\"></i></a>  <a class=\"link\"   href=\"https://gitee.com/cayxc/mdtht\" >Mdtht-Gitee-address<i class=\"fas fa-external-link-alt\"></i></a><br>\nThis plugin provides the following rich features:</p>\n<ol>\n<li>Follow the system to automatically switch between bright and dark color modes.</li>\n<li>Manually switch between light and dark color modes.</li>\n<li>Automatically generate table of contents numbers and body area title indexes.</li>\n<li>You can choose to convert the first title into an article title and center the title.</li>\n<li>Automatically correct the directory hierarchy based on the position of the titles in the main text.</li>\n<li>Show/hide directory index numbers.</li>\n<li>Switch between three types of directory button styles.</li>\n<li>Automatically track the current reading area location to the current directory and upper level directory.</li>\n<li>Expand the screwdriver directory with one click.</li>\n<li>One click expand and collapse the sidebar.</li>\n<li>Catalog search.</li>\n<li>Code highlighting.</li>\n<li>Text Shadow Mode.</li>\n</ol>\n<p>Please refer to the plugin homepage for specific details of <strong>mdtht.js</strong> plugin.</p>\n<p><strong>Export mdtht.js as an HTML rendering (Light theme)</strong></p>\n<hr>\n<p><img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdtht-light.png\"\n                         alt=\"mdtht-light\" style=\"zoom:50%;\" \n                 ><strong>Export mdtht.js as an HTML rendering (Dark theme)</strong></p>\n<hr>\n<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdtht-dark.png\"\n                         alt=\"mdtht-dark\" style=\"zoom:50%;\" \n                 >\n<hr>\n<p>🐳 If you like the style of this document, please provide a star 😄， If there are any issues during use, please submit them in a timely manner and I will handle them as soon as I see them.</p>\n"},{"title":"Mdmdt主题","date":"2025-07-05T16:00:00.000Z","_content":"\n![typora-mdmdt-theme](./img/mdmdt.png)\n# 关于Mdmdt主题\n![Languages](https://img.shields.io/badge/languages-CSS-F34B7D.svg) ![GitHub release (latest by date including pre-releases)](https://img.shields.io/github/v/release/cayxc/Mdmdt?include_prereleases&color=blue&logo=hack-the-box) ![GitHub license](https://img.shields.io/github/license/cayxc/Mdmdt.svg) ![gitee stars](https://gitee.com/cayxc/mdmdt/badge/star.svg) ![gitee forks](https://gitee.com/cayxc/mdmdt/badge/fork.svg)\n\n#### [English Document](./readme.en.md)\n\n**Mdmdt** 是 markdown minimalism document theme 的缩写，意为：**Markdown极简文档主题**。\n**Mdmdt** 是深度定制的个性化Typora主题，其目的是打造一个 **清爽极简** 的文档样式。**Mdmdt** 主题现已收录至 [Typora官方主题库https://theme.typoraio.cn](https://theme.typoraio.cn/).\n\n相比于默认主题风格主要修改了以下几个方面：\n1. 简洁舒适的配色风格\n2. 修改标题样式\n3. 修改表格样式\n4. 修改引用框样式\n5. 为图片添加圆角样式\n6. 代码添加高亮样式\n7. 修改文件树、大纲和文档列表样式\n8. 自动跟随系统的亮色/暗色主题模式（可单独设置亮/暗主题)\n9. 修改其他UI样式\n\n> [!IMPORTANT]\n>\n> **注意：**该主题只在 Windows 和 MacOS 环境下测试过，Linux环境下未做测试，使用时还请注意！\n\n# 预览\n\n![mdmdt-text](./img/mdmdt-text.png)\n![mdmdt-source](./img/mdmdt-source.png)\n![mdmdt-code](./img/mdmdt-code.png)\n![mdmdt-list](./img/mdmdt-list.png)\n![mdmdt-math](./img/mdmdt-math.png)\n![mdmdt-blockquote](./img/mdmdt-blockquote.png)\n![mdmdt-mermaid](./img/mdmdt-mermaid.png)\n![mdmdt-title](./img/mdmdt-title.png)\n\n---\n\n![mdmdt-ui-1](./img/mdmdt-ui-1.png)\n![mdmdt-ui-2](./img/mdmdt-ui-2.png)\n![mdmdt-ui-3](./img/mdmdt-ui-3.png)\n![mdmdt-ui-4](./img/mdmdt-ui-4.png)\n\n# 个性化图文布局\n\n本主题提供了一些个性化图文布局方案，具体使用方法请参考 “**Mdmdt主题演示demo.md**” 中的“<u>个性化图文布局</u>”章节相关内容。\n\n**个性化图文布局预览:**\n\n![性化图文排列](./img/mdmdt-layout.png)\n\n# 如何使用\n\n使用自定义主题非常简单，方法如下：\n1. 打开 `偏好设置` -> `外观` -> `打开主题文件夹`\n2. 将下载好的 `mdmdt.css文件` 复制到主题文件夹下\n3. **退出 Typora 重新打开**，在 `菜单栏` -> `主题` 选择 **Mdmdt** 主题，完成主题切换。\n\n> [!NOTE]\n>\n> **注意：**mdmdt.css 文件中包含了亮色和暗色两者主题，会跟随系统模式自动切换亮暗主题。\n\n##### 使用单独的亮色/暗色主题\n\n如果只想使用单独的亮色或暗色主题，方法如下：\n1. 打开 `偏好设置` -> `外观` -> `打开主题文件夹`\n2. 复制 `mdmdt-light.css` 或者 `mdmdt-dark.css` 到 `主题文件夹下`\n3. 重新打开Typora，在 `菜单栏` -> `主题` 选择 **Mdmdt Ligh** 或者 **mdmdt Dark** 主题，完成主题切换。\n\n# 修改字体\n\n如果您对字体不满意，可以参照如下方法修改相应的字体：\n\n1. 修改正文字体，找到：`font-family: \"PingFang SC\", \"Microsoft YaHei UI\", \"Microsoft YaHei\", Arial, \"Helvetica Neue\", Helvetica, sans-serif;` 在 “font-family:” 后第一个位置添加你想使用的字体，如：`font-family: \"想使用的字体名称\", \"PingFang SC\", ..., sans-serif;`；Windows环境下修改正文字体，找到：`body.os-windows{...}`，按照前面方式修改。\n2. 修改代码字体，找到：`--monospace: \"JetBrains Mono\", \"Source Code Pro\", \"Fira Code\", Consolas, Inconsolata, \"Cascadia Code\", Monaco, \"Ubuntu Mono\", monospace;`， 然后在其第一个位置添加你想使用的字体，如：`--monospace: \"想使用的字体名称\", \"JetBrains Mono\", ..., monospace;`\n\n**注意：更换字体的前提是你电脑上要安装有相应的字体，否则修改无效**。如果您不了解 CSS 的 \"font-family\" 属性，可以参考这里：https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family\n\n# 导出html\n\n想要导出 html 文件可以直接选择当前主题导出 html\n\n**如果想要导出的 html 文件能自定义更多样式，可以使用 Mdtht 插件：**\n\n插件主页地址：[Mdtht-Gitub地址](https://github.com/cayxc/Mdtht)   [Mdtht-Gitee地址](https://gitee.com/cayxc/mdtht)\n\n该插件提供了如下丰富功能：\n\n1. 跟随系统自动切换亮色/暗色模式。\n2. 手动切换亮色/暗色模式。\n3. 自动生成目录编号和正文区标题索引。\n4. 可选择将第一个标题转换为文章标题，并将标题居中。\n5. 根据正文中标题的位置自动纠正目录层级。\n6. 显示/隐藏目录索引编号。\n7. 3种目录按钮样式切换。\n8. 根据当前阅读区位置自动追踪到所在目录和上层目录。\n9. 一键展开收起子目录。\n10. 一键展开收起侧边栏。\n11. 目录搜索。\n12. 代码高亮。\n13. 文字阴影模式。\n\n **mdtht.js** 插件具体详情请参考插件主页。\n\n**mdtht.js导出为 html 效果图（亮色）**\n\n---\n\n<img src=\"./img/mdtht-light.png\" alt=\"mdmdt-light\" style=\"zoom:50%;\" /> **mdtht.js导出为 html 效果图（暗色）**\n\n---\n\n<img src=\"./img/mdtht-dark.png\" alt=\"mdmdt-dark\" style=\"zoom:50%;\" />\n\n---\n\n🐳 如果您喜欢该文档样式风格，还请给一个 star 😄，使用过程中有什么问题请及时提交 issues，看到后我会第一时间处理。\n\n\n\n","source":"_posts/主题样例/readme.md","raw":"---\ntitle: Mdmdt主题\ndate: 2025-07-06\n---\n\n![typora-mdmdt-theme](./img/mdmdt.png)\n# 关于Mdmdt主题\n![Languages](https://img.shields.io/badge/languages-CSS-F34B7D.svg) ![GitHub release (latest by date including pre-releases)](https://img.shields.io/github/v/release/cayxc/Mdmdt?include_prereleases&color=blue&logo=hack-the-box) ![GitHub license](https://img.shields.io/github/license/cayxc/Mdmdt.svg) ![gitee stars](https://gitee.com/cayxc/mdmdt/badge/star.svg) ![gitee forks](https://gitee.com/cayxc/mdmdt/badge/fork.svg)\n\n#### [English Document](./readme.en.md)\n\n**Mdmdt** 是 markdown minimalism document theme 的缩写，意为：**Markdown极简文档主题**。\n**Mdmdt** 是深度定制的个性化Typora主题，其目的是打造一个 **清爽极简** 的文档样式。**Mdmdt** 主题现已收录至 [Typora官方主题库https://theme.typoraio.cn](https://theme.typoraio.cn/).\n\n相比于默认主题风格主要修改了以下几个方面：\n1. 简洁舒适的配色风格\n2. 修改标题样式\n3. 修改表格样式\n4. 修改引用框样式\n5. 为图片添加圆角样式\n6. 代码添加高亮样式\n7. 修改文件树、大纲和文档列表样式\n8. 自动跟随系统的亮色/暗色主题模式（可单独设置亮/暗主题)\n9. 修改其他UI样式\n\n> [!IMPORTANT]\n>\n> **注意：**该主题只在 Windows 和 MacOS 环境下测试过，Linux环境下未做测试，使用时还请注意！\n\n# 预览\n\n![mdmdt-text](./img/mdmdt-text.png)\n![mdmdt-source](./img/mdmdt-source.png)\n![mdmdt-code](./img/mdmdt-code.png)\n![mdmdt-list](./img/mdmdt-list.png)\n![mdmdt-math](./img/mdmdt-math.png)\n![mdmdt-blockquote](./img/mdmdt-blockquote.png)\n![mdmdt-mermaid](./img/mdmdt-mermaid.png)\n![mdmdt-title](./img/mdmdt-title.png)\n\n---\n\n![mdmdt-ui-1](./img/mdmdt-ui-1.png)\n![mdmdt-ui-2](./img/mdmdt-ui-2.png)\n![mdmdt-ui-3](./img/mdmdt-ui-3.png)\n![mdmdt-ui-4](./img/mdmdt-ui-4.png)\n\n# 个性化图文布局\n\n本主题提供了一些个性化图文布局方案，具体使用方法请参考 “**Mdmdt主题演示demo.md**” 中的“<u>个性化图文布局</u>”章节相关内容。\n\n**个性化图文布局预览:**\n\n![性化图文排列](./img/mdmdt-layout.png)\n\n# 如何使用\n\n使用自定义主题非常简单，方法如下：\n1. 打开 `偏好设置` -> `外观` -> `打开主题文件夹`\n2. 将下载好的 `mdmdt.css文件` 复制到主题文件夹下\n3. **退出 Typora 重新打开**，在 `菜单栏` -> `主题` 选择 **Mdmdt** 主题，完成主题切换。\n\n> [!NOTE]\n>\n> **注意：**mdmdt.css 文件中包含了亮色和暗色两者主题，会跟随系统模式自动切换亮暗主题。\n\n##### 使用单独的亮色/暗色主题\n\n如果只想使用单独的亮色或暗色主题，方法如下：\n1. 打开 `偏好设置` -> `外观` -> `打开主题文件夹`\n2. 复制 `mdmdt-light.css` 或者 `mdmdt-dark.css` 到 `主题文件夹下`\n3. 重新打开Typora，在 `菜单栏` -> `主题` 选择 **Mdmdt Ligh** 或者 **mdmdt Dark** 主题，完成主题切换。\n\n# 修改字体\n\n如果您对字体不满意，可以参照如下方法修改相应的字体：\n\n1. 修改正文字体，找到：`font-family: \"PingFang SC\", \"Microsoft YaHei UI\", \"Microsoft YaHei\", Arial, \"Helvetica Neue\", Helvetica, sans-serif;` 在 “font-family:” 后第一个位置添加你想使用的字体，如：`font-family: \"想使用的字体名称\", \"PingFang SC\", ..., sans-serif;`；Windows环境下修改正文字体，找到：`body.os-windows{...}`，按照前面方式修改。\n2. 修改代码字体，找到：`--monospace: \"JetBrains Mono\", \"Source Code Pro\", \"Fira Code\", Consolas, Inconsolata, \"Cascadia Code\", Monaco, \"Ubuntu Mono\", monospace;`， 然后在其第一个位置添加你想使用的字体，如：`--monospace: \"想使用的字体名称\", \"JetBrains Mono\", ..., monospace;`\n\n**注意：更换字体的前提是你电脑上要安装有相应的字体，否则修改无效**。如果您不了解 CSS 的 \"font-family\" 属性，可以参考这里：https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family\n\n# 导出html\n\n想要导出 html 文件可以直接选择当前主题导出 html\n\n**如果想要导出的 html 文件能自定义更多样式，可以使用 Mdtht 插件：**\n\n插件主页地址：[Mdtht-Gitub地址](https://github.com/cayxc/Mdtht)   [Mdtht-Gitee地址](https://gitee.com/cayxc/mdtht)\n\n该插件提供了如下丰富功能：\n\n1. 跟随系统自动切换亮色/暗色模式。\n2. 手动切换亮色/暗色模式。\n3. 自动生成目录编号和正文区标题索引。\n4. 可选择将第一个标题转换为文章标题，并将标题居中。\n5. 根据正文中标题的位置自动纠正目录层级。\n6. 显示/隐藏目录索引编号。\n7. 3种目录按钮样式切换。\n8. 根据当前阅读区位置自动追踪到所在目录和上层目录。\n9. 一键展开收起子目录。\n10. 一键展开收起侧边栏。\n11. 目录搜索。\n12. 代码高亮。\n13. 文字阴影模式。\n\n **mdtht.js** 插件具体详情请参考插件主页。\n\n**mdtht.js导出为 html 效果图（亮色）**\n\n---\n\n<img src=\"./img/mdtht-light.png\" alt=\"mdmdt-light\" style=\"zoom:50%;\" /> **mdtht.js导出为 html 效果图（暗色）**\n\n---\n\n<img src=\"./img/mdtht-dark.png\" alt=\"mdmdt-dark\" style=\"zoom:50%;\" />\n\n---\n\n🐳 如果您喜欢该文档样式风格，还请给一个 star 😄，使用过程中有什么问题请及时提交 issues，看到后我会第一时间处理。\n\n\n\n","slug":"主题样例/readme","published":1,"updated":"2025-09-14T02:36:11.047Z","comments":1,"layout":"post","photos":[],"_id":"cmfktk7em000kc04pgyxd5t5u","content":"<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt.png\"\n                        alt=\"typora-mdmdt-theme\"\n                 ></p>\n<h1>关于Mdmdt主题</h1>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://img.shields.io/badge/languages-CSS-F34B7D.svg\"\n                        alt=\"Languages\"\n                 > <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://img.shields.io/github/v/release/cayxc/Mdmdt?include_prereleases&amp;color=blue&amp;logo=hack-the-box\"\n                        alt=\"GitHub release (latest by date including pre-releases)\"\n                 > <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://img.shields.io/github/license/cayxc/Mdmdt.svg\"\n                        alt=\"GitHub license\"\n                 > <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://gitee.com/cayxc/mdmdt/badge/star.svg\"\n                        alt=\"gitee stars\"\n                 > <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://gitee.com/cayxc/mdmdt/badge/fork.svg\"\n                        alt=\"gitee forks\"\n                 ></p>\n<h4 id=\"English-Document\"><a href=\"./readme.en.md\">English Document</a></h4>\n<p><strong>Mdmdt</strong> 是 markdown minimalism document theme 的缩写，意为：<strong>Markdown极简文档主题</strong>。<br>\n<strong>Mdmdt</strong> 是深度定制的个性化Typora主题，其目的是打造一个 <strong>清爽极简</strong> 的文档样式。<strong>Mdmdt</strong> 主题现已收录至 <a class=\"link\"   href=\"https://theme.typoraio.cn/\" >Typora官方主题库https://theme.typoraio.cn<i class=\"fas fa-external-link-alt\"></i></a>.</p>\n<p>相比于默认主题风格主要修改了以下几个方面：</p>\n<ol>\n<li>简洁舒适的配色风格</li>\n<li>修改标题样式</li>\n<li>修改表格样式</li>\n<li>修改引用框样式</li>\n<li>为图片添加圆角样式</li>\n<li>代码添加高亮样式</li>\n<li>修改文件树、大纲和文档列表样式</li>\n<li>自动跟随系统的亮色/暗色主题模式（可单独设置亮/暗主题)</li>\n<li>修改其他UI样式</li>\n</ol>\n<blockquote>\n<p>[!IMPORTANT]</p>\n<p>**注意：**该主题只在 Windows 和 MacOS 环境下测试过，Linux环境下未做测试，使用时还请注意！</p>\n</blockquote>\n<h1>预览</h1>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-text.png\"\n                        alt=\"mdmdt-text\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-source.png\"\n                        alt=\"mdmdt-source\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-code.png\"\n                        alt=\"mdmdt-code\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-list.png\"\n                        alt=\"mdmdt-list\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-math.png\"\n                        alt=\"mdmdt-math\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-blockquote.png\"\n                        alt=\"mdmdt-blockquote\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-mermaid.png\"\n                        alt=\"mdmdt-mermaid\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-title.png\"\n                        alt=\"mdmdt-title\"\n                 ></p>\n<hr>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-ui-1.png\"\n                        alt=\"mdmdt-ui-1\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-ui-2.png\"\n                        alt=\"mdmdt-ui-2\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-ui-3.png\"\n                        alt=\"mdmdt-ui-3\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-ui-4.png\"\n                        alt=\"mdmdt-ui-4\"\n                 ></p>\n<h1>个性化图文布局</h1>\n<p>本主题提供了一些个性化图文布局方案，具体使用方法请参考 “<strong><a class=\"link\"   href=\"http://xn--Mdmdtdemo-up6nt400a0pzash9f.md\" >Mdmdt主题演示demo.md<i class=\"fas fa-external-link-alt\"></i></a></strong>” 中的“<u>个性化图文布局</u>”章节相关内容。</p>\n<p><strong>个性化图文布局预览:</strong></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-layout.png\"\n                        alt=\"性化图文排列\"\n                 ></p>\n<h1>如何使用</h1>\n<p>使用自定义主题非常简单，方法如下：</p>\n<ol>\n<li>打开 <code>偏好设置</code> -&gt; <code>外观</code> -&gt; <code>打开主题文件夹</code></li>\n<li>将下载好的 <code>mdmdt.css文件</code> 复制到主题文件夹下</li>\n<li><strong>退出 Typora 重新打开</strong>，在 <code>菜单栏</code> -&gt; <code>主题</code> 选择 <strong>Mdmdt</strong> 主题，完成主题切换。</li>\n</ol>\n<blockquote>\n<p>[!NOTE]</p>\n<p>**注意：**mdmdt.css 文件中包含了亮色和暗色两者主题，会跟随系统模式自动切换亮暗主题。</p>\n</blockquote>\n<h5 id=\"使用单独的亮色-暗色主题\">使用单独的亮色/暗色主题</h5>\n<p>如果只想使用单独的亮色或暗色主题，方法如下：</p>\n<ol>\n<li>打开 <code>偏好设置</code> -&gt; <code>外观</code> -&gt; <code>打开主题文件夹</code></li>\n<li>复制 <code>mdmdt-light.css</code> 或者 <code>mdmdt-dark.css</code> 到 <code>主题文件夹下</code></li>\n<li>重新打开Typora，在 <code>菜单栏</code> -&gt; <code>主题</code> 选择 <strong>Mdmdt Ligh</strong> 或者 <strong>mdmdt Dark</strong> 主题，完成主题切换。</li>\n</ol>\n<h1>修改字体</h1>\n<p>如果您对字体不满意，可以参照如下方法修改相应的字体：</p>\n<ol>\n<li>修改正文字体，找到：<code>font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, &quot;Helvetica Neue&quot;, Helvetica, sans-serif;</code> 在 “font-family:” 后第一个位置添加你想使用的字体，如：<code>font-family: &quot;想使用的字体名称&quot;, &quot;PingFang SC&quot;, ..., sans-serif;</code>；Windows环境下修改正文字体，找到：<code>body.os-windows&#123;...&#125;</code>，按照前面方式修改。</li>\n<li>修改代码字体，找到：<code>--monospace: &quot;JetBrains Mono&quot;, &quot;Source Code Pro&quot;, &quot;Fira Code&quot;, Consolas, Inconsolata, &quot;Cascadia Code&quot;, Monaco, &quot;Ubuntu Mono&quot;, monospace;</code>， 然后在其第一个位置添加你想使用的字体，如：<code>--monospace: &quot;想使用的字体名称&quot;, &quot;JetBrains Mono&quot;, ..., monospace;</code></li>\n</ol>\n<p><strong>注意：更换字体的前提是你电脑上要安装有相应的字体，否则修改无效</strong>。如果您不了解 CSS 的 “font-family” 属性，可以参考这里：<a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family\" >https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h1>导出html</h1>\n<p>想要导出 html 文件可以直接选择当前主题导出 html</p>\n<p><strong>如果想要导出的 html 文件能自定义更多样式，可以使用 Mdtht 插件：</strong></p>\n<p>插件主页地址：<a class=\"link\"   href=\"https://github.com/cayxc/Mdtht\" >Mdtht-Gitub地址<i class=\"fas fa-external-link-alt\"></i></a>   <a class=\"link\"   href=\"https://gitee.com/cayxc/mdtht\" >Mdtht-Gitee地址<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>该插件提供了如下丰富功能：</p>\n<ol>\n<li>跟随系统自动切换亮色/暗色模式。</li>\n<li>手动切换亮色/暗色模式。</li>\n<li>自动生成目录编号和正文区标题索引。</li>\n<li>可选择将第一个标题转换为文章标题，并将标题居中。</li>\n<li>根据正文中标题的位置自动纠正目录层级。</li>\n<li>显示/隐藏目录索引编号。</li>\n<li>3种目录按钮样式切换。</li>\n<li>根据当前阅读区位置自动追踪到所在目录和上层目录。</li>\n<li>一键展开收起子目录。</li>\n<li>一键展开收起侧边栏。</li>\n<li>目录搜索。</li>\n<li>代码高亮。</li>\n<li>文字阴影模式。</li>\n</ol>\n<p><strong>mdtht.js</strong> 插件具体详情请参考插件主页。</p>\n<p><strong>mdtht.js导出为 html 效果图（亮色）</strong></p>\n<hr>\n<p><img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdtht-light.png\"\n                         alt=\"mdmdt-light\" style=\"zoom:50%;\" \n                 > <strong>mdtht.js导出为 html 效果图（暗色）</strong></p>\n<hr>\n<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdtht-dark.png\"\n                         alt=\"mdmdt-dark\" style=\"zoom:50%;\" \n                 >\n<hr>\n<p>🐳 如果您喜欢该文档样式风格，还请给一个 star 😄，使用过程中有什么问题请及时提交 issues，看到后我会第一时间处理。</p>\n","secretKey":"dd9d850070406409f3b10616e6c25a682b32477f3bf7ffc2de333168735da4be","iv":"1beffc880fa5aa35d87d8fb263eca9cc","encryptedPassword":"fd969d476a8c34cf28f4825d91ee1075","encryptedContent":"","excerpt":"","more":"<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt.png\"\n                        alt=\"typora-mdmdt-theme\"\n                 ></p>\n<h1>关于Mdmdt主题</h1>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://img.shields.io/badge/languages-CSS-F34B7D.svg\"\n                        alt=\"Languages\"\n                 > <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://img.shields.io/github/v/release/cayxc/Mdmdt?include_prereleases&amp;color=blue&amp;logo=hack-the-box\"\n                        alt=\"GitHub release (latest by date including pre-releases)\"\n                 > <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://img.shields.io/github/license/cayxc/Mdmdt.svg\"\n                        alt=\"GitHub license\"\n                 > <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://gitee.com/cayxc/mdmdt/badge/star.svg\"\n                        alt=\"gitee stars\"\n                 > <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://gitee.com/cayxc/mdmdt/badge/fork.svg\"\n                        alt=\"gitee forks\"\n                 ></p>\n<h4 id=\"English-Document\"><a href=\"./readme.en.md\">English Document</a></h4>\n<p><strong>Mdmdt</strong> 是 markdown minimalism document theme 的缩写，意为：<strong>Markdown极简文档主题</strong>。<br>\n<strong>Mdmdt</strong> 是深度定制的个性化Typora主题，其目的是打造一个 <strong>清爽极简</strong> 的文档样式。<strong>Mdmdt</strong> 主题现已收录至 <a class=\"link\"   href=\"https://theme.typoraio.cn/\" >Typora官方主题库https://theme.typoraio.cn<i class=\"fas fa-external-link-alt\"></i></a>.</p>\n<p>相比于默认主题风格主要修改了以下几个方面：</p>\n<ol>\n<li>简洁舒适的配色风格</li>\n<li>修改标题样式</li>\n<li>修改表格样式</li>\n<li>修改引用框样式</li>\n<li>为图片添加圆角样式</li>\n<li>代码添加高亮样式</li>\n<li>修改文件树、大纲和文档列表样式</li>\n<li>自动跟随系统的亮色/暗色主题模式（可单独设置亮/暗主题)</li>\n<li>修改其他UI样式</li>\n</ol>\n<blockquote>\n<p>[!IMPORTANT]</p>\n<p>**注意：**该主题只在 Windows 和 MacOS 环境下测试过，Linux环境下未做测试，使用时还请注意！</p>\n</blockquote>\n<h1>预览</h1>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-text.png\"\n                        alt=\"mdmdt-text\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-source.png\"\n                        alt=\"mdmdt-source\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-code.png\"\n                        alt=\"mdmdt-code\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-list.png\"\n                        alt=\"mdmdt-list\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-math.png\"\n                        alt=\"mdmdt-math\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-blockquote.png\"\n                        alt=\"mdmdt-blockquote\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-mermaid.png\"\n                        alt=\"mdmdt-mermaid\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-title.png\"\n                        alt=\"mdmdt-title\"\n                 ></p>\n<hr>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-ui-1.png\"\n                        alt=\"mdmdt-ui-1\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-ui-2.png\"\n                        alt=\"mdmdt-ui-2\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-ui-3.png\"\n                        alt=\"mdmdt-ui-3\"\n                 ><br>\n<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-ui-4.png\"\n                        alt=\"mdmdt-ui-4\"\n                 ></p>\n<h1>个性化图文布局</h1>\n<p>本主题提供了一些个性化图文布局方案，具体使用方法请参考 “<strong><a class=\"link\"   href=\"http://xn--Mdmdtdemo-up6nt400a0pzash9f.md\" >Mdmdt主题演示demo.md<i class=\"fas fa-external-link-alt\"></i></a></strong>” 中的“<u>个性化图文布局</u>”章节相关内容。</p>\n<p><strong>个性化图文布局预览:</strong></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdmdt-layout.png\"\n                        alt=\"性化图文排列\"\n                 ></p>\n<h1>如何使用</h1>\n<p>使用自定义主题非常简单，方法如下：</p>\n<ol>\n<li>打开 <code>偏好设置</code> -&gt; <code>外观</code> -&gt; <code>打开主题文件夹</code></li>\n<li>将下载好的 <code>mdmdt.css文件</code> 复制到主题文件夹下</li>\n<li><strong>退出 Typora 重新打开</strong>，在 <code>菜单栏</code> -&gt; <code>主题</code> 选择 <strong>Mdmdt</strong> 主题，完成主题切换。</li>\n</ol>\n<blockquote>\n<p>[!NOTE]</p>\n<p>**注意：**mdmdt.css 文件中包含了亮色和暗色两者主题，会跟随系统模式自动切换亮暗主题。</p>\n</blockquote>\n<h5 id=\"使用单独的亮色-暗色主题\">使用单独的亮色/暗色主题</h5>\n<p>如果只想使用单独的亮色或暗色主题，方法如下：</p>\n<ol>\n<li>打开 <code>偏好设置</code> -&gt; <code>外观</code> -&gt; <code>打开主题文件夹</code></li>\n<li>复制 <code>mdmdt-light.css</code> 或者 <code>mdmdt-dark.css</code> 到 <code>主题文件夹下</code></li>\n<li>重新打开Typora，在 <code>菜单栏</code> -&gt; <code>主题</code> 选择 <strong>Mdmdt Ligh</strong> 或者 <strong>mdmdt Dark</strong> 主题，完成主题切换。</li>\n</ol>\n<h1>修改字体</h1>\n<p>如果您对字体不满意，可以参照如下方法修改相应的字体：</p>\n<ol>\n<li>修改正文字体，找到：<code>font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, &quot;Helvetica Neue&quot;, Helvetica, sans-serif;</code> 在 “font-family:” 后第一个位置添加你想使用的字体，如：<code>font-family: &quot;想使用的字体名称&quot;, &quot;PingFang SC&quot;, ..., sans-serif;</code>；Windows环境下修改正文字体，找到：<code>body.os-windows&#123;...&#125;</code>，按照前面方式修改。</li>\n<li>修改代码字体，找到：<code>--monospace: &quot;JetBrains Mono&quot;, &quot;Source Code Pro&quot;, &quot;Fira Code&quot;, Consolas, Inconsolata, &quot;Cascadia Code&quot;, Monaco, &quot;Ubuntu Mono&quot;, monospace;</code>， 然后在其第一个位置添加你想使用的字体，如：<code>--monospace: &quot;想使用的字体名称&quot;, &quot;JetBrains Mono&quot;, ..., monospace;</code></li>\n</ol>\n<p><strong>注意：更换字体的前提是你电脑上要安装有相应的字体，否则修改无效</strong>。如果您不了解 CSS 的 “font-family” 属性，可以参考这里：<a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family\" >https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h1>导出html</h1>\n<p>想要导出 html 文件可以直接选择当前主题导出 html</p>\n<p><strong>如果想要导出的 html 文件能自定义更多样式，可以使用 Mdtht 插件：</strong></p>\n<p>插件主页地址：<a class=\"link\"   href=\"https://github.com/cayxc/Mdtht\" >Mdtht-Gitub地址<i class=\"fas fa-external-link-alt\"></i></a>   <a class=\"link\"   href=\"https://gitee.com/cayxc/mdtht\" >Mdtht-Gitee地址<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>该插件提供了如下丰富功能：</p>\n<ol>\n<li>跟随系统自动切换亮色/暗色模式。</li>\n<li>手动切换亮色/暗色模式。</li>\n<li>自动生成目录编号和正文区标题索引。</li>\n<li>可选择将第一个标题转换为文章标题，并将标题居中。</li>\n<li>根据正文中标题的位置自动纠正目录层级。</li>\n<li>显示/隐藏目录索引编号。</li>\n<li>3种目录按钮样式切换。</li>\n<li>根据当前阅读区位置自动追踪到所在目录和上层目录。</li>\n<li>一键展开收起子目录。</li>\n<li>一键展开收起侧边栏。</li>\n<li>目录搜索。</li>\n<li>代码高亮。</li>\n<li>文字阴影模式。</li>\n</ol>\n<p><strong>mdtht.js</strong> 插件具体详情请参考插件主页。</p>\n<p><strong>mdtht.js导出为 html 效果图（亮色）</strong></p>\n<hr>\n<p><img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdtht-light.png\"\n                         alt=\"mdmdt-light\" style=\"zoom:50%;\" \n                 > <strong>mdtht.js导出为 html 效果图（暗色）</strong></p>\n<hr>\n<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"./img/mdtht-dark.png\"\n                         alt=\"mdmdt-dark\" style=\"zoom:50%;\" \n                 >\n<hr>\n<p>🐳 如果您喜欢该文档样式风格，还请给一个 star 😄，使用过程中有什么问题请及时提交 issues，看到后我会第一时间处理。</p>\n"},{"title":"C++ string分割","date":"2025-07-05T16:00:00.000Z","_content":"\n### string分割\n\n#### 方法一：使用`find()`和`substr()`.\n\n##### 用字符分割字符串：\n\n```cpp\n// 使用字符分割\nvoid Stringsplit(const string& str, const char split, vector<string>& res)\n{\n    if (str == \"\"){\n        return\n    };\n    //在字符串末尾也加入分隔符，方便截取最后一段\n    string strs = str + split;\n    size_t pos = strs.find(split);\n    \n    // 若找不到内容则字符串搜索函数返回 npos\n    while (pos != strs.npos)\n    {\n        string temp = strs.substr(0, pos);\n        res.push_back(temp);\n        //去掉已分割的字符串,在剩下的字符串中进行分割\n        strs = strs.substr(pos + 1, strs.size());\n        pos = strs.find(split);\n    }\n}\n```\n\n##### 用字符串分割字符串\n\n> 整个字符串`splits`作为分隔符。\n\n```cpp\n// 使用字符串分割\nvoid Stringsplit(const string& str, const string& splits, vector<string>& res)\n{\n\tif (str == \"\")\t\treturn;\n\t//在字符串末尾也加入分隔符，方便截取最后一段\n\tstring strs = str + splits;\n\tsize_t pos = strs.find(splits);\n\tint step = splits.size();\n\n\t// 若找不到内容则字符串搜索函数返回 npos\n\twhile (pos != strs.npos)\n\t{\n\t\tstring temp = strs.substr(0, pos);\n\t\tres.push_back(temp);\n\t\t//去掉已分割的字符串,在剩下的字符串中进行分割\n\t\tstrs = strs.substr(pos + step, strs.size());\n\t\tpos = strs.find(splits);\n\t}\n}\n```\n\n#### 方法二：使用`istringstream`.\n\n","source":"_posts/程序/string分割.md","raw":"---\ntitle: C++ string分割\ndate: 2025-07-06\ncategories: 实用代码段\ntags: [C++, string, 实用代码]\n---\n\n### string分割\n\n#### 方法一：使用`find()`和`substr()`.\n\n##### 用字符分割字符串：\n\n```cpp\n// 使用字符分割\nvoid Stringsplit(const string& str, const char split, vector<string>& res)\n{\n    if (str == \"\"){\n        return\n    };\n    //在字符串末尾也加入分隔符，方便截取最后一段\n    string strs = str + split;\n    size_t pos = strs.find(split);\n    \n    // 若找不到内容则字符串搜索函数返回 npos\n    while (pos != strs.npos)\n    {\n        string temp = strs.substr(0, pos);\n        res.push_back(temp);\n        //去掉已分割的字符串,在剩下的字符串中进行分割\n        strs = strs.substr(pos + 1, strs.size());\n        pos = strs.find(split);\n    }\n}\n```\n\n##### 用字符串分割字符串\n\n> 整个字符串`splits`作为分隔符。\n\n```cpp\n// 使用字符串分割\nvoid Stringsplit(const string& str, const string& splits, vector<string>& res)\n{\n\tif (str == \"\")\t\treturn;\n\t//在字符串末尾也加入分隔符，方便截取最后一段\n\tstring strs = str + splits;\n\tsize_t pos = strs.find(splits);\n\tint step = splits.size();\n\n\t// 若找不到内容则字符串搜索函数返回 npos\n\twhile (pos != strs.npos)\n\t{\n\t\tstring temp = strs.substr(0, pos);\n\t\tres.push_back(temp);\n\t\t//去掉已分割的字符串,在剩下的字符串中进行分割\n\t\tstrs = strs.substr(pos + step, strs.size());\n\t\tpos = strs.find(splits);\n\t}\n}\n```\n\n#### 方法二：使用`istringstream`.\n\n","slug":"程序/string分割","published":1,"updated":"2025-09-14T02:36:11.048Z","comments":1,"layout":"post","photos":[],"_id":"cmfktk7en000lc04p74gie9zd","content":"<h3 id=\"string分割\">string分割</h3>\n<h4 id=\"方法一：使用find-和substr\">方法一：使用<code>find()</code>和<code>substr()</code>.</h4>\n<h5 id=\"用字符分割字符串：\">用字符分割字符串：</h5>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用字符分割</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Stringsplit</span><span class=\"params\">(<span class=\"type\">const</span> string&amp; str, <span class=\"type\">const</span> <span class=\"type\">char</span> split, vector&lt;string&gt;&amp; res)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"string\">&quot;&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">//在字符串末尾也加入分隔符，方便截取最后一段</span></span><br><span class=\"line\">    string strs = str + split;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> pos = strs.<span class=\"built_in\">find</span>(split);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 若找不到内容则字符串搜索函数返回 npos</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pos != strs.npos)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        string temp = strs.<span class=\"built_in\">substr</span>(<span class=\"number\">0</span>, pos);</span><br><span class=\"line\">        res.<span class=\"built_in\">push_back</span>(temp);</span><br><span class=\"line\">        <span class=\"comment\">//去掉已分割的字符串,在剩下的字符串中进行分割</span></span><br><span class=\"line\">        strs = strs.<span class=\"built_in\">substr</span>(pos + <span class=\"number\">1</span>, strs.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">        pos = strs.<span class=\"built_in\">find</span>(split);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"用字符串分割字符串\">用字符串分割字符串</h5>\n<blockquote>\n<p>整个字符串<code>splits</code>作为分隔符。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用字符串分割</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Stringsplit</span><span class=\"params\">(<span class=\"type\">const</span> string&amp; str, <span class=\"type\">const</span> string&amp; splits, vector&lt;string&gt;&amp; res)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (str == <span class=\"string\">&quot;&quot;</span>)\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//在字符串末尾也加入分隔符，方便截取最后一段</span></span><br><span class=\"line\">\tstring strs = str + splits;</span><br><span class=\"line\">\t<span class=\"type\">size_t</span> pos = strs.<span class=\"built_in\">find</span>(splits);</span><br><span class=\"line\">\t<span class=\"type\">int</span> step = splits.<span class=\"built_in\">size</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 若找不到内容则字符串搜索函数返回 npos</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (pos != strs.npos)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstring temp = strs.<span class=\"built_in\">substr</span>(<span class=\"number\">0</span>, pos);</span><br><span class=\"line\">\t\tres.<span class=\"built_in\">push_back</span>(temp);</span><br><span class=\"line\">\t\t<span class=\"comment\">//去掉已分割的字符串,在剩下的字符串中进行分割</span></span><br><span class=\"line\">\t\tstrs = strs.<span class=\"built_in\">substr</span>(pos + step, strs.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">\t\tpos = strs.<span class=\"built_in\">find</span>(splits);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：使用istringstream\">方法二：使用<code>istringstream</code>.</h4>\n","secretKey":"92e48638ab26d5b84bf3fecaaec9605c1e8044c326256373a9f6ed436b499e4f","iv":"7f1fd9367403a36c2902fb36207906ac","encryptedPassword":"f7e2b7709d2afdfe4b454bedcddbcb23","encryptedContent":"","excerpt":"","more":"<h3 id=\"string分割\">string分割</h3>\n<h4 id=\"方法一：使用find-和substr\">方法一：使用<code>find()</code>和<code>substr()</code>.</h4>\n<h5 id=\"用字符分割字符串：\">用字符分割字符串：</h5>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用字符分割</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Stringsplit</span><span class=\"params\">(<span class=\"type\">const</span> string&amp; str, <span class=\"type\">const</span> <span class=\"type\">char</span> split, vector&lt;string&gt;&amp; res)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"string\">&quot;&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">//在字符串末尾也加入分隔符，方便截取最后一段</span></span><br><span class=\"line\">    string strs = str + split;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> pos = strs.<span class=\"built_in\">find</span>(split);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 若找不到内容则字符串搜索函数返回 npos</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pos != strs.npos)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        string temp = strs.<span class=\"built_in\">substr</span>(<span class=\"number\">0</span>, pos);</span><br><span class=\"line\">        res.<span class=\"built_in\">push_back</span>(temp);</span><br><span class=\"line\">        <span class=\"comment\">//去掉已分割的字符串,在剩下的字符串中进行分割</span></span><br><span class=\"line\">        strs = strs.<span class=\"built_in\">substr</span>(pos + <span class=\"number\">1</span>, strs.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">        pos = strs.<span class=\"built_in\">find</span>(split);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"用字符串分割字符串\">用字符串分割字符串</h5>\n<blockquote>\n<p>整个字符串<code>splits</code>作为分隔符。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用字符串分割</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Stringsplit</span><span class=\"params\">(<span class=\"type\">const</span> string&amp; str, <span class=\"type\">const</span> string&amp; splits, vector&lt;string&gt;&amp; res)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (str == <span class=\"string\">&quot;&quot;</span>)\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//在字符串末尾也加入分隔符，方便截取最后一段</span></span><br><span class=\"line\">\tstring strs = str + splits;</span><br><span class=\"line\">\t<span class=\"type\">size_t</span> pos = strs.<span class=\"built_in\">find</span>(splits);</span><br><span class=\"line\">\t<span class=\"type\">int</span> step = splits.<span class=\"built_in\">size</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 若找不到内容则字符串搜索函数返回 npos</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (pos != strs.npos)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstring temp = strs.<span class=\"built_in\">substr</span>(<span class=\"number\">0</span>, pos);</span><br><span class=\"line\">\t\tres.<span class=\"built_in\">push_back</span>(temp);</span><br><span class=\"line\">\t\t<span class=\"comment\">//去掉已分割的字符串,在剩下的字符串中进行分割</span></span><br><span class=\"line\">\t\tstrs = strs.<span class=\"built_in\">substr</span>(pos + step, strs.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">\t\tpos = strs.<span class=\"built_in\">find</span>(splits);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：使用istringstream\">方法二：使用<code>istringstream</code>.</h4>\n"},{"title":"C++ 获取文件大小","date":"2025-07-05T16:00:00.000Z","_content":"\n### 获取文件大小\n\n```cpp\n#include <sys/stat.h>\n\n// 通过stat结构体 获得文件大小，单位字节\nsize_t getFileSize(const char *fileName) {\n\n    if (fileName == nullptr) {\n        return 0;\n    }\n\n    // 这是一个存储文件(夹)信息的结构体，其中有文件大小和创建时间、访问时间、修改时间等\n    struct stat statbuf;\n\n    // 提供文件名字符串，获得文件属性结构体\n    stat(fileName, &statbuf);\n\n    // 获取文件大小\n    size_t filesize = statbuf.st_size;\n\n    return filesize;\n}\n```\n\n","source":"_posts/程序/获取文件大小.md","raw":"---\ntitle: C++ 获取文件大小\ndate: 2025-07-06\ncategories: 实用代码段\ntags: [C++, 文件操作, 实用代码]\n---\n\n### 获取文件大小\n\n```cpp\n#include <sys/stat.h>\n\n// 通过stat结构体 获得文件大小，单位字节\nsize_t getFileSize(const char *fileName) {\n\n    if (fileName == nullptr) {\n        return 0;\n    }\n\n    // 这是一个存储文件(夹)信息的结构体，其中有文件大小和创建时间、访问时间、修改时间等\n    struct stat statbuf;\n\n    // 提供文件名字符串，获得文件属性结构体\n    stat(fileName, &statbuf);\n\n    // 获取文件大小\n    size_t filesize = statbuf.st_size;\n\n    return filesize;\n}\n```\n\n","slug":"程序/获取文件大小","published":1,"updated":"2025-09-14T02:36:11.049Z","comments":1,"layout":"post","photos":[],"_id":"cmfktk7en000mc04phcxsd8t4","content":"<h3 id=\"获取文件大小\">获取文件大小</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过stat结构体 获得文件大小，单位字节</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">getFileSize</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *fileName)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fileName == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这是一个存储文件(夹)信息的结构体，其中有文件大小和创建时间、访问时间、修改时间等</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">stat</span> statbuf;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 提供文件名字符串，获得文件属性结构体</span></span><br><span class=\"line\">    <span class=\"built_in\">stat</span>(fileName, &amp;statbuf);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取文件大小</span></span><br><span class=\"line\">    <span class=\"type\">size_t</span> filesize = statbuf.st_size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> filesize;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","secretKey":"0fbffe5a8038ac4c750d0d213ad7a55c632dc56b7669518be838370b009c9d34","iv":"5062c435673f0e3bf6daedf81943f557","encryptedPassword":"d210401d0f3d61d9e0824a40efd826f0","encryptedContent":"af9f32adb0e083e6960ba245b6780ff9d5fd8943cecb9c4fa883dfaeabfc0e25547f2f8a43c470faa5e2686084d9bc29fdc4a8b25dc9648bf1f4efdeff707ba15cbc65a2b3706e9f820107a2a3af3c1b08e1e4c5fbf3d050540221798be172a8614eccd4a2205193b64378da8ec40350377a2e9e56e34ed0c4314c277b9df93cd099c2d40e08e4892b303601a156f96f2e25fc12cc0e11c8106a265b05fdb908bcc0661e34f1f0e933ddacfe48a277d33eff940e761e0f9852a08b4ba15a986ad95e4c3279d0dfe8da41b49769d5a113bc26de563b2bdef2602e0c3d90d97d9e1c24a65406057d3a3a66327f39ba2c10f1a256183aa03bc1ac0b5f248e17bcedb16803ecb9da59fd76125a4f352e1434b1222711065f6695ef2619cb1ef93f77008eaa2a99425f7a00356bf0e9663b419c320d24000f588635e3cc37f183e0809a498634b454e01fec1cfd36bcf98262efae704009a2b8c6d803bd1565d3756475f896579b8c68d62caa1ba182d648f5efd8bbb991634085e6fdbeadcb13ba6ffb06dc6d06e9f9a8264db0d4e5760d73ff76f04ba35d017129ee31978e5369a03f8bb9ad32fa6232199e19a34dfb7835814b3c8bd8df41fc1eeb551a057afb05db89db1cd74edd2013e82689c53604879c0795f1492ed7653f8670dd41ab98c8a386bc1cc73cd433b205abd43165de9c8cd7ec507026c0a94152b68a94d5cdd6bd4922c1d0190770140b6663d1ebf3e473168a96dd2fef0544d41f191ac3889bea1afb50efa6337055a3fe11a43fc0d9c1be52e7ff7e430f568ef0e9be28aa216a4d100e351711966ee601d75bb18c8c2b9ca576feffdf32a08fd985e9624e4897e7511d455f33395bad36cc8e764634138967c6fa1eb23bd186a50ffe9cb73a20449cc8607bc5b300a25f5058ff29333f1883fcf8ef6cabe86e7bc7237492767e3746e762c457322c2947e49ee4cdb1ce77506f8ad67bd58412e7f8e0e9f366991f13add7d750638c9205b9f1f729c75736d865fdb299568878774f832bcc44c0f1da9c8d783001a0613e55cda4d80b931a5e795d1a872e24cd7bd1dc9626611308761a0e1cc0c2083cb8e14d47e8a47ce34b7e3b06bee5a772b1965511f3035369f45bf59eb45dc58081f77dc484d30385e4aec4cb39f75351c7773fcec212b9e44187a83fec3773b398da152d3dab5b1594d0099a5048682b7723391d1d43b912128c4efe2dab8631943b43596cf65c2ca110533872bd8e3c6e3fa6806146c12d41cfe18362061974124ded25679330d8bef1d0c4859b2b76b754663dad514b6ce03d9ecf5828c0dc96ffad0a9a3d44bec7fa8786260f4aca1e2799cf280d02869b58d3da2b62853c3c65509b16b16e412f435138f0252fd71478bbac3aa6f6823205ef950cb7028a09c859b6e428dacf8dd19fa588551c9900587278a296c9cebf8e7b60a72a51b857873f3bff933d01b58cfef3842d36df0ebd69cb47eb68ab68d30ba7a8adef87a2711585b03c327ddc1848871b31c5c360a1a2c951e3bf06a621df7aae807eaa1c5785d293c908ca012f0f818ab5b8136ec4f5d18cd11f7a269b95fe4733b59d1b5ce5ba95862ddd696d7f3a747a5526b6eb571637e04d33848626e6e752111348f03a1ef371db52acc875b0dd43a0c04fb9c270d218399800fb918ee163bf5ef5d996fa3ff6cf53191086d372beec9ae3b9c3f8f01ce3f0fa592e7fce65896b8a929d279efee7a89336132129e841ca9f8a1975622a184af5990fbe0830eee20723c006178c9323ef9e907c7aed9785a24a38e92beb0fefd95d76044115b9a2cbe3084f5b46cdfaa0fead4089e050de19ea0befe74087b5e5ca68b88b1ddc1d92e3210978863155bee57452ef8d350138360f40f2e699c0c56ab69da288e2b362e66ce26141e24872a0c745ce55507be38cd920513928714f2e00511bde8ebf4f4f4b31da942f2ad36338f3e9bf16e9a2bf74a37de1202c4b394af1ee1b688b65a220978c10211d83ee77823c0bbd438dd414375906a71858d1ff8ef1ff67b6f15508f5e35f8e9ba393df97c48f3f21dbc21f9618871250af9737377bbb288d164d00bf7fce7f56967a5422fb59360d36c1e9f6eef4e880c0b487ad7db3a045a56ab07cadb5a2667df7ee347e1fb777c9387b6cbafce574b41fefb7691d937732875e5f478f7cc03ad12de4c3c75feaeaee364c967926dde0f987832df34ba5b6c40cbb44e89d1f0c5ac8ab4974ed7b6b9309445a35e690791bea77d712f7990b6c325390e868586edd98380acd4ceaacbe6a037880f63dae4a17be628ad2901c5e375bd0af06a2e75376b4a534c7242ad47cefcc38e0b44a91b437312ec20fd1560a8c11f4683ebc9674aabe979724e4c07ff9167a8dae5b6ecdf10d9fdf1060d375ab9cfde7537e6fb83b5e31710e44da866c3bb09eda6ddc4fe476fc876b1c84ddc86c3e6137951882f269b698f4cdab3a2d1c0ab9408c4ac06a51438f736cc240a7e842ac44cff13322f9d93e472b752b3947fed52732cdf7a1c19d01501d50a14d660c6f51923330b80331aa3dec5db04a37eeca0eb69da86dd4a7c3aba354b0d3f7d3c4ab8dd11bc8291a80054007f1aa2a46de4ab48df6dca0f0e0695cd923ca50e8e40593179977d7ff22ec5450e4ae93319b43965436327c43a85e30fd61ef18f833d973b85538b16919c8aae8fff5afe6ad561efe749ab83acd1867ce013a736dba97173782b6ac873a3ee04703fea25eca1fa50acdbcb98e1bed627a24c492af4c91891fc8b755e67f96e3f2208b2a3189ca71205151b3d4cd5e7ef64c7f91e06d1e76db145597bfe1cb558853d5607c1ddff87283a04443bf10bf74cd67c7fd95ab4731711f4c3eb1af08f3f21d7b53f12339bd751a74ea8ccb4a55670d2220456b476849914545e2e1752eebaa5f9ee22c7b96b680baf4531680670f393618eddb86df54516c689bb1c45aae8de865e677309415a10d3f481da1571332da797a7b866a840d427da8620d15fa0603c0c5cbbe17da226edd309b00d7926e4761e982eb17ac9d891abc57f365509183452f14df1c664d6715e8a663420127d3ec9cf197406e701fcb31fec67a8f5b2702ebab0e6802ade71f15eefe242c118526acf50990d621674c558271e8cc15909145868003669b3765903bb35abecb84af8e4dd37988a18617676e6a616b89d09e45528dbae784f846e09fbbb6b7a21e2a07b6e0c4f77cee16734d6c61fd60fa32a797c35270ce9412846582ea1a51735d10c175d9e5b8ccdda6cf2a6dde85bd9122ea9eab4951e07f9e32097287d42418f7cee63398f6b3498cf7be877a168e46302ec6478d74be588b520319114bafe422d20ddcd4cbe0482662560c7e0bc73ea34595c643e4073b618e2e3aee6ed098039639b00ff9dc717ed4af4fadf69f9f3feca746f6acc411544baaf4bfd5b6bceb924eec9455e744ed17135bee66e6d501f1beab9cdeb99dc6129349b8ba40e073a088117b5e5a1e0de3d3333c600b1fcccd18d96c2ec9cffff92c73d2141ae59c16bffab9b46866241759c1e53789282dcf8be0c8e6211c1bc3c551ba2dc60dc8ba6fec763a0339d817611d0275965f23aaf6d9902722ca734f0a46f3e153c2","excerpt":"","more":"<h3 id=\"获取文件大小\">获取文件大小</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过stat结构体 获得文件大小，单位字节</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">getFileSize</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *fileName)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fileName == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这是一个存储文件(夹)信息的结构体，其中有文件大小和创建时间、访问时间、修改时间等</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">stat</span> statbuf;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 提供文件名字符串，获得文件属性结构体</span></span><br><span class=\"line\">    <span class=\"built_in\">stat</span>(fileName, &amp;statbuf);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取文件大小</span></span><br><span class=\"line\">    <span class=\"type\">size_t</span> filesize = statbuf.st_size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> filesize;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"排序算法","date":"2025-07-09T16:00:00.000Z","_content":"\n## 排序算法\n\n经典的排序算法总共有十种。分别是：**冒泡、选择、插入、希尔、归并、快排、堆排、计数、桶排、基数**。他们都是**内部排序**。\n\n> 关于内部排序和外部排序：\n>\n> - 内部排序：待排序列数据记录完全存放在内存中\n> - 外部排序：排序的数据很大，一次不能容纳全部的排序记录，在排序过程中还需要访问外部存储器\n\n### 1. 冒泡排序\n\n### 2. 选择排序\n\n### 3. 插入排序\n\n### 4. 希尔排序\n\n### 5. 归并排序\n\n### 6. 快速排序\n\n\n\n### 7. 桶排序\n\n### 8. 堆排序\n\n### 9. 基数排序\n\n### 10. 计数排序\n\n","source":"_posts/算法/SortAlgorithem.md","raw":"---\ntitle: 排序算法\ndate: 2025-07-10\ntags: [算法, C++, 排序]\ncategories: 算法\n---\n\n## 排序算法\n\n经典的排序算法总共有十种。分别是：**冒泡、选择、插入、希尔、归并、快排、堆排、计数、桶排、基数**。他们都是**内部排序**。\n\n> 关于内部排序和外部排序：\n>\n> - 内部排序：待排序列数据记录完全存放在内存中\n> - 外部排序：排序的数据很大，一次不能容纳全部的排序记录，在排序过程中还需要访问外部存储器\n\n### 1. 冒泡排序\n\n### 2. 选择排序\n\n### 3. 插入排序\n\n### 4. 希尔排序\n\n### 5. 归并排序\n\n### 6. 快速排序\n\n\n\n### 7. 桶排序\n\n### 8. 堆排序\n\n### 9. 基数排序\n\n### 10. 计数排序\n\n","slug":"算法/SortAlgorithem","published":1,"updated":"2025-09-15T07:29:55.539Z","comments":1,"layout":"post","photos":[],"_id":"cmfktk7eo000qc04p4hqxast4","content":"<h2 id=\"排序算法\">排序算法</h2>\n<p>经典的排序算法总共有十种。分别是：<strong>冒泡、选择、插入、希尔、归并、快排、堆排、计数、桶排、基数</strong>。他们都是<strong>内部排序</strong>。</p>\n<blockquote>\n<p>关于内部排序和外部排序：</p>\n<ul>\n<li>内部排序：待排序列数据记录完全存放在内存中</li>\n<li>外部排序：排序的数据很大，一次不能容纳全部的排序记录，在排序过程中还需要访问外部存储器</li>\n</ul>\n</blockquote>\n<h3 id=\"1-冒泡排序\">1. 冒泡排序</h3>\n<h3 id=\"2-选择排序\">2. 选择排序</h3>\n<h3 id=\"3-插入排序\">3. 插入排序</h3>\n<h3 id=\"4-希尔排序\">4. 希尔排序</h3>\n<h3 id=\"5-归并排序\">5. 归并排序</h3>\n<h3 id=\"6-快速排序\">6. 快速排序</h3>\n<h3 id=\"7-桶排序\">7. 桶排序</h3>\n<h3 id=\"8-堆排序\">8. 堆排序</h3>\n<h3 id=\"9-基数排序\">9. 基数排序</h3>\n<h3 id=\"10-计数排序\">10. 计数排序</h3>\n","secretKey":"271613d67c8df92ec7c4df62081d43258b5613542e05cb0b2d78ce99f7e6fe65","iv":"1a6c18835ac98f8b62deb50154239528","encryptedPassword":"8b804b99e5f2ea96446ca75d6f85ca5d","encryptedContent":"dc9c7dad96a54b782cf25ab4fa50e66f7ebd8cd24d78df8f7eb3e155ca74bcb8bb3cd38481988a14172a98b6f6c1d39b151a9ddb5c56e3d65973a22b859f9b9b729bdcfbf51f08a49a7f95750e7388a5724d0193dcf0043e5ca61abca0dd87e727d4207f1ed9daf7775006d456db5f8ecdbb75b7d388d68a97c1d321fc3bd89bf94edfee010401fa3f556f89ac1482ef7cb94c5cc0010370c5d9dbd94b795493d3b26780ead43ca9eda1d11e38f0618e165c54956b458ac5e050faacc4dc5cd6441c9627cd105be447fbce40b022dbc6a6853b64b8e1c57079a61301e64005f58ccf2b76f4238c9a1dc6788133b91d85a45594a28e8a8b9aa217d7616f48f22dfa66a08b584a31d9f818e7eb83df33861b7cc8a952ca5fcd21d2f2974974ccf3cb9db116f9564496abf200f32faee39ef90870571b248ea57ffa001d8d2da7ffee202342dab5f7a2f31488111d84108303546fa5bd97154e227f71f2bba2cc0f16d0497705cacaac4d6eb0be2e69d84ff5b83b826637074697a68a8257384931261dde1aab9096a4ee6a722c65f8f0ac507a593c169d66e83401a932dbfdf4c132ae888c5dc7838f4f276cf9177f6418d57f60e96a7dfb0133754e2f7fc8b2e1f9d20b8c7f57c6e0ee004ac5579ed8462e7b52913cd0b224eec72316279a6f87c1205ddf6a3021bafcd51dc35eccbbe04d509682a761346fb1b16cc70f29c845abf17c27f0aa57628a48d435b80fd3afd6ea14e951d885336251bf2bf33b4abef300493d205189af3a5748a3f095235489723b7717dbd3850ee3c3c59ab69d873c06ca61ba5e70e47c8bd2e049b651842d4acc874618eee3b12049f7a77bbb5b482ffad4f361f463c9ac23f5d32d565d8c304051368840d86781c225f232730089cc39fcd65f0ad9ed9d0a70bdbfa1a432b70b05e20b47faa397e6eb569fc75252abfb3c2fc3b4b590c40c6ac595793d818fdf3cab90ebbe75f0afc6a45d6129e232f25a725a84ab5163b7aeda8b696dc41428d9588e0900d1300b5142ce8433e5557e19a5e02c90137881099531a19736f801ebf80f6dc8bc87dd4e33c8ea0213534252c06dd6b7c4618853a53334f6719eb92ef6ff34bcb169f923d13a2c3977f8088774b81bc1f23e6acf6d2d09bb6ff5fa7d8a180b4eceff15f2e1e1e5ad6a57952391a703e9ac6cd3469c46327fb5fec99ff0333501ba01ab318e25fb9050890cf6ac0705d1ed4869ed1f494c999bfda7e80fcd412234d5e26799c9b7e56415954b87b8a5bd491606ecb7be76700265e8601d89c3014e0d17f803e1ea1288cd34462b8d522104c52eaa2e52391018d0c6af3efa2046ed34b44886697a6ba9ad5c57a87a1e0869707c00342bac70bdca3e14e4ab1e9fe0b2ea5a49759427","excerpt":"","more":"<h2 id=\"排序算法\">排序算法</h2>\n<p>经典的排序算法总共有十种。分别是：<strong>冒泡、选择、插入、希尔、归并、快排、堆排、计数、桶排、基数</strong>。他们都是<strong>内部排序</strong>。</p>\n<blockquote>\n<p>关于内部排序和外部排序：</p>\n<ul>\n<li>内部排序：待排序列数据记录完全存放在内存中</li>\n<li>外部排序：排序的数据很大，一次不能容纳全部的排序记录，在排序过程中还需要访问外部存储器</li>\n</ul>\n</blockquote>\n<h3 id=\"1-冒泡排序\">1. 冒泡排序</h3>\n<h3 id=\"2-选择排序\">2. 选择排序</h3>\n<h3 id=\"3-插入排序\">3. 插入排序</h3>\n<h3 id=\"4-希尔排序\">4. 希尔排序</h3>\n<h3 id=\"5-归并排序\">5. 归并排序</h3>\n<h3 id=\"6-快速排序\">6. 快速排序</h3>\n<h3 id=\"7-桶排序\">7. 桶排序</h3>\n<h3 id=\"8-堆排序\">8. 堆排序</h3>\n<h3 id=\"9-基数排序\">9. 基数排序</h3>\n<h3 id=\"10-计数排序\">10. 计数排序</h3>\n"},{"title":"Linux的IO多路复用","date":"2025-08-09T16:00:00.000Z","_content":"\n### 基础知识\n\n- 用户空间和内核空间\n- 文件描述符\n- 缓存IO和直接IO\n- 同步和异步\n- 阻塞和非阻塞\n\n### IO多路复用\n\n#### `select`\n\n#### `poll`\n\n#### `epoll`\n","source":"_posts/网络编程/Linux的IO多路复用.md","raw":"---\ntitle: Linux的IO多路复用\ndate: 2025-08-10\ntags: [epoll, socket, Linux, IO多路复用]\ncategories: 网络编程\n---\n\n### 基础知识\n\n- 用户空间和内核空间\n- 文件描述符\n- 缓存IO和直接IO\n- 同步和异步\n- 阻塞和非阻塞\n\n### IO多路复用\n\n#### `select`\n\n#### `poll`\n\n#### `epoll`\n","slug":"网络编程/Linux的IO多路复用","published":1,"updated":"2025-09-14T02:36:11.049Z","comments":1,"layout":"post","photos":[],"_id":"cmfktk7eo000rc04p1it1fd69","content":"<h3 id=\"基础知识\">基础知识</h3>\n<ul>\n<li>用户空间和内核空间</li>\n<li>文件描述符</li>\n<li>缓存IO和直接IO</li>\n<li>同步和异步</li>\n<li>阻塞和非阻塞</li>\n</ul>\n<h3 id=\"IO多路复用\">IO多路复用</h3>\n<h4 id=\"select\"><code>select</code></h4>\n<h4 id=\"poll\"><code>poll</code></h4>\n<h4 id=\"epoll\"><code>epoll</code></h4>\n","secretKey":"d57fa0e56d76773d8c39ac592d500376266ae35e8fae87880920cf44098e5a0c","iv":"fd1dad41561e01cfb3485b379d1cf095","encryptedPassword":"9236c13296e7432b727f26ffd20d4a1a","encryptedContent":"f101a9cc206febbe39921dfcb680b87d822cdd619a3a46d3e56e953f57d6c82bfef61542b6b9f930005b6c79dfb87d278784bc210b02b52455d038414466a2c5f2b091998eb7ca6f4f54f08b9ccfcf46e2d910673fea53b32951d3c4ae6c88995404eb8b073d375233eb2831148821a5a577bea4c6f164617a3c98b79490067b30411f41014270152ca1f6977ca8a727f7d412fe94e0a893543301b9f2c20ffe9c0462efd1f5f5915a255adf44d34fe4389d97f6d84ed67349ff977462cc62feda7d80706714c8b97a0a3dc5f8cb200f2b09e8c3bc1c8a83e84125488ad6e5325a363b1cfe712be5f1875f61e6b96bf7927bdf73a0a31e01b3ef060b38925f17664d36e0da2121b6143508b7667357e17482ae682b9c258f5be4ab90a7e07998bc26386e9d56d0e95b0f6bcfa8b24990a65a49defd8fec43bcc5ee5307dbf37b98e92cdc862a0a34bb9aecd255a9915fbce36436c11d8f05f84bb5f2f3d4431f0cb6f753ad91763160c8ac421f48d992","excerpt":"","more":"<h3 id=\"基础知识\">基础知识</h3>\n<ul>\n<li>用户空间和内核空间</li>\n<li>文件描述符</li>\n<li>缓存IO和直接IO</li>\n<li>同步和异步</li>\n<li>阻塞和非阻塞</li>\n</ul>\n<h3 id=\"IO多路复用\">IO多路复用</h3>\n<h4 id=\"select\"><code>select</code></h4>\n<h4 id=\"poll\"><code>poll</code></h4>\n<h4 id=\"epoll\"><code>epoll</code></h4>\n"},{"title":"TCP和UDP协议","date":"2025-07-05T16:00:00.000Z","_content":"\n\n### `TCP`协议\n\n\n\n### `UDP`协议","source":"_posts/网络编程/TCP协议和UDP协议.md","raw":"---\ntitle: TCP和UDP协议\ndate: 2025-07-06\ntags: [网络协议]\ncategories: 网络编程\n---\n\n\n### `TCP`协议\n\n\n\n### `UDP`协议","slug":"网络编程/TCP协议和UDP协议","published":1,"updated":"2025-09-14T02:36:11.049Z","comments":1,"layout":"post","photos":[],"_id":"cmfktk7ep000tc04p2769htvp","content":"<h3 id=\"TCP协议\"><code>TCP</code>协议</h3>\n<h3 id=\"UDP协议\"><code>UDP</code>协议</h3>\n","secretKey":"8c3dd82e82256b57ad9734a1792fd8f3b71472854a93f081ed6665685b52ffcb","iv":"23d29fd3413b58de6c89eabfef2d1dd6","encryptedPassword":"fc5e98628b1ba75cb3ac63d8a4a24889","encryptedContent":"7c9cf24db1fd609e2abb1e9f884bc8fdda7f3f5f8a61cac4a0581aad8ff545c4b8489daa3bdc1836afd81985764da652b84fded0d54f972379cfa808464ba329ef54cd41b4206f27bfff4712545bc600ffcf1684214fc8210f73d310d2df5590","excerpt":"","more":"<h3 id=\"TCP协议\"><code>TCP</code>协议</h3>\n<h3 id=\"UDP协议\"><code>UDP</code>协议</h3>\n"},{"title":"epoll的LT模式和ET模式","date":"2025-08-09T16:00:00.000Z","_content":"\n### epoll\n\nepoll是Linux特有的IO复用函数，关于epoll的原理，参见：[Linux的IO多路复用](./Linux的IO多路复用)\n\n### LT模式\n\n`epoll`的默认模式，这种情况下`epoll`相当于一个效率较高的`poll`。\n\n对于采用`LT`工作模式的文件描述符，当`epoll_wait`检测到其上有事件发生并且将此事件通知给应用程序后，应用程序还可以<mark>不立即</mark>处理该事件。这样，当应用程序下一次调用`epoll_wait`时，`epoll_wait`还会再次同志应用程序，直到该事件被处理。\n\n### ET模式\n\n当往`epoll内核事件表`中注册一个文件描述符上的`EPOLLET`事件时，`epoll`将以`ET`模式来操作该文件描述符。`ET`模式是`epoll`的高效工作模式。\n\n对于采用`ET`模式的文件描述符，当`epoll_wait`检测到其上有事件发生并将此事件通知给应用程序后，应用程序必须立即处理该事件，因为后续的`epoll_wait`调用将不再向应用程序通知这一事件。\n\n可见，`ET`模式和大程度上降低了同一个`epoll`事件被重复触发的次数。\n\n### 具体实现\n\n```cpp\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <assert.h>\n#include <stdio.h>\n#include <unistd.h>\n#include <errno.h>\n#include <string.h>\n#include <fcntl.h>\n#include <stdlib.h>\n#include <sys/epoll.h>\n#include <pthread.h>\n#include <libgen.h>\n\n#define MAX_EVENT_NUMBER 1024\n#define BUFFER_SIZE 10\n\n/**\n * @brief 将文件描述符设置为非阻塞的\n */\nint setnonblocking(int fd) {\n    int old_option = fcntl(fd, F_GETFL); // 读取当前文件状态标志\n    int new_option = old_option | O_NONBLOCK; // 设置非阻塞\n    fcntl(fd, F_SETFL, old_option); // 写入新的文件状态标志\n    return old_option;\n}\n\n/**\n * @brief 注册EPOLLIN事件到epoll内核事件表\n * @param epollfd 内核事件表对应的文件描述符\n * @param fd 要注册EPOLLIN的文件描述符\n * @param enable_et 是否对fd启用ET模式\n */\nvoid addfd(int epollfd, int fd, bool enable_et) {\n    epoll_event event;\n    event.data.fd = fd;\n    event.events = EPOLLIN;\n    if (enable_et) {\n        event.events |= EPOLLET; // 通过按位或，增加EPOLLET属性\n    }\n    // 注意此处的event作为一个局部变量竟然传入了地址（使用epoll_ctl该参数是指针），\n    // 推测是因为传指针可以避免拷贝，速度更快\n    epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, &event);\n    setnonblocking(fd); // 设置文件描述符为非阻塞\n}\n\n/**\n * @brief LT模式工作流程\n * @param events 已经就绪的事件的数组\n * @param number 已就绪事件的数量\n * @param epollfd 内核事件表的文件描述符\n * @param listenfd 要处理的事件\n */\nvoid LT(epoll_event *events, int number, int epollfd, int listenfd) {\n    char buf[BUFFER_SIZE];\n    // 用循环遍历所有已经就绪的事件的列表(events)\n    for (int i = 0; i < number; ++i) {\n        int sockfd = events[i].data.fd; // 通常不用event.data的fd成员\n        if (sockfd == listenfd) { // 连接未受理。执行accept进行受理。注意此处可以用==判断相等！\n            sockaddr_in client_address;\n            socklen_t client_addrlength = sizeof(client_address);\n            // 受理连接。注意accept的后两个参数都需要取地址\n            int connfd = accept(listenfd, (struct sockaddr *)&client_address, &client_addrlength);\n            // 将受理后的连接加入内核事件表，监听后续客户端的消息\n            addfd(epollfd, connfd, false); // 对connfd禁用ET模式\n        } else if (events[i].events & EPOLLIN) { // 连接已经受理并且有数据可读（数据未被全部读出）\n            // 只要socket读缓存中还有未读出的数据，这段代码就会触发\n            printf(\"enevt trigger once\\n\");\n            memset(buf, '\\0', BUFFER_SIZE);\n            // 读出数据。注意recv的第三个参数是 BUFFERE_SIZE - 1。不是BUFFER_SIZE\n            int ret = recv(sockfd, buf, BUFFER_SIZE - 1, 0);\n            if (ret < 0) {\n                close(sockfd);\n                continue;\n            }\n            printf(\"get %d bytes of content: %s\\n\", ret, buf);\n        } else {\n            printf(\"something else happened \\n\");\n        }\n    }\n}\n\n/**\n * @brief ET模式工作流程\n * @param\n */\nvoid ET(epoll_event *events, int number, int epollfd, int listenfd) {\n    char buf[BUFFER_SIZE];\n    for (int i = 0; i < number; ++i) {\n        int sockfd = events[i].data.fd;\n        if (sockfd == listenfd) { // 未受理的连接。调用accept受理该连接\n            sockaddr_in client_address;\n            socklen_t client_addrlength = sizeof(client_address);\n            int connfd = accept(listenfd, (sockaddr *)&client_address, &client_addrlength);\n            addfd(epollfd, connfd, true); // 对connfd开启ET模式\n        } else if (events[i].events & EPOLLIN) {\n            printf(\"event trigger once\\n\");\n            /**\n             * else if 中的这段代码不会被重复触发，所以我们循环读取数据，以确保把socket读缓存中的所有数据读出\n             */\n            while (1) {\n                memset(buf, '\\0', BUFFER_SIZE);\n                // 读出数据\n                int ret = recv(sockfd, buf, BUFFER_SIZE - 1, 0);\n                if (ret < 0) {\n                    /**\n                     * 对于非阻塞IO，下面的条件成立则表示数据已经被全部读取完毕。\n                     * 此后epoll就能再次触发sockfd上的EPOLLIN事件，以驱动下一次读操作\n                     */\n                    if ((errno == EAGAIN) || (errno == EWOULDBLOCK)) {\n                        printf(\"read later\\n\");\n                        break;\n                    }\n                    close(sockfd);\n                    break;\n                } else if (ret == 0) {\n                    close(sockfd);\n                } else {\n                    printf(\"get %d bytes of content: %s\\n\", ret, buf);\n                }\n            }\n        } else {\n            printf(\"something else happened \\n\");\n        }\n    }\n}\n\nint main(int argc, char *argv[]) {\n    if (argc <= 2) {\n        // 参数不够\n        printf(\"usage: %s ip_address port_number\\n\", basename(argv[0]));\n        return 1;\n    }\n    const char *ip = argv[1];\n    int port = atoi(argv[2]);\n\n    int ret = 0;\n    sockaddr_in address;\n    memset(&address, 0, sizeof(address));\n    address.sin_family = AF_INET;\n    inet_pton(AF_INET, ip, &address.sin_addr); // 将标准文本表示形式的IPv4或IPv6地址转换为网络字节序\n    address.sin_port = htons(port); // 将主机字节序(host)的port转换为网络字节序(net)\n\n    int listenfd = socket(PF_INET, SOCK_STREAM, 0); // 创建socket\n    assert(listenfd >= 0);\n\n    // bind函数的第二个参数可以直接强转\n    ret = bind(listenfd, (struct sockaddr *)&address, sizeof(address));\n    assert(ret != -1);\n\n    ret = listen(listenfd, 5);\n    assert(ret != -1);\n\n    epoll_event events[MAX_EVENT_NUMBER];\n    int epollfd = epoll_create(5); // 创建内核事件表\n    assert(epollfd != -1); // 确保创建成功\n    addfd(epollfd, listenfd, true); // 添加socket文件描述符到内核事件表。注意此处是开启ET模式的！\n\n    while (1) {\n        // 第三个参数为-1, 则epoll_wait将永远阻塞，直到某个事件发生\n        int ret = epoll_wait(epollfd, events, MAX_EVENT_NUMBER, -1);\n        if (ret < 0) {\n            printf(\"epoll failure\\n\");\n            break;\n        }\n\n        LT(events, ret, epollfd, listenfd); // 使用LT模式\n        // ET(events, ret, epollfd, listenfd); // 使用ET模式\n    }\n\n    close(listenfd);\n    return 0;\n}\n\n```\n\n","source":"_posts/网络编程/epoll的LT模式和ET模式.md","raw":"---\ntitle: epoll的LT模式和ET模式\ndate: 2025-08-10\ntags: [epoll, socket]\ncategories: 网络编程\n---\n\n### epoll\n\nepoll是Linux特有的IO复用函数，关于epoll的原理，参见：[Linux的IO多路复用](./Linux的IO多路复用)\n\n### LT模式\n\n`epoll`的默认模式，这种情况下`epoll`相当于一个效率较高的`poll`。\n\n对于采用`LT`工作模式的文件描述符，当`epoll_wait`检测到其上有事件发生并且将此事件通知给应用程序后，应用程序还可以<mark>不立即</mark>处理该事件。这样，当应用程序下一次调用`epoll_wait`时，`epoll_wait`还会再次同志应用程序，直到该事件被处理。\n\n### ET模式\n\n当往`epoll内核事件表`中注册一个文件描述符上的`EPOLLET`事件时，`epoll`将以`ET`模式来操作该文件描述符。`ET`模式是`epoll`的高效工作模式。\n\n对于采用`ET`模式的文件描述符，当`epoll_wait`检测到其上有事件发生并将此事件通知给应用程序后，应用程序必须立即处理该事件，因为后续的`epoll_wait`调用将不再向应用程序通知这一事件。\n\n可见，`ET`模式和大程度上降低了同一个`epoll`事件被重复触发的次数。\n\n### 具体实现\n\n```cpp\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <assert.h>\n#include <stdio.h>\n#include <unistd.h>\n#include <errno.h>\n#include <string.h>\n#include <fcntl.h>\n#include <stdlib.h>\n#include <sys/epoll.h>\n#include <pthread.h>\n#include <libgen.h>\n\n#define MAX_EVENT_NUMBER 1024\n#define BUFFER_SIZE 10\n\n/**\n * @brief 将文件描述符设置为非阻塞的\n */\nint setnonblocking(int fd) {\n    int old_option = fcntl(fd, F_GETFL); // 读取当前文件状态标志\n    int new_option = old_option | O_NONBLOCK; // 设置非阻塞\n    fcntl(fd, F_SETFL, old_option); // 写入新的文件状态标志\n    return old_option;\n}\n\n/**\n * @brief 注册EPOLLIN事件到epoll内核事件表\n * @param epollfd 内核事件表对应的文件描述符\n * @param fd 要注册EPOLLIN的文件描述符\n * @param enable_et 是否对fd启用ET模式\n */\nvoid addfd(int epollfd, int fd, bool enable_et) {\n    epoll_event event;\n    event.data.fd = fd;\n    event.events = EPOLLIN;\n    if (enable_et) {\n        event.events |= EPOLLET; // 通过按位或，增加EPOLLET属性\n    }\n    // 注意此处的event作为一个局部变量竟然传入了地址（使用epoll_ctl该参数是指针），\n    // 推测是因为传指针可以避免拷贝，速度更快\n    epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, &event);\n    setnonblocking(fd); // 设置文件描述符为非阻塞\n}\n\n/**\n * @brief LT模式工作流程\n * @param events 已经就绪的事件的数组\n * @param number 已就绪事件的数量\n * @param epollfd 内核事件表的文件描述符\n * @param listenfd 要处理的事件\n */\nvoid LT(epoll_event *events, int number, int epollfd, int listenfd) {\n    char buf[BUFFER_SIZE];\n    // 用循环遍历所有已经就绪的事件的列表(events)\n    for (int i = 0; i < number; ++i) {\n        int sockfd = events[i].data.fd; // 通常不用event.data的fd成员\n        if (sockfd == listenfd) { // 连接未受理。执行accept进行受理。注意此处可以用==判断相等！\n            sockaddr_in client_address;\n            socklen_t client_addrlength = sizeof(client_address);\n            // 受理连接。注意accept的后两个参数都需要取地址\n            int connfd = accept(listenfd, (struct sockaddr *)&client_address, &client_addrlength);\n            // 将受理后的连接加入内核事件表，监听后续客户端的消息\n            addfd(epollfd, connfd, false); // 对connfd禁用ET模式\n        } else if (events[i].events & EPOLLIN) { // 连接已经受理并且有数据可读（数据未被全部读出）\n            // 只要socket读缓存中还有未读出的数据，这段代码就会触发\n            printf(\"enevt trigger once\\n\");\n            memset(buf, '\\0', BUFFER_SIZE);\n            // 读出数据。注意recv的第三个参数是 BUFFERE_SIZE - 1。不是BUFFER_SIZE\n            int ret = recv(sockfd, buf, BUFFER_SIZE - 1, 0);\n            if (ret < 0) {\n                close(sockfd);\n                continue;\n            }\n            printf(\"get %d bytes of content: %s\\n\", ret, buf);\n        } else {\n            printf(\"something else happened \\n\");\n        }\n    }\n}\n\n/**\n * @brief ET模式工作流程\n * @param\n */\nvoid ET(epoll_event *events, int number, int epollfd, int listenfd) {\n    char buf[BUFFER_SIZE];\n    for (int i = 0; i < number; ++i) {\n        int sockfd = events[i].data.fd;\n        if (sockfd == listenfd) { // 未受理的连接。调用accept受理该连接\n            sockaddr_in client_address;\n            socklen_t client_addrlength = sizeof(client_address);\n            int connfd = accept(listenfd, (sockaddr *)&client_address, &client_addrlength);\n            addfd(epollfd, connfd, true); // 对connfd开启ET模式\n        } else if (events[i].events & EPOLLIN) {\n            printf(\"event trigger once\\n\");\n            /**\n             * else if 中的这段代码不会被重复触发，所以我们循环读取数据，以确保把socket读缓存中的所有数据读出\n             */\n            while (1) {\n                memset(buf, '\\0', BUFFER_SIZE);\n                // 读出数据\n                int ret = recv(sockfd, buf, BUFFER_SIZE - 1, 0);\n                if (ret < 0) {\n                    /**\n                     * 对于非阻塞IO，下面的条件成立则表示数据已经被全部读取完毕。\n                     * 此后epoll就能再次触发sockfd上的EPOLLIN事件，以驱动下一次读操作\n                     */\n                    if ((errno == EAGAIN) || (errno == EWOULDBLOCK)) {\n                        printf(\"read later\\n\");\n                        break;\n                    }\n                    close(sockfd);\n                    break;\n                } else if (ret == 0) {\n                    close(sockfd);\n                } else {\n                    printf(\"get %d bytes of content: %s\\n\", ret, buf);\n                }\n            }\n        } else {\n            printf(\"something else happened \\n\");\n        }\n    }\n}\n\nint main(int argc, char *argv[]) {\n    if (argc <= 2) {\n        // 参数不够\n        printf(\"usage: %s ip_address port_number\\n\", basename(argv[0]));\n        return 1;\n    }\n    const char *ip = argv[1];\n    int port = atoi(argv[2]);\n\n    int ret = 0;\n    sockaddr_in address;\n    memset(&address, 0, sizeof(address));\n    address.sin_family = AF_INET;\n    inet_pton(AF_INET, ip, &address.sin_addr); // 将标准文本表示形式的IPv4或IPv6地址转换为网络字节序\n    address.sin_port = htons(port); // 将主机字节序(host)的port转换为网络字节序(net)\n\n    int listenfd = socket(PF_INET, SOCK_STREAM, 0); // 创建socket\n    assert(listenfd >= 0);\n\n    // bind函数的第二个参数可以直接强转\n    ret = bind(listenfd, (struct sockaddr *)&address, sizeof(address));\n    assert(ret != -1);\n\n    ret = listen(listenfd, 5);\n    assert(ret != -1);\n\n    epoll_event events[MAX_EVENT_NUMBER];\n    int epollfd = epoll_create(5); // 创建内核事件表\n    assert(epollfd != -1); // 确保创建成功\n    addfd(epollfd, listenfd, true); // 添加socket文件描述符到内核事件表。注意此处是开启ET模式的！\n\n    while (1) {\n        // 第三个参数为-1, 则epoll_wait将永远阻塞，直到某个事件发生\n        int ret = epoll_wait(epollfd, events, MAX_EVENT_NUMBER, -1);\n        if (ret < 0) {\n            printf(\"epoll failure\\n\");\n            break;\n        }\n\n        LT(events, ret, epollfd, listenfd); // 使用LT模式\n        // ET(events, ret, epollfd, listenfd); // 使用ET模式\n    }\n\n    close(listenfd);\n    return 0;\n}\n\n```\n\n","slug":"网络编程/epoll的LT模式和ET模式","published":1,"updated":"2025-09-14T02:36:11.049Z","comments":1,"layout":"post","photos":[],"_id":"cmfktk7eq000wc04pe5lucezb","content":"<h3 id=\"epoll\">epoll</h3>\n<p>epoll是Linux特有的IO复用函数，关于epoll的原理，参见：<a href=\"./Linux%E7%9A%84IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8\">Linux的IO多路复用</a></p>\n<h3 id=\"LT模式\">LT模式</h3>\n<p><code>epoll</code>的默认模式，这种情况下<code>epoll</code>相当于一个效率较高的<code>poll</code>。</p>\n<p>对于采用<code>LT</code>工作模式的文件描述符，当<code>epoll_wait</code>检测到其上有事件发生并且将此事件通知给应用程序后，应用程序还可以<mark>不立即</mark>处理该事件。这样，当应用程序下一次调用<code>epoll_wait</code>时，<code>epoll_wait</code>还会再次同志应用程序，直到该事件被处理。</p>\n<h3 id=\"ET模式\">ET模式</h3>\n<p>当往<code>epoll内核事件表</code>中注册一个文件描述符上的<code>EPOLLET</code>事件时，<code>epoll</code>将以<code>ET</code>模式来操作该文件描述符。<code>ET</code>模式是<code>epoll</code>的高效工作模式。</p>\n<p>对于采用<code>ET</code>模式的文件描述符，当<code>epoll_wait</code>检测到其上有事件发生并将此事件通知给应用程序后，应用程序必须立即处理该事件，因为后续的<code>epoll_wait</code>调用将不再向应用程序通知这一事件。</p>\n<p>可见，<code>ET</code>模式和大程度上降低了同一个<code>epoll</code>事件被重复触发的次数。</p>\n<h3 id=\"具体实现\">具体实现</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;netinet/in.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/epoll.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libgen.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAX_EVENT_NUMBER 1024</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> BUFFER_SIZE 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief 将文件描述符设置为非阻塞的</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">setnonblocking</span><span class=\"params\">(<span class=\"type\">int</span> fd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> old_option = <span class=\"built_in\">fcntl</span>(fd, F_GETFL); <span class=\"comment\">// 读取当前文件状态标志</span></span><br><span class=\"line\">    <span class=\"type\">int</span> new_option = old_option | O_NONBLOCK; <span class=\"comment\">// 设置非阻塞</span></span><br><span class=\"line\">    <span class=\"built_in\">fcntl</span>(fd, F_SETFL, old_option); <span class=\"comment\">// 写入新的文件状态标志</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> old_option;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief 注册EPOLLIN事件到epoll内核事件表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param epollfd 内核事件表对应的文件描述符</span></span><br><span class=\"line\"><span class=\"comment\"> * @param fd 要注册EPOLLIN的文件描述符</span></span><br><span class=\"line\"><span class=\"comment\"> * @param enable_et 是否对fd启用ET模式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addfd</span><span class=\"params\">(<span class=\"type\">int</span> epollfd, <span class=\"type\">int</span> fd, <span class=\"type\">bool</span> enable_et)</span> </span>&#123;</span><br><span class=\"line\">    epoll_event event;</span><br><span class=\"line\">    event.data.fd = fd;</span><br><span class=\"line\">    event.events = EPOLLIN;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (enable_et) &#123;</span><br><span class=\"line\">        event.events |= EPOLLET; <span class=\"comment\">// 通过按位或，增加EPOLLET属性</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 注意此处的event作为一个局部变量竟然传入了地址（使用epoll_ctl该参数是指针），</span></span><br><span class=\"line\">    <span class=\"comment\">// 推测是因为传指针可以避免拷贝，速度更快</span></span><br><span class=\"line\">    <span class=\"built_in\">epoll_ctl</span>(epollfd, EPOLL_CTL_ADD, fd, &amp;event);</span><br><span class=\"line\">    <span class=\"built_in\">setnonblocking</span>(fd); <span class=\"comment\">// 设置文件描述符为非阻塞</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief LT模式工作流程</span></span><br><span class=\"line\"><span class=\"comment\"> * @param events 已经就绪的事件的数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @param number 已就绪事件的数量</span></span><br><span class=\"line\"><span class=\"comment\"> * @param epollfd 内核事件表的文件描述符</span></span><br><span class=\"line\"><span class=\"comment\"> * @param listenfd 要处理的事件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">LT</span><span class=\"params\">(epoll_event *events, <span class=\"type\">int</span> number, <span class=\"type\">int</span> epollfd, <span class=\"type\">int</span> listenfd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> buf[BUFFER_SIZE];</span><br><span class=\"line\">    <span class=\"comment\">// 用循环遍历所有已经就绪的事件的列表(events)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; number; ++i) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> sockfd = events[i].data.fd; <span class=\"comment\">// 通常不用event.data的fd成员</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sockfd == listenfd) &#123; <span class=\"comment\">// 连接未受理。执行accept进行受理。注意此处可以用==判断相等！</span></span><br><span class=\"line\">            sockaddr_in client_address;</span><br><span class=\"line\">            <span class=\"type\">socklen_t</span> client_addrlength = <span class=\"built_in\">sizeof</span>(client_address);</span><br><span class=\"line\">            <span class=\"comment\">// 受理连接。注意accept的后两个参数都需要取地址</span></span><br><span class=\"line\">            <span class=\"type\">int</span> connfd = <span class=\"built_in\">accept</span>(listenfd, (<span class=\"keyword\">struct</span> sockaddr *)&amp;client_address, &amp;client_addrlength);</span><br><span class=\"line\">            <span class=\"comment\">// 将受理后的连接加入内核事件表，监听后续客户端的消息</span></span><br><span class=\"line\">            <span class=\"built_in\">addfd</span>(epollfd, connfd, <span class=\"literal\">false</span>); <span class=\"comment\">// 对connfd禁用ET模式</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (events[i].events &amp; EPOLLIN) &#123; <span class=\"comment\">// 连接已经受理并且有数据可读（数据未被全部读出）</span></span><br><span class=\"line\">            <span class=\"comment\">// 只要socket读缓存中还有未读出的数据，这段代码就会触发</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;enevt trigger once\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">memset</span>(buf, <span class=\"string\">&#x27;\\0&#x27;</span>, BUFFER_SIZE);</span><br><span class=\"line\">            <span class=\"comment\">// 读出数据。注意recv的第三个参数是 BUFFERE_SIZE - 1。不是BUFFER_SIZE</span></span><br><span class=\"line\">            <span class=\"type\">int</span> ret = <span class=\"built_in\">recv</span>(sockfd, buf, BUFFER_SIZE - <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">close</span>(sockfd);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;get %d bytes of content: %s\\n&quot;</span>, ret, buf);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;something else happened \\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief ET模式工作流程</span></span><br><span class=\"line\"><span class=\"comment\"> * @param</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ET</span><span class=\"params\">(epoll_event *events, <span class=\"type\">int</span> number, <span class=\"type\">int</span> epollfd, <span class=\"type\">int</span> listenfd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> buf[BUFFER_SIZE];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; number; ++i) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> sockfd = events[i].data.fd;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sockfd == listenfd) &#123; <span class=\"comment\">// 未受理的连接。调用accept受理该连接</span></span><br><span class=\"line\">            sockaddr_in client_address;</span><br><span class=\"line\">            <span class=\"type\">socklen_t</span> client_addrlength = <span class=\"built_in\">sizeof</span>(client_address);</span><br><span class=\"line\">            <span class=\"type\">int</span> connfd = <span class=\"built_in\">accept</span>(listenfd, (sockaddr *)&amp;client_address, &amp;client_addrlength);</span><br><span class=\"line\">            <span class=\"built_in\">addfd</span>(epollfd, connfd, <span class=\"literal\">true</span>); <span class=\"comment\">// 对connfd开启ET模式</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (events[i].events &amp; EPOLLIN) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;event trigger once\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * else if 中的这段代码不会被重复触发，所以我们循环读取数据，以确保把socket读缓存中的所有数据读出</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">memset</span>(buf, <span class=\"string\">&#x27;\\0&#x27;</span>, BUFFER_SIZE);</span><br><span class=\"line\">                <span class=\"comment\">// 读出数据</span></span><br><span class=\"line\">                <span class=\"type\">int</span> ret = <span class=\"built_in\">recv</span>(sockfd, buf, BUFFER_SIZE - <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                     * 对于非阻塞IO，下面的条件成立则表示数据已经被全部读取完毕。</span></span><br><span class=\"line\"><span class=\"comment\">                     * 此后epoll就能再次触发sockfd上的EPOLLIN事件，以驱动下一次读操作</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((errno == EAGAIN) || (errno == EWOULDBLOCK)) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;read later\\n&quot;</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"built_in\">close</span>(sockfd);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ret == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">close</span>(sockfd);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;get %d bytes of content: %s\\n&quot;</span>, ret, buf);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;something else happened \\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 参数不够</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;usage: %s ip_address port_number\\n&quot;</span>, <span class=\"built_in\">basename</span>(argv[<span class=\"number\">0</span>]));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> *ip = argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> port = <span class=\"built_in\">atoi</span>(argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    sockaddr_in address;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;address, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(address));</span><br><span class=\"line\">    address.sin_family = AF_INET;</span><br><span class=\"line\">    <span class=\"built_in\">inet_pton</span>(AF_INET, ip, &amp;address.sin_addr); <span class=\"comment\">// 将标准文本表示形式的IPv4或IPv6地址转换为网络字节序</span></span><br><span class=\"line\">    address.sin_port = <span class=\"built_in\">htons</span>(port); <span class=\"comment\">// 将主机字节序(host)的port转换为网络字节序(net)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> listenfd = <span class=\"built_in\">socket</span>(PF_INET, SOCK_STREAM, <span class=\"number\">0</span>); <span class=\"comment\">// 创建socket</span></span><br><span class=\"line\">    <span class=\"built_in\">assert</span>(listenfd &gt;= <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// bind函数的第二个参数可以直接强转</span></span><br><span class=\"line\">    ret = <span class=\"built_in\">bind</span>(listenfd, (<span class=\"keyword\">struct</span> sockaddr *)&amp;address, <span class=\"built_in\">sizeof</span>(address));</span><br><span class=\"line\">    <span class=\"built_in\">assert</span>(ret != <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    ret = <span class=\"built_in\">listen</span>(listenfd, <span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">assert</span>(ret != <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    epoll_event events[MAX_EVENT_NUMBER];</span><br><span class=\"line\">    <span class=\"type\">int</span> epollfd = <span class=\"built_in\">epoll_create</span>(<span class=\"number\">5</span>); <span class=\"comment\">// 创建内核事件表</span></span><br><span class=\"line\">    <span class=\"built_in\">assert</span>(epollfd != <span class=\"number\">-1</span>); <span class=\"comment\">// 确保创建成功</span></span><br><span class=\"line\">    <span class=\"built_in\">addfd</span>(epollfd, listenfd, <span class=\"literal\">true</span>); <span class=\"comment\">// 添加socket文件描述符到内核事件表。注意此处是开启ET模式的！</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 第三个参数为-1, 则epoll_wait将永远阻塞，直到某个事件发生</span></span><br><span class=\"line\">        <span class=\"type\">int</span> ret = <span class=\"built_in\">epoll_wait</span>(epollfd, events, MAX_EVENT_NUMBER, <span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;epoll failure\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">LT</span>(events, ret, epollfd, listenfd); <span class=\"comment\">// 使用LT模式</span></span><br><span class=\"line\">        <span class=\"comment\">// ET(events, ret, epollfd, listenfd); // 使用ET模式</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">close</span>(listenfd);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","secretKey":"df33f686762de8c50eef36d417e09079ee81a1cfa436ef3345770f3ee422a611","iv":"a4ae3f16dffb607d4fef412826d284c5","encryptedPassword":"6a24d7b32622b664f825132cbb148c84","encryptedContent":"","excerpt":"","more":"<h3 id=\"epoll\">epoll</h3>\n<p>epoll是Linux特有的IO复用函数，关于epoll的原理，参见：<a href=\"./Linux%E7%9A%84IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8\">Linux的IO多路复用</a></p>\n<h3 id=\"LT模式\">LT模式</h3>\n<p><code>epoll</code>的默认模式，这种情况下<code>epoll</code>相当于一个效率较高的<code>poll</code>。</p>\n<p>对于采用<code>LT</code>工作模式的文件描述符，当<code>epoll_wait</code>检测到其上有事件发生并且将此事件通知给应用程序后，应用程序还可以<mark>不立即</mark>处理该事件。这样，当应用程序下一次调用<code>epoll_wait</code>时，<code>epoll_wait</code>还会再次同志应用程序，直到该事件被处理。</p>\n<h3 id=\"ET模式\">ET模式</h3>\n<p>当往<code>epoll内核事件表</code>中注册一个文件描述符上的<code>EPOLLET</code>事件时，<code>epoll</code>将以<code>ET</code>模式来操作该文件描述符。<code>ET</code>模式是<code>epoll</code>的高效工作模式。</p>\n<p>对于采用<code>ET</code>模式的文件描述符，当<code>epoll_wait</code>检测到其上有事件发生并将此事件通知给应用程序后，应用程序必须立即处理该事件，因为后续的<code>epoll_wait</code>调用将不再向应用程序通知这一事件。</p>\n<p>可见，<code>ET</code>模式和大程度上降低了同一个<code>epoll</code>事件被重复触发的次数。</p>\n<h3 id=\"具体实现\">具体实现</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;netinet/in.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/epoll.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libgen.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAX_EVENT_NUMBER 1024</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> BUFFER_SIZE 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief 将文件描述符设置为非阻塞的</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">setnonblocking</span><span class=\"params\">(<span class=\"type\">int</span> fd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> old_option = <span class=\"built_in\">fcntl</span>(fd, F_GETFL); <span class=\"comment\">// 读取当前文件状态标志</span></span><br><span class=\"line\">    <span class=\"type\">int</span> new_option = old_option | O_NONBLOCK; <span class=\"comment\">// 设置非阻塞</span></span><br><span class=\"line\">    <span class=\"built_in\">fcntl</span>(fd, F_SETFL, old_option); <span class=\"comment\">// 写入新的文件状态标志</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> old_option;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief 注册EPOLLIN事件到epoll内核事件表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param epollfd 内核事件表对应的文件描述符</span></span><br><span class=\"line\"><span class=\"comment\"> * @param fd 要注册EPOLLIN的文件描述符</span></span><br><span class=\"line\"><span class=\"comment\"> * @param enable_et 是否对fd启用ET模式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addfd</span><span class=\"params\">(<span class=\"type\">int</span> epollfd, <span class=\"type\">int</span> fd, <span class=\"type\">bool</span> enable_et)</span> </span>&#123;</span><br><span class=\"line\">    epoll_event event;</span><br><span class=\"line\">    event.data.fd = fd;</span><br><span class=\"line\">    event.events = EPOLLIN;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (enable_et) &#123;</span><br><span class=\"line\">        event.events |= EPOLLET; <span class=\"comment\">// 通过按位或，增加EPOLLET属性</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 注意此处的event作为一个局部变量竟然传入了地址（使用epoll_ctl该参数是指针），</span></span><br><span class=\"line\">    <span class=\"comment\">// 推测是因为传指针可以避免拷贝，速度更快</span></span><br><span class=\"line\">    <span class=\"built_in\">epoll_ctl</span>(epollfd, EPOLL_CTL_ADD, fd, &amp;event);</span><br><span class=\"line\">    <span class=\"built_in\">setnonblocking</span>(fd); <span class=\"comment\">// 设置文件描述符为非阻塞</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief LT模式工作流程</span></span><br><span class=\"line\"><span class=\"comment\"> * @param events 已经就绪的事件的数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @param number 已就绪事件的数量</span></span><br><span class=\"line\"><span class=\"comment\"> * @param epollfd 内核事件表的文件描述符</span></span><br><span class=\"line\"><span class=\"comment\"> * @param listenfd 要处理的事件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">LT</span><span class=\"params\">(epoll_event *events, <span class=\"type\">int</span> number, <span class=\"type\">int</span> epollfd, <span class=\"type\">int</span> listenfd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> buf[BUFFER_SIZE];</span><br><span class=\"line\">    <span class=\"comment\">// 用循环遍历所有已经就绪的事件的列表(events)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; number; ++i) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> sockfd = events[i].data.fd; <span class=\"comment\">// 通常不用event.data的fd成员</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sockfd == listenfd) &#123; <span class=\"comment\">// 连接未受理。执行accept进行受理。注意此处可以用==判断相等！</span></span><br><span class=\"line\">            sockaddr_in client_address;</span><br><span class=\"line\">            <span class=\"type\">socklen_t</span> client_addrlength = <span class=\"built_in\">sizeof</span>(client_address);</span><br><span class=\"line\">            <span class=\"comment\">// 受理连接。注意accept的后两个参数都需要取地址</span></span><br><span class=\"line\">            <span class=\"type\">int</span> connfd = <span class=\"built_in\">accept</span>(listenfd, (<span class=\"keyword\">struct</span> sockaddr *)&amp;client_address, &amp;client_addrlength);</span><br><span class=\"line\">            <span class=\"comment\">// 将受理后的连接加入内核事件表，监听后续客户端的消息</span></span><br><span class=\"line\">            <span class=\"built_in\">addfd</span>(epollfd, connfd, <span class=\"literal\">false</span>); <span class=\"comment\">// 对connfd禁用ET模式</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (events[i].events &amp; EPOLLIN) &#123; <span class=\"comment\">// 连接已经受理并且有数据可读（数据未被全部读出）</span></span><br><span class=\"line\">            <span class=\"comment\">// 只要socket读缓存中还有未读出的数据，这段代码就会触发</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;enevt trigger once\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">memset</span>(buf, <span class=\"string\">&#x27;\\0&#x27;</span>, BUFFER_SIZE);</span><br><span class=\"line\">            <span class=\"comment\">// 读出数据。注意recv的第三个参数是 BUFFERE_SIZE - 1。不是BUFFER_SIZE</span></span><br><span class=\"line\">            <span class=\"type\">int</span> ret = <span class=\"built_in\">recv</span>(sockfd, buf, BUFFER_SIZE - <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">close</span>(sockfd);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;get %d bytes of content: %s\\n&quot;</span>, ret, buf);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;something else happened \\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief ET模式工作流程</span></span><br><span class=\"line\"><span class=\"comment\"> * @param</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ET</span><span class=\"params\">(epoll_event *events, <span class=\"type\">int</span> number, <span class=\"type\">int</span> epollfd, <span class=\"type\">int</span> listenfd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> buf[BUFFER_SIZE];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; number; ++i) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> sockfd = events[i].data.fd;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sockfd == listenfd) &#123; <span class=\"comment\">// 未受理的连接。调用accept受理该连接</span></span><br><span class=\"line\">            sockaddr_in client_address;</span><br><span class=\"line\">            <span class=\"type\">socklen_t</span> client_addrlength = <span class=\"built_in\">sizeof</span>(client_address);</span><br><span class=\"line\">            <span class=\"type\">int</span> connfd = <span class=\"built_in\">accept</span>(listenfd, (sockaddr *)&amp;client_address, &amp;client_addrlength);</span><br><span class=\"line\">            <span class=\"built_in\">addfd</span>(epollfd, connfd, <span class=\"literal\">true</span>); <span class=\"comment\">// 对connfd开启ET模式</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (events[i].events &amp; EPOLLIN) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;event trigger once\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * else if 中的这段代码不会被重复触发，所以我们循环读取数据，以确保把socket读缓存中的所有数据读出</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">memset</span>(buf, <span class=\"string\">&#x27;\\0&#x27;</span>, BUFFER_SIZE);</span><br><span class=\"line\">                <span class=\"comment\">// 读出数据</span></span><br><span class=\"line\">                <span class=\"type\">int</span> ret = <span class=\"built_in\">recv</span>(sockfd, buf, BUFFER_SIZE - <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                     * 对于非阻塞IO，下面的条件成立则表示数据已经被全部读取完毕。</span></span><br><span class=\"line\"><span class=\"comment\">                     * 此后epoll就能再次触发sockfd上的EPOLLIN事件，以驱动下一次读操作</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((errno == EAGAIN) || (errno == EWOULDBLOCK)) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;read later\\n&quot;</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"built_in\">close</span>(sockfd);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ret == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">close</span>(sockfd);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;get %d bytes of content: %s\\n&quot;</span>, ret, buf);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;something else happened \\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 参数不够</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;usage: %s ip_address port_number\\n&quot;</span>, <span class=\"built_in\">basename</span>(argv[<span class=\"number\">0</span>]));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> *ip = argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> port = <span class=\"built_in\">atoi</span>(argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    sockaddr_in address;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;address, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(address));</span><br><span class=\"line\">    address.sin_family = AF_INET;</span><br><span class=\"line\">    <span class=\"built_in\">inet_pton</span>(AF_INET, ip, &amp;address.sin_addr); <span class=\"comment\">// 将标准文本表示形式的IPv4或IPv6地址转换为网络字节序</span></span><br><span class=\"line\">    address.sin_port = <span class=\"built_in\">htons</span>(port); <span class=\"comment\">// 将主机字节序(host)的port转换为网络字节序(net)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> listenfd = <span class=\"built_in\">socket</span>(PF_INET, SOCK_STREAM, <span class=\"number\">0</span>); <span class=\"comment\">// 创建socket</span></span><br><span class=\"line\">    <span class=\"built_in\">assert</span>(listenfd &gt;= <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// bind函数的第二个参数可以直接强转</span></span><br><span class=\"line\">    ret = <span class=\"built_in\">bind</span>(listenfd, (<span class=\"keyword\">struct</span> sockaddr *)&amp;address, <span class=\"built_in\">sizeof</span>(address));</span><br><span class=\"line\">    <span class=\"built_in\">assert</span>(ret != <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    ret = <span class=\"built_in\">listen</span>(listenfd, <span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">assert</span>(ret != <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    epoll_event events[MAX_EVENT_NUMBER];</span><br><span class=\"line\">    <span class=\"type\">int</span> epollfd = <span class=\"built_in\">epoll_create</span>(<span class=\"number\">5</span>); <span class=\"comment\">// 创建内核事件表</span></span><br><span class=\"line\">    <span class=\"built_in\">assert</span>(epollfd != <span class=\"number\">-1</span>); <span class=\"comment\">// 确保创建成功</span></span><br><span class=\"line\">    <span class=\"built_in\">addfd</span>(epollfd, listenfd, <span class=\"literal\">true</span>); <span class=\"comment\">// 添加socket文件描述符到内核事件表。注意此处是开启ET模式的！</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 第三个参数为-1, 则epoll_wait将永远阻塞，直到某个事件发生</span></span><br><span class=\"line\">        <span class=\"type\">int</span> ret = <span class=\"built_in\">epoll_wait</span>(epollfd, events, MAX_EVENT_NUMBER, <span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;epoll failure\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">LT</span>(events, ret, epollfd, listenfd); <span class=\"comment\">// 使用LT模式</span></span><br><span class=\"line\">        <span class=\"comment\">// ET(events, ret, epollfd, listenfd); // 使用ET模式</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">close</span>(listenfd);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"socket编程","date":"2025-07-05T16:00:00.000Z","_content":"\n### 基本函数和结构体\n\n1. 创建socket\n    `int socket(int domain, int type, int protocol)`\n        成功返回`0`；失败返回`-1`，同时设置错误代码`errno`。\n        单个进程能够创建`socket`连接的数量受系统参数`open files`的限制（使用`ulimit -a`查看）。因为`socket`在`Linux`中也是文件\n    - `domain`:通信协议族\n        - `PF_INET`:`ipv4`协议族\n        - `PF_INET6`:`ipv6`协议族\n        - `PF_LOCAL`:本地通信的协议族\n        - `PF_PACKET`:内核底层的协议族\n        - `PF_IPX`:`IPX Novel`协议族\n        - 其余协议族不常用\n    - `type`:数据传输的类型\n        - `SOCK_STREAM`:面向连接的`socket`，\n            - 数据不会丢失\n            - 数据顺序不会错乱\n            - 双向通道\n        - `SOCK_DGRAM`:无连接的`socket`，\n            - 传输效率更高\n            - 数据可能丢失\n            - 数据顺序可能错乱\n    - `protocal`:最终使用的协议\n        - 在`ipv4`协议族中，数据传输方式为`SOCK_STREAM`的协议只有`IPPROTO_TCP`，数据传输方式为`SOCK_DGRAM`的协议只有`IPPROTO_UDP`.\n        - 该参数也可以为0\n\n2. `TCP`和`UDP`.[[TCP协议和UDP协议]]\n\n3. 主机字节序和网络字节序\n    - 主机字节序：分为**大端序**和**小端序**。\n        每个地址内放`1Byte`（`8bit`），大端序和小端序讨论多个字节(`Byte`)的地址高低问题\n        - 大端序：<mark>低高高低</mark>.\n            ==低位==`Byte`存放在==高位==，==高位==`Byte`存放在==低位==.\n        - 小端序：<mark>低低高高</mark>.\n            ==低位==`Byte`存放在==低位==，==高位==`Byte`存放在==高位==.\n            <img src=\"image/Pasted_image_20250610210518.png\" alt=\"image\" style=\"zoom:80%;\" />\n            总结：**大端序按照原来顺序存储，小端序按字节颠倒顺序存储**。\n        - 造成的问题：同样的数据，大端序的计算机和小端序的计算机解析方式不同，那么得到的内容也不一样。在网络传输中，容易出现问题。\n    - **网络字节序（大端序）**：解决不同字节序的计算机之间传输数据的问题\n        C语言提供了四个函数用于网络字节序和主机字节序的转换：\n        - `uint16_t htons(uint16_t hostshort)`:将16位的整数从*主机字节序*转换为*网络字节序*。\n        - `uint32_t htonl(uint32_t hostlong)`:将32位的整数从*主机字节序*转换为*网络字节序*。\n        - `uint16_t stohs(uint16_t netshort)`:将16位的整数从*网络字节序*转换为*主机在字节序*。\n        - `uint32_t stohl(uint32_t netlong)`:将32位的整数从*网络字节序*转换为*主机字节序*。\n            `h: host`主机\n            `n: net`网络\n            `s: short`2字节，16位的整数\n            `l: long`4字节，32位的整数\n\n4. ` ip`地址和通讯端口`port`.\n    `ipv4`地址用4字节(`32bit`)的整数存放，`port`用2字节(`16bit`)的整数存放（0～65535）。\n    为什么不用字符串？\n        因为`192.168.190.134`用字符串存储需要15字节，而用整数存储只需要4个字节：3232284294。（**思考`ipv4`地址最大只能到`255.255.255.255`**）\n\n5. 万恶的结构体\n        因为平时用到的`ip`地址都是字符串类型的，而程序中存储的是`int`类型那么就需要将字符串类型的ip转换为int型ip。主要涉及三个结构体和一个函数\n    \n    1. `sockaddr`结构体\n        存储协议族、端口、地址信息。客户端的`connetc`函数和服务端的`bind`函数都要用到这个结构体。其定义类似下图：\n        \n        ```cpp\n        struct sockaddr{\n            unsigned short int sa_family;   // 协议族\n            unsigned char sa_data[14];  // 14字节的端口和地址\n        }\n        ```\n        \n    2. `sockaddr_in`结构体\n        上方的`sockaddr`是为了统一地址结构的表示方法，统一接口函数。但是很难用，操作不方便。所以定义了等价的`sockaddr_in`结构体，其大小与`sockaddr`相同，可以强制转换。\n        ```cpp\n        struct sockaddr_in{\n            unsigned short int sa_family;   // 协议族\n            unsigned short sin_port;  // 16bit端口号\n            struct in_addr sin_addr;  // 32bit的地址(只能存储ipv4的地址，不能存储ipv6。sockaddr中14个字节的char数组就是预留了ip地址扩展的空间)\n            unsigned char sin_zero[8];// 未使用，为了保持与sockaddr长度相同而添加。\n        }\n        struct in_addr{\n            unsigned int s_addr; // 32bit的ip地址，大端序\n        }\n        ```\n        \n    3. `gethostbyname()`函数\n        根据域名、主机名、字符串`ip`地址获取大端存储的`int32`类型`ip`.\n        ```cpp\n        struct hostent* gethostbyname(const char* name);\n        ```\n        \n    4. `hostent`结构体\n        ```cpp\n        struct hostent{\n            char* h_name; // 主机名\n            char** h_aliases; // 主机所有别名构成的的字符串数组。（同一个ip可以绑定多个域名）\n            short h_addrtype; // 主机ip地址的类型，如ipv4(AF_INET)还是ipv6\n            short h_length; // 主机ip地址长度，ipv4为4(字节),ipv6为16(字节)\n            char** h_addr_list; // 主机的ip地址，以网络字节序存储\n        }\n        ```\n        获取`hostent`后，使用以下代码把大端序的地址复制到`sockaddr_in`结构体的`sin_addr`成员中\n        ```cpp\n        sockaddr_in serveraddr;\n        struct hostent* h = gethostbyname(\"192.168.1.2\"); \n        memcpy(&serveraddr.sin_addr, h->h_addr_list, h->h_length);\n        ```\n    \n6. 字符串`ip`转大端序`ip`.\n    C语言提供了几个库函数，用于字符串`ip`和大端序`ip`的相互转换。通常用于网络通讯的服务端程序中。\n    ``` cpp\n    typedef unsigned int uint32;\n    \n    // 把字符串格式的ip转换成大端序的ip，转换后的ip应该赋值给 sockaddr_in.in_addr.s_addr。不能传入域名\n    uint_32 inet_addr(const char* cp);\n    \n    // 将字符串格式的ip转换为大端序的ip，转换后的ip直接填充到sockaddr_in.in_addr成员（不需要手动填充）。不能传入域名 \n    int inet_aton(const char* cp, struct int_addr * inp);\n    \n    // 将大端序ip转换为字符串格式的ip。用于在服务器程序中解析客户端的ip地址  \n    char* inet_ntoa(struct in_addr in);\n    ```\n\n7. `bind`函数\n    绑定服务端的`ip`和端口，失败返回-1\n\n    ```cpp\n    struct sockaddr server_addr;\n    bind(listenfd, (struct sockaddr *)&server_addr, sizeof(server_addr))\n    ```\n\n8. `lieten`函数\n    把socket设置为可连接(监听)的状态，失败返回-1\n    `listen(listenfd, 5)`\n\n### 封装socket客户端\n``` cpp\n#include <iostream>\n\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <memory.h>\n#include <netdb.h>\n\nusing namespace std;\n\nclass tcpClient {\npublic:\n    int client_sock;        // 客户端socket，-1表示未连接或者已断开。>=0表示有效的socket\n    string ip;              // 服务端的ip或域名\n    unsigned short port;    // 通讯端口\n\n    tcpClient() : client_sock(-1), port(-1) {}\n\n    ~tcpClient() {\n        if (client_sock != -1) {\n            close();\n        }\n    }\n\n    /**\n     * @param in_ip 客户端ip/域名\n     * @param in_port 端口号\n     * @return 成功返回true，失败返回false\n     */\n    bool connect_to(const string &in_ip, const unsigned short in_port) {\n        if (client_sock != -1) {\n            cout << \"ERROR: sock connect is already exist\" << endl;\n            return false;\n        }\n        // 保存服务端ip和端口号\n        ip = in_ip;\n        port = in_port;\n\n        // 创建客户端Socket\n        client_sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (client_sock == -1) {\n            cout << \"创建Socket失败\" << endl;\n            return false;\n        }\n\n        // 配置服务器地址\n        sockaddr_in server_addr{};\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n        // server_addr.sin_addr.s_addr = inet_addr(in_ip.c_str());      // 该方法只能用ip，不能用域名\n\n        struct hostent *h;          // 用于存放服务端的大端序ip的结构体的指针\n        if ((h = gethostbyname(ip.c_str())) == nullptr)      // 把域名、主机名、字符串格式的ip转换为结构体，存储在h中\n        {\n            ::close(client_sock);     // 关闭sock连接\n            client_sock = -1;\n            return false;\n        }\n\n        memcpy(&server_addr.sin_addr, h->h_addr, h->h_length);\n\n        // 连接服务器\n        if (connect(client_sock, (sockaddr *) &server_addr, sizeof(server_addr)) == -1) {\n            cout << \"连接服务器失败\" << endl;\n            ::close(client_sock);\n            return false;\n        }\n\n        return true;\n    }\n\n    bool send(const string &msg) const {\n        // 参数使用string，不使用const char*，因为const char*\n        if (client_sock == -1) {\n            cout << \"ERROR: not connected\" << endl;\n            return false;\n        }\n\n        // 或者：if (send(client_sock, msg.c_str(), msg.length(), 0))      // 语义不准确：buffer可以是string，也可以是一块内存\n        if (::send(client_sock, msg.data(), msg.size(), 0) == -1) {\n            cout << \"ERROR: send failed\" << endl;\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg 存放接收到的内容\n     * @param maxLen 接收的最大长度\n     * @return\n     */\n    bool receive(string &msg, const size_t maxLen) const {\n        if (client_sock == -1) {\n            cout << \"ERROR: not connected\" << endl;\n            return false;\n        }\n\n        msg.clear();        // 清空容器\n        msg.resize(maxLen);     // 设置容器大小\n        /*\n         * 如果直接操作string对象的内存，需要保证两点：\n         *      1. 不能越界\n         *      2. 操作后需要手动设置string的大小（resize函数）。(因为直接操作string对象的内存后，string对象自动管理内存的功能就会失效)\n         *\n         * 传地址除了使用msg[0]，还可以使用msg.c_str()，msg.data()。\n         * 但是后两种获取到的都是const类型，无法修改，而recv函数需要将收到的数据写入msg中\n         */\n        int read_byte_number = ::recv(client_sock, &msg[0], msg.size(), 0); // 返回接收数据的大小，-1表示失败，0表示sock已断开\n        if (read_byte_number <= 0) {\n            cout << \"ERROR: receive failed\" << endl;\n            msg.clear();\n            return false;\n        }\n        msg.resize(read_byte_number);\n\n        return true;\n    }\n\n    bool close() {\n        if (client_sock == -1) {\n            cout << \"ERROR: not connected\" << endl;\n        }\n        ::close(client_sock);\n\n        client_sock = -1;\n        return true;\n    }\n};\n\nint main() {\n    cout << \"------------------- client start -------------------\" << endl;\n    tcpClient tcp_client;\n    string ip = \"127.0.0.1\";\n    string port = \"5005\";\n    if (!tcp_client.connect_to(ip, atoi(port.c_str()))) {\n        perror((\"connect to \" + ip + \":\" + port + \" failed\").c_str());\n        return -1;\n    }\n    char msg[1024];\n\n    for (int i = 0; i < 10; ++i) {\n        int iret;\n        memset(msg, 0, sizeof(msg));\n        sprintf(msg, \"test message %d\", i + 1);\n\n        // 向服务端发送请求报文\n        if (!tcp_client.send(msg)) {\n            char errormsg[32];\n            sprintf(errormsg, \"message %d send failed\", i + 1);\n            perror(errormsg);\n        }\n        cout << \"send: \" << msg << endl;\n\n        string received_message;\n        if (!tcp_client.receive(received_message, 1024)) {\n            perror(\"received failed\");\n        }\n        cout << \"received: \" << received_message << endl;\n        sleep(1);\n    }\n\n    return 0;\n}\n```\n### 封装socket服务端\n\n#### 单进程单线程服务端\n\n```cpp\n#include <iostream>\n\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <memory.h>\n\nusing namespace std;\n\nclass tcpServer {\npublic:\n    int listen_sock;            // 用于监听的socket。-1表示未初始化\n    int client_sock;            // 客户端连上的的socket，用于和客户端通信。-1表示客户端未连接。\n    string client_ip;           // 客户端的ip\n    unsigned short port;        // 服务端用于通讯的端口\n\n    tcpServer() : listen_sock(-1), client_sock(-1) {}\n\n    ~tcpServer() {\n        if (listen_sock == -1) {\n            closeListen();\n        }\n        if (client_sock == -1) {\n            closeClient();\n        }\n    }\n\n    bool initServer(const unsigned short &in_port) {\n        // 初始化服务端用于监听的socket\n        if ((listen_sock = socket(AF_INET, SOCK_STREAM, 0)) == -1) {\n            cout << \"ERROR socket init failed\" << endl;\n            return false;\n        }\n\n        port = in_port;\n\n        // 将服务端用于通信的ip和端口绑定到socket上\n        struct sockaddr_in server_addr;\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;                       // 协议\n        server_addr.sin_port = htons(port);                     // 指定服务端的通信端口\n        server_addr.sin_addr.s_addr = htonl(INADDR_ANY);        // 如果操作系统有多个ip，则多个ip都可以用于通信\n\n        // 为socket绑定ip和端口\n        if (bind(listen_sock, (struct sockaddr *) &server_addr, sizeof(server_addr)) == -1) {\n            cout << \"ERROR socket bind failed\" << endl;\n            close(listen_sock);\n            listen_sock = -1;\n            return false;\n        }\n\n        if (listen(listen_sock, 5)) {\n            cout << \"ERROR listening start failed\" << endl;\n            return false;\n        }\n        return true;\n    }\n\n    bool accept() {\n        struct sockaddr_in client_addr;             // 客户端的地址信息\n        socklen_t addrlen = sizeof(client_addr);    // struct sockaddr_in的大小\n        // 注意accept函数的第三个参数是指针：因为accept函数需要将实际接收到的消息长度写回addrlen\n        if ((client_sock = ::accept(listen_sock, (struct sockaddr *) &client_addr, &addrlen)) == -1) {\n            perror(\"accept failed\");\n            return false;\n        }\n\n        client_ip = inet_ntoa(client_addr.sin_addr);          // 将客户端的代码从大端序转换为字符串\n\n        return true;\n    }\n\n    bool send(const string &msg) {\n        if (client_sock == -1) {\n            perror(\"socket no connected\");\n            return false;\n        }\n\n        if ((::send(client_sock, msg.data(), msg.size(), 0) <= 0)) {\n            perror(\"send message failed\");\n            return false;\n        }\n\n        return true;\n    }\n\n    bool recv(string &msg, const size_t maxLen) {\n        msg.clear();\n        msg.resize(maxLen);\n        int read_byte_number = ::recv(client_sock, &msg[0], msg.size(), 0);\n        if (read_byte_number <= 0) {\n            msg.clear();\n            perror(\"receive failed\");\n            return false;\n        }\n        msg.resize(read_byte_number);\n        return true;\n    }\n\n    bool closeListen() {\n        if (listen_sock == -1) {\n            perror(\"not listening\");\n            return false;\n        }\n        close(listen_sock);\n        listen_sock = -1;\n        return true;\n    }\n\n    bool closeClient() {\n        if (client_sock == -1) {\n            perror(\"not listening\");\n            return false;\n        }\n        close(client_sock);\n        client_sock = -1;\n        return true;\n    }\n\n    // 获取string格式的ip地址\n    [[nodiscard]] const string &clientip() const {\n        return client_ip;\n    }\n};\n\nint main() {\n    tcpServer tcp_server;\n    if (!tcp_server.initServer(5005)) {\n        perror(\"initsServer() failed\");\n        return -1;\n    }\n\n    if (!tcp_server.accept()) {\n        perror(\"accept failed\");\n        return -1;\n    }\n    cout << \"client connected\" << endl;\n\n    string msg;\n    while (true) {\n        // 接收客户端发来的报文，如果客户端没有发来报文，recv将阻塞等待\n        if (!tcp_server.recv(msg, 1024)) {\n            perror(\"receive failed\");\n        }\n        cout << \"received: \" << msg << endl;\n\n        msg = \"OK\";\n        // 向客户端发送报文\n        if (!tcp_server.send(msg)) {\n            perror(\"send failed\");\n        }\n        cout << \"send: \" << msg << endl;\n        sleep(1);\n    }\n\n    return 0;\n}\n```\n\n#### 多进程服务端\n\n```cpp\n#include <iostream>\n\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <memory.h>\n\n#include <csignal>\n\nusing namespace std;\n\nclass tcpServer {\npublic:\n    int listen_sock;            // 用于监听的socket。-1表示未初始化\n    int client_sock;            // 客户端连上的的socket，用于和客户端通信。-1表示客户端未连接。\n    string client_ip;           // 客户端的ip\n    unsigned short port;        // 服务端用于通讯的端口\n\n    tcpServer() : listen_sock(-1), client_sock(-1) {}\n\n    ~tcpServer() {\n        if (listen_sock == -1) {\n            closeListen();\n        }\n        if (client_sock == -1) {\n            closeClient();\n        }\n    }\n\n    bool initServer(const unsigned short &in_port) {\n        // 初始化服务端用于监听的socket\n        if ((listen_sock = socket(AF_INET, SOCK_STREAM, 0)) == -1) {\n            cout << \"ERROR socket init failed\" << endl;\n            return false;\n        }\n\n        port = in_port;\n\n        // 将服务端用于通信的ip和端口绑定到socket上\n        struct sockaddr_in server_addr;\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;                       // 协议\n        server_addr.sin_port = htons(port);                     // 指定服务端的通信端口\n        server_addr.sin_addr.s_addr = htonl(INADDR_ANY);        // 如果操作系统有多个ip，则多个ip都可以用于通信\n\n        // 为socket绑定ip和端口\n        if (bind(listen_sock, (struct sockaddr *) &server_addr, sizeof(server_addr)) == -1) {\n            cout << \"ERROR socket bind failed\" << endl;\n            close(listen_sock);\n            listen_sock = -1;\n            return false;\n        }\n\n        if (listen(listen_sock, 5)) {\n            cout << \"ERROR listening start failed\" << endl;\n            return false;\n        }\n        return true;\n    }\n\n    bool accept() {\n        struct sockaddr_in client_addr;             // 客户端的地址信息\n        socklen_t addrlen = sizeof(client_addr);    // struct sockaddr_in的大小\n        // 注意accept函数的第三个参数是指针：因为accept函数需要将实际接收到的消息长度写回addrlen\n        if ((client_sock = ::accept(listen_sock, (struct sockaddr *) &client_addr, &addrlen)) == -1) {\n            perror(\"accept failed\");\n            return false;\n        }\n\n        client_ip = inet_ntoa(client_addr.sin_addr);          // 将客户端的代码从大端序转换为字符串\n\n        return true;\n    }\n\n    bool send(const string &msg) {\n        if (client_sock == -1) {\n            perror(\"socket no connected\");\n            return false;\n        }\n\n        if ((::send(client_sock, msg.data(), msg.size(), 0) <= 0)) {\n            perror(\"send message failed\");\n            return false;\n        }\n\n        return true;\n    }\n\n    bool recv(string &msg, const size_t maxLen) {\n        msg.clear();\n        msg.resize(maxLen);\n        int read_byte_number = ::recv(client_sock, &msg[0], msg.size(), 0);\n        if (read_byte_number <= 0) {\n            msg.clear();\n            perror(\"receive failed\");\n            return false;\n        }\n        msg.resize(read_byte_number);\n        return true;\n    }\n\n    bool closeListen() {\n        if (listen_sock == -1) {\n            perror(\"not listening\");\n            return false;\n        }\n        close(listen_sock);\n        listen_sock = -1;\n        return true;\n    }\n\n    bool closeClient() {\n        if (client_sock == -1) {\n            perror(\"not listening\");\n            return false;\n        }\n        close(client_sock);\n        client_sock = -1;\n        return true;\n    }\n\n    // 获取string格式的ip地址\n    [[nodiscard]] const string &clientip() const {\n        return client_ip;\n    }\n};\n\ntcpServer tcp_server;\n\nvoid fatherEXIT(int sig) {\n    // 以下代码是为了防止信号处理函数在执行过程中再次被信号中断\n    signal(SIGINT, SIG_IGN);\n    signal(SIGTERM, SIG_IGN);\n\n    cout << \"父进程退出： \" << sig << endl;\n\n    kill(0, SIGTERM);\n\n    // ---------------在这里增加释放资源的代码---------------\n    tcp_server.closeListen();\n    // --------------------------------------------------\n\n    exit(0);\n}\n\nvoid childEXIT(int sig) {\n    signal(SIGINT, SIG_IGN);\n    signal(SIGTERM, SIG_IGN);\n\n    cout << \"子进程退出： \" << sig << endl;\n\n    // ------在这里增加释放资源的代码（只释放子进程的资源）------\n    tcp_server.closeClient();       // 信号处理函数中只能访问全局对象，tcp_server必须定义为全局变量\n    // --------------------------------------------------\n\n    exit(0);\n}\n\nint main() {\n    if (!tcp_server.initServer(5005)) {\n        perror(\"initsServer() failed\");\n        return -1;\n    }\n\n    // 忽略全部信号，不希望被打扰。顺便解决僵尸进程的问题\n    for (int i = 0; i < 64; ++i) {\n        signal(i, SIG_IGN);\n    }\n    // 设置信号，在shell下可以用 'kill 进程号' 和 'Ctrl+C' 正常终止这些线程\n    // 但请不要用 'kill -9 进程号' 强行终止线程\n    signal(SIGTERM, fatherEXIT);\n    signal(SIGINT, fatherEXIT);\n\n    while (true) {\n        // 受理(监听)客户端的连接，从已连接的客户端中取出一个客户端\n        // 如果没有已连接的客户端，accept函数将阻塞等待\n        if (!tcp_server.accept()) {\n            perror(\"accept failed\");\n            return -1;\n        }\n        cout << \"client connected\" << endl;\n\n        int pid = fork();\n        // 系统资源不足\n        if (pid == -1) {\n            perror(\"fork\");\n            return -1;\n        }\n        if (pid > 0) {\n            tcp_server.closeClient();           // 多进程下，服务器父进程不需要客户端的socket，关闭\n            continue;           // 父进程返回循环开始位置，继续受理客户端连接\n        }\n\n        tcp_server.closeListen();           // 子进程不需要监听socket，关闭\n        // 子进程需要重新设置信号\n        signal(SIGTERM, childEXIT);         // 使用kill命令终止进程时，会产生SIGTERM信号，执行childEXIT函数\n        signal(SIGINT, childEXIT);          // 按下ctrl+c会触发SIGINT信号，执行childEXIT函数\n\n        // 子进程负责与客户端进行通讯\n        string msg;\n        while (true) {\n            // 接收客户端发来的报文，如果客户端没有发来报文，recv将阻塞等待\n            if (!tcp_server.recv(msg, 1024)) {\n                perror(\"receive failed\");\n            } else {\n                cout << \"received: \" << msg << \"------thread id: \" << getpid() << endl;\n            }\n\n            msg = \"OK\";\n            // 向客户端发送报文\n            if (!tcp_server.send(msg)) {\n                perror(\"send failed\");\n            } else {\n                cout << \"send: \" << msg << endl;\n            }\n\n            sleep(1);\n        }\n\n        return 0;           // 子进程通信完成后一定要退出，否则就会回到accept()函数的位置\n    }\n\n    return 0;\n}\n```\n\n#### 文件传输\n\n##### 客户端\n\n```cpp\n#include <iostream>\n#include <fstream>\n\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <memory.h>\n#include <netdb.h>\n#include <sys/stat.h>\n\nusing namespace std;\n\nclass tcpClient {\npublic:\n    int client_sock;        // 客户端socket，-1表示未连接或者已断开。>=0表示有效的socket\n    string ip;              // 服务端的ip或域名\n    unsigned short port;    // 通讯端口\n\n    tcpClient() : client_sock(-1), port(-1) {}\n\n    ~tcpClient() {\n        if (client_sock != -1) {\n            close();\n        }\n    }\n\n    /**\n     * @param in_ip 客户端ip/域名\n     * @param in_port 端口号\n     * @return 成功返回true，失败返回false\n     */\n    bool connect_to(const string &in_ip, const unsigned short in_port) {\n        if (client_sock != -1) {\n            cout << \"ERROR: sock connect is already exist\" << endl;\n            return false;\n        }\n        // 保存服务端ip和端口号\n        ip = in_ip;\n        port = in_port;\n\n        // 创建客户端Socket\n        client_sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (client_sock == -1) {\n            cout << \"创建Socket失败\" << endl;\n            return false;\n        }\n\n        // 配置服务器地址\n        sockaddr_in server_addr{};\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n        // server_addr.sin_addr.s_addr = inet_addr(in_ip.c_str());      // 该方法只能用ip，不能用域名\n\n        struct hostent *h;          // 用于存放服务端的大端序ip的结构体的指针\n        if ((h = gethostbyname(ip.c_str())) == nullptr)      // 把域名、主机名、字符串格式的ip转换为结构体，存储在h中\n        {\n            ::close(client_sock);     // 关闭sock连接\n            client_sock = -1;\n            return false;\n        }\n\n        memcpy(&server_addr.sin_addr, h->h_addr, h->h_length);\n\n        // 连接服务器\n        if (connect(client_sock, (sockaddr *) &server_addr, sizeof(server_addr)) == -1) {\n            cout << \"连接服务器失败\" << endl;\n            ::close(client_sock);\n            return false;\n        }\n\n        return true;\n    }\n\n    bool send(const string &msg) const {\n        // 参数使用string，不使用const char*，因为const char*\n        if (client_sock == -1) {\n            cout << \"ERROR: not connected\" << endl;\n            return false;\n        }\n\n        // 或者：if (send(client_sock, msg.c_str(), msg.length(), 0))      // 语义不准确：buffer可以是string，也可以是一块内存\n        if (::send(client_sock, msg.data(), msg.size(), 0) == -1) {\n            cout << \"ERROR: send failed\" << endl;\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * 用于传输二进制\n     * @param msg 要传输的数据（可以是结构体）\n     * @param size 数据大小\n     * @return\n     */\n    bool send(void *msg, const size_t size) {\n        // 参数使用string，不使用const char*，因为const char*\n        if (client_sock == -1) {\n            cout << \"ERROR: not connected\" << endl;\n            return false;\n        }\n\n        // 或者：if (send(client_sock, msg.c_str(), msg.length(), 0))      // 语义不准确：buffer可以是string，也可以是一块内存\n        if (::send(client_sock, msg, size, 0) == -1) {\n            cout << \"ERROR: send failed\" << endl;\n            return false;\n        }\n\n        return true;\n    }\n\n    bool sendFile(const string &filePath, const size_t fileSize) {\n        ifstream fin;\n        fin.open(filePath, ios::in | ios::binary);\n        if (!fin.is_open()) {\n            cout << \"file open failed\" << endl;\n            return false;\n        }\n\n        int onRead = 0;         // 每次调用 fin.read() 打算读取的字节数\n        int totalByte = 0;      // 从文件中已读取的总字节数\n        int bufferSize = 4096;  // 缓冲区大小，单位byte\n        char buffer[bufferSize];         // 存放读取数据的buffer。实际开发中，一般在1000～5000之间。\n\n        while (true) {\n            memset(buffer, 0, sizeof(buffer));\n            if (fileSize - totalByte > bufferSize) {\n                onRead = bufferSize;\n            } else {\n                onRead = fileSize - totalByte;\n            }\n\n            fin.read(buffer, onRead);\n            if (!send(buffer, onRead)) {\n                return false;\n            }\n            totalByte += onRead;\n\n            if (totalByte == fileSize) {\n                break;\n            }\n        }\n\n        fin.close();\n        return true;\n    }\n\n    /**\n     *\n     * @param msg 存放接收到的内容\n     * @param maxLen 接收的最大长度\n     * @return\n     */\n    bool receive(string &msg, const size_t maxLen) const {\n        if (client_sock == -1) {\n            cout << \"ERROR: not connected\" << endl;\n            return false;\n        }\n\n        msg.clear();        // 清空容器\n        msg.resize(maxLen);     // 设置容器大小\n        /*\n         * 如果直接操作string对象的内存，需要保证亮点：\n         *      1. 不能越界\n         *      2. 操作后需要手动设置string的大小（resize函数）。(因为直接操作string对象的内存后，string对象自动管理内存的功能就会失效)\n         *\n         * 传地址除了使用msg[0]，还可以使用msg.c_str()，msg.data()。\n         * 但是后两种获取到的都是const类型，无法修改，而recv函数需要将收到的数据写入msg中\n         */\n        int read_byte_number = ::recv(client_sock, &msg[0], msg.size(), 0); // 返回接收数据的大小，-1表示失败，0表示sock已断开\n        if (read_byte_number <= 0) {\n            cout << \"ERROR: receive failed\" << endl;\n            msg.clear();\n            return false;\n        }\n        msg.resize(read_byte_number);\n\n        return true;\n    }\n\n    bool close() {\n        if (client_sock == -1) {\n            cout << \"ERROR: not connected\" << endl;\n        }\n        ::close(client_sock);\n\n        client_sock = -1;\n        return true;\n    }\n};\n\n// 通过stat结构体 获得文件大小，单位字节\nsize_t getFileSize(const char *fileName) {\n\n    if (fileName == NULL) {\n        return 0;\n    }\n\n    // 这是一个存储文件(夹)信息的结构体，其中有文件大小和创建时间、访问时间、修改时间等\n    struct stat statbuf;\n\n    // 提供文件名字符串，获得文件属性结构体\n    stat(fileName, &statbuf);\n\n    // 获取文件大小\n    size_t filesize = statbuf.st_size;\n\n    return filesize;\n}\n\nint main() {\n    cout << \"------------------- client start -------------------\" << endl;\n    tcpClient tcp_client;\n    string ip = \"127.0.0.1\";\n    string port = \"5005\";\n    if (!tcp_client.connect_to(ip, atoi(port.c_str()))) {\n        perror((\"connect to \" + ip + \":\" + port + \" failed\").c_str());\n        return -1;\n    }\n\n    // 发送文件\n    // 把待传文件名和文件大小发送给服务端\n    struct fileInfo {\n        char fileName[256];     // 文件目录和文件名。与程序运行位置(工作目录)联系紧密，工作目录不同，fileName对应的路径也不同\n        int fileSize;           // 文件大小\n    } fileinfo;\n    memset(&fileinfo, 0, sizeof(fileInfo));\n    strcpy(fileinfo.fileName, \"test.txt\");\n    fileinfo.fileSize = (int) getFileSize(fileinfo.fileName);\n    if (!tcp_client.send(&fileinfo, sizeof(fileinfo))) {\n        char errormsg[32];\n        sprintf(errormsg, \"fileInfo send failed\");\n        perror(errormsg);\n        return -1;\n    } else {\n        cout << \"发送文件信息: fileName: \" << fileinfo.fileName << \"  fileSize: \" << fileinfo.fileSize << endl;\n    }\n\n    // 等待服务端的确认\n    string buffer;\n    if (!tcp_client.receive(buffer, 2)) {\n        cout << \"receive error\" << endl;\n    }\n    if (buffer != \"OK\") {\n        cout << \"receive message error\" << endl;\n    }\n\n    // 发送文件给服务端\n    if (!tcp_client.sendFile(fileinfo.fileName, fileinfo.fileSize)) {\n        cout << \"file send error\" << endl;\n        return -1;\n    }\n\n    // 等待服务端的确认\n    if (!tcp_client.receive(buffer, 2)) {\n        cout << \"no 'OK' received\" << endl;\n    }\n\n    if (buffer != \"OK\") {\n        cout << \"ERROR receive\" << endl;\n    } else {\n        cout << \"received 'OK'\" << endl;\n    }\n\n    return 0;\n}\n```\n\n##### 服务端\n\n```cpp\n#include <iostream>\n#include <fstream>\n\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <memory.h>\n\n#include <csignal>\n\nusing namespace std;\n\nclass tcpServer {\npublic:\n    int listen_sock;            // 用于监听的socket。-1表示未初始化\n    int client_sock;            // 客户端连上的的socket，用于和客户端通信。-1表示客户端未连接。\n    string client_ip;           // 客户端的ip\n    unsigned short port;        // 服务端用于通讯的端口\n\n    tcpServer() : listen_sock(-1), client_sock(-1) {}\n\n    ~tcpServer() {\n        if (listen_sock == -1) {\n            closeListen();\n        }\n        if (client_sock == -1) {\n            closeClient();\n        }\n    }\n\n    bool initServer(const unsigned short &in_port) {\n        // 初始化服务端用于监听的socket\n        if ((listen_sock = socket(AF_INET, SOCK_STREAM, 0)) == -1) {\n            cout << \"ERROR socket init failed\" << endl;\n            return false;\n        }\n\n        port = in_port;\n\n        // 将服务端用于通信的ip和端口绑定到socket上\n        struct sockaddr_in server_addr;\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;                       // 协议\n        server_addr.sin_port = htons(port);                     // 指定服务端的通信端口\n        server_addr.sin_addr.s_addr = htonl(INADDR_ANY);        // 如果操作系统有多个ip，则多个ip都可以用于通信\n\n        // 为socket绑定ip和端口\n        if (bind(listen_sock, (struct sockaddr *) &server_addr, sizeof(server_addr)) == -1) {\n            cout << \"ERROR socket bind failed\" << endl;\n            close(listen_sock);\n            listen_sock = -1;\n            return false;\n        }\n\n        if (listen(listen_sock, 5)) {\n            cout << \"ERROR listening start failed\" << endl;\n            return false;\n        }\n        return true;\n    }\n\n    bool accept() {\n        struct sockaddr_in client_addr;             // 客户端的地址信息\n        socklen_t addrlen = sizeof(client_addr);    // struct sockaddr_in的大小\n        // 注意accept函数的第三个参数是指针：因为accept函数需要将实际接收到的消息长度写回addrlen\n        if ((client_sock = ::accept(listen_sock, (struct sockaddr *) &client_addr, &addrlen)) == -1) {\n            perror(\"accept failed\");\n            return false;\n        }\n\n        client_ip = inet_ntoa(client_addr.sin_addr);          // 将客户端的代码从大端序转换为字符串\n\n        return true;\n    }\n\n    bool send(const string &msg) {\n        if (client_sock == -1) {\n            perror(\"socket no connected\");\n            return false;\n        }\n\n        if ((::send(client_sock, msg.data(), msg.size(), 0) <= 0)) {\n            perror(\"send message failed\");\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * 存放接收到的字符串数据\n     * @param msg\n     * @param maxLen\n     * @return\n     */\n    bool recv(string &msg, const size_t maxLen) {\n        msg.clear();\n        msg.resize(maxLen);\n        int read_byte_number = ::recv(client_sock, &msg[0], msg.size(), 0);\n        if (read_byte_number <= 0) {\n            msg.clear();\n            perror(\"receive failed\");\n            return false;\n        }\n        msg.resize(read_byte_number);\n        return true;\n    }\n\n    /**\n     * 存放接收到的二进制数据\n     * @param msg\n     * @param maxLen\n     * @return\n     */\n    bool recv(void *msg, const size_t maxLen) const {\n        if (client_sock == -1) {\n            cout << \"ERROR: not connected\" << endl;\n            return false;\n        }\n\n        int read_byte_number = ::recv(client_sock, msg, maxLen, 0); // 返回接收数据的大小，-1表示失败，0表示sock已断开\n        if (read_byte_number <= 0) {\n            cout << \"ERROR: receive failed\" << endl;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 接收文件\n     * @param filePath 文件路径和文件名\n     * @param fileSize 文件大小\n     * @return\n     */\n    bool receiveFile(const string &filePath, const size_t fileSize) {\n        ofstream fout;\n        fout.open(filePath, ios::binary | ios::out);\n        fout<<\"iii\"<<endl;\n        if (!fout.is_open()) {\n            cout << \"file open failed\" << endl;\n            return false;\n        }\n        int totalByte = 0;          // 已接收文件的总字节数\n        int onRead = 0;             // 本次打算接收的字节数\n        int bufferSize = 4096;  \t// 缓冲区大小，单位byte\n        char buffer[bufferSize];             // 接收文件内容的缓冲区，实际开发中，一般在1000～5000之间。\n\n        while (true) {\n            if (fileSize - totalByte > bufferSize) {\n                onRead = bufferSize;\n            } else {\n                onRead = fileSize - totalByte;\n            }\n\n            if (!recv(buffer, onRead)) {\n                return false;\n            }\n\n            fout.write(buffer, onRead);\n\n            totalByte += onRead;\n\n            if (totalByte == fileSize) {\n                fout.close();\n                break;\n            }\n        }\n\n        return true;\n    }\n\n    bool closeListen() {\n        if (listen_sock == -1) {\n            perror(\"not listening\");\n            return false;\n        }\n        close(listen_sock);\n        listen_sock = -1;\n        return true;\n    }\n\n    bool closeClient() {\n        if (client_sock == -1) {\n            perror(\"not listening\");\n            return false;\n        }\n        close(client_sock);\n        client_sock = -1;\n        return true;\n    }\n\n    // 获取string格式的ip地址\n    [[nodiscard]] const string &clientip() const {\n        return client_ip;\n    }\n};\n\ntcpServer tcp_server;\n\nvoid fatherEXIT(int sig) {\n    // 以下代码是为了防止信号处理函数在执行过程中再次被信号中断\n    signal(SIGINT, SIG_IGN);\n    signal(SIGTERM, SIG_IGN);\n\n    cout << \"父进程退出： \" << sig << endl;\n\n    kill(0, SIGTERM);\n\n    // ---------------在这里增加释放资源的代码---------------\n    tcp_server.closeListen();\n    // --------------------------------------------------\n\n    exit(0);\n}\n\nvoid childEXIT(int sig) {\n    signal(SIGINT, SIG_IGN);\n    signal(SIGTERM, SIG_IGN);\n\n    cout << \"子进程退出： \" << sig << endl;\n\n    // ------在这里增加释放资源的代码（只释放子进程的资源）------\n    tcp_server.closeClient();       // 信号处理函数中只能访问全局对象，tcp_server必须定义为全局变量\n    // --------------------------------------------------\n\n    exit(0);\n}\n\nint main() {\n    if (!tcp_server.initServer(5005)) {\n        perror(\"initsServer() failed\");\n        return -1;\n    }\n\n    // 忽略全部信号，不希望被打扰。顺便解决僵尸进程的问题\n    for (int i = 0; i < 64; ++i) {\n        signal(i, SIG_IGN);\n    }\n    // 设置信号，在shell下可以用 'kill 进程号' 和 'Ctrl+C' 正常终止这些线程\n    // 但请不要用 'kill -9 进程号' 强行终止线程\n    signal(SIGTERM, fatherEXIT);\n    signal(SIGINT, fatherEXIT);\n\n    while (true) {\n        // 受理(监听)客户端的连接，从已连接的客户端中取出一个客户端\n        // 如果没有已连接的客户端，accept函数将阻塞等待\n        if (!tcp_server.accept()) {\n            perror(\"accept failed\");\n            return -1;\n        }\n        cout << \"client connected\" << endl;\n\n        int pid = fork();\n        // 系统资源不足\n        if (pid == -1) {\n            perror(\"fork\");\n            return -1;\n        }\n        if (pid > 0) {\n            tcp_server.closeClient();           // 多进程下，服务器父进程不需要客户端的socket，关闭\n            continue;           // 父进程返回循环开始位置，继续受理客户端连接\n        }\n\n        tcp_server.closeListen();           // 子进程不需要监听socket，关闭\n        // 子进程需要重新设置信号\n        signal(SIGTERM, childEXIT);         // 使用kill命令终止进程时，会产生SIGTERM信号，执行childEXIT函数\n        signal(SIGINT, childEXIT);          // 按下ctrl+c会触发SIGINT信号，执行childEXIT函数\n\n        // 接收文件\n        // 接收客户端发来的文件信息\n        struct fileInfo {\n            char fileName[256];     // 文件名\n            int fileSize;           // 文件大小\n        } fileinfo;\n        memset(&fileinfo, 0, sizeof(fileinfo));\n        if (!tcp_server.recv(&fileinfo, sizeof(fileinfo))) {\n            cout << \"fileInfo receive failed\" << endl;\n            return -1;\n        } else {\n            strcpy(fileinfo.fileName, \"test(1).txt\");\n            cout << \"received: fileName: \" << fileinfo.fileName << \"  fileSize: \" << fileinfo.fileSize << endl;\n        }\n\n        // 给客户端发送确认报文\n        if (!tcp_server.send(\"OK\")) {\n            cout << \"send error\" << endl;\n            break;\n        }\n\n        // 接收文件\n        if (!tcp_server.receiveFile(fileinfo.fileName, fileinfo.fileSize)) {\n            cout << \"received file error\" << endl;\n        } else {\n            cout << \"file receive success\" << endl;\n        }\n\n        // 给客户端发送确认报文\n        if (!tcp_server.send(\"OK\")) {\n            cout << \"send 'OK' failed\" << endl;\n        }\n\n        return 0;           // 子进程通信完成后一定要退出，否则就会回到accept()函数的位置\n    }\n\n    return 0;\n}\n```\n\n","source":"_posts/网络编程/socket.md","raw":"---\ntitle: socket编程\ndate: 2025-07-06\ncategories: 网络编程\ntags: [socket, C++]\n---\n\n### 基本函数和结构体\n\n1. 创建socket\n    `int socket(int domain, int type, int protocol)`\n        成功返回`0`；失败返回`-1`，同时设置错误代码`errno`。\n        单个进程能够创建`socket`连接的数量受系统参数`open files`的限制（使用`ulimit -a`查看）。因为`socket`在`Linux`中也是文件\n    - `domain`:通信协议族\n        - `PF_INET`:`ipv4`协议族\n        - `PF_INET6`:`ipv6`协议族\n        - `PF_LOCAL`:本地通信的协议族\n        - `PF_PACKET`:内核底层的协议族\n        - `PF_IPX`:`IPX Novel`协议族\n        - 其余协议族不常用\n    - `type`:数据传输的类型\n        - `SOCK_STREAM`:面向连接的`socket`，\n            - 数据不会丢失\n            - 数据顺序不会错乱\n            - 双向通道\n        - `SOCK_DGRAM`:无连接的`socket`，\n            - 传输效率更高\n            - 数据可能丢失\n            - 数据顺序可能错乱\n    - `protocal`:最终使用的协议\n        - 在`ipv4`协议族中，数据传输方式为`SOCK_STREAM`的协议只有`IPPROTO_TCP`，数据传输方式为`SOCK_DGRAM`的协议只有`IPPROTO_UDP`.\n        - 该参数也可以为0\n\n2. `TCP`和`UDP`.[[TCP协议和UDP协议]]\n\n3. 主机字节序和网络字节序\n    - 主机字节序：分为**大端序**和**小端序**。\n        每个地址内放`1Byte`（`8bit`），大端序和小端序讨论多个字节(`Byte`)的地址高低问题\n        - 大端序：<mark>低高高低</mark>.\n            ==低位==`Byte`存放在==高位==，==高位==`Byte`存放在==低位==.\n        - 小端序：<mark>低低高高</mark>.\n            ==低位==`Byte`存放在==低位==，==高位==`Byte`存放在==高位==.\n            <img src=\"image/Pasted_image_20250610210518.png\" alt=\"image\" style=\"zoom:80%;\" />\n            总结：**大端序按照原来顺序存储，小端序按字节颠倒顺序存储**。\n        - 造成的问题：同样的数据，大端序的计算机和小端序的计算机解析方式不同，那么得到的内容也不一样。在网络传输中，容易出现问题。\n    - **网络字节序（大端序）**：解决不同字节序的计算机之间传输数据的问题\n        C语言提供了四个函数用于网络字节序和主机字节序的转换：\n        - `uint16_t htons(uint16_t hostshort)`:将16位的整数从*主机字节序*转换为*网络字节序*。\n        - `uint32_t htonl(uint32_t hostlong)`:将32位的整数从*主机字节序*转换为*网络字节序*。\n        - `uint16_t stohs(uint16_t netshort)`:将16位的整数从*网络字节序*转换为*主机在字节序*。\n        - `uint32_t stohl(uint32_t netlong)`:将32位的整数从*网络字节序*转换为*主机字节序*。\n            `h: host`主机\n            `n: net`网络\n            `s: short`2字节，16位的整数\n            `l: long`4字节，32位的整数\n\n4. ` ip`地址和通讯端口`port`.\n    `ipv4`地址用4字节(`32bit`)的整数存放，`port`用2字节(`16bit`)的整数存放（0～65535）。\n    为什么不用字符串？\n        因为`192.168.190.134`用字符串存储需要15字节，而用整数存储只需要4个字节：3232284294。（**思考`ipv4`地址最大只能到`255.255.255.255`**）\n\n5. 万恶的结构体\n        因为平时用到的`ip`地址都是字符串类型的，而程序中存储的是`int`类型那么就需要将字符串类型的ip转换为int型ip。主要涉及三个结构体和一个函数\n    \n    1. `sockaddr`结构体\n        存储协议族、端口、地址信息。客户端的`connetc`函数和服务端的`bind`函数都要用到这个结构体。其定义类似下图：\n        \n        ```cpp\n        struct sockaddr{\n            unsigned short int sa_family;   // 协议族\n            unsigned char sa_data[14];  // 14字节的端口和地址\n        }\n        ```\n        \n    2. `sockaddr_in`结构体\n        上方的`sockaddr`是为了统一地址结构的表示方法，统一接口函数。但是很难用，操作不方便。所以定义了等价的`sockaddr_in`结构体，其大小与`sockaddr`相同，可以强制转换。\n        ```cpp\n        struct sockaddr_in{\n            unsigned short int sa_family;   // 协议族\n            unsigned short sin_port;  // 16bit端口号\n            struct in_addr sin_addr;  // 32bit的地址(只能存储ipv4的地址，不能存储ipv6。sockaddr中14个字节的char数组就是预留了ip地址扩展的空间)\n            unsigned char sin_zero[8];// 未使用，为了保持与sockaddr长度相同而添加。\n        }\n        struct in_addr{\n            unsigned int s_addr; // 32bit的ip地址，大端序\n        }\n        ```\n        \n    3. `gethostbyname()`函数\n        根据域名、主机名、字符串`ip`地址获取大端存储的`int32`类型`ip`.\n        ```cpp\n        struct hostent* gethostbyname(const char* name);\n        ```\n        \n    4. `hostent`结构体\n        ```cpp\n        struct hostent{\n            char* h_name; // 主机名\n            char** h_aliases; // 主机所有别名构成的的字符串数组。（同一个ip可以绑定多个域名）\n            short h_addrtype; // 主机ip地址的类型，如ipv4(AF_INET)还是ipv6\n            short h_length; // 主机ip地址长度，ipv4为4(字节),ipv6为16(字节)\n            char** h_addr_list; // 主机的ip地址，以网络字节序存储\n        }\n        ```\n        获取`hostent`后，使用以下代码把大端序的地址复制到`sockaddr_in`结构体的`sin_addr`成员中\n        ```cpp\n        sockaddr_in serveraddr;\n        struct hostent* h = gethostbyname(\"192.168.1.2\"); \n        memcpy(&serveraddr.sin_addr, h->h_addr_list, h->h_length);\n        ```\n    \n6. 字符串`ip`转大端序`ip`.\n    C语言提供了几个库函数，用于字符串`ip`和大端序`ip`的相互转换。通常用于网络通讯的服务端程序中。\n    ``` cpp\n    typedef unsigned int uint32;\n    \n    // 把字符串格式的ip转换成大端序的ip，转换后的ip应该赋值给 sockaddr_in.in_addr.s_addr。不能传入域名\n    uint_32 inet_addr(const char* cp);\n    \n    // 将字符串格式的ip转换为大端序的ip，转换后的ip直接填充到sockaddr_in.in_addr成员（不需要手动填充）。不能传入域名 \n    int inet_aton(const char* cp, struct int_addr * inp);\n    \n    // 将大端序ip转换为字符串格式的ip。用于在服务器程序中解析客户端的ip地址  \n    char* inet_ntoa(struct in_addr in);\n    ```\n\n7. `bind`函数\n    绑定服务端的`ip`和端口，失败返回-1\n\n    ```cpp\n    struct sockaddr server_addr;\n    bind(listenfd, (struct sockaddr *)&server_addr, sizeof(server_addr))\n    ```\n\n8. `lieten`函数\n    把socket设置为可连接(监听)的状态，失败返回-1\n    `listen(listenfd, 5)`\n\n### 封装socket客户端\n``` cpp\n#include <iostream>\n\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <memory.h>\n#include <netdb.h>\n\nusing namespace std;\n\nclass tcpClient {\npublic:\n    int client_sock;        // 客户端socket，-1表示未连接或者已断开。>=0表示有效的socket\n    string ip;              // 服务端的ip或域名\n    unsigned short port;    // 通讯端口\n\n    tcpClient() : client_sock(-1), port(-1) {}\n\n    ~tcpClient() {\n        if (client_sock != -1) {\n            close();\n        }\n    }\n\n    /**\n     * @param in_ip 客户端ip/域名\n     * @param in_port 端口号\n     * @return 成功返回true，失败返回false\n     */\n    bool connect_to(const string &in_ip, const unsigned short in_port) {\n        if (client_sock != -1) {\n            cout << \"ERROR: sock connect is already exist\" << endl;\n            return false;\n        }\n        // 保存服务端ip和端口号\n        ip = in_ip;\n        port = in_port;\n\n        // 创建客户端Socket\n        client_sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (client_sock == -1) {\n            cout << \"创建Socket失败\" << endl;\n            return false;\n        }\n\n        // 配置服务器地址\n        sockaddr_in server_addr{};\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n        // server_addr.sin_addr.s_addr = inet_addr(in_ip.c_str());      // 该方法只能用ip，不能用域名\n\n        struct hostent *h;          // 用于存放服务端的大端序ip的结构体的指针\n        if ((h = gethostbyname(ip.c_str())) == nullptr)      // 把域名、主机名、字符串格式的ip转换为结构体，存储在h中\n        {\n            ::close(client_sock);     // 关闭sock连接\n            client_sock = -1;\n            return false;\n        }\n\n        memcpy(&server_addr.sin_addr, h->h_addr, h->h_length);\n\n        // 连接服务器\n        if (connect(client_sock, (sockaddr *) &server_addr, sizeof(server_addr)) == -1) {\n            cout << \"连接服务器失败\" << endl;\n            ::close(client_sock);\n            return false;\n        }\n\n        return true;\n    }\n\n    bool send(const string &msg) const {\n        // 参数使用string，不使用const char*，因为const char*\n        if (client_sock == -1) {\n            cout << \"ERROR: not connected\" << endl;\n            return false;\n        }\n\n        // 或者：if (send(client_sock, msg.c_str(), msg.length(), 0))      // 语义不准确：buffer可以是string，也可以是一块内存\n        if (::send(client_sock, msg.data(), msg.size(), 0) == -1) {\n            cout << \"ERROR: send failed\" << endl;\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg 存放接收到的内容\n     * @param maxLen 接收的最大长度\n     * @return\n     */\n    bool receive(string &msg, const size_t maxLen) const {\n        if (client_sock == -1) {\n            cout << \"ERROR: not connected\" << endl;\n            return false;\n        }\n\n        msg.clear();        // 清空容器\n        msg.resize(maxLen);     // 设置容器大小\n        /*\n         * 如果直接操作string对象的内存，需要保证两点：\n         *      1. 不能越界\n         *      2. 操作后需要手动设置string的大小（resize函数）。(因为直接操作string对象的内存后，string对象自动管理内存的功能就会失效)\n         *\n         * 传地址除了使用msg[0]，还可以使用msg.c_str()，msg.data()。\n         * 但是后两种获取到的都是const类型，无法修改，而recv函数需要将收到的数据写入msg中\n         */\n        int read_byte_number = ::recv(client_sock, &msg[0], msg.size(), 0); // 返回接收数据的大小，-1表示失败，0表示sock已断开\n        if (read_byte_number <= 0) {\n            cout << \"ERROR: receive failed\" << endl;\n            msg.clear();\n            return false;\n        }\n        msg.resize(read_byte_number);\n\n        return true;\n    }\n\n    bool close() {\n        if (client_sock == -1) {\n            cout << \"ERROR: not connected\" << endl;\n        }\n        ::close(client_sock);\n\n        client_sock = -1;\n        return true;\n    }\n};\n\nint main() {\n    cout << \"------------------- client start -------------------\" << endl;\n    tcpClient tcp_client;\n    string ip = \"127.0.0.1\";\n    string port = \"5005\";\n    if (!tcp_client.connect_to(ip, atoi(port.c_str()))) {\n        perror((\"connect to \" + ip + \":\" + port + \" failed\").c_str());\n        return -1;\n    }\n    char msg[1024];\n\n    for (int i = 0; i < 10; ++i) {\n        int iret;\n        memset(msg, 0, sizeof(msg));\n        sprintf(msg, \"test message %d\", i + 1);\n\n        // 向服务端发送请求报文\n        if (!tcp_client.send(msg)) {\n            char errormsg[32];\n            sprintf(errormsg, \"message %d send failed\", i + 1);\n            perror(errormsg);\n        }\n        cout << \"send: \" << msg << endl;\n\n        string received_message;\n        if (!tcp_client.receive(received_message, 1024)) {\n            perror(\"received failed\");\n        }\n        cout << \"received: \" << received_message << endl;\n        sleep(1);\n    }\n\n    return 0;\n}\n```\n### 封装socket服务端\n\n#### 单进程单线程服务端\n\n```cpp\n#include <iostream>\n\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <memory.h>\n\nusing namespace std;\n\nclass tcpServer {\npublic:\n    int listen_sock;            // 用于监听的socket。-1表示未初始化\n    int client_sock;            // 客户端连上的的socket，用于和客户端通信。-1表示客户端未连接。\n    string client_ip;           // 客户端的ip\n    unsigned short port;        // 服务端用于通讯的端口\n\n    tcpServer() : listen_sock(-1), client_sock(-1) {}\n\n    ~tcpServer() {\n        if (listen_sock == -1) {\n            closeListen();\n        }\n        if (client_sock == -1) {\n            closeClient();\n        }\n    }\n\n    bool initServer(const unsigned short &in_port) {\n        // 初始化服务端用于监听的socket\n        if ((listen_sock = socket(AF_INET, SOCK_STREAM, 0)) == -1) {\n            cout << \"ERROR socket init failed\" << endl;\n            return false;\n        }\n\n        port = in_port;\n\n        // 将服务端用于通信的ip和端口绑定到socket上\n        struct sockaddr_in server_addr;\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;                       // 协议\n        server_addr.sin_port = htons(port);                     // 指定服务端的通信端口\n        server_addr.sin_addr.s_addr = htonl(INADDR_ANY);        // 如果操作系统有多个ip，则多个ip都可以用于通信\n\n        // 为socket绑定ip和端口\n        if (bind(listen_sock, (struct sockaddr *) &server_addr, sizeof(server_addr)) == -1) {\n            cout << \"ERROR socket bind failed\" << endl;\n            close(listen_sock);\n            listen_sock = -1;\n            return false;\n        }\n\n        if (listen(listen_sock, 5)) {\n            cout << \"ERROR listening start failed\" << endl;\n            return false;\n        }\n        return true;\n    }\n\n    bool accept() {\n        struct sockaddr_in client_addr;             // 客户端的地址信息\n        socklen_t addrlen = sizeof(client_addr);    // struct sockaddr_in的大小\n        // 注意accept函数的第三个参数是指针：因为accept函数需要将实际接收到的消息长度写回addrlen\n        if ((client_sock = ::accept(listen_sock, (struct sockaddr *) &client_addr, &addrlen)) == -1) {\n            perror(\"accept failed\");\n            return false;\n        }\n\n        client_ip = inet_ntoa(client_addr.sin_addr);          // 将客户端的代码从大端序转换为字符串\n\n        return true;\n    }\n\n    bool send(const string &msg) {\n        if (client_sock == -1) {\n            perror(\"socket no connected\");\n            return false;\n        }\n\n        if ((::send(client_sock, msg.data(), msg.size(), 0) <= 0)) {\n            perror(\"send message failed\");\n            return false;\n        }\n\n        return true;\n    }\n\n    bool recv(string &msg, const size_t maxLen) {\n        msg.clear();\n        msg.resize(maxLen);\n        int read_byte_number = ::recv(client_sock, &msg[0], msg.size(), 0);\n        if (read_byte_number <= 0) {\n            msg.clear();\n            perror(\"receive failed\");\n            return false;\n        }\n        msg.resize(read_byte_number);\n        return true;\n    }\n\n    bool closeListen() {\n        if (listen_sock == -1) {\n            perror(\"not listening\");\n            return false;\n        }\n        close(listen_sock);\n        listen_sock = -1;\n        return true;\n    }\n\n    bool closeClient() {\n        if (client_sock == -1) {\n            perror(\"not listening\");\n            return false;\n        }\n        close(client_sock);\n        client_sock = -1;\n        return true;\n    }\n\n    // 获取string格式的ip地址\n    [[nodiscard]] const string &clientip() const {\n        return client_ip;\n    }\n};\n\nint main() {\n    tcpServer tcp_server;\n    if (!tcp_server.initServer(5005)) {\n        perror(\"initsServer() failed\");\n        return -1;\n    }\n\n    if (!tcp_server.accept()) {\n        perror(\"accept failed\");\n        return -1;\n    }\n    cout << \"client connected\" << endl;\n\n    string msg;\n    while (true) {\n        // 接收客户端发来的报文，如果客户端没有发来报文，recv将阻塞等待\n        if (!tcp_server.recv(msg, 1024)) {\n            perror(\"receive failed\");\n        }\n        cout << \"received: \" << msg << endl;\n\n        msg = \"OK\";\n        // 向客户端发送报文\n        if (!tcp_server.send(msg)) {\n            perror(\"send failed\");\n        }\n        cout << \"send: \" << msg << endl;\n        sleep(1);\n    }\n\n    return 0;\n}\n```\n\n#### 多进程服务端\n\n```cpp\n#include <iostream>\n\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <memory.h>\n\n#include <csignal>\n\nusing namespace std;\n\nclass tcpServer {\npublic:\n    int listen_sock;            // 用于监听的socket。-1表示未初始化\n    int client_sock;            // 客户端连上的的socket，用于和客户端通信。-1表示客户端未连接。\n    string client_ip;           // 客户端的ip\n    unsigned short port;        // 服务端用于通讯的端口\n\n    tcpServer() : listen_sock(-1), client_sock(-1) {}\n\n    ~tcpServer() {\n        if (listen_sock == -1) {\n            closeListen();\n        }\n        if (client_sock == -1) {\n            closeClient();\n        }\n    }\n\n    bool initServer(const unsigned short &in_port) {\n        // 初始化服务端用于监听的socket\n        if ((listen_sock = socket(AF_INET, SOCK_STREAM, 0)) == -1) {\n            cout << \"ERROR socket init failed\" << endl;\n            return false;\n        }\n\n        port = in_port;\n\n        // 将服务端用于通信的ip和端口绑定到socket上\n        struct sockaddr_in server_addr;\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;                       // 协议\n        server_addr.sin_port = htons(port);                     // 指定服务端的通信端口\n        server_addr.sin_addr.s_addr = htonl(INADDR_ANY);        // 如果操作系统有多个ip，则多个ip都可以用于通信\n\n        // 为socket绑定ip和端口\n        if (bind(listen_sock, (struct sockaddr *) &server_addr, sizeof(server_addr)) == -1) {\n            cout << \"ERROR socket bind failed\" << endl;\n            close(listen_sock);\n            listen_sock = -1;\n            return false;\n        }\n\n        if (listen(listen_sock, 5)) {\n            cout << \"ERROR listening start failed\" << endl;\n            return false;\n        }\n        return true;\n    }\n\n    bool accept() {\n        struct sockaddr_in client_addr;             // 客户端的地址信息\n        socklen_t addrlen = sizeof(client_addr);    // struct sockaddr_in的大小\n        // 注意accept函数的第三个参数是指针：因为accept函数需要将实际接收到的消息长度写回addrlen\n        if ((client_sock = ::accept(listen_sock, (struct sockaddr *) &client_addr, &addrlen)) == -1) {\n            perror(\"accept failed\");\n            return false;\n        }\n\n        client_ip = inet_ntoa(client_addr.sin_addr);          // 将客户端的代码从大端序转换为字符串\n\n        return true;\n    }\n\n    bool send(const string &msg) {\n        if (client_sock == -1) {\n            perror(\"socket no connected\");\n            return false;\n        }\n\n        if ((::send(client_sock, msg.data(), msg.size(), 0) <= 0)) {\n            perror(\"send message failed\");\n            return false;\n        }\n\n        return true;\n    }\n\n    bool recv(string &msg, const size_t maxLen) {\n        msg.clear();\n        msg.resize(maxLen);\n        int read_byte_number = ::recv(client_sock, &msg[0], msg.size(), 0);\n        if (read_byte_number <= 0) {\n            msg.clear();\n            perror(\"receive failed\");\n            return false;\n        }\n        msg.resize(read_byte_number);\n        return true;\n    }\n\n    bool closeListen() {\n        if (listen_sock == -1) {\n            perror(\"not listening\");\n            return false;\n        }\n        close(listen_sock);\n        listen_sock = -1;\n        return true;\n    }\n\n    bool closeClient() {\n        if (client_sock == -1) {\n            perror(\"not listening\");\n            return false;\n        }\n        close(client_sock);\n        client_sock = -1;\n        return true;\n    }\n\n    // 获取string格式的ip地址\n    [[nodiscard]] const string &clientip() const {\n        return client_ip;\n    }\n};\n\ntcpServer tcp_server;\n\nvoid fatherEXIT(int sig) {\n    // 以下代码是为了防止信号处理函数在执行过程中再次被信号中断\n    signal(SIGINT, SIG_IGN);\n    signal(SIGTERM, SIG_IGN);\n\n    cout << \"父进程退出： \" << sig << endl;\n\n    kill(0, SIGTERM);\n\n    // ---------------在这里增加释放资源的代码---------------\n    tcp_server.closeListen();\n    // --------------------------------------------------\n\n    exit(0);\n}\n\nvoid childEXIT(int sig) {\n    signal(SIGINT, SIG_IGN);\n    signal(SIGTERM, SIG_IGN);\n\n    cout << \"子进程退出： \" << sig << endl;\n\n    // ------在这里增加释放资源的代码（只释放子进程的资源）------\n    tcp_server.closeClient();       // 信号处理函数中只能访问全局对象，tcp_server必须定义为全局变量\n    // --------------------------------------------------\n\n    exit(0);\n}\n\nint main() {\n    if (!tcp_server.initServer(5005)) {\n        perror(\"initsServer() failed\");\n        return -1;\n    }\n\n    // 忽略全部信号，不希望被打扰。顺便解决僵尸进程的问题\n    for (int i = 0; i < 64; ++i) {\n        signal(i, SIG_IGN);\n    }\n    // 设置信号，在shell下可以用 'kill 进程号' 和 'Ctrl+C' 正常终止这些线程\n    // 但请不要用 'kill -9 进程号' 强行终止线程\n    signal(SIGTERM, fatherEXIT);\n    signal(SIGINT, fatherEXIT);\n\n    while (true) {\n        // 受理(监听)客户端的连接，从已连接的客户端中取出一个客户端\n        // 如果没有已连接的客户端，accept函数将阻塞等待\n        if (!tcp_server.accept()) {\n            perror(\"accept failed\");\n            return -1;\n        }\n        cout << \"client connected\" << endl;\n\n        int pid = fork();\n        // 系统资源不足\n        if (pid == -1) {\n            perror(\"fork\");\n            return -1;\n        }\n        if (pid > 0) {\n            tcp_server.closeClient();           // 多进程下，服务器父进程不需要客户端的socket，关闭\n            continue;           // 父进程返回循环开始位置，继续受理客户端连接\n        }\n\n        tcp_server.closeListen();           // 子进程不需要监听socket，关闭\n        // 子进程需要重新设置信号\n        signal(SIGTERM, childEXIT);         // 使用kill命令终止进程时，会产生SIGTERM信号，执行childEXIT函数\n        signal(SIGINT, childEXIT);          // 按下ctrl+c会触发SIGINT信号，执行childEXIT函数\n\n        // 子进程负责与客户端进行通讯\n        string msg;\n        while (true) {\n            // 接收客户端发来的报文，如果客户端没有发来报文，recv将阻塞等待\n            if (!tcp_server.recv(msg, 1024)) {\n                perror(\"receive failed\");\n            } else {\n                cout << \"received: \" << msg << \"------thread id: \" << getpid() << endl;\n            }\n\n            msg = \"OK\";\n            // 向客户端发送报文\n            if (!tcp_server.send(msg)) {\n                perror(\"send failed\");\n            } else {\n                cout << \"send: \" << msg << endl;\n            }\n\n            sleep(1);\n        }\n\n        return 0;           // 子进程通信完成后一定要退出，否则就会回到accept()函数的位置\n    }\n\n    return 0;\n}\n```\n\n#### 文件传输\n\n##### 客户端\n\n```cpp\n#include <iostream>\n#include <fstream>\n\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <memory.h>\n#include <netdb.h>\n#include <sys/stat.h>\n\nusing namespace std;\n\nclass tcpClient {\npublic:\n    int client_sock;        // 客户端socket，-1表示未连接或者已断开。>=0表示有效的socket\n    string ip;              // 服务端的ip或域名\n    unsigned short port;    // 通讯端口\n\n    tcpClient() : client_sock(-1), port(-1) {}\n\n    ~tcpClient() {\n        if (client_sock != -1) {\n            close();\n        }\n    }\n\n    /**\n     * @param in_ip 客户端ip/域名\n     * @param in_port 端口号\n     * @return 成功返回true，失败返回false\n     */\n    bool connect_to(const string &in_ip, const unsigned short in_port) {\n        if (client_sock != -1) {\n            cout << \"ERROR: sock connect is already exist\" << endl;\n            return false;\n        }\n        // 保存服务端ip和端口号\n        ip = in_ip;\n        port = in_port;\n\n        // 创建客户端Socket\n        client_sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (client_sock == -1) {\n            cout << \"创建Socket失败\" << endl;\n            return false;\n        }\n\n        // 配置服务器地址\n        sockaddr_in server_addr{};\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n        // server_addr.sin_addr.s_addr = inet_addr(in_ip.c_str());      // 该方法只能用ip，不能用域名\n\n        struct hostent *h;          // 用于存放服务端的大端序ip的结构体的指针\n        if ((h = gethostbyname(ip.c_str())) == nullptr)      // 把域名、主机名、字符串格式的ip转换为结构体，存储在h中\n        {\n            ::close(client_sock);     // 关闭sock连接\n            client_sock = -1;\n            return false;\n        }\n\n        memcpy(&server_addr.sin_addr, h->h_addr, h->h_length);\n\n        // 连接服务器\n        if (connect(client_sock, (sockaddr *) &server_addr, sizeof(server_addr)) == -1) {\n            cout << \"连接服务器失败\" << endl;\n            ::close(client_sock);\n            return false;\n        }\n\n        return true;\n    }\n\n    bool send(const string &msg) const {\n        // 参数使用string，不使用const char*，因为const char*\n        if (client_sock == -1) {\n            cout << \"ERROR: not connected\" << endl;\n            return false;\n        }\n\n        // 或者：if (send(client_sock, msg.c_str(), msg.length(), 0))      // 语义不准确：buffer可以是string，也可以是一块内存\n        if (::send(client_sock, msg.data(), msg.size(), 0) == -1) {\n            cout << \"ERROR: send failed\" << endl;\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * 用于传输二进制\n     * @param msg 要传输的数据（可以是结构体）\n     * @param size 数据大小\n     * @return\n     */\n    bool send(void *msg, const size_t size) {\n        // 参数使用string，不使用const char*，因为const char*\n        if (client_sock == -1) {\n            cout << \"ERROR: not connected\" << endl;\n            return false;\n        }\n\n        // 或者：if (send(client_sock, msg.c_str(), msg.length(), 0))      // 语义不准确：buffer可以是string，也可以是一块内存\n        if (::send(client_sock, msg, size, 0) == -1) {\n            cout << \"ERROR: send failed\" << endl;\n            return false;\n        }\n\n        return true;\n    }\n\n    bool sendFile(const string &filePath, const size_t fileSize) {\n        ifstream fin;\n        fin.open(filePath, ios::in | ios::binary);\n        if (!fin.is_open()) {\n            cout << \"file open failed\" << endl;\n            return false;\n        }\n\n        int onRead = 0;         // 每次调用 fin.read() 打算读取的字节数\n        int totalByte = 0;      // 从文件中已读取的总字节数\n        int bufferSize = 4096;  // 缓冲区大小，单位byte\n        char buffer[bufferSize];         // 存放读取数据的buffer。实际开发中，一般在1000～5000之间。\n\n        while (true) {\n            memset(buffer, 0, sizeof(buffer));\n            if (fileSize - totalByte > bufferSize) {\n                onRead = bufferSize;\n            } else {\n                onRead = fileSize - totalByte;\n            }\n\n            fin.read(buffer, onRead);\n            if (!send(buffer, onRead)) {\n                return false;\n            }\n            totalByte += onRead;\n\n            if (totalByte == fileSize) {\n                break;\n            }\n        }\n\n        fin.close();\n        return true;\n    }\n\n    /**\n     *\n     * @param msg 存放接收到的内容\n     * @param maxLen 接收的最大长度\n     * @return\n     */\n    bool receive(string &msg, const size_t maxLen) const {\n        if (client_sock == -1) {\n            cout << \"ERROR: not connected\" << endl;\n            return false;\n        }\n\n        msg.clear();        // 清空容器\n        msg.resize(maxLen);     // 设置容器大小\n        /*\n         * 如果直接操作string对象的内存，需要保证亮点：\n         *      1. 不能越界\n         *      2. 操作后需要手动设置string的大小（resize函数）。(因为直接操作string对象的内存后，string对象自动管理内存的功能就会失效)\n         *\n         * 传地址除了使用msg[0]，还可以使用msg.c_str()，msg.data()。\n         * 但是后两种获取到的都是const类型，无法修改，而recv函数需要将收到的数据写入msg中\n         */\n        int read_byte_number = ::recv(client_sock, &msg[0], msg.size(), 0); // 返回接收数据的大小，-1表示失败，0表示sock已断开\n        if (read_byte_number <= 0) {\n            cout << \"ERROR: receive failed\" << endl;\n            msg.clear();\n            return false;\n        }\n        msg.resize(read_byte_number);\n\n        return true;\n    }\n\n    bool close() {\n        if (client_sock == -1) {\n            cout << \"ERROR: not connected\" << endl;\n        }\n        ::close(client_sock);\n\n        client_sock = -1;\n        return true;\n    }\n};\n\n// 通过stat结构体 获得文件大小，单位字节\nsize_t getFileSize(const char *fileName) {\n\n    if (fileName == NULL) {\n        return 0;\n    }\n\n    // 这是一个存储文件(夹)信息的结构体，其中有文件大小和创建时间、访问时间、修改时间等\n    struct stat statbuf;\n\n    // 提供文件名字符串，获得文件属性结构体\n    stat(fileName, &statbuf);\n\n    // 获取文件大小\n    size_t filesize = statbuf.st_size;\n\n    return filesize;\n}\n\nint main() {\n    cout << \"------------------- client start -------------------\" << endl;\n    tcpClient tcp_client;\n    string ip = \"127.0.0.1\";\n    string port = \"5005\";\n    if (!tcp_client.connect_to(ip, atoi(port.c_str()))) {\n        perror((\"connect to \" + ip + \":\" + port + \" failed\").c_str());\n        return -1;\n    }\n\n    // 发送文件\n    // 把待传文件名和文件大小发送给服务端\n    struct fileInfo {\n        char fileName[256];     // 文件目录和文件名。与程序运行位置(工作目录)联系紧密，工作目录不同，fileName对应的路径也不同\n        int fileSize;           // 文件大小\n    } fileinfo;\n    memset(&fileinfo, 0, sizeof(fileInfo));\n    strcpy(fileinfo.fileName, \"test.txt\");\n    fileinfo.fileSize = (int) getFileSize(fileinfo.fileName);\n    if (!tcp_client.send(&fileinfo, sizeof(fileinfo))) {\n        char errormsg[32];\n        sprintf(errormsg, \"fileInfo send failed\");\n        perror(errormsg);\n        return -1;\n    } else {\n        cout << \"发送文件信息: fileName: \" << fileinfo.fileName << \"  fileSize: \" << fileinfo.fileSize << endl;\n    }\n\n    // 等待服务端的确认\n    string buffer;\n    if (!tcp_client.receive(buffer, 2)) {\n        cout << \"receive error\" << endl;\n    }\n    if (buffer != \"OK\") {\n        cout << \"receive message error\" << endl;\n    }\n\n    // 发送文件给服务端\n    if (!tcp_client.sendFile(fileinfo.fileName, fileinfo.fileSize)) {\n        cout << \"file send error\" << endl;\n        return -1;\n    }\n\n    // 等待服务端的确认\n    if (!tcp_client.receive(buffer, 2)) {\n        cout << \"no 'OK' received\" << endl;\n    }\n\n    if (buffer != \"OK\") {\n        cout << \"ERROR receive\" << endl;\n    } else {\n        cout << \"received 'OK'\" << endl;\n    }\n\n    return 0;\n}\n```\n\n##### 服务端\n\n```cpp\n#include <iostream>\n#include <fstream>\n\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <memory.h>\n\n#include <csignal>\n\nusing namespace std;\n\nclass tcpServer {\npublic:\n    int listen_sock;            // 用于监听的socket。-1表示未初始化\n    int client_sock;            // 客户端连上的的socket，用于和客户端通信。-1表示客户端未连接。\n    string client_ip;           // 客户端的ip\n    unsigned short port;        // 服务端用于通讯的端口\n\n    tcpServer() : listen_sock(-1), client_sock(-1) {}\n\n    ~tcpServer() {\n        if (listen_sock == -1) {\n            closeListen();\n        }\n        if (client_sock == -1) {\n            closeClient();\n        }\n    }\n\n    bool initServer(const unsigned short &in_port) {\n        // 初始化服务端用于监听的socket\n        if ((listen_sock = socket(AF_INET, SOCK_STREAM, 0)) == -1) {\n            cout << \"ERROR socket init failed\" << endl;\n            return false;\n        }\n\n        port = in_port;\n\n        // 将服务端用于通信的ip和端口绑定到socket上\n        struct sockaddr_in server_addr;\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;                       // 协议\n        server_addr.sin_port = htons(port);                     // 指定服务端的通信端口\n        server_addr.sin_addr.s_addr = htonl(INADDR_ANY);        // 如果操作系统有多个ip，则多个ip都可以用于通信\n\n        // 为socket绑定ip和端口\n        if (bind(listen_sock, (struct sockaddr *) &server_addr, sizeof(server_addr)) == -1) {\n            cout << \"ERROR socket bind failed\" << endl;\n            close(listen_sock);\n            listen_sock = -1;\n            return false;\n        }\n\n        if (listen(listen_sock, 5)) {\n            cout << \"ERROR listening start failed\" << endl;\n            return false;\n        }\n        return true;\n    }\n\n    bool accept() {\n        struct sockaddr_in client_addr;             // 客户端的地址信息\n        socklen_t addrlen = sizeof(client_addr);    // struct sockaddr_in的大小\n        // 注意accept函数的第三个参数是指针：因为accept函数需要将实际接收到的消息长度写回addrlen\n        if ((client_sock = ::accept(listen_sock, (struct sockaddr *) &client_addr, &addrlen)) == -1) {\n            perror(\"accept failed\");\n            return false;\n        }\n\n        client_ip = inet_ntoa(client_addr.sin_addr);          // 将客户端的代码从大端序转换为字符串\n\n        return true;\n    }\n\n    bool send(const string &msg) {\n        if (client_sock == -1) {\n            perror(\"socket no connected\");\n            return false;\n        }\n\n        if ((::send(client_sock, msg.data(), msg.size(), 0) <= 0)) {\n            perror(\"send message failed\");\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * 存放接收到的字符串数据\n     * @param msg\n     * @param maxLen\n     * @return\n     */\n    bool recv(string &msg, const size_t maxLen) {\n        msg.clear();\n        msg.resize(maxLen);\n        int read_byte_number = ::recv(client_sock, &msg[0], msg.size(), 0);\n        if (read_byte_number <= 0) {\n            msg.clear();\n            perror(\"receive failed\");\n            return false;\n        }\n        msg.resize(read_byte_number);\n        return true;\n    }\n\n    /**\n     * 存放接收到的二进制数据\n     * @param msg\n     * @param maxLen\n     * @return\n     */\n    bool recv(void *msg, const size_t maxLen) const {\n        if (client_sock == -1) {\n            cout << \"ERROR: not connected\" << endl;\n            return false;\n        }\n\n        int read_byte_number = ::recv(client_sock, msg, maxLen, 0); // 返回接收数据的大小，-1表示失败，0表示sock已断开\n        if (read_byte_number <= 0) {\n            cout << \"ERROR: receive failed\" << endl;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 接收文件\n     * @param filePath 文件路径和文件名\n     * @param fileSize 文件大小\n     * @return\n     */\n    bool receiveFile(const string &filePath, const size_t fileSize) {\n        ofstream fout;\n        fout.open(filePath, ios::binary | ios::out);\n        fout<<\"iii\"<<endl;\n        if (!fout.is_open()) {\n            cout << \"file open failed\" << endl;\n            return false;\n        }\n        int totalByte = 0;          // 已接收文件的总字节数\n        int onRead = 0;             // 本次打算接收的字节数\n        int bufferSize = 4096;  \t// 缓冲区大小，单位byte\n        char buffer[bufferSize];             // 接收文件内容的缓冲区，实际开发中，一般在1000～5000之间。\n\n        while (true) {\n            if (fileSize - totalByte > bufferSize) {\n                onRead = bufferSize;\n            } else {\n                onRead = fileSize - totalByte;\n            }\n\n            if (!recv(buffer, onRead)) {\n                return false;\n            }\n\n            fout.write(buffer, onRead);\n\n            totalByte += onRead;\n\n            if (totalByte == fileSize) {\n                fout.close();\n                break;\n            }\n        }\n\n        return true;\n    }\n\n    bool closeListen() {\n        if (listen_sock == -1) {\n            perror(\"not listening\");\n            return false;\n        }\n        close(listen_sock);\n        listen_sock = -1;\n        return true;\n    }\n\n    bool closeClient() {\n        if (client_sock == -1) {\n            perror(\"not listening\");\n            return false;\n        }\n        close(client_sock);\n        client_sock = -1;\n        return true;\n    }\n\n    // 获取string格式的ip地址\n    [[nodiscard]] const string &clientip() const {\n        return client_ip;\n    }\n};\n\ntcpServer tcp_server;\n\nvoid fatherEXIT(int sig) {\n    // 以下代码是为了防止信号处理函数在执行过程中再次被信号中断\n    signal(SIGINT, SIG_IGN);\n    signal(SIGTERM, SIG_IGN);\n\n    cout << \"父进程退出： \" << sig << endl;\n\n    kill(0, SIGTERM);\n\n    // ---------------在这里增加释放资源的代码---------------\n    tcp_server.closeListen();\n    // --------------------------------------------------\n\n    exit(0);\n}\n\nvoid childEXIT(int sig) {\n    signal(SIGINT, SIG_IGN);\n    signal(SIGTERM, SIG_IGN);\n\n    cout << \"子进程退出： \" << sig << endl;\n\n    // ------在这里增加释放资源的代码（只释放子进程的资源）------\n    tcp_server.closeClient();       // 信号处理函数中只能访问全局对象，tcp_server必须定义为全局变量\n    // --------------------------------------------------\n\n    exit(0);\n}\n\nint main() {\n    if (!tcp_server.initServer(5005)) {\n        perror(\"initsServer() failed\");\n        return -1;\n    }\n\n    // 忽略全部信号，不希望被打扰。顺便解决僵尸进程的问题\n    for (int i = 0; i < 64; ++i) {\n        signal(i, SIG_IGN);\n    }\n    // 设置信号，在shell下可以用 'kill 进程号' 和 'Ctrl+C' 正常终止这些线程\n    // 但请不要用 'kill -9 进程号' 强行终止线程\n    signal(SIGTERM, fatherEXIT);\n    signal(SIGINT, fatherEXIT);\n\n    while (true) {\n        // 受理(监听)客户端的连接，从已连接的客户端中取出一个客户端\n        // 如果没有已连接的客户端，accept函数将阻塞等待\n        if (!tcp_server.accept()) {\n            perror(\"accept failed\");\n            return -1;\n        }\n        cout << \"client connected\" << endl;\n\n        int pid = fork();\n        // 系统资源不足\n        if (pid == -1) {\n            perror(\"fork\");\n            return -1;\n        }\n        if (pid > 0) {\n            tcp_server.closeClient();           // 多进程下，服务器父进程不需要客户端的socket，关闭\n            continue;           // 父进程返回循环开始位置，继续受理客户端连接\n        }\n\n        tcp_server.closeListen();           // 子进程不需要监听socket，关闭\n        // 子进程需要重新设置信号\n        signal(SIGTERM, childEXIT);         // 使用kill命令终止进程时，会产生SIGTERM信号，执行childEXIT函数\n        signal(SIGINT, childEXIT);          // 按下ctrl+c会触发SIGINT信号，执行childEXIT函数\n\n        // 接收文件\n        // 接收客户端发来的文件信息\n        struct fileInfo {\n            char fileName[256];     // 文件名\n            int fileSize;           // 文件大小\n        } fileinfo;\n        memset(&fileinfo, 0, sizeof(fileinfo));\n        if (!tcp_server.recv(&fileinfo, sizeof(fileinfo))) {\n            cout << \"fileInfo receive failed\" << endl;\n            return -1;\n        } else {\n            strcpy(fileinfo.fileName, \"test(1).txt\");\n            cout << \"received: fileName: \" << fileinfo.fileName << \"  fileSize: \" << fileinfo.fileSize << endl;\n        }\n\n        // 给客户端发送确认报文\n        if (!tcp_server.send(\"OK\")) {\n            cout << \"send error\" << endl;\n            break;\n        }\n\n        // 接收文件\n        if (!tcp_server.receiveFile(fileinfo.fileName, fileinfo.fileSize)) {\n            cout << \"received file error\" << endl;\n        } else {\n            cout << \"file receive success\" << endl;\n        }\n\n        // 给客户端发送确认报文\n        if (!tcp_server.send(\"OK\")) {\n            cout << \"send 'OK' failed\" << endl;\n        }\n\n        return 0;           // 子进程通信完成后一定要退出，否则就会回到accept()函数的位置\n    }\n\n    return 0;\n}\n```\n\n","slug":"网络编程/socket","published":1,"updated":"2025-09-14T02:36:11.049Z","comments":1,"layout":"post","photos":[],"_id":"cmfktk7er000xc04pcg4jc3ah","content":"<h3 id=\"基本函数和结构体\">基本函数和结构体</h3>\n<ol>\n<li>\n<p>创建socket<br>\n<code>int socket(int domain, int type, int protocol)</code><br>\n成功返回<code>0</code>；失败返回<code>-1</code>，同时设置错误代码<code>errno</code>。<br>\n单个进程能够创建<code>socket</code>连接的数量受系统参数<code>open files</code>的限制（使用<code>ulimit -a</code>查看）。因为<code>socket</code>在<code>Linux</code>中也是文件</p>\n<ul>\n<li><code>domain</code>:通信协议族\n<ul>\n<li><code>PF_INET</code>:<code>ipv4</code>协议族</li>\n<li><code>PF_INET6</code>:<code>ipv6</code>协议族</li>\n<li><code>PF_LOCAL</code>:本地通信的协议族</li>\n<li><code>PF_PACKET</code>:内核底层的协议族</li>\n<li><code>PF_IPX</code>:<code>IPX Novel</code>协议族</li>\n<li>其余协议族不常用</li>\n</ul>\n</li>\n<li><code>type</code>:数据传输的类型\n<ul>\n<li><code>SOCK_STREAM</code>:面向连接的<code>socket</code>，\n<ul>\n<li>数据不会丢失</li>\n<li>数据顺序不会错乱</li>\n<li>双向通道</li>\n</ul>\n</li>\n<li><code>SOCK_DGRAM</code>:无连接的<code>socket</code>，\n<ul>\n<li>传输效率更高</li>\n<li>数据可能丢失</li>\n<li>数据顺序可能错乱</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>protocal</code>:最终使用的协议\n<ul>\n<li>在<code>ipv4</code>协议族中，数据传输方式为<code>SOCK_STREAM</code>的协议只有<code>IPPROTO_TCP</code>，数据传输方式为<code>SOCK_DGRAM</code>的协议只有<code>IPPROTO_UDP</code>.</li>\n<li>该参数也可以为0</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>TCP</code>和<code>UDP</code>.[[TCP协议和UDP协议]]</p>\n</li>\n<li>\n<p>主机字节序和网络字节序</p>\n<ul>\n<li>主机字节序：分为<strong>大端序</strong>和<strong>小端序</strong>。<br>\n每个地址内放<code>1Byte</code>（<code>8bit</code>），大端序和小端序讨论多个字节(<code>Byte</code>)的地址高低问题\n<ul>\n<li>大端序：<mark>低高高低</mark>.<br>\n==低位==<code>Byte</code>存放在==高位==，==高位==<code>Byte</code>存放在==低位==.</li>\n<li>小端序：<mark>低低高高</mark>.<br>\n==低位==<code>Byte</code>存放在==低位==，==高位==<code>Byte</code>存放在==高位==.<br>\n<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"image/Pasted_image_20250610210518.png\"\n                         alt=\"image\" style=\"zoom:80%;\" \n                 ><br>\n总结：<strong>大端序按照原来顺序存储，小端序按字节颠倒顺序存储</strong>。</li>\n<li>造成的问题：同样的数据，大端序的计算机和小端序的计算机解析方式不同，那么得到的内容也不一样。在网络传输中，容易出现问题。</li>\n</ul>\n</li>\n<li><strong>网络字节序（大端序）</strong>：解决不同字节序的计算机之间传输数据的问题<br>\nC语言提供了四个函数用于网络字节序和主机字节序的转换：\n<ul>\n<li><code>uint16_t htons(uint16_t hostshort)</code>:将16位的整数从<em>主机字节序</em>转换为<em>网络字节序</em>。</li>\n<li><code>uint32_t htonl(uint32_t hostlong)</code>:将32位的整数从<em>主机字节序</em>转换为<em>网络字节序</em>。</li>\n<li><code>uint16_t stohs(uint16_t netshort)</code>:将16位的整数从<em>网络字节序</em>转换为<em>主机在字节序</em>。</li>\n<li><code>uint32_t stohl(uint32_t netlong)</code>:将32位的整数从<em>网络字节序</em>转换为<em>主机字节序</em>。<br>\n<code>h: host</code>主机<br>\n<code>n: net</code>网络<br>\n<code>s: short</code>2字节，16位的整数<br>\n<code>l: long</code>4字节，32位的整数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code> ip</code>地址和通讯端口<code>port</code>.<br>\n<code>ipv4</code>地址用4字节(<code>32bit</code>)的整数存放，<code>port</code>用2字节(<code>16bit</code>)的整数存放（0～65535）。<br>\n为什么不用字符串？<br>\n因为<code>192.168.190.134</code>用字符串存储需要15字节，而用整数存储只需要4个字节：3232284294。（<strong>思考<code>ipv4</code>地址最大只能到<code>255.255.255.255</code></strong>）</p>\n</li>\n<li>\n<p>万恶的结构体<br>\n因为平时用到的<code>ip</code>地址都是字符串类型的，而程序中存储的是<code>int</code>类型那么就需要将字符串类型的ip转换为int型ip。主要涉及三个结构体和一个函数</p>\n<ol>\n<li>\n<p><code>sockaddr</code>结构体<br>\n存储协议族、端口、地址信息。客户端的<code>connetc</code>函数和服务端的<code>bind</code>函数都要用到这个结构体。其定义类似下图：</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">sockaddr</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">short</span> <span class=\"type\">int</span> sa_family;   <span class=\"comment\">// 协议族</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> sa_data[<span class=\"number\">14</span>];  <span class=\"comment\">// 14字节的端口和地址</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>sockaddr_in</code>结构体<br>\n上方的<code>sockaddr</code>是为了统一地址结构的表示方法，统一接口函数。但是很难用，操作不方便。所以定义了等价的<code>sockaddr_in</code>结构体，其大小与<code>sockaddr</code>相同，可以强制转换。</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">sockaddr_in</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">short</span> <span class=\"type\">int</span> sa_family;   <span class=\"comment\">// 协议族</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">short</span> sin_port;  <span class=\"comment\">// 16bit端口号</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">in_addr</span> sin_addr;  <span class=\"comment\">// 32bit的地址(只能存储ipv4的地址，不能存储ipv6。sockaddr中14个字节的char数组就是预留了ip地址扩展的空间)</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> sin_zero[<span class=\"number\">8</span>];<span class=\"comment\">// 未使用，为了保持与sockaddr长度相同而添加。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">in_addr</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> s_addr; <span class=\"comment\">// 32bit的ip地址，大端序</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>gethostbyname()</code>函数<br>\n根据域名、主机名、字符串<code>ip</code>地址获取大端存储的<code>int32</code>类型<code>ip</code>.</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">hostent</span>* <span class=\"built_in\">gethostbyname</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* name);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>hostent</code>结构体</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">hostent</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span>* h_name; <span class=\"comment\">// 主机名</span></span><br><span class=\"line\">    <span class=\"type\">char</span>** h_aliases; <span class=\"comment\">// 主机所有别名构成的的字符串数组。（同一个ip可以绑定多个域名）</span></span><br><span class=\"line\">    <span class=\"type\">short</span> h_addrtype; <span class=\"comment\">// 主机ip地址的类型，如ipv4(AF_INET)还是ipv6</span></span><br><span class=\"line\">    <span class=\"type\">short</span> h_length; <span class=\"comment\">// 主机ip地址长度，ipv4为4(字节),ipv6为16(字节)</span></span><br><span class=\"line\">    <span class=\"type\">char</span>** h_addr_list; <span class=\"comment\">// 主机的ip地址，以网络字节序存储</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>获取<code>hostent</code>后，使用以下代码把大端序的地址复制到<code>sockaddr_in</code>结构体的<code>sin_addr</code>成员中</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sockaddr_in serveraddr;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">hostent</span>* h = <span class=\"built_in\">gethostbyname</span>(<span class=\"string\">&quot;192.168.1.2&quot;</span>); </span><br><span class=\"line\"><span class=\"built_in\">memcpy</span>(&amp;serveraddr.sin_addr, h-&gt;h_addr_list, h-&gt;h_length);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li>\n<p>字符串<code>ip</code>转大端序<code>ip</code>.<br>\nC语言提供了几个库函数，用于字符串<code>ip</code>和大端序<code>ip</code>的相互转换。通常用于网络通讯的服务端程序中。</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> uint32;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 把字符串格式的ip转换成大端序的ip，转换后的ip应该赋值给 sockaddr_in.in_addr.s_addr。不能传入域名</span></span><br><span class=\"line\"><span class=\"function\">uint_32 <span class=\"title\">inet_addr</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* cp)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将字符串格式的ip转换为大端序的ip，转换后的ip直接填充到sockaddr_in.in_addr成员（不需要手动填充）。不能传入域名 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">inet_aton</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* cp, <span class=\"keyword\">struct</span> int_addr * inp)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将大端序ip转换为字符串格式的ip。用于在服务器程序中解析客户端的ip地址  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">char</span>* <span class=\"title\">inet_ntoa</span><span class=\"params\">(<span class=\"keyword\">struct</span> in_addr in)</span></span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>bind</code>函数<br>\n绑定服务端的<code>ip</code>和端口，失败返回-1</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">sockaddr</span> server_addr;</span><br><span class=\"line\"><span class=\"built_in\">bind</span>(listenfd, (<span class=\"keyword\">struct</span> sockaddr *)&amp;server_addr, <span class=\"built_in\">sizeof</span>(server_addr))</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>lieten</code>函数<br>\n把socket设置为可连接(监听)的状态，失败返回-1<br>\n<code>listen(listenfd, 5)</code></p>\n</li>\n</ol>\n<h3 id=\"封装socket客户端\">封装socket客户端</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;netdb.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">tcpClient</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> client_sock;        <span class=\"comment\">// 客户端socket，-1表示未连接或者已断开。&gt;=0表示有效的socket</span></span><br><span class=\"line\">    string ip;              <span class=\"comment\">// 服务端的ip或域名</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">short</span> port;    <span class=\"comment\">// 通讯端口</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">tcpClient</span>() : <span class=\"built_in\">client_sock</span>(<span class=\"number\">-1</span>), <span class=\"built_in\">port</span>(<span class=\"number\">-1</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">tcpClient</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">close</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @param in_ip 客户端ip/域名</span></span><br><span class=\"line\"><span class=\"comment\">     * @param in_port 端口号</span></span><br><span class=\"line\"><span class=\"comment\">     * @return 成功返回true，失败返回false</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">connect_to</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;in_ip, <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">short</span> in_port)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: sock connect is already exist&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 保存服务端ip和端口号</span></span><br><span class=\"line\">        ip = in_ip;</span><br><span class=\"line\">        port = in_port;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建客户端Socket</span></span><br><span class=\"line\">        client_sock = <span class=\"built_in\">socket</span>(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;创建Socket失败&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 配置服务器地址</span></span><br><span class=\"line\">        sockaddr_in server_addr&#123;&#125;;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(&amp;server_addr, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(server_addr));</span><br><span class=\"line\">        server_addr.sin_family = AF_INET;</span><br><span class=\"line\">        server_addr.sin_port = <span class=\"built_in\">htons</span>(port);</span><br><span class=\"line\">        <span class=\"comment\">// server_addr.sin_addr.s_addr = inet_addr(in_ip.c_str());      // 该方法只能用ip，不能用域名</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">hostent</span> *h;          <span class=\"comment\">// 用于存放服务端的大端序ip的结构体的指针</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((h = <span class=\"built_in\">gethostbyname</span>(ip.<span class=\"built_in\">c_str</span>())) == <span class=\"literal\">nullptr</span>)      <span class=\"comment\">// 把域名、主机名、字符串格式的ip转换为结构体，存储在h中</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ::<span class=\"built_in\">close</span>(client_sock);     <span class=\"comment\">// 关闭sock连接</span></span><br><span class=\"line\">            client_sock = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(&amp;server_addr.sin_addr, h-&gt;h_addr, h-&gt;h_length);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 连接服务器</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">connect</span>(client_sock, (sockaddr *) &amp;server_addr, <span class=\"built_in\">sizeof</span>(server_addr)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;连接服务器失败&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            ::<span class=\"built_in\">close</span>(client_sock);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">send</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;msg)</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 参数使用string，不使用const char*，因为const char*</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: not connected&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 或者：if (send(client_sock, msg.c_str(), msg.length(), 0))      // 语义不准确：buffer可以是string，也可以是一块内存</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (::<span class=\"built_in\">send</span>(client_sock, msg.<span class=\"built_in\">data</span>(), msg.<span class=\"built_in\">size</span>(), <span class=\"number\">0</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: send failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @param msg 存放接收到的内容</span></span><br><span class=\"line\"><span class=\"comment\">     * @param maxLen 接收的最大长度</span></span><br><span class=\"line\"><span class=\"comment\">     * @return</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">receive</span><span class=\"params\">(string &amp;msg, <span class=\"type\">const</span> <span class=\"type\">size_t</span> maxLen)</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: not connected&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        msg.<span class=\"built_in\">clear</span>();        <span class=\"comment\">// 清空容器</span></span><br><span class=\"line\">        msg.<span class=\"built_in\">resize</span>(maxLen);     <span class=\"comment\">// 设置容器大小</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 如果直接操作string对象的内存，需要保证两点：</span></span><br><span class=\"line\"><span class=\"comment\">         *      1. 不能越界</span></span><br><span class=\"line\"><span class=\"comment\">         *      2. 操作后需要手动设置string的大小（resize函数）。(因为直接操作string对象的内存后，string对象自动管理内存的功能就会失效)</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         * 传地址除了使用msg[0]，还可以使用msg.c_str()，msg.data()。</span></span><br><span class=\"line\"><span class=\"comment\">         * 但是后两种获取到的都是const类型，无法修改，而recv函数需要将收到的数据写入msg中</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">int</span> read_byte_number = ::<span class=\"built_in\">recv</span>(client_sock, &amp;msg[<span class=\"number\">0</span>], msg.<span class=\"built_in\">size</span>(), <span class=\"number\">0</span>); <span class=\"comment\">// 返回接收数据的大小，-1表示失败，0表示sock已断开</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (read_byte_number &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: receive failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            msg.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        msg.<span class=\"built_in\">resize</span>(read_byte_number);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: not connected&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ::<span class=\"built_in\">close</span>(client_sock);</span><br><span class=\"line\"></span><br><span class=\"line\">        client_sock = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;------------------- client start -------------------&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    tcpClient tcp_client;</span><br><span class=\"line\">    string ip = <span class=\"string\">&quot;127.0.0.1&quot;</span>;</span><br><span class=\"line\">    string port = <span class=\"string\">&quot;5005&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tcp_client.<span class=\"built_in\">connect_to</span>(ip, <span class=\"built_in\">atoi</span>(port.<span class=\"built_in\">c_str</span>()))) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">perror</span>((<span class=\"string\">&quot;connect to &quot;</span> + ip + <span class=\"string\">&quot;:&quot;</span> + port + <span class=\"string\">&quot; failed&quot;</span>).<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">char</span> msg[<span class=\"number\">1024</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> iret;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(msg, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(msg));</span><br><span class=\"line\">        <span class=\"built_in\">sprintf</span>(msg, <span class=\"string\">&quot;test message %d&quot;</span>, i + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 向服务端发送请求报文</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tcp_client.<span class=\"built_in\">send</span>(msg)) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> errormsg[<span class=\"number\">32</span>];</span><br><span class=\"line\">            <span class=\"built_in\">sprintf</span>(errormsg, <span class=\"string\">&quot;message %d send failed&quot;</span>, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(errormsg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;send: &quot;</span> &lt;&lt; msg &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">        string received_message;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tcp_client.<span class=\"built_in\">receive</span>(received_message, <span class=\"number\">1024</span>)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;received failed&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;received: &quot;</span> &lt;&lt; received_message &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"built_in\">sleep</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"封装socket服务端\">封装socket服务端</h3>\n<h4 id=\"单进程单线程服务端\">单进程单线程服务端</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">tcpServer</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> listen_sock;            <span class=\"comment\">// 用于监听的socket。-1表示未初始化</span></span><br><span class=\"line\">    <span class=\"type\">int</span> client_sock;            <span class=\"comment\">// 客户端连上的的socket，用于和客户端通信。-1表示客户端未连接。</span></span><br><span class=\"line\">    string client_ip;           <span class=\"comment\">// 客户端的ip</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">short</span> port;        <span class=\"comment\">// 服务端用于通讯的端口</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">tcpServer</span>() : <span class=\"built_in\">listen_sock</span>(<span class=\"number\">-1</span>), <span class=\"built_in\">client_sock</span>(<span class=\"number\">-1</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">tcpServer</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (listen_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">closeListen</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">closeClient</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">initServer</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">short</span> &amp;in_port)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化服务端用于监听的socket</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((listen_sock = <span class=\"built_in\">socket</span>(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR socket init failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        port = in_port;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将服务端用于通信的ip和端口绑定到socket上</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">sockaddr_in</span> server_addr;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(&amp;server_addr, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(server_addr));</span><br><span class=\"line\">        server_addr.sin_family = AF_INET;                       <span class=\"comment\">// 协议</span></span><br><span class=\"line\">        server_addr.sin_port = <span class=\"built_in\">htons</span>(port);                     <span class=\"comment\">// 指定服务端的通信端口</span></span><br><span class=\"line\">        server_addr.sin_addr.s_addr = <span class=\"built_in\">htonl</span>(INADDR_ANY);        <span class=\"comment\">// 如果操作系统有多个ip，则多个ip都可以用于通信</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 为socket绑定ip和端口</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">bind</span>(listen_sock, (<span class=\"keyword\">struct</span> sockaddr *) &amp;server_addr, <span class=\"built_in\">sizeof</span>(server_addr)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR socket bind failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"built_in\">close</span>(listen_sock);</span><br><span class=\"line\">            listen_sock = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">listen</span>(listen_sock, <span class=\"number\">5</span>)) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR listening start failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">accept</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">sockaddr_in</span> client_addr;             <span class=\"comment\">// 客户端的地址信息</span></span><br><span class=\"line\">        <span class=\"type\">socklen_t</span> addrlen = <span class=\"built_in\">sizeof</span>(client_addr);    <span class=\"comment\">// struct sockaddr_in的大小</span></span><br><span class=\"line\">        <span class=\"comment\">// 注意accept函数的第三个参数是指针：因为accept函数需要将实际接收到的消息长度写回addrlen</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((client_sock = ::<span class=\"built_in\">accept</span>(listen_sock, (<span class=\"keyword\">struct</span> sockaddr *) &amp;client_addr, &amp;addrlen)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;accept failed&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        client_ip = <span class=\"built_in\">inet_ntoa</span>(client_addr.sin_addr);          <span class=\"comment\">// 将客户端的代码从大端序转换为字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">send</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;socket no connected&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((::<span class=\"built_in\">send</span>(client_sock, msg.<span class=\"built_in\">data</span>(), msg.<span class=\"built_in\">size</span>(), <span class=\"number\">0</span>) &lt;= <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;send message failed&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">recv</span><span class=\"params\">(string &amp;msg, <span class=\"type\">const</span> <span class=\"type\">size_t</span> maxLen)</span> </span>&#123;</span><br><span class=\"line\">        msg.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        msg.<span class=\"built_in\">resize</span>(maxLen);</span><br><span class=\"line\">        <span class=\"type\">int</span> read_byte_number = ::<span class=\"built_in\">recv</span>(client_sock, &amp;msg[<span class=\"number\">0</span>], msg.<span class=\"built_in\">size</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (read_byte_number &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            msg.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;receive failed&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        msg.<span class=\"built_in\">resize</span>(read_byte_number);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">closeListen</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (listen_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;not listening&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">close</span>(listen_sock);</span><br><span class=\"line\">        listen_sock = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">closeClient</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;not listening&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">close</span>(client_sock);</span><br><span class=\"line\">        client_sock = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取string格式的ip地址</span></span><br><span class=\"line\">    [[nodiscard]] <span class=\"function\"><span class=\"type\">const</span> string &amp;<span class=\"title\">clientip</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> client_ip;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    tcpServer tcp_server;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">initServer</span>(<span class=\"number\">5005</span>)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;initsServer() failed&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">accept</span>()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;accept failed&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;client connected&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    string msg;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 接收客户端发来的报文，如果客户端没有发来报文，recv将阻塞等待</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">recv</span>(msg, <span class=\"number\">1024</span>)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;receive failed&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;received: &quot;</span> &lt;&lt; msg &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">        msg = <span class=\"string\">&quot;OK&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 向客户端发送报文</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">send</span>(msg)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;send failed&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;send: &quot;</span> &lt;&lt; msg &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"built_in\">sleep</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"多进程服务端\">多进程服务端</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;csignal&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">tcpServer</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> listen_sock;            <span class=\"comment\">// 用于监听的socket。-1表示未初始化</span></span><br><span class=\"line\">    <span class=\"type\">int</span> client_sock;            <span class=\"comment\">// 客户端连上的的socket，用于和客户端通信。-1表示客户端未连接。</span></span><br><span class=\"line\">    string client_ip;           <span class=\"comment\">// 客户端的ip</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">short</span> port;        <span class=\"comment\">// 服务端用于通讯的端口</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">tcpServer</span>() : <span class=\"built_in\">listen_sock</span>(<span class=\"number\">-1</span>), <span class=\"built_in\">client_sock</span>(<span class=\"number\">-1</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">tcpServer</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (listen_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">closeListen</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">closeClient</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">initServer</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">short</span> &amp;in_port)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化服务端用于监听的socket</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((listen_sock = <span class=\"built_in\">socket</span>(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR socket init failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        port = in_port;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将服务端用于通信的ip和端口绑定到socket上</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">sockaddr_in</span> server_addr;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(&amp;server_addr, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(server_addr));</span><br><span class=\"line\">        server_addr.sin_family = AF_INET;                       <span class=\"comment\">// 协议</span></span><br><span class=\"line\">        server_addr.sin_port = <span class=\"built_in\">htons</span>(port);                     <span class=\"comment\">// 指定服务端的通信端口</span></span><br><span class=\"line\">        server_addr.sin_addr.s_addr = <span class=\"built_in\">htonl</span>(INADDR_ANY);        <span class=\"comment\">// 如果操作系统有多个ip，则多个ip都可以用于通信</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 为socket绑定ip和端口</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">bind</span>(listen_sock, (<span class=\"keyword\">struct</span> sockaddr *) &amp;server_addr, <span class=\"built_in\">sizeof</span>(server_addr)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR socket bind failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"built_in\">close</span>(listen_sock);</span><br><span class=\"line\">            listen_sock = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">listen</span>(listen_sock, <span class=\"number\">5</span>)) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR listening start failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">accept</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">sockaddr_in</span> client_addr;             <span class=\"comment\">// 客户端的地址信息</span></span><br><span class=\"line\">        <span class=\"type\">socklen_t</span> addrlen = <span class=\"built_in\">sizeof</span>(client_addr);    <span class=\"comment\">// struct sockaddr_in的大小</span></span><br><span class=\"line\">        <span class=\"comment\">// 注意accept函数的第三个参数是指针：因为accept函数需要将实际接收到的消息长度写回addrlen</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((client_sock = ::<span class=\"built_in\">accept</span>(listen_sock, (<span class=\"keyword\">struct</span> sockaddr *) &amp;client_addr, &amp;addrlen)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;accept failed&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        client_ip = <span class=\"built_in\">inet_ntoa</span>(client_addr.sin_addr);          <span class=\"comment\">// 将客户端的代码从大端序转换为字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">send</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;socket no connected&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((::<span class=\"built_in\">send</span>(client_sock, msg.<span class=\"built_in\">data</span>(), msg.<span class=\"built_in\">size</span>(), <span class=\"number\">0</span>) &lt;= <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;send message failed&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">recv</span><span class=\"params\">(string &amp;msg, <span class=\"type\">const</span> <span class=\"type\">size_t</span> maxLen)</span> </span>&#123;</span><br><span class=\"line\">        msg.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        msg.<span class=\"built_in\">resize</span>(maxLen);</span><br><span class=\"line\">        <span class=\"type\">int</span> read_byte_number = ::<span class=\"built_in\">recv</span>(client_sock, &amp;msg[<span class=\"number\">0</span>], msg.<span class=\"built_in\">size</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (read_byte_number &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            msg.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;receive failed&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        msg.<span class=\"built_in\">resize</span>(read_byte_number);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">closeListen</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (listen_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;not listening&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">close</span>(listen_sock);</span><br><span class=\"line\">        listen_sock = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">closeClient</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;not listening&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">close</span>(client_sock);</span><br><span class=\"line\">        client_sock = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取string格式的ip地址</span></span><br><span class=\"line\">    [[nodiscard]] <span class=\"function\"><span class=\"type\">const</span> string &amp;<span class=\"title\">clientip</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> client_ip;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">tcpServer tcp_server;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">fatherEXIT</span><span class=\"params\">(<span class=\"type\">int</span> sig)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 以下代码是为了防止信号处理函数在执行过程中再次被信号中断</span></span><br><span class=\"line\">    <span class=\"built_in\">signal</span>(SIGINT, SIG_IGN);</span><br><span class=\"line\">    <span class=\"built_in\">signal</span>(SIGTERM, SIG_IGN);</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;父进程退出： &quot;</span> &lt;&lt; sig &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">kill</span>(<span class=\"number\">0</span>, SIGTERM);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ---------------在这里增加释放资源的代码---------------</span></span><br><span class=\"line\">    tcp_server.<span class=\"built_in\">closeListen</span>();</span><br><span class=\"line\">    <span class=\"comment\">// --------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">childEXIT</span><span class=\"params\">(<span class=\"type\">int</span> sig)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">signal</span>(SIGINT, SIG_IGN);</span><br><span class=\"line\">    <span class=\"built_in\">signal</span>(SIGTERM, SIG_IGN);</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;子进程退出： &quot;</span> &lt;&lt; sig &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ------在这里增加释放资源的代码（只释放子进程的资源）------</span></span><br><span class=\"line\">    tcp_server.<span class=\"built_in\">closeClient</span>();       <span class=\"comment\">// 信号处理函数中只能访问全局对象，tcp_server必须定义为全局变量</span></span><br><span class=\"line\">    <span class=\"comment\">// --------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">initServer</span>(<span class=\"number\">5005</span>)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;initsServer() failed&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 忽略全部信号，不希望被打扰。顺便解决僵尸进程的问题</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">64</span>; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">signal</span>(i, SIG_IGN);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 设置信号，在shell下可以用 &#x27;kill 进程号&#x27; 和 &#x27;Ctrl+C&#x27; 正常终止这些线程</span></span><br><span class=\"line\">    <span class=\"comment\">// 但请不要用 &#x27;kill -9 进程号&#x27; 强行终止线程</span></span><br><span class=\"line\">    <span class=\"built_in\">signal</span>(SIGTERM, fatherEXIT);</span><br><span class=\"line\">    <span class=\"built_in\">signal</span>(SIGINT, fatherEXIT);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 受理(监听)客户端的连接，从已连接的客户端中取出一个客户端</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果没有已连接的客户端，accept函数将阻塞等待</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">accept</span>()) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;accept failed&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;client connected&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> pid = fork();</span><br><span class=\"line\">        <span class=\"comment\">// 系统资源不足</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pid == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;fork&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pid &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            tcp_server.<span class=\"built_in\">closeClient</span>();           <span class=\"comment\">// 多进程下，服务器父进程不需要客户端的socket，关闭</span></span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;           <span class=\"comment\">// 父进程返回循环开始位置，继续受理客户端连接</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        tcp_server.<span class=\"built_in\">closeListen</span>();           <span class=\"comment\">// 子进程不需要监听socket，关闭</span></span><br><span class=\"line\">        <span class=\"comment\">// 子进程需要重新设置信号</span></span><br><span class=\"line\">        <span class=\"built_in\">signal</span>(SIGTERM, childEXIT);         <span class=\"comment\">// 使用kill命令终止进程时，会产生SIGTERM信号，执行childEXIT函数</span></span><br><span class=\"line\">        <span class=\"built_in\">signal</span>(SIGINT, childEXIT);          <span class=\"comment\">// 按下ctrl+c会触发SIGINT信号，执行childEXIT函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 子进程负责与客户端进行通讯</span></span><br><span class=\"line\">        string msg;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 接收客户端发来的报文，如果客户端没有发来报文，recv将阻塞等待</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">recv</span>(msg, <span class=\"number\">1024</span>)) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;receive failed&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                cout &lt;&lt; <span class=\"string\">&quot;received: &quot;</span> &lt;&lt; msg &lt;&lt; <span class=\"string\">&quot;------thread id: &quot;</span> &lt;&lt; <span class=\"built_in\">getpid</span>() &lt;&lt; endl;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            msg = <span class=\"string\">&quot;OK&quot;</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 向客户端发送报文</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">send</span>(msg)) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;send failed&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                cout &lt;&lt; <span class=\"string\">&quot;send: &quot;</span> &lt;&lt; msg &lt;&lt; endl;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">sleep</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;           <span class=\"comment\">// 子进程通信完成后一定要退出，否则就会回到accept()函数的位置</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"文件传输\">文件传输</h4>\n<h5 id=\"客户端\">客户端</h5>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;netdb.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">tcpClient</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> client_sock;        <span class=\"comment\">// 客户端socket，-1表示未连接或者已断开。&gt;=0表示有效的socket</span></span><br><span class=\"line\">    string ip;              <span class=\"comment\">// 服务端的ip或域名</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">short</span> port;    <span class=\"comment\">// 通讯端口</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">tcpClient</span>() : <span class=\"built_in\">client_sock</span>(<span class=\"number\">-1</span>), <span class=\"built_in\">port</span>(<span class=\"number\">-1</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">tcpClient</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">close</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @param in_ip 客户端ip/域名</span></span><br><span class=\"line\"><span class=\"comment\">     * @param in_port 端口号</span></span><br><span class=\"line\"><span class=\"comment\">     * @return 成功返回true，失败返回false</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">connect_to</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;in_ip, <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">short</span> in_port)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: sock connect is already exist&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 保存服务端ip和端口号</span></span><br><span class=\"line\">        ip = in_ip;</span><br><span class=\"line\">        port = in_port;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建客户端Socket</span></span><br><span class=\"line\">        client_sock = <span class=\"built_in\">socket</span>(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;创建Socket失败&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 配置服务器地址</span></span><br><span class=\"line\">        sockaddr_in server_addr&#123;&#125;;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(&amp;server_addr, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(server_addr));</span><br><span class=\"line\">        server_addr.sin_family = AF_INET;</span><br><span class=\"line\">        server_addr.sin_port = <span class=\"built_in\">htons</span>(port);</span><br><span class=\"line\">        <span class=\"comment\">// server_addr.sin_addr.s_addr = inet_addr(in_ip.c_str());      // 该方法只能用ip，不能用域名</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">hostent</span> *h;          <span class=\"comment\">// 用于存放服务端的大端序ip的结构体的指针</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((h = <span class=\"built_in\">gethostbyname</span>(ip.<span class=\"built_in\">c_str</span>())) == <span class=\"literal\">nullptr</span>)      <span class=\"comment\">// 把域名、主机名、字符串格式的ip转换为结构体，存储在h中</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ::<span class=\"built_in\">close</span>(client_sock);     <span class=\"comment\">// 关闭sock连接</span></span><br><span class=\"line\">            client_sock = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(&amp;server_addr.sin_addr, h-&gt;h_addr, h-&gt;h_length);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 连接服务器</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">connect</span>(client_sock, (sockaddr *) &amp;server_addr, <span class=\"built_in\">sizeof</span>(server_addr)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;连接服务器失败&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            ::<span class=\"built_in\">close</span>(client_sock);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">send</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;msg)</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 参数使用string，不使用const char*，因为const char*</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: not connected&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 或者：if (send(client_sock, msg.c_str(), msg.length(), 0))      // 语义不准确：buffer可以是string，也可以是一块内存</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (::<span class=\"built_in\">send</span>(client_sock, msg.<span class=\"built_in\">data</span>(), msg.<span class=\"built_in\">size</span>(), <span class=\"number\">0</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: send failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用于传输二进制</span></span><br><span class=\"line\"><span class=\"comment\">     * @param msg 要传输的数据（可以是结构体）</span></span><br><span class=\"line\"><span class=\"comment\">     * @param size 数据大小</span></span><br><span class=\"line\"><span class=\"comment\">     * @return</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">send</span><span class=\"params\">(<span class=\"type\">void</span> *msg, <span class=\"type\">const</span> <span class=\"type\">size_t</span> size)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 参数使用string，不使用const char*，因为const char*</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: not connected&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 或者：if (send(client_sock, msg.c_str(), msg.length(), 0))      // 语义不准确：buffer可以是string，也可以是一块内存</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (::<span class=\"built_in\">send</span>(client_sock, msg, size, <span class=\"number\">0</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: send failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">sendFile</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;filePath, <span class=\"type\">const</span> <span class=\"type\">size_t</span> fileSize)</span> </span>&#123;</span><br><span class=\"line\">        ifstream fin;</span><br><span class=\"line\">        fin.<span class=\"built_in\">open</span>(filePath, ios::in | ios::binary);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!fin.<span class=\"built_in\">is_open</span>()) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;file open failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> onRead = <span class=\"number\">0</span>;         <span class=\"comment\">// 每次调用 fin.read() 打算读取的字节数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> totalByte = <span class=\"number\">0</span>;      <span class=\"comment\">// 从文件中已读取的总字节数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> bufferSize = <span class=\"number\">4096</span>;  <span class=\"comment\">// 缓冲区大小，单位byte</span></span><br><span class=\"line\">        <span class=\"type\">char</span> buffer[bufferSize];         <span class=\"comment\">// 存放读取数据的buffer。实际开发中，一般在1000～5000之间。</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">memset</span>(buffer, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(buffer));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fileSize - totalByte &gt; bufferSize) &#123;</span><br><span class=\"line\">                onRead = bufferSize;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                onRead = fileSize - totalByte;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            fin.<span class=\"built_in\">read</span>(buffer, onRead);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"built_in\">send</span>(buffer, onRead)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            totalByte += onRead;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (totalByte == fileSize) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        fin.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @param msg 存放接收到的内容</span></span><br><span class=\"line\"><span class=\"comment\">     * @param maxLen 接收的最大长度</span></span><br><span class=\"line\"><span class=\"comment\">     * @return</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">receive</span><span class=\"params\">(string &amp;msg, <span class=\"type\">const</span> <span class=\"type\">size_t</span> maxLen)</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: not connected&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        msg.<span class=\"built_in\">clear</span>();        <span class=\"comment\">// 清空容器</span></span><br><span class=\"line\">        msg.<span class=\"built_in\">resize</span>(maxLen);     <span class=\"comment\">// 设置容器大小</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 如果直接操作string对象的内存，需要保证亮点：</span></span><br><span class=\"line\"><span class=\"comment\">         *      1. 不能越界</span></span><br><span class=\"line\"><span class=\"comment\">         *      2. 操作后需要手动设置string的大小（resize函数）。(因为直接操作string对象的内存后，string对象自动管理内存的功能就会失效)</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         * 传地址除了使用msg[0]，还可以使用msg.c_str()，msg.data()。</span></span><br><span class=\"line\"><span class=\"comment\">         * 但是后两种获取到的都是const类型，无法修改，而recv函数需要将收到的数据写入msg中</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">int</span> read_byte_number = ::<span class=\"built_in\">recv</span>(client_sock, &amp;msg[<span class=\"number\">0</span>], msg.<span class=\"built_in\">size</span>(), <span class=\"number\">0</span>); <span class=\"comment\">// 返回接收数据的大小，-1表示失败，0表示sock已断开</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (read_byte_number &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: receive failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            msg.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        msg.<span class=\"built_in\">resize</span>(read_byte_number);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: not connected&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ::<span class=\"built_in\">close</span>(client_sock);</span><br><span class=\"line\"></span><br><span class=\"line\">        client_sock = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过stat结构体 获得文件大小，单位字节</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">getFileSize</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *fileName)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fileName == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这是一个存储文件(夹)信息的结构体，其中有文件大小和创建时间、访问时间、修改时间等</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">stat</span> statbuf;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 提供文件名字符串，获得文件属性结构体</span></span><br><span class=\"line\">    <span class=\"built_in\">stat</span>(fileName, &amp;statbuf);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取文件大小</span></span><br><span class=\"line\">    <span class=\"type\">size_t</span> filesize = statbuf.st_size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> filesize;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;------------------- client start -------------------&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    tcpClient tcp_client;</span><br><span class=\"line\">    string ip = <span class=\"string\">&quot;127.0.0.1&quot;</span>;</span><br><span class=\"line\">    string port = <span class=\"string\">&quot;5005&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tcp_client.<span class=\"built_in\">connect_to</span>(ip, <span class=\"built_in\">atoi</span>(port.<span class=\"built_in\">c_str</span>()))) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">perror</span>((<span class=\"string\">&quot;connect to &quot;</span> + ip + <span class=\"string\">&quot;:&quot;</span> + port + <span class=\"string\">&quot; failed&quot;</span>).<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 发送文件</span></span><br><span class=\"line\">    <span class=\"comment\">// 把待传文件名和文件大小发送给服务端</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">fileInfo</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> fileName[<span class=\"number\">256</span>];     <span class=\"comment\">// 文件目录和文件名。与程序运行位置(工作目录)联系紧密，工作目录不同，fileName对应的路径也不同</span></span><br><span class=\"line\">        <span class=\"type\">int</span> fileSize;           <span class=\"comment\">// 文件大小</span></span><br><span class=\"line\">    &#125; fileinfo;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;fileinfo, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(fileInfo));</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(fileinfo.fileName, <span class=\"string\">&quot;test.txt&quot;</span>);</span><br><span class=\"line\">    fileinfo.fileSize = (<span class=\"type\">int</span>) <span class=\"built_in\">getFileSize</span>(fileinfo.fileName);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tcp_client.<span class=\"built_in\">send</span>(&amp;fileinfo, <span class=\"built_in\">sizeof</span>(fileinfo))) &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> errormsg[<span class=\"number\">32</span>];</span><br><span class=\"line\">        <span class=\"built_in\">sprintf</span>(errormsg, <span class=\"string\">&quot;fileInfo send failed&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">perror</span>(errormsg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;发送文件信息: fileName: &quot;</span> &lt;&lt; fileinfo.fileName &lt;&lt; <span class=\"string\">&quot;  fileSize: &quot;</span> &lt;&lt; fileinfo.fileSize &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 等待服务端的确认</span></span><br><span class=\"line\">    string buffer;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tcp_client.<span class=\"built_in\">receive</span>(buffer, <span class=\"number\">2</span>)) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;receive error&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (buffer != <span class=\"string\">&quot;OK&quot;</span>) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;receive message error&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 发送文件给服务端</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tcp_client.<span class=\"built_in\">sendFile</span>(fileinfo.fileName, fileinfo.fileSize)) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;file send error&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 等待服务端的确认</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tcp_client.<span class=\"built_in\">receive</span>(buffer, <span class=\"number\">2</span>)) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;no &#x27;OK&#x27; received&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (buffer != <span class=\"string\">&quot;OK&quot;</span>) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;ERROR receive&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;received &#x27;OK&#x27;&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"服务端\">服务端</h5>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;csignal&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">tcpServer</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> listen_sock;            <span class=\"comment\">// 用于监听的socket。-1表示未初始化</span></span><br><span class=\"line\">    <span class=\"type\">int</span> client_sock;            <span class=\"comment\">// 客户端连上的的socket，用于和客户端通信。-1表示客户端未连接。</span></span><br><span class=\"line\">    string client_ip;           <span class=\"comment\">// 客户端的ip</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">short</span> port;        <span class=\"comment\">// 服务端用于通讯的端口</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">tcpServer</span>() : <span class=\"built_in\">listen_sock</span>(<span class=\"number\">-1</span>), <span class=\"built_in\">client_sock</span>(<span class=\"number\">-1</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">tcpServer</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (listen_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">closeListen</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">closeClient</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">initServer</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">short</span> &amp;in_port)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化服务端用于监听的socket</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((listen_sock = <span class=\"built_in\">socket</span>(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR socket init failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        port = in_port;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将服务端用于通信的ip和端口绑定到socket上</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">sockaddr_in</span> server_addr;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(&amp;server_addr, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(server_addr));</span><br><span class=\"line\">        server_addr.sin_family = AF_INET;                       <span class=\"comment\">// 协议</span></span><br><span class=\"line\">        server_addr.sin_port = <span class=\"built_in\">htons</span>(port);                     <span class=\"comment\">// 指定服务端的通信端口</span></span><br><span class=\"line\">        server_addr.sin_addr.s_addr = <span class=\"built_in\">htonl</span>(INADDR_ANY);        <span class=\"comment\">// 如果操作系统有多个ip，则多个ip都可以用于通信</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 为socket绑定ip和端口</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">bind</span>(listen_sock, (<span class=\"keyword\">struct</span> sockaddr *) &amp;server_addr, <span class=\"built_in\">sizeof</span>(server_addr)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR socket bind failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"built_in\">close</span>(listen_sock);</span><br><span class=\"line\">            listen_sock = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">listen</span>(listen_sock, <span class=\"number\">5</span>)) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR listening start failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">accept</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">sockaddr_in</span> client_addr;             <span class=\"comment\">// 客户端的地址信息</span></span><br><span class=\"line\">        <span class=\"type\">socklen_t</span> addrlen = <span class=\"built_in\">sizeof</span>(client_addr);    <span class=\"comment\">// struct sockaddr_in的大小</span></span><br><span class=\"line\">        <span class=\"comment\">// 注意accept函数的第三个参数是指针：因为accept函数需要将实际接收到的消息长度写回addrlen</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((client_sock = ::<span class=\"built_in\">accept</span>(listen_sock, (<span class=\"keyword\">struct</span> sockaddr *) &amp;client_addr, &amp;addrlen)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;accept failed&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        client_ip = <span class=\"built_in\">inet_ntoa</span>(client_addr.sin_addr);          <span class=\"comment\">// 将客户端的代码从大端序转换为字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">send</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;socket no connected&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((::<span class=\"built_in\">send</span>(client_sock, msg.<span class=\"built_in\">data</span>(), msg.<span class=\"built_in\">size</span>(), <span class=\"number\">0</span>) &lt;= <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;send message failed&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存放接收到的字符串数据</span></span><br><span class=\"line\"><span class=\"comment\">     * @param msg</span></span><br><span class=\"line\"><span class=\"comment\">     * @param maxLen</span></span><br><span class=\"line\"><span class=\"comment\">     * @return</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">recv</span><span class=\"params\">(string &amp;msg, <span class=\"type\">const</span> <span class=\"type\">size_t</span> maxLen)</span> </span>&#123;</span><br><span class=\"line\">        msg.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        msg.<span class=\"built_in\">resize</span>(maxLen);</span><br><span class=\"line\">        <span class=\"type\">int</span> read_byte_number = ::<span class=\"built_in\">recv</span>(client_sock, &amp;msg[<span class=\"number\">0</span>], msg.<span class=\"built_in\">size</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (read_byte_number &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            msg.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;receive failed&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        msg.<span class=\"built_in\">resize</span>(read_byte_number);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存放接收到的二进制数据</span></span><br><span class=\"line\"><span class=\"comment\">     * @param msg</span></span><br><span class=\"line\"><span class=\"comment\">     * @param maxLen</span></span><br><span class=\"line\"><span class=\"comment\">     * @return</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">recv</span><span class=\"params\">(<span class=\"type\">void</span> *msg, <span class=\"type\">const</span> <span class=\"type\">size_t</span> maxLen)</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: not connected&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> read_byte_number = ::<span class=\"built_in\">recv</span>(client_sock, msg, maxLen, <span class=\"number\">0</span>); <span class=\"comment\">// 返回接收数据的大小，-1表示失败，0表示sock已断开</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (read_byte_number &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: receive failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 接收文件</span></span><br><span class=\"line\"><span class=\"comment\">     * @param filePath 文件路径和文件名</span></span><br><span class=\"line\"><span class=\"comment\">     * @param fileSize 文件大小</span></span><br><span class=\"line\"><span class=\"comment\">     * @return</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">receiveFile</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;filePath, <span class=\"type\">const</span> <span class=\"type\">size_t</span> fileSize)</span> </span>&#123;</span><br><span class=\"line\">        ofstream fout;</span><br><span class=\"line\">        fout.<span class=\"built_in\">open</span>(filePath, ios::binary | ios::out);</span><br><span class=\"line\">        fout&lt;&lt;<span class=\"string\">&quot;iii&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!fout.<span class=\"built_in\">is_open</span>()) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;file open failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> totalByte = <span class=\"number\">0</span>;          <span class=\"comment\">// 已接收文件的总字节数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> onRead = <span class=\"number\">0</span>;             <span class=\"comment\">// 本次打算接收的字节数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> bufferSize = <span class=\"number\">4096</span>;  \t<span class=\"comment\">// 缓冲区大小，单位byte</span></span><br><span class=\"line\">        <span class=\"type\">char</span> buffer[bufferSize];             <span class=\"comment\">// 接收文件内容的缓冲区，实际开发中，一般在1000～5000之间。</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fileSize - totalByte &gt; bufferSize) &#123;</span><br><span class=\"line\">                onRead = bufferSize;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                onRead = fileSize - totalByte;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"built_in\">recv</span>(buffer, onRead)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            fout.<span class=\"built_in\">write</span>(buffer, onRead);</span><br><span class=\"line\"></span><br><span class=\"line\">            totalByte += onRead;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (totalByte == fileSize) &#123;</span><br><span class=\"line\">                fout.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">closeListen</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (listen_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;not listening&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">close</span>(listen_sock);</span><br><span class=\"line\">        listen_sock = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">closeClient</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;not listening&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">close</span>(client_sock);</span><br><span class=\"line\">        client_sock = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取string格式的ip地址</span></span><br><span class=\"line\">    [[nodiscard]] <span class=\"function\"><span class=\"type\">const</span> string &amp;<span class=\"title\">clientip</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> client_ip;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">tcpServer tcp_server;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">fatherEXIT</span><span class=\"params\">(<span class=\"type\">int</span> sig)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 以下代码是为了防止信号处理函数在执行过程中再次被信号中断</span></span><br><span class=\"line\">    <span class=\"built_in\">signal</span>(SIGINT, SIG_IGN);</span><br><span class=\"line\">    <span class=\"built_in\">signal</span>(SIGTERM, SIG_IGN);</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;父进程退出： &quot;</span> &lt;&lt; sig &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">kill</span>(<span class=\"number\">0</span>, SIGTERM);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ---------------在这里增加释放资源的代码---------------</span></span><br><span class=\"line\">    tcp_server.<span class=\"built_in\">closeListen</span>();</span><br><span class=\"line\">    <span class=\"comment\">// --------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">childEXIT</span><span class=\"params\">(<span class=\"type\">int</span> sig)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">signal</span>(SIGINT, SIG_IGN);</span><br><span class=\"line\">    <span class=\"built_in\">signal</span>(SIGTERM, SIG_IGN);</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;子进程退出： &quot;</span> &lt;&lt; sig &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ------在这里增加释放资源的代码（只释放子进程的资源）------</span></span><br><span class=\"line\">    tcp_server.<span class=\"built_in\">closeClient</span>();       <span class=\"comment\">// 信号处理函数中只能访问全局对象，tcp_server必须定义为全局变量</span></span><br><span class=\"line\">    <span class=\"comment\">// --------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">initServer</span>(<span class=\"number\">5005</span>)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;initsServer() failed&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 忽略全部信号，不希望被打扰。顺便解决僵尸进程的问题</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">64</span>; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">signal</span>(i, SIG_IGN);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 设置信号，在shell下可以用 &#x27;kill 进程号&#x27; 和 &#x27;Ctrl+C&#x27; 正常终止这些线程</span></span><br><span class=\"line\">    <span class=\"comment\">// 但请不要用 &#x27;kill -9 进程号&#x27; 强行终止线程</span></span><br><span class=\"line\">    <span class=\"built_in\">signal</span>(SIGTERM, fatherEXIT);</span><br><span class=\"line\">    <span class=\"built_in\">signal</span>(SIGINT, fatherEXIT);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 受理(监听)客户端的连接，从已连接的客户端中取出一个客户端</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果没有已连接的客户端，accept函数将阻塞等待</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">accept</span>()) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;accept failed&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;client connected&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> pid = fork();</span><br><span class=\"line\">        <span class=\"comment\">// 系统资源不足</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pid == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;fork&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pid &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            tcp_server.<span class=\"built_in\">closeClient</span>();           <span class=\"comment\">// 多进程下，服务器父进程不需要客户端的socket，关闭</span></span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;           <span class=\"comment\">// 父进程返回循环开始位置，继续受理客户端连接</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        tcp_server.<span class=\"built_in\">closeListen</span>();           <span class=\"comment\">// 子进程不需要监听socket，关闭</span></span><br><span class=\"line\">        <span class=\"comment\">// 子进程需要重新设置信号</span></span><br><span class=\"line\">        <span class=\"built_in\">signal</span>(SIGTERM, childEXIT);         <span class=\"comment\">// 使用kill命令终止进程时，会产生SIGTERM信号，执行childEXIT函数</span></span><br><span class=\"line\">        <span class=\"built_in\">signal</span>(SIGINT, childEXIT);          <span class=\"comment\">// 按下ctrl+c会触发SIGINT信号，执行childEXIT函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 接收文件</span></span><br><span class=\"line\">        <span class=\"comment\">// 接收客户端发来的文件信息</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">fileInfo</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> fileName[<span class=\"number\">256</span>];     <span class=\"comment\">// 文件名</span></span><br><span class=\"line\">            <span class=\"type\">int</span> fileSize;           <span class=\"comment\">// 文件大小</span></span><br><span class=\"line\">        &#125; fileinfo;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(&amp;fileinfo, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(fileinfo));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">recv</span>(&amp;fileinfo, <span class=\"built_in\">sizeof</span>(fileinfo))) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;fileInfo receive failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">strcpy</span>(fileinfo.fileName, <span class=\"string\">&quot;test(1).txt&quot;</span>);</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;received: fileName: &quot;</span> &lt;&lt; fileinfo.fileName &lt;&lt; <span class=\"string\">&quot;  fileSize: &quot;</span> &lt;&lt; fileinfo.fileSize &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 给客户端发送确认报文</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">send</span>(<span class=\"string\">&quot;OK&quot;</span>)) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;send error&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 接收文件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">receiveFile</span>(fileinfo.fileName, fileinfo.fileSize)) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;received file error&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;file receive success&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 给客户端发送确认报文</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">send</span>(<span class=\"string\">&quot;OK&quot;</span>)) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;send &#x27;OK&#x27; failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;           <span class=\"comment\">// 子进程通信完成后一定要退出，否则就会回到accept()函数的位置</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","secretKey":"3befe75ee24356074a1fca26950488f7d627325b1cd0b427c91a5d63aec4083d","iv":"bbfa38610d884bdd350eb1076da937e4","encryptedPassword":"178a4fedb9290040c6409f70429bcab2","encryptedContent":"f2dfff171696ca4ba5178bef5945fc6cc1626eb65ba654dab99c5929249bf0c6f09332c3c3ca9a72376ae9d77af8af1104339d951396949df6e4b8c5f8433a1560868ab4b5ee87557f905e80070e066c014d0635b23bfecaa0bfe94958bb806cc681bc0d2b7e0a5a896920e7def40de4caf648a4c74c6d278f1e74486d909444dfc70a932ea67826f6685fc72e277c355647a0eac3d3b537f7ee15bb24a61911869a92e975308fd552051430aa8881e8f35fbf0621dc15d6dcad399bc1ccef0771c4b46dee960284928ca4e5d5e81a8f33a7d0c2ed2803b6727d2dd0a3e4659888278016f44a090ad549bb2fd06f99b0c13d6cae2a35adceb607044e04d035c1c98fee98fe99f8f68d543fc3b15f4767cd49b5cb1c0f7e85f6faebe024d5d649ac3f9863317f4fcf8880195f99851e17c1775068568eb90b545d045e75fd03e74013cc868793709b796a6b462e4561aa3c240ce248e582491c17a60158132ab9c1e81c55a7f74ffd40d86371cfbf52b536e0e85b9e25cd2c119719722ae1a6baacffb5959f5c63fcf368cb99a45db500f7a3da86f3d5e5a5357579069e15b468204516f102c5ee57f8f56b212270d8cc50f9f9ee6a51c97b0ad7b118702d0aff039627f5a6a97d70757d7a941c5c7216005e2a1ceb22bf887dead6e098ca7306296929678cc11078934c64f4be1fc2d25a8917be6cef455f495b65c1b4ac5d7d20b756ae20a042719b6b28f064f0db59f126a7feef3a35e3fffdf2516312ae409117162e5875765e38139754c95d716a516243369176891eeb72fc2cf4d155aa3b06fd40b3ff4532be590c23bc809a5c1bae5cac4522b04beb6fde7f1c32028040f79fc027d016b8ce8fadcb4cc9856c84b4266557d5d84b5df890934675824eb51a6513952ba8d51fa76f42f2bf4574362f1b14e5720a2a6e5738c3a8c8bb755ea963a84bb64f86638121db062a5bb1b6249af0e0f1bde16e7947ac482b2b4c809b9d353e15f0a47396bf7941de1ad35b42035ca82e8c355d7f526f9c7e21b644f603ebcabc66d54d1f2b36993d5503015341072d6d15925f4259621bf405bb01f6d4745fb5f88ba032fe44c1df5fdced68ebfb83d75040506ce34aa93b7022f486e4c63308c27844c8945f85e4b709b3ae14ee3884bc002f2f7efb4c9d85ad17fa126161e8162bea711f58ea4ad72e873be3b7057cc7812027fb0b5687f24e14a7435faa9a8e65fc49ca6421c98afa34eae33a232a52d619ad0b37c394adfb0ebc851146469c30d3f56fbe42a9f9289b022f6ce6e537202f3b77933d10b373d4d9d7eb6380b9b0f93826ce143c08aeb32cffb7af0d1983ec8f23ac9fa704b3132062c221f440e95443921f2dfa5112a1c9e78aa887fdc616885d2645e26d9959ec8d43d62a408d40959fa4dd78af76f33955296b06a2c35dc2ebdfe443c6ef0eea95bd81bb955dce2b57295d528428c0853835307e649662c2a2f6cf79ed4733c36350006c9dd738efa09ec4c43d1d8f9be68e6954c3f2ef51fbb513432b01f27fc0b24f9e7046534c83a19886a348d3a2c58548438867ccd2940f3c002daa9b6c3bc84382f0025e6781a79bf720f93366d80b47262ee3a482f50a707c6711626abe7248cdb1299a20e62e6cf34b5bedcf8bcc78d6fa0d428eebf425c9348c2b97d0d22e54628f07432dac2197fc7f104a7e5760ca37addc03d05734dc4ca8ff639537d98499f275ba08ca60f2893a857548a19cada09245261a0af1c807b1a7c3ece43c5f06cefee20caf5b4d1358c5a85f63ddd8166bb76a4f2adeb68be60fc2ef78f251874a05e9f7fc0ee55c1dd1236479ce7396a754b86109f537de95090bfe09b42adfb9d130fe171066affbe5407347e98f4af6136cf58290f81071d0d2f4eab66bc471b258cb5063071d4bfd07f499f6b825fd5955dfded4819509793b6aa801f60315c20e15a2bc36bb17dc59b670cba78b245e44237692b35c49618219c3eebcbf8b292c5d25840e97f8f08a3ee908e3850d586637bfc13d1be12b9dfdb535b0854b7228d54c6e3458f88ff5f5b169888ddf508c7e30f8b904007955c987318f8d554ef3a7b66f9996995d89ab799c79fca4df6dc3d7d8661067f58fd9c7cae8bb80f0c51d546aa64351e9b2bbc8a11b54adf69c374d3ae826f61a637aab986ff10de83b6d21bcbe36e55f2321ec124d60dc1112aa2592c22b9e5db601786df76a94c4aa3a2427c42c95949c303f997d7900dcc2e0ee1a5371649fb56850e2a8ccccdfb04eb84b6c45f128de236ed5376bfec667278c170a734ce5afe4b1fb15fdb73aae628715209fe7ab782b442e429e5ddb9f2e057b9f2d870dca3a45ad22fb1419eadc4db2b7035c9aa1d7c494157db2ebfa5fc02d64026f0000d07e212da509c3f905702cab3e82678a0d5c043e825e5360c2b770f62543d45b180c4ece428a431acef25197ae8c0a253704ec19d7e668e81a34e36ff698526b9733b5222c5b8b8bd9f54ff2cf67feb22e9c4ee0533f70683eefbb793567e5da75e1c366fd75914e3c5c0b0f9147040f716f2e5cf6eff77da5103dc998bdf40bfd472f6ac2913ff8e9f389cab7b4fa061cbecb3df48b0ba84e8673631d4c99619139a2c42b7c36e5a8a0c36604b5ad6cad710d53016366b13568a20c32acf7b6f0345a4b44db18ec8c4645354624af1ff3e45ff67930d0200b2d8d6acdf2d2700b621e3ae309e43b7e7e5ec7140c0e20e8d6feacb6e5284b3024a299deb9847a35ae16939f000ccfefbd68bfb207b7b38d2dc6fc8f01e2a677581012d478abcd0105e2fc4f1e3cc2efd8409c424fc0255d86813f64a2017697ea5eb3ed12c0221ede6f66427e1f5338a127832bfcff66d88d794a0a888ff0275fbb9c785c216f04e2c524b269d1f24da4efd96b61efc32d480f771473d2723ab97fa98b9190e907de4336be19aa4cf065bff7453b34f970c8ea63b8a4c23e64ecfb9a4a4f1f7d320f09a38e9cb3f7fa5626af90ea48c3f0c85c3b4e4eddf5a0d8235c33f3fc1087f702ce7649f78656aeafbb4cc9f5cd05c813d58b8d924a6b42395c6524bb4ef65500b924b7f64a0ac1d266a8eacba9dc1b9975068250df28d9f6fa70c4a41a6096367dcaaa4de5f5acaeaa419445aab00fcf50b906bc842b7e5dbadf631f0f82a42fe06681317bbcf0976361d9366879077953618e8d48c8f15fc03847e142b465f8c4ac9dc3717fc8c0f5cb2b5278bc69b20416860b8377326254ac5342559910cb8b3b1ff967701d6b58ff5695a33dd9cd099634fddeb5a1a5557086727947be0f413d09d0098b85045139dcda2199287c6fa72574bd24296c864d51ff77671485e247e82f4629f33b8d579b379659c900457b0349bde666b1e49fd2a6cf0524a88fdb220f413ff8f5130968150a5c989b46c6fc5c6f84d30d093519133a506a4f267f78b92fd40c23e1ad6b75fbb94e30c2a8e47f588042845b735223e687d8b8aefedf9a3f008e925262dba09d91602974552547785f53a607d0d516bae5df92059780c2d4ab5a2ff305181a53bae44b700a95bde480ffd75c77b827eaac49345167e5f133d84bde0094bcf88ddafc78073a645c681fa7d6fc576a4810feab084c8890f5354d9152a6710c169a6254088be7cb5ffd92240c0b1a783ce03ec8b437ff55c4797ded380c7e4dc0695671664fb1fe780f733e3b4b22e986162237f6726d167c59f558da2adb90a8a55f5103619d6b00d80694697a2db5abfee8556b7700858b7f8443f40c7639e321b6f0e773e171cf47e7f75ec3cec87324f1c056b23928487f465adccc200232e0dfa8690df177ad377b7145f71cfff77caf959a0ae1600bbe95d279446c1ea14100ea2e5af6e5e461019b2a28ae40948e35c5ad56951f38af973f8d0612e54a7e3760b3c3348d37f817ff1a736744cbafe4d3359a515126e2a0edcfd78e1ba4d620b39c38b2dc931861622ca7b9254e0e49d72272e7a84f43b0b8ff9eaa67ba1efbeb836fe2edbddff655df930b997d1a1fcf2c4cea6e2ee5bde18f2af78e8fc3b215475e4ff08958b7a737c4baeee64fe1f4c6ee946b5aff2d76f8e0ff874948f74ee2a37e7214c5d8946a9c09bdc1964562c09b6080b723bc7f16aee05a285ba9add056c5c5621ada76f6e89e5b99d8f11c6c89f51a303e054a6285f06a3442f501d5e86261345e6e72f4abdb8c23587ae86a1952f887ea58690d1d8ad9351693f45718d4cef9081de17f8161bdab0642f98a02cfbcc62e019249dfa9069f4cd7cd54d70227460c232bf320c23494bcb138fe9405a447ddc21863778530e0145ea5a2afee09300cc230a023b12a28c083e7f6434411570ac48dd37541c0982cb514db36d82ee6c926fbc458e4f5ce8b12f671c3d87739036cd581facbfc48b8f3abf571335faf0be1b38fb691d2628471d45662da373bd5d972ff767c0a8abf1492cfaa3ce8fda25c507e6c07f43a8516f13b0fcac3caef41a785bfdcf4c31bf092db61c8452b5cf180e4c5c3a00d2166b4d3372d961d2509b4aef0bb72d981960fd72ada6045adca100108fd11fa7b5e3ebee470b258bff7d86386efc0c4dc1e4c63b9d9eb45e1904ba36be45e537057e04c9f0616eb0442e3e45adff1cf71e29c1a5e733e4b6be4f8f6448338895e2fd61eb77ae19516ae797cfe6af3cc833b5dc8c2e82254e0af0b1c5bd380a7eef1635011d9f4c652fe058b832b8c236209b779f0ae0a7290bdbd3395d5af62a858637f88c56295a8f6deefff57532089dddf8503f720e3f4fac3531f19c855a05c8334dcec374e18ef0374018e3719a44eab01d4a33ffbe81df496d873db07df7adcc6d9584cb477436f09433e79d35739538b8f9d18a91f9a5815933ce1989d083a88b1d2875478a3ecf4e7792a8390733d157c5313579a220367c1d64cf3faffe77dfb08806f58416a5db7516e53e1e7e44d057fe90a9cb581ea0a65a63127e7e6121f016a93855da4f10ef5b7ecaafe1d05cd7cc2cbbbfa23e195aff79bb7926565bf5a87a6e8d59bbd5e9a0902e0ecdc217975993e91d5a9487fa61722443afd9594def322bc0f973545484edf7bdadb399b41098609d4add080f9b7075fc7708ba7ae0a8f70e64b02ca4b6880a35de18cc55a244def8c303e31754937184b9c426360b13759dba656bcc6b7365b77d5415daf7a8f00d693d063b8ab826dad4f3829e5106fe82943665f7326c154cdff870f64fc22ed8e678db979f2c22081737b404dc65e0abb45669d4b5b3fbd37f3357d6410ec95dd96bcbe5bb6ad0a7850afb220eb056be8248fcc5927b16bb730959376d53fca7be7d8856d5c7c49b5379a740dd21ca9f3d64ad49187098692f6b0181b34f0c3f3cd10ec4e95cac1ff30ba7d16fa4c351b1eab29b1dd2ce8ee9fd04f0da9829599fa5ab938fac248a157754a2eea2843d4e36fc9ae74256b7fa74fa4870dec34d1a4e8bdcdb3d97e76207ab20f5cbbf58f2caadab3aaf639b99737085f453c69c9405d5cf60dc86188a7b96c297aa2c38ea41a20808019c35188a3d6b62b419f865eec6fca9707e218dceec5f64acdae80a4a6be85fe9dc3c200db7c4c9320ebb12ced870f174b3e0b3ca6ca408180caa750fa5566a7891181b1a92d3781a4d121705fd44b57aededaf4a7d1ca484ed36b43661a13c0bb5ef9471ca554211ecc2ecd0f18a48888215fa0b85e78151ab258adb9d2535e910666a86e9ae7aa9efc959177bb89ae855c2f78aab880c903fd9a960daa025cfa9bd4a3f4315d64d222faf8b4214688b055fa868024d869bd10e984e534313508b617362b47f2193caf82cefab465afac6377c0708995cbc07e146105b36817d5c54c689d62734a656756e0a3c4b8d4312314d6bf35f6ccd4695d8f4a4c29575c01760918df045ffdfe99bbc0997e4ee139eb24c9d79a89969ec2b2bad1643f0c5d43ff8c241a223110d84bd582323a8ec64e356a23f67a05fead1c6cfd6d699e108c1b2ae3d07d0edbdddbeeca09adb3aa11c3403b7c9d17538fc4ae809b857e18dcc19641d8d2b6b7f4e3b8f63f210bf97f532632e926ff94b7acc2fe0d2abfb043cc4d488911678f068aa9cbdd1cb07d11c89dff4c53233a5a2f8846a9f8496257ad985fa2750359a16961c31db80354bae8084a318562feaec23d058bc9997faed705ebff7e02740cbf93bde4a4f751af63e4346021a3e1ec379a3d7fbd3f06cd93b097a0ea2b51734d2d864884fb96fb7bf1cb940d09e7e10b8f076a4217f888f5447fbe88a6e397dba1f6cbbc01ac54db5cc10ca4f2d3ff2448dcb0a853ef1886644e10645f20fa2ad88b0c3117ffb63d5abe788c36ab77ed8abe9d3eb84606fb0ac08c08add6d0c07a3c723e57d0122fe95d6c3feb0ead1831e1a0d1d5c3349822d5c5df1ccdc99aebd3935d03dde9e2ec0213c65b0c54b65c8707de9501b03bdbba4fb9dca89f95242a2ae63f374e3da40dfe1d64808e0cd8798cfa3240e3f8211dff83e7701450626dcd29297fadbb243becb3f3c40f0d8aea282025ea1625b774bf108b4dab2eaef9ab228dedcd043f3add6f7a83cd914304c3c02c24a852d321e84e2fc1eb7c977e2506043c8e18bc46c860cd925f427d4a8665d4b6692cd1803d0024eaf1f87c2658df59409eb27d857b06b641295552b36aeb07f9c9e95c0d8c4e08ed06879a5bd0c8b301c6af049435881f1dd72824b0144057ae0f7b520c695f1dfc8467ba5d94114814e01f2226b45b7b35c31a452bb3f06253c349421bdbc2375ab2b7070bdc2f87802afad3b2c65fa17ab79ba389b092bcb3d81a0c215787775424515f8648d6bc2e9a325e5e669b8cadcd3af8304bd32189e76bbbe981d789351c09962a002a7c718d32b5cb71f9c251733f2b8470ef8bff92c2be4ced0480e75e55854f7a6e35b78cf3dfb39e28da2a7506c4ecac87435701e8d45a6e8b27e723201f1bf909a912959fc0462e3f5108dd5778fabf2fd0269cdfbe1225e29e9fbbac761f0f23f948f4f4194f55a1756d670724ba6375eb5be9e6ded268aa22a0722a08c374f664d73cfe118fc8746adef407baa12c8d637f245a82cbe3855e91a5a33561be397b34880748fd2fbd7ff796651785f29d8b569b5bbb1727369ed4c580d084e12caa34e65651694579defbcd13e3606b180dc14185acfa2ea0c02b5bd968e4e1a3e505e7e6963e633c05cb6f337a0dc9f98e661da11ad52246e510cb50e89704004cdc9258590c9e25f0f37418c943991a3c4f028e08111bab56b1ff28a1bd51d852b27aef802a40a98f56185c67a4e4e305a30a1c8a6af865db879a0b92f0a18690f0abf8010048f003c6f4246196513d8f96a32b151e1405f3648724683884dc7114cdb26bc9f38ba552533e9fd8356d12d9b4cfd213046545e8db9d56a8c43eaca8b41cd660094d2cb42f8d9598770f0af100979ea1f73dcc1a624e6fde12fa39118dad74608c91581f70776155f8c95bcf98bd25b0f18b2346d9a92e031f27491d7cb054f2f5b65a3ecccd1b27504e4192551cc9c65e7daa99b62853aa4e058da7df74d4eb35aed2a98836e3770f6c47ef32c77ac2132fd27e0afc5f23807271f17981770aa14cfdf211ccef630c290b4b62031715358d1f661b8f407afac479462f64ee5a8377ceca0ebdee2b4d07802cff841e2a11483561ce866ee7aed1840561c362605c824eeb1a550ea923a889efab42f7a5030f2f252894af3f602ce9edeee034ca03eb6263f2a2bb2d404d76e670cfeb5311fb0168793ce66098d4a1e7796d268aacfc91c919ac5ee15da6482830bcafa8b5ba3c2d02bb382ea100df2e078970f92cc71db2aa3c163dd03ac3b784cadaef6ef8a7c62a236857b870753a4118e4d0698a0987f83e41fc4fa5acc7330d9b92df7c4804ccc4ea01bd18db2b6989fd7940e21097636acc82d61cd97ef503f772b79f39c9116d305d6477f5b073459eb6b8a0b31d8c43524998b5f86417ec6f2381dc2d802e7af45922db09986b11871a366a3a8f2c5b40437fcbec2cd82c094fc12ca85dff80cc1e0429b33e8ed5d8621dc46a8ce76bdea5b3bf3165217bbbc0f95f9ad71113c302fc82fd2d564f33ef0632271b2f12e7d196023cfd9eb1e6b4802bfd051dc10cc29a4c456627a3306f31f929fa0a9293331754e21ee703de442c100ee3141b542819d8befb642447019e6205a4732cc40575a487cbab80d3a20db41ebf831af01819bef42441b39860e2b4a83d993c134875fcc7d805fab26f75ea21006e1b94f1d5e5237be3bca6b28d04d6b8bf1887a593455046a294c6f21dfa7eef4aee1cf7ddb6251fd0859e36443885d0bd7559267cc4beb54642005b35794b447c6fdeb146504e314423471e1a5c9c59ac06444c0a0b85b02cb058183dd16baa0b70752ee5d4799eaf4e29d1cdb9aa13fc149f4cf5a55db6a55c7d0666d26228b98270d0478babb1208967496c3705062a95526bd2934b45ebc0353b1b625da06282f5ef908166ea3f6467ab80315cccaf3e555a4bf2e85b9b7db63a4e8dd1d4eb33a68a05829fb499126b0c26fb244ef218632c26d342faf4f563b18a4c5be090ae01b763705c4bb0724324094218dcf6c55e606366cea3cfde25b726645ffc55b8dd7d26992ddb969a81c6d22ab706ae3dde99aca59a1064f44ac6c6643dd6629de9a10af38add83c2d229b8a1f33d0a2ec755c591f3d0a58de21333ee02bcbe3680f4e294a26e0d7f94c23f213c190f30b26489beb02982b10212fc4cc6630ad9aa83757d162f8376d826ed73186dc94f1337d4e8b4b9f740754d7b539ce13f12c1b56fe2ab33ddd06576999176ddbb1b702793669c12edc75c29d7875433cf230669d2159992a6fa8da71c93a23c6c0fd0cb03fe40926b2535fcfd0dc238965dcc10b56f568be3ec0abcd0fae25f647e1e7faaa41756a02da87f56dab0b7c9e6b34c853b266295d1a956b0ecca8542f0a303998d4d0f3ff6eb7dde40ffbe5e5b9444fcbce99797370aa81679c7b0acb97fe64728200aa3032786e8cb30654802673f8dcd0e5d64f8e2456b4a84a0ec6c6b26e285fb3e36aaf9a3398ed91b17a272df1b11ae883d6b89c553e141f9dfcca3aa3d2cc59766f1f6097f0409c90510bcbcf2147db7fdfadfba29a353bb15856700d25f7a2c11197472c29fdd1900e0fcb690e97a4f17d7749071ad6f7d79de64d4077e0fd6e9b1188f1e9a72700b66a4aa91e400a829c5b555d31f6d6aa105ac5edbed045c235efcea6d112b6b0b956faaa00377246e105d46ad260c88ca633cbf0cac881ed3ca1780431c22ba135b5c04f4b95f1649c3438eac56505a337c9c613d6a5fb887ace0e867653907899965bdd9da3c6ca3940e047bcbcb2ade126144a572ce0a9e4517d0bd8ea911b76fc32539415265bd52c9689f3666db10c62a5e23879e4eceec13c2ede1e2b1440f763ec9dda48eae282a59ee04451b745be53b74868030c94b34a99f02722b41574f7cadbec7f108de7fddeafe613d3ca9fbb78557e80dc88cefa59bbd11f7b559512c753094f12a2246905caa7556e34e86adfb181f9002677d9e82443d74901f05caeced770f8d06534ce3a406ebb0de3a5b00b7a90821755eac85955e11b4094a5a07d0ad9ddd58745d027aee1759ee68e8edb3591726091e09694a6271eb73b37cf186bd557a9b9f06a00bd94f91d76250a8fe78e35591a16a8454b223682778baba3cbb629692c39375d502e96911f3b3a33fc7a3f5c5b6a17f0c26b51fce064b8901ee51ae00451e5f5d66424dc756f3b89ac20d8a4ad84405413ab4b7b78ed605c0bb693e35786b8e09bcb3cbc7f0e03172228597ece9828963c341b7e39150b1db365d95290da3e5523cd95398b92c8f372c86af47b8ed5d8d80613c80399e55d5d764d8dc662b7bc9df83a41e3ea2636ce8469453a8c2b0ac41e732568f44867c8305b5bb84df1089e128aa17953af7b94a5024640a1df0bdddc059725cbe9138085c88518a7fcfad824173712d5148f89aea2a4b3e2b1e1b14afd8f71ca2579ae187444f7e40716fee0330f3f9aab48951e67e851a0c365a6d316a53e641fec96000e9389a2961092f0a675a9b10cf26f8e6137da4d2076c6f1d6861f27547eb841d799287b5653613dcf21763a0e8c82dde77d54d411583a59687c2ea29ca1cfe07cbc53372709535cd0ffa07ce29ee254a5e5a0bc5100ed6e8780b6018366848811f303120aa3e8bf4eaa96763fd57e7e6c3f46672697a5b0bd38c683a250be427a22d9efae5b6e8116dff53a7c6df5d75eb6bfe9aa303edb42443e4ef560c87e8f27739f82cf33f80eece79164dfa7efeafeca15bb7da0615d0a1bbf62c4367b1e7cd1de3364f053778331476f863f57eefa8dc94dbdd752b06070bc4ce66f75562be85af0cef6d386c088d31923c00390964f0af28225418a5a28e6388736a4a3fe9ff6ecd8d82e21ec882d1cc65cf5c5b5fce93fba417f214e8a72603e5a26dee1f08c3cfe32f61680fe20935d9ff6ffc50ac4740a44848467929fc4b64213184a6329f25261f5787b2194eda5cf08fb52f1dad028dbdfd4e80f5d11a227618a86893d96efbee1465795a68209876eb14b0a25d17e6aaba3e9b8da9b7e5c9750cf97ffc97f13ac1dc2fb01cf8022ced845d61a6fabc5ec6e0af44360611991857a6e5a5c9b002c60f054e9c5f161c3edb7e1cc4fd1fcf8bf62ef31099f9b44f4ff3a24bad95a3f414d567d4bd7a5c39f956266db521567feb10148e27e0b9aa1582dd23c789af4568f25a271faf3b6320fd1afef90ed6184b81a2fb48a286ba79f6583f464de9fe3a1e445119152bee59b7c3c56e47a8337dc4d7bf12c408627d35dc6f1885d00bcbe9690899482046df16c8c328ade1149c422bedc921d1202161867ad02e0db5e972b040538a8895fb32c3c7db546d830a927c56f6d65c0c0dd07ffb906de059761e4b494829fad1bacd369615a692874cf3b587218d1d7f13e767f6433501c61bb93de121ca63401919058285e9f0c85be2c7b2847e7b56463a2c2a9c17c18cf555256c54f8aff7d99d1eca6303b82a0c3644aa88bfb78426c4942668f8ab19ffeae17f2fb03c3c0da44f4fac9765d807f677803b303446bbe0f4a133d6c58b224b242d4038704960d5fa2b0667c09361d57c6b91f8a216b6df438e45091a273318d248da99923a6ee6929cfc96497ec52a042d123b12f7bd73e694ae69acdd72b1964f255c641f6221c1a314f16af63bc6a8cf3de68b1abbf44c83e0c145977d32646eb9c72e5099f7ee4df84ab4059c273a1562057bae6c52504d344c0177877b10c4e0cec410b9211073e1b27cef4ced72fe912f85ce8a822bcb46e0d4362cb4d2c83943bb721830a3de7639f97516995b377f534e227bccc1114dacc34169ead9b5f4f34be89e5af3877b0167c8f05199561aa9bb873175993621db9a0fa59527f7b9e56b83588ed64c45e30b8084e6b8943aca6170554f20951f2b04b3d310decebd5ef44a995c9d4fd75ad153983de4fd363c37f368b174ebf678fbb98b7a92883897813d7e84583d93af907d6980bc33397ea390a8cf7db81a9c73d0b9b686f87d5ca2b10ff50f3820a61561475fdf29301646169d451e0316cad727277b8d5349ddbe572a731e85cb970aae40fef211572cad173445f5a0ded47423e46da90c0195f0a0a1a45ac1f2b7433f7676d34a2c68440a1159d4d69cdd68f87874abf4ab867d521454a0e340b5824567470a7ad4402c65b75bc6d37bc78f4d8000416f703861cfe3659da63eda27b8d3472c42f26cebb9841b85f73babdc374a2ef6276d561b825c05be685003d1645d887d2bf2074302b83c5924f5d2fb03e3bc9bf171b9c795937fb0fd9994fc38cd332d3ad16c0f5dd3be98266ddd21d88a746c5a6fed3f821a9be6e9331f88391d4e558f296b6e89dca258d8ba847d07dace789dc478aa0412cf4345fdd8f684e514bbaf3df3d592b831a33daf36cd7667d59f2cd4098cdb8246c5e58778f9152b4755341a478d11d553c885af4150f5bbd05eb1d04751d92ffccfb9944714a767e2043531c3d42be0aa988b449064ed0e96fc89d89abbf9c06393f6d07c7673cdf43af27bfdc704c0839630eb969ef4ef3f25aee8d6d0f972897b12e4e0c743e3854b6a1a32ca4aa496ce41498cf9cb9ca69d643916404bc9d2e993d78a327ebe9aa396334f206b0c0706c248ea0eef8298c37a029668563759107fcce218f0063abddb9c9b18b6ce75b6a85992880091f78493f621d06be6e78b407fd71d63aef778152e7128c31aada21322a0f3f887270963f9c4d5eff70ddab4fda1596a28e9b47a668dd0746ab6d8eb25becb105979ada88629e9b58201df50c9a9ec08d563527bfa206d57571e76806c178074adea6e21140c139e5324aded86015b8e40e78490a951df26edac437608b5cfdb671a94137422a86e0bc32018c043a5c901135838c87c49e09b914837df69959a30db5fa2807971b8223c0211ddbf6d644bd5308a17906d84f2df4761e7bcdfb8bc76cfe2ef1db18c8b87a6e2537780d6950936e61b067ef8a3717b2d9965c46abc7494981bf4adeebc9b5a42ede0263a4726c28e49652c1f2a966a3eec0e642736014628140a7ca6c8a2ca5b8a3bfede8d833a806e4faf375030dad7d00636956ab345798dbcc3b2904ad3f7ffdadb9aca352cd2d4d1bf59ca352ecba7bd7a70f8891190137e56d8bd0dce942ac0cd1f24e23af4d13acb4fe470e0bdba3cadd86c3af75f70a9e087e8e422a68200c7b68f241a01aa718ab427ee10007dc8092e2b848378092252aaecc7865a0ca39d0dfc80f84ab4b7d2e689f28ed46ec2fbb46a8f114b0f8ef4479b0a32ea8fdf4f30063057152c95a50c6d3b1a0ce85991a0d368408da8b235f1044bc2c14a402def86275af3159d528e80911461f11de6d8d6fc360cb049f6dd41e4feb5f0ac5799c29dbaac9be3fb6f2b54dafd6806153578d240714906cd09d0f59dfde77b1824eb379f4743ae3d5fb0841ccf0f36e30976f46e3a814647b9e8b777b791b6bb71c99bfc5fea5ca5bcac7528c8faabee7b536e941fb559a5be72bc035ec0a3238128a9fd5d6a89c6216f89ff468a682043ab780dea84e1ed6ec887c6b3c86990e02d71860911b14eda9669dfde902ffc0ab462f08cf50b138df4008779caf185e63afa4393d7f6bbfdf1df32240cdf2c54c8187b60c3292cbc5744f80ec11267f76653e86f955b062a4c7ade5e1a75c82945c6bba9bfdb2f2f8189d9182ced55a83581d165ef07a19856627449d7d9697876873aeccbc6ad01ca2f09ddf76163c33f43142ece61492f0e9d5e9895111483417ec5f4add840b5c3b7307aa7312342fc61ec7da4fa172e4aceb4e4c7eef9ca7d01b357408549d110b8387ac0b4c508514bb12daf394a5634e2a8e069bdfb7bd583d9ba14d3b165cc12c2b2d6703485275403897849f751738f4e7001b512b652f6cab6f221df4d36ce536dd3cc225b80f8e847066f351f26564532428f5c489030414c4e7ad06b4a774d794b438f09b1ea8d8cb17e4d9da21b02c451ff58b0f2f87c0a3bc882dd0f3a3e969fa0bf46702a9f5094d94477554d923b7829f03f3b0c4c41717e0497c4cc7ac2c1195b5c1d4812644a52d248248a9ce684e6fb9a30946f17062442b13ef52c7a1fd410a96c04e3904bc5fe3c1d44bd9a2556ecf00ec7a3bbb122604cd85aa6e24e9f70275ba822a6a3c5a3434c8fca12f6123b8f5fa69c8ba9e4ad69d9073a6fca78bf632782b08b7a292fe517d4d25f95815e05a86bd8385b5c4479b678fe50529b5fe79473f2f8d9d2ce6b4c7b9b65f9b6165d2ebd739675c6e86b3ee5c798c696adf7ac8bc9d21740b53377b106082ed237280eae8c10b69826e75b402a977302707180c98b723cdcefdd54738b0529023e453c6ed2cd9f339960438d0170737e789b07919872c6f84f1b9f05ab914507dc539f95a4d54078f13e5b279843e9e35dee509e591e662f890b97b2e0356488e2a7f7b56c20c5062db03a66283e78be4e8f448d607035c3730bc50e0cfc698612aef9f4390c306838ed00a2d148d31fc1999cdc5f5addc3fd4d6abe4b8454e7f42cb00b436d92a30dae20d53812a50899f57aec484feb01783adf1ecfe20c64b8f856cdc185d06b235f4b8e84dcc7806c75fede289af3adf049a5821f36f8298f54ab95fbce652c1505e02714433de23eb61285c7e7855be90369f6176acde43eab51d2dcdf89af5440d2ae55a3a2aede5b0d375f3b1d48381ca35eb884ad8f1b8634a70a7edbf8c7e7be126b378d55823d595fa4779bad55e66ce0a4d121853e6959f83811037f1b08f2f8c7e4ee466f5dc1e2af60ff4d2bcba189586826b7301059d1567c37f6befa66b3386b693f24c36e7d93993d876df18876db727c92271e6ef044739ca4ad1a777a9ed62743142e1762259f8b99a203023604f0bb26735cae40795f523efc5ad16858e3302037fec1de975ad9fea3ccbbed3929aa705375f7ac3000206946e4432a308508ff5037aef60b88e405eb522d679e0c35ed50fe3c18e2641f967b324207393fbf3991cb310431d4cf45f9a088edfa395bd98e8c1d5da8b18228dbd4f51d8eed99fe537d0b83f0c46d449cb089d5ce1e75afa87665e36d209b4559252d45b8b5ed5fab8c482bc9a83f712dbeb18a719650d5ad22d83af2d8ee2386c34e07072667304f76ddb17643eb647cf2b67188f5be6add84078087bb9fff58ff159e4ce1117cc53a729601144350db5df23aa3ec09802502b8cfa8598ed5f6bd8edd3ab9b4b5ca5fa286d20e956b743cf1d963c6e0493c1af0653e4f12d933b1e5a4538a0720d5080a880078823f7ffbefd034c106cd47acd29d29f386e176921dfaba6336d818ad7eca2f740552d67a992d0d64546dd1fa2ea0f4a1797e12d01459334d8a83fb2dbcaa4a6fa00938b5c4d04bd18a0e1b05af7b0c4fc510ec533cc9f0c40bcc99d929be6910f35f14ec9e0ec8fd07cc26604161309df4620e714085abc08c69d91386ebe2698d81d0981e0dc3888261815c2240acae5fb2b3afd0655220a03b673f943763f9c2f9c21e75cd81fac8b05b294e0d81995acf4bd524a45310fe2681f5c3c9b81690e54a0117f90e7402081efd54ecbe979911fe7417cafe9963616bda448d3e07a661e8334de8eee3e4580455b55274e34f38e7377ff88e28f57c84f19890715b173b236c74e8c6bcc28af81e22a947e7c78df32e22a84db80d4934424d4907d55eab6fd538a5f8373385f520f8fda55c439c311edb8d97c189282b3d229913fac6ef77f1bfe23a59c501a5ce64d2e9107c613f4b0d050e4766a76458c94e64f4e6ae309f7213a4fedcba254d80168b012aba985d8519461090573bb64de0dc2818f4d2d70bdcb11944cf61dfb72adc67e807fc1de72b9eec20814120b9f5ac5efbf378647fa2ddf8c3bf280cbac00b9e058d2c037b20e8fd443da0ae83f2b4b04ef1a9199016e71efd6bb821c92a579298fb77398fbf4bb5add2be8ee5161488895bda5c9dd41e6adc0f16aa0e22d9adab892f3ba9c5fae5f9cbb0e2a34ab98c4eb5038599a9432a32eecf076c6078d82134ddb0e5a6719a33b046542d6769fb8682508bfcd359e4b353507f2148ac1b50100fa04bfcac1b5a52c1b3ed0ccdc0561efe9ef696c6bd2941f8cfa691a56d41eebc7421ae8c07fba12ebba352f7e53c92570ea27cae416f6510199235b95d0ec6c6f58c2b0c7dd1b71e7b9a4504d876d6eb186a8684a62bd61ae1cea4dffbdd99cddf641bd09f155143876778f68e3864d3581e375e59f255bde21857c2415ab441fc2c6e77a0f99ed002fde4b77dc16f077f50421a27b71f8191c9dd08a6449c3c6d813b24fda04d0cf661e10560bbda58fed2e44676cfbccc52e80676efec2d2bc6b3668e7a028beaf291460d58363f5af19a3130d939c70cfb7fea00edffba95a2a60438e2c0478a3a4395315486372831713df4a0bb9b339386c651d517e37e55c26895e3e895286576eacc7588c3ce8fc47aedbdbe49f6ed0151ddc8f8eb1a42d6cd73b067f82997cef26eefbbcbe42e2bdca2b483f72446cc3da8ad2b02e9110575725d20a7c224359fc666a1fd27080d59fff4135f90ccf9e3bf451779ee89e098d39544d2e7bb6fbbe16f75682b34f3c06faec186cf6f1dbb82af54fbea13f52ceee0231564719a6ed00e479c7e48c9e3b8a5c545371a5cf6683db13b61484e5258f197ebff2cd3c2d15b876bb06846b9658822107b3d6b306349637e56288c940b89feb65efedcb16d8549cbf855bcf5337f57ab1e99089eb3a37530dcd7ae9fac3be664980360f40dfc9a58930858b02665eef4443b01a91f5b1cb892e5be22950a5afd4bebb09d820c42af61e745f4ddf40276beade382c8181f50b2cb2244a71c80c78a130a2c5683a6beb7e0a5546dc3d0fb73cc3ae0fcae7295273bf7814a91a27203577a4c174756b452fb69bd12709fe15069ad441bcde51671141bf76a0c79a27d4696d357ecbfbd5954fbe294ca8bcd246ddac31c7ce9120ec3fd640e45b08b7255c2c37a4781c95a65b92f2acc9c6d50d27ec0eafd2487d636c549bd9e4b15031e16a7871a6a503f75c9d8bbff292edd2f183dc8b212d7861b531754c0668e3645a0fc71393200eb6290f59727f6184c37c4c9c52055ad13732b7b36523049b53ff4419d6ab799bdfff404ff4d53a3fa1ab6f7fe72b23124c20aaf53183cfd15798a8092003a9347d3c9d6f5ba5fb5b811117c57c4af2d43f87cc0858e92f8a726cf859e13c53c6fec21a7a741e281574a6c7eb55dcb72ebe09c02964d79897a65d6045661b7baf13dc0429fa7ec0ba9902bcfbd8d4d2e15d50c78585d412b50e7f013d66d18cc812dd3ac59b6a4191aa393ef9abeceb794c1e1b11e90a4da085780f37793b3ad6b1f27aab71c9038cb353c5d0fcabf3c0a1c78e64a17293590dc7fcab218f84c8495b391ebe576ec1db725cf1e0690fcd4633ecc7187f9b41cdfc0ca428a12b513f7d543a5ec24fa81e5b69e57476884f9130e02483eb0d184b7e9a8065f424e8581f8d4b6d2c67b5ec5ef2f7a72726882da25db8ab6094266be1246efaece866023d239ae3796ed8aeabf8261c77fe9aeac54e19a0f412a645cd6dc9f11b38b8ed42c11908e2cfcebfaa7d18545b85473f3a226493d12baac1922fb817afc5b061e842df90ec360e14eb9704adf6b6950eaee85be136af6fdc4243fc0109bc8bb73e8b048ece7ac9cee5e97496356973f43772c61c8d664271c2d0a8fd5a6331e560de86c9d795a6a6fe9350c7cec584aa3e918856a1e32c7aace1566ce11a583f6d712cf016b7e1d89d37023570da1f0a33a5f7260ade487ee5fda70a4f7af8652d49b65bc8c4cbc63d425d2095f7045ac97639a26aa9ab8af90c9310547a5c4a8077429f015a54a2d37c13f9973a17af80f5420c5259e5b4d89cbbae2289f78ccef3a08e58cd0256c2d6997546be82b522526e6939fbfc5a416ea3e03bdd0de5762a59091cff46af219327c514e41ace47ced125dda2162e4a06a0a6c9f3bf40e6a5eead557e9962d958ff5bbd55865c036440d8d7c97d6cd3933f5775f28ec6ac58c8c041f1e4bb1e2f3cb02439baa177687fce47687067162791d669ee3f93be9f792d3d842486aa952255aead9739474323e7a6d10326485fa9db6694b1e575d29d45d6a7b7d10b3d261d64d206586ba82c69bb3a29986383ffefc22f8623cc90c87393c77df6bc46c45c95bd23fe98a28c3eaaa7416a381b6d44b639ac66cb532646d6708272af19cce288d1aec747e24d9c98993efeae1f4d1fa18e6aa7fb7bc77658c40dc0dd7c09a3d6487e88d818072d2508a398dd9a19aaeeed03dc8d406652c4909252c80905961343d05d405a2abcde6bc4de23dc2466461f27b6687795e2b673da4e2443dbe14c7388af2545c7d149dddb2f618d7e6351583596e40e6a10c98189f71668d76a7cc22243a0708419920a0c7abee58fa55b75dc3160c057c3d8e6be26015269590072ebf3ae808e8491188b4f19aaf50f716c83d86282880a46376d321b321153c5d052124b37367c46ea1a0cda0045a37a01316a75eb24c4b10207a3a37f2984408e27eb87cf35874f2bed9d3cf936439eb6df48f512b30a3703a1263c6a668446a876ada6ef86df2e3a2806a2025c2d05cbab645b0fb83eaaa861170ee0e204e985df32104eb982258dbe02be811c1abc8595b131ed858df2ef51754374fa8c37d1cbdf552f85456ca39f848a919567264999b1471a0d36d9067d62f4f41b2465123d8135cf8a58685ca2abaaded4e291e2681d2ba7411867343a94e629cdfb398e08a05f1952ea1a978c8b744cb034f0eba1c35c935718285239297dac6335c6ff4230bcf07e12e453b37a223e24f7e6b9fe750ce60bdb9bef037f4489585cd70dfef1290630fb648c312d324c418f1219538dcbc56661ed4b3ad905e0d82e64e1ad10e7ac4a1805a6ee45b1a049870b3a4a4983d6fdcaa8f6c1248f1c1553a2f3f0f694c94403edb14242bafe07f1cf8cd0ba47c1157068162fa43df2e2b92b17a2451ad2326b0ae1434171a884b19c3503c7d445a289aaeeb304b191a72ecbcc7234216bc6c9f97051e073386c821e8e687780686ae247bedceee5007f88058143f99f80e38b62c11cbeaaf7c88def1700a4a17d351f0306a921617d7482c8123f2255859dca48173410de11cde081bf4ff7b95fce51a6240a1f07ecbc0b4e6ee750f45e0df7ab2746a6d7596f2d334fa1fc7fdb0916cb1dabe789029a190c6750e543d734dfda6b78687cbd78b2dada8e337af39d34bc846f2004c0ac398bce564b232180e0d30f0f1afb1e6edab28ec592f3bc8f6823c31dc14e176360e82004815d74bf98da5d5195cf987f21653f524a98c497ec7f522a7c10e81853603fd850f8cd0001696c9475f998621ec9a74920c8ad78a56a4af0660daab01d7edd857cbac735fed5f40480187105cf0f498c67b1c134c55368054a96defa5a094caafbff88f9094596ec7ade6c4e85c968b9bfeb093df5ca8bd3c7e164c056a37157cf4e78354ed13e2fb78f81623fc39422a768d4a3f9dc4e2d395e4a4f13f5400947f0aca97976ce1a7f348ba4a1d7bb3e1f8dac2dcd605df4bc0a8e3d2398bf450ea8e08357e0e95c0ca0ae68a3423484af5f80f253bc73354998ec3de31e8c9d099f7e7631c6ad43e791e2cfa0dba664b6d6a8fe445fecedb92ee870969a4001a8a183f922880b07eecbad7de83401a6e56dd417bd771449e8afdd12d00fc0b7470f8b7c378250c834989449e23f20f6a2b85693d8ee2ce6364e8b4dcad1c2b5cdf8b4677f0bd6f98797106b6afce81dda6546dfb6dafbaaff61d0998fe76fd1641ec3e05c1c992799a6ff58f5137c5c15af65d04752c35d5516114cb6ec9250519587beb277e046e569d053aa0a732656804f958783e46270e49544355a0804ee993cc3a7ee4fa94a0e5a30fdf12d15151937bf374fe54f9a4958dc296391bf7007ffa9280051d448bb7875be7ec72c1502f0a6a072c8b6769997bf081197405821768028227a3d6829205da6d718835c2c18e5f523e73bc7e9ca9effc2966cd54c78bf322746c2ff0b8f0a04887011c4c98c323a319c594e3371e0913ec3d7be3cd344cd5d98629aa28a1eeff0299a6dd0f82a843550a36614d07b73843dfce59610764df5e470515702c7305a18c197fd7ad44c7b8a9cfcd7f2f1febfb545784273c71be7e0d72eac05f5d6da723891e7546dc4f8a72ab905d5be6d21c2c97cdac71309581e86bd5bee9c80b08b2639f699db0cf3e8159a373917a5a0ca73933ca4f72b7144c3e6f76832074e97734607102ce4b125d0670a5aa0d4942d89e55cf3ba6f5d1e2659660a3b3fb88d9b98f1ce20508ab272bc0c584608af4cec8e30cfff53d55ae8df8198666ce8c5fc03c41e0f1db9d960b1bb7d6a89e79c0d60d2a60aa55e47d28ccd2d652ac59fbd277151242f87a3f8753add9cfebe1dcf6e923d4e2141159ab11087b905448f830f4b35eeeb3c086ebd028d829c8e71a4a2b0666482ab47e49cb7aeb99ceccd9bd6524d57a3eaa252737eb71eef49767b9fb52433fc575311476619b43b1d4169e3e5e491e1df0ec48c14ff49e751102b98fff24ffd93c0f9d1a441abf81c1c5abc30314c6a8e9f9ccce4efd75e61fce3078448d24e07a151695fba2ecf1ad96a4963825648c67aa31869ffe57d2fa2cc9a5ae3a13a3c7af98504fbe189a81d2d8042101244e57311e740c87e83ad03c263fb67c13333d4d368da4ffe6b9d33a58f2b78a1cd790ed8aab44b708528a736cc8409a4693d928189dcb1098ce997da88d059713f7ef60a741075d3b058bb2e62f299b7bc4872149e68b15e54a6d6429f2f21b76ae99532b4e62f2edbe7bdbaec2d9507ab6af2a1174f5fe52f79e91bc7990d7ac59913e6e153f7cc6c8b912ef0a5c7be5ae7014d4d3db6b1419581d1d2553858b655acd4e8c005cd35be7c9f21f271cc9781478b5260e3cd8a7b3977484798472dcebaba44b934325206344f43a0363b9c3915f888e4738cf918f0ab4fc564725e29116ed918c3644cd8fc55359513f08ef29e2eec50db4dc1c72df61a5d9018da963fa8388f93f835fa842c65284756e2e1572488eb60a10073c5c9ec1b5c960a4171bbd6948d1d160537778ee478151ab1c39969c1cafdc3334a148cc8c25cfe748fccc644f80f0c84124c308a3cadb45d7fcf6ecea80ba765deb0329c8aee46b13f2106456ff22ca7e1b41c71baefa99d0a47c6dae53a6e31754c4e7a111e674122a08c3d3107608186bb64f19e31d7883259b2eda0d4ac5f5c88cf7b4ba360e90b36045fc4858327977ce532345336665750dc6a8c97528ee766d5df6f90aba4703716eda5b38a82ed27cb7d337222453a9e43eb48f3c95875333aa69b96ed846e3348eab23f148064824ea4929df9d91a4430de58ff4c4ac8318ba2116f505709e48b08dbf0ee94117398e9108b3875d5cccf88ec6178deb7338f61ee3d5b60eca66ea366c41375d5702719144f2dd67a5744a122e3260b27e25147fb0cc23f08716c034bfa7a6f7a9feb3fd822cc239ebbace513466b1a3265203075cb1d78b9d4ae60f11a71f878289f05e1b5f3a043fdd40b23c81a19aa0fce6a92bac00b6359ff0c5666bd54ced607f18e042aa3a769c39c25ab14d2ac8c8f26654d1ce034807a640db7effbea7fa1a117872342b0fd7d9086f193a704e52398b13f94a155471d3858131becf907a75a2ca66b2d6ee88e66152e49f77acd933501ea3cde3664c1e5d0785c8743d8ebb59d90277bf0a6e0254b2ba2170188b016d89d4ba061adfaac7bbe89e2833147ee726915bbe0a7c97e7335177c153fb03f39d77716dadf2b87087e2314de8ee98f81d0cc7e8d10b6ebf45bad2365b1e4d070b7c616a36155c86b60c93e5ee3d343da81ecc14b30ed67f8f259008b20646414ebf63a6daa7bc543aa3f7ffe73f196b1ed0c5ce9c1f5b8eada2f6c7d896060f6deb18583fcdcdfbd9c484ae5d3d472444b90596f5b168de1b9d0edae075b7d26002c667c8d89088d80a33cf9c2cda3849fe413882d3b67cff60a979ebc06a26b6e17f31a2572fe414c4da0011ef0cc44e6192207b7fd585394d160e51ceb2b7a99a5cd119bbd72f376c6162986246629fd7ea74cd2bfd44ea77603553d5ade65261d2a826c6407f21a52f30a1bf409b69de3198a0af3c9eebc6d19ef4497d9da50d822d0a01f99f416b41a18a6c50db41d3715c9a0e3f7bc7c522f3ff0f1b827f5cdec3ec15c3027af4b631b4e34c3d06edb512a551ad5c5d2d78df8f3a9d7e1db011345aebaf8c1b07a6d16ff69f868b80d038e73074af6fb0ea4e5e1b5131bcdfdd47c83d0441d069e81075547f960c7fb10cb74fff48a77f474065798a23ac29ab24d62d17c50b6eddb60399e7dbaf6a29317e25e2636a28503da59ff082fe1d7d5d85a0b771904f5653967791ab00dc771184fdb45092612943bbe43e4f618fa1bd49f6a8671a53cb585d3b0ec5ebf9622bee290fb3dd0cf066f2d082ec3136e1689d773b236a3d4dc80b1106acdf4948c929b5c5b4602c1fedf2635f4be78e2bcca227ee4f1f78a5c97aadea01c8c4c6aba9b8b8e3bfa3ad801a804229d055db020843d88f73312e92438bca606b0fd5adcd315ddb027fb5a75669f7da3e6d391a7f24d3cca26b5eedede38154dae47d635d952fe046265c6bec8df861e38ac4994ed25dc55524e49f7ea541af9c278b405de8d0647f16857c7c9c5d01ccfd16a70097a67a342f4dd58028bdffd0ae549dbb3a0c2f82cc97da0239c1285a1d57970cbb552a64a235733ed6b56136b5e5ad82b5605693e264627b60a21168638958840cbd997c27aa970b1e4bd89977a1fe89bff6a83f2deec331d02176c9a388033c8100b1df3ea3ae6a68193c17bc83365ba900f38b0fa36d8298213d9c60ed7c173e656d2e7118e2f3bc83580e4386e7175b411a9fc8fa96e9244f6c66f9d89371853f8a3c22c1126f33c8aa026d16c656ed3145248d03e772700a7d816a35c9b479171d47c91a1743bdb92d07911a3531ceb16f628ca400aba22031eb216aff147ef64d4ec62d91627e8c5ca97fb729192ca861fd7dff180f5fe96a32b3be62031c449abf6e35961466f6c4d45aac14b3cfe122758050191e9316f70f3fa12938e52a2c409b68c8ed9f015240f3f7ae16b53f21ee22cce45f9334f46ebe5a0a3aa236e9c07b84bce66b1459e8c87a608cd3783f6e2a2cfcac3ef5f83b1e5efc11303221b5637b65346d0a1a0314d5d70404e1e28383302925d519dd07fa7dbd2745a93715ee1fad675b6ee41b20f326d82914ea4ed1449b49715ce18a61c9963596c591e799c56ab2249988be8eae12e8a3a78b428339eae5d44d49bba67a7b8a0832398023ccb1ceb761bc18aa9c83cf9c88f73fee7a01b0e215a00633918ee76060e1ca1edb37a6bb47bca438ab63f4f223007c5723543e2afd39e82c0153a97a6cad63d761dcde734ea96d590cb0a1f21b1c80a7fd64162f1fa827b78af0270b0daf509ed9f6e61a3ecd409c01f64f43c1977f3a9338d2d336235957c518ed905e4e8cd18e6837e4e6c97960513cb07b3dd09dffc2b6a923d2f7e2164a998113e0a79ea6903d0573a2ef516cbe1df037345b2b41b0db53a269a8f97dd1d92512dca3c94baedc31b8093c2bdee7e3259e3f492c724476f70eabccd21f21ecce7b9f952a82d04ec7677582ee16c1c7981bb05919457a28da72c4cf7feb63570dea72bf4d417621b5d911cb4db796995a76a820de4d36a457f7b440692ff78d3b17f5b23704f404e64d839bf99d03d277fd681a98a4f8761f868208d0b2df4a94744067651efb7cc4404dfcc1f950e2245afaf8f5b8a1d7230218a67c91ac2899c799bb8151856bd0b2c2c47d957846c07c39c6da4878810eebd3ee886c1e7b28edfcb961a18697dff0c5faf8d30f952b988f284af3bfc9d040bcbf430f47a09aa1fe78147a72ccf3878acdd4a6d6f1f137da53aaa030edf57e050ffa23ee2ba51860ff3e2f089c0a9c160a93eb5ece7b1fded90d4ca87f5420d0fd0b77639f6cce31ec13da14b06bdf1d47acf156c14b73c412e6bc495c8f95c1de3b6aa4fee730d63aa706b6de7b9f46e5b90422c4574ec131a042dec93113df41b4dee6cdb69fc4199f1b9a535285e5b75f8e3a4b39445591f996ff312527bb9eb0133a4d4d31862efb1aafdb7d81e5702245de01fe227da6a8b65374280947038d3869aa054534acbf2f4fdf1465beb1e161e7cf6511dd0b99b25f95937838c2e9e9986bb7969f8dbea277577e44a1d14f9e356961bc3075a31da83a59d9feacd5636c663e308b706f11224ee3913d22e65eb07bc40e99df888f7db36720882c6785aad4b566865dea18659f869582d5420ff2e100bb776764515f29f9ebde61c6ac7cd492cbd6bc7b5064fb06fe2504a3f53585883a568484f0796ea9180c11a294769cd194a377efb848f7a2efe3732b0bd8c62bd3658e3d79149f9fd26033e4d67cdccd6b577cc12a7ea8701bb288bd5f91d8ad8e923f6c6817949cdda86ef74d9b725d02ef19f17876519449e281483eee2a6deb76ece2ff54b74fcc33200c872863d250367c740f5638c0d9e4e663ab88d2e64ea1dde926948e07c88300378ec952bdff66bf4057a47f587f00e999c69595defb8ca421e9e46f146b4bf9aec4a674b3be6d7bfb3e63d8be89ed0e2e2c293c3b9e73644c6258ba4d571b62fc8a1d2994f031158e06851190cb48fed438f20ca9e45b558e031c11c5dc33ae76786edc839da89302429a1f7610ca295bdcecd6b6d025fd26d72718de29dd3d882de8dc332cfd747b6e7171d8aed798d18822f688ce389997d0ee4cf1f464d044c12242319131a175e83162fd89995c4d5e7ca800d853381d7815413bd78409cc1326ba94a767e08bf91dbdd055cf2293fd4facbcb1b9315ac5d4e5fc16264637def32acff0f12bd9e8d4d820f566d66411fd9f7ff6c2e911439dc02a9a4157feb93cac5e7e0442b92d937e1442a19dd2e88059cbf55bddf90b0c40d43d30f53a9c1fd987b945e5953f378a125ff0df16c02fe2a1267abe0868e9aa1aa60f0de5309774a96891bd62656993baac26be9ea79787bfd512126229b17c1bc7284f5d0c42a23a23e39a95e512b10f8bf714984dcb967dbf1d8c34bf07381bbcc700494cf9c43cead77fcdd4e23ad3824a240b6a0a95ef065e1c19951505c65953211f7bca6f1a72f9c0e8037b4d0b917980ee6ef43f5eddad012415c320b69223131dc7677b67f200559d656b30752dd603533764d3c374f542976924fc6c01f36c05edea46621763f5e30e2e119600bc8ebb261dbf04d1a1fb281446411152379ef4a12c8cc13863fd00a7987acbefc9b9059b0727937e83abe287c9557e1dcecbe9dd774547d4c3ab9524f0f1a312e89d3a27b2e076177a08d94d24ea4ea766cf65b3d7a2d6de84aad93cb469355618f532d6acd46cc8fbc2f8d8ca83aa0550f790d5e76b7b544658d6b4824879977144ec5f780fee43596437e3161e714f60b5b3d7895cdd46ecd1201343ccb99c161d3644cbd49df3da208caf251356a968a0f840ea7772dea91dce1cd7c18f3eca3b3f81064d9238b982169eb878ae4d63ff2073b6328f0c470596fec660792b0a58c94d8d42c47166b89ce850d472fe05b12c0e1552145a4976897376b77d9f568440785b3f2f1674165668e0132993f4f85f00318674941a648b8a2be5f84175383918259c5c26ff9f71dfaf2b5eaa4d487ac233aaf927b1e25be24a46377477e6dd3edd4fd7516d73988b21b2f0123db0263df3fe5dfa438ad3bcf6015c64e9a931ef89e7e72cfc5381dd413be7050cb63754d6a44a1edf493aff03e307a386c84bec22eb38d5a32107e2be7e0c72f1d595cd4e543a081abe5eba00e93424c7cd1833ec9cbecc8f78098c4d9ff59ca5a4d5091ac5aa0b92bb90416232ba30a704306ff89134c08f3956e01f65bf7dae4996503e854139401a48c244f25439cc5e904e5f536d9114244ba8b20708e8cf2913040dfa7c220d2b1ddba8417d3751ef38d6452eaf5670eebd1ce0b734caf09642251d72d3e452216d466d741925d42b70ecb63b05a1259af32abb5af0b2e66443288131374ad3eab85ad848630c2d05f1e23d67cb9c54068db6dcadd3bad5374d1d89bed77b03cecf2d36bc6eb11588fd0b4ad9aa620e10398d69dc2802416b6942600c3a3b0b623448b827847e3e5131744eb9f45db1b8e33ddf27186a0ff03e05715190dedba561a0b16ecd01910a798c55d8834254d90831413269cae6f9040b8fb4ef11662d9857dbacd6162439f35a4b8331542ea1947784258b83a7f4a6a20de2407b4940902bf8d3a622e4489c9a1bf273331378574cdd35026789e30a61d3505bdf6d7221d2cd2307efddc324b46fe5817886732ec08e9cacc862f502fa32790554994ff0b16ec45ef4e9f31e9477e126c92a40011c6082d377e15138d728c4e829cdc15c1f67cba158f293f5151ac1fa222d2b6bc28463194367ce0274f34ca21fdd5c008ecd4abcfd1c7558ae2569d4ada5a67779541fadbc8fb32f4a9a97e21f28b01bc626276b63ff0c62f35da6e8907df54df8baabe784caa0230801e886e351f431014b31cdbe1d636c048d5f01bc25cb77e7ebb49fb72a867706dd23c4e8907059e2bc1869f061d8f95d068798e5abf24726efd514a362c5a73819001861a970940b17e4f5a7a5a8e8344ae0eb5fadd96c3fb8d2821fc77f3428d1afed188b61119855bd88d3c995947fe42d5c61ea8c806283961cb64d1b26e726afe75a5cda6c273aacb52e3b1d852372c31ac5de3aa8721ce498aee7807011c38df044f4fac0cd425f08d9ea5502b1cdcda8e0109d9558fa43c7bfd44ec41c8a9e699d4b0b4237f4fe4531e95214d9f3423d6b170aba113dd013aa274b1b44bb6461fb3d1c60862b24debe2a126754039bf309bbf2b5cba621e9127e9467946208007eb3d684509e77524b0f6fe2c9ced7d8479657a3d1b0dad1ace85ec6281fdedb78cba65fe43f994508c582f917e69dec716220ff14aaadb9b9e8482dabb6ca111823e8d3b4536a9ce6569fe5704d838d3efa020ea8ea6a150c5bb47af8e5a5a7b5011ff03ee935523853e49728cb3dd29476fbf4b25a07fe7c7e5cab8e4a00e6fd6350f43dcf76a989f1d5193f3a267d4783d9800ab51cbbbba6a2fae40462fbd4769389138cba7c32c44c4537f5fa1292c4e41caa81a2f0dca458236119f10766d758279c8923e796f62c6b9d7d0a35f853eab81e2b1d9bc2d4808f66f2994fa351839a4630fd3c3dfdcc50a0f59a3926aab158f2c6aab99f6f22f67095b49a27fa3de275e547e8572a785ab65f89abc1883534a766f07f20a64a2d3a2ba0bc0384e57cd34211f31efdd1d29aec0742506f1aa49c948a8bd8814d4b7292ae7f3e6c2b0fa8ffcb0cc1f491b6586ccefb938b3aa330e2268089ee747fe65d3bbc12d6d94e0c287ec5080e08688c751dcf8c1f8d7f1e3ad49ab6ffa82408e3e0f584c08fc2d69609d85ee97cd164d0c74c61b29def97db595287e979b671c68d2558cb8eb0ca5c06bdf6aed7729d7ae341e8e395b1fd9d28dcbfa18910ff0539c9f1746b1636bf67d5694efccaf4d4fd11edb51401505d6f58774363ff00f8ef7f1b478c3f67572cc3253bb91a8e61b2f8a14682543dc042d36e4943c73fa43fc602cb581b8c0ad974cf0a01f59119657fe7d7e94c526766e63294d637b53098b7eb84dd8015aa30c2dda15824cf696ac43462483ed58ad2f58eb3e8b51cc48d12a66e309893181a4b8efba346db459a2513fc7d77136727482c72cc064b99a9058e26f7c6d18702ab95174457b13f069cd59f5703f1ce133e731502bf43234a61f219bc6672070c5a1376b8c0306ced41720b77deddf9c3a0c6ab752ca19d4c854d8130df340ee84048a11422b08e3c167fe2c150c459154bdb60688d178f5eb4ad6a586c3344ca8b23b0e34d7f1bd66ff0aa3dbc3d231d6731ca66bc3ad6ced708da0e5c4c4739e3b5e8ddef9d472e15e7eb7fb2957091cf1a9d74fcfd3b4142086b6a3dd104a782c4843c5e8eb9c35a723dfc99faa3f7e3beea275e15115ec47ae433d82b5ffd5b6a0ab06547c910d8a2582ae21ccb2dcc7b7cc4fa24baf8ed1993222757f07beeff9c4e942e9791d1c1a4820c76920ec251a97d1650507ebf1490b4fd2632fa35642ca5478ad39cd97dd6838f850417e996d0fe7eb25251ac5b760e4d2629e91a292681fdb89ce2dabbfab1dabb3ca71b67057c6abd66434fbae0304fea15da70f872d200a3b99e9907313a4823f767562ab4bba536130891f5ad1a98eea763593df09ee2b20a792f546ea9bb363ff24ce1a241b2fbbbd44afb517f152676caa1619638ad79d291a7a7ae2b7557e779de0269bf77e1529a80bab879f047e5504e73a773caa9f3a153ca999f2bd894ef55c5829f4b09a86a9a80e282f1867be92cb195f58271cd4437c6bc065475d173949623de9ab5ece6e4f31af41451e8e8966f6bf22a8dd96d35d7288901d22969a3e50c4187b5c249275f4bfd7707d50673a66c77e14f9bfc3e66b344eb9d55415e5762e4e4d82cebcad8297f88b30bb546880f56f5cdb073bbe2289052cd53447474c7e45352200b51fef07abc63b601bb81693dfbe8b5563f8ea125b319869bce2ca1dc33847b69acd936e8b908791ec8bb2dab6f8e767b4c218cd0418f72387fc7ab0cb6ae8695cc2d210b419ac011c51ea712d3bcc4dedb809454585372b354f278474ce9090692c09cdc2aa84063371513ad1e6bd88f43fbd828c64d3c30da4e03d2adc44391324312bce03f47e2dbbb08377f9a2ef35696fc2bee16ad10e7175f5e2b419f7621c1a3f2e72de52ce36c9e8c621e026fa58a2c58046ad7e3196f326066314cebbcaf863c43a4ee3d4784c1efe2999a1ad6d59162da1c83fd1edb4ac213eff15b49d99d6e0ab7c59aea4515938558ea2afe70493276129b9c6e3f0f7db6375fc46d4aa5692cbbc68aa38a8e6e31d7aaf650f1e9ac6e9e95a46a335638d7a506c05320ac487da41151b11c9698e6fb49629613392e6a86041fd1b32715f081268868f7fe53df24a75b97fe8033e140a01f797a983b554795c031d783b5f280d4fd8e29a204a59ddeca9592c50286c237eb1adefc0170fd1e23d13f041c4b16eb686b5a0ff0a8ae0b766f90076fcff6277cf65573b4e6371ed30c48042df6a52af6e97a4206aa9dc9c0c8e71240b05c0baf6f71ab3c91a0441ad25b5a83b5860a477077c3fa4df032faf83082f7f2da30892aa92fdd381104b022f17d6cff9e780f0d12f7c048a0c70f85023f4f66b99656b08276c12f1e6ffc5dff2a435b54279c942ed390a42d60d6ddb8733a9c2345c7f2a40a2d5fdd8d2dff639b8c72499fde9913fe982e1d01be19042e3b9f7f16521b66d6fda0aa81956d354555d8266fbc50a3d89b70ee334c9755c5f0a9676f4b9d08b41293dafce373cd760f4f5cefbfd17faed66edc18a8e69cffbd594609e6dc20f4d61f9c316518c4a6c71950bdff4c8e472b458477c83f0aa8ece5e202c419388dc76eeafa96a2a486502affed95de106f9c68ec2e351e2dd3b6765340c18ee6ada2ef1554a1fc6c1f117fd71a5b5ac9dcb512999abb9a940f60c176c1119981477ebcf4c988f41cd35fef8ab248c28f17fe059a640ed5a16ff00660fb63baa66aceeb2d6318b6fe384c84068866f9d850911786726e201d0b25c4ac0c4ab56c5fa8cb5f9c6f6ee99002d6b74f51fdeee6a7201eb887280dddb549d02d3120ade51aeb34d4a0726f755f6abf28b628b7ebc63dfa04506983266356a5a0864f05088ce7866c41bb4cb4c9bee17c6650ae50d7492d1f1d130c53c2f07a33f4e2eb4272b11cabd3abc3e7b747617dc40ca7a9d27e87e0b2476f3c927e7ad2f920be0c8d5a215a51722363b609bd712e5332681306597a4fc19214da00c17db79a48fa1f59a26d7b2fee93153a5df2615bed5e66d12468c7e481192d01dc2b1a64f258db4343bc2f3cedf6735c5d5a706d9631055b9ff07fd6597d62e9e50de4d15cd38675f5192667ed3e7b9b80f081e4b0bbb01bf385d648e99a5a0e7dc07e90876d5860ec83dc0da8e1ad019974d9c6b25b80776f798c423c75b80a7ffe22ee8f09748852d2ea89f092f50fee9ca7ba6315281f2bfbc83c37d63a65daf241a7be8416c2f6e137e00232356345fac9f7cfb5ef3753352ac5e01b6418f7f90a99768d7e37fec1a1ddb49698cb6e746d0d2b7ca1f8122f352fa26bb0cc4adc47bd0d216f2ba4a50847cac2af874848a0e04cb28095dfb8caf9d7bddc540199d3cd9ecc3ad0aae5ddffd1f1971bcbf4adb761913bfef06e4cb80dda642ebf5c53ffdc87742af71e619d3dcab2f855d4bd9112e8d35dae94ecb8609ec82315706aee554898eef86bc5841573f24c0cedaa7bed15d39cddfe31c385d360fe5732e4e98cde5bc6cb4a9d36dd712654f54f6c9d76ac4bbd8b39f88b5d39286b873e40321f521ecd9711bdcac8673a613595dab9d40ade06a4e58242041ae1c5977f3b77a1c644a8695bc889a4636111b336c9bb3c3d519c5a93c5a2984db8977d8bfdc3361196359c950ae6ca19745766315ce8d8e97e66abb69050f3c459044f3759b93e65eaa6d112eb9ce238f4ca481760111b27e8fea040c15ce3d76bd57dfc0e8d6abf79bc380d38a6533a369d4a9adac6733e8ca2a4252dc33a35d76402ae0f73cf85b867a0e827531202c703b1a37f4233b8133d9b44b5568e5843acfd263a0e7f6600978c507def316644d3933930e6ac4742598ce4a5ae6f684b173e20286762f47493b9ffab5be9a1b53119a27a4839c2d599f848caec8a048eb78e46f483fe72de815260dee010c22f5bfb8be4bbb1dbae05d4d3fb5a5e7a14a6e8bcb1ce2d248ce97d3e7a7c19ac0290b19c9caa73917244c4b416afb76adbf3bf637a8619f6a30fccb4b1deb0908401962a44994fa3b34cc5ca9ac65a9c74596cc97c7769271602f4389e661580b9bb867a6f321a2d9884592e7f145259a94e61e23621970c61370c11c0cb85f6d1e8b30f4152ddddbc10cad04e974bed4aed4e81fc3442aa9e8bfc0a4438cfc6a8d25f828177db07cde6503431505e021f48f49c1a2b884da1f82abc134bbdfdc9557b50508a5c5d701d8fb3a98aa4ff4d060b257739d658031ddf817d12b4a08ba6ef0d85355f2afa1e3805c5ef729f1e5cd5c0e658ddb89c6f9c47d6b096c32476321926270abd06b56662e9401e4366fa67a8b8f4669d983ed4604afa4289b9bf719007fb90a7ff5dd5e2cc51b00967fcff9346bbaabd93fa6ccc57c5f8851419f3e57b2334f0a05a135291e6b53fdc102de93a3adbaf1e3a7866958bfe355aac018385bdd4b5130bec8e8a535ee5eb50fc96a5465201c2e2a55c4b322a2e4aef0547a90aae4f38685528e8e26db149e460d59a9aca1e24a9c1492404a1bb522ff5eb289520075c6d7db471481adb34ab8b6408f8363eace21f2c142f4a94f77763698473523481181c18a61400bae0ab05a1936f7956e3db509214e5161db80f2fefc6e71867a8bd56795b72111ebe3a6c4428f0d5e93d36c9993eccdba1b5dbfa4c037a6bf7aad40a8e694408d627b5e0d6a1d72bef6159301dadd96e6f9aaf25b5394362d14301722c8792bcdc76d44403ffc1823c945a7056088c3f7ded0472686a8243660818596b1efdf63ab962c00765cd5e3ebdeb677b9646023f7d148261118da04ea346a9c52d2fc0f3b16baf7b6c7ece9f0ac496111ab3988b82a319c9a8cd81bd3cb984fc882227607f2dd6d1907d60f426c868a1299f876a7120db453a18216f31d4c7fa79af7a7eeb78ad2825c4c687dad58311693199880060bcaa0d809dda0f99438c8dead70ff6c927791566f6e917024f7bbf88b9c85e4c90b5582e43a46ae041134b36369f1546b69b75bdf756165a64c13f1e7584dd1b9d1f2c97703e89becd7811c364e1064f91056186ce0a8c97a5534c81ab5d824941f92aabe7605e2c61121383242756823932d0cc9f3a2b6b784ce9825957789c08a5b4d7402d7196a6dd8950001843d2f3ce42def950a5fd8aec036483af41747c1198bc1c7d65393004383c2b5a2763173f879d75649fd47bbd4f7e0b223505cf9f76055bc6cd49ba0840197e6068f874f89cc73743270effd3f10ef6c46615ffed10ab6d9002017cb0a6c584101056ce40d3b1c9b7f2680897426014e23c7934886d959df83c062998564e07802f8aeb153ea24f811f5bb76770bfe09deec369f46ddc901492097cfd3a31c70e03f09d03a59027415c02d3ea55e2eb5e039edda6065ed1a1dbe3b3e75c308ac9cebcd11ec968345ca50bb5d4cca04a6892e906bbff7aef9076df26e861585b81703b89cbf1337191f26cfcfb9c6e859fa90ceab37337f3578b78a2719ed2959225ec23e1e27243bc805177e339eb58268b0a1664a29a4fb1103ab5652586e45e85f4dc7c93f1d846aa8e8052a77032b31996b4cbb7e7f40e5f4642148e3e1f5fe8d32d598d5e7de5d2f3c25cbf106e9ce8bc19a5375e61962a4357b81423a936b7310294948ff957caf6ffc4c8d4601fd4b1f226eff43b8ad651ee6a5ae0d170b87dbba2b945baa68ec0a95fa49936f294a59ce427d18ccd504041c530ce4b1fe95d5410261d15c7b6878ccb6b367020407e8b9d02b37e21c830911673306ebf5ed1b0c88a150dfb580e2af55a8c81c6ae84c2180854fced850b6966a1eb8ca41ced73ee43482aa883c191c246832aa81df095f026f0e7dcbb717c2501f9d3892308ee21d9f4cbee750f39d63d21bc30284cf246841516514342ca237f5caad60fb4ed6c19518c64e56db3708642c7e9d1f345a633cca18ab665d9b324618cc9c322cc293cc8c347e315b9907549c8653be26e204b5864a415c418b395821e9446c3e16b20761a1b668986586abf88d3e77b7c6becaac803568d8760712d212a0e86bcea113d03e4859f99385e7d80e18aa1733ebf2c6ed0b57d76840df485172efd0a68cbae0685d82626a5970cc7b71757a204439769e31c43d64aebe8903d8aff92f26d5d5cc7f293027fb0344075abf2168f97e61f65be32d68fb067f3401a9ddf6a2a8faeb589a708f4606b208b52b285f8cf02e8dfb25398cfc54fca1fab8215b5a806b47078b461a2187c1f5c7bd9ba5a12c6cbaef2e144d95c38cf999e2b6feeb7a960347d16d73c2f40a6a1a7d9d4c517d1d25a0f250602e167187c856ba9b4b3ff6d545ca416eac723c7461890d1b0269a6907881e08588142ad4fded241f5fdac569cbdc51cdbc7ee70b1dd0bcb900786e8af77453f1dd03a4d3799814f0e857fac4648be3d54302b503d63a279d51b74680d4c7aa7f0ac67697fc4596265fd3de48d98b9fee8785b49a805f15af949a4de6fa38cff221a584914d604dd80988472e6dc0fceb584c6cbba263efd026dbd7fc264e7e26001ac8b80bd62f8037eab7f0cb07461c056693827c93408081a39510ded5f82284c3b80a68f492620fbf1f44335f4eeadbd6ca98b89218376734b68c52f3b963aa5b3515aa1d81b334d062f5fd9b5dc9a6a0d489ea7c3f5da26ef71243a15e042fa1dc712bd3b4ce500adc319137cada8cc81da165c43e4c82d9bc71fadfff9a9fee9573c7190b99da8d979f799f373922cb14485da456c624f46f96b62067a0009440ba7c69c1442fb88be9fc011baf1ed01c956cbd44724ee0907d5c0fedad59f0398ae854fbb7cc8508c79ea6ad73b2678f1652d904eae9637549105227d2fed4be9815c2fae4286100275de7ffb95b8eef44a782abed0ef078e1059b8d5bdbab891573d6ba3ef729a31316bf46820d50e6009e37185691a1d148e005a5f2722ef3156d68af435ecff8f308a0e0f795141fc8e0b852cc519287df37e9c1d09a8b3e1e7d59d1dde2bbb36503b5c398f2cfe0b73467f86a57384186bbcffbb31da1bf01d469df2d99189b80ad87cbf37318d91df3e79b6f8ab90c6b100dbb5a025ca61f5cd925940c8c19a69877e992380fa4e0a1feecd8e993c62b1ebcb0646ed764a16c9cd7738f8f7c9b4e4b47cee4b78232e8a400fa272dc6dcb86c8ac9d1ffcc658a01593aff498f04f064a9e640ad8eb2816947b6195f379b0995042ffeb972c1b0001f960011a6a63ca4a4cc3d6aa07eab7108b2bf556c2d0430e3a736da36d39001f83c39efcd302527337cbecdc580dce3d19408ce245d40a2ea563902e9874699e7804a977fc52c4b211a751c7ce8f901da88ef5695589fa861979dbfc149c906345c496eb5f7de3b2b0b5abf1b7011f0be941e137a7993abe8c599a293f8b0c3dbe60554e4044fb59572623aa233580c818f4f0f61f1ccbca6a978db9292012cd5ee8a57b179c56b124aa1929d1b52963666f6afe32920d9cc7a4550e7de8c14328bc0fbe661c761713330409f2e45618f8717bde60eb79c2ea3f51418630692b1935c912b6f4dfe4d82b0716d0e581e9329aa4b63bf786b1283c16335fc6cc89a340556095316d3896e4c9d6db7103d3aae709de71608dad1920b784bbb790b696e2a8dd03a4608785835306d04f5902e87641ded2531b6c3ec17b17969aa8effe74f5629085dde674b3ca75c5038f2e20bfe30b78738c2dfd8997ec1dd21f5c163cfeca76dc75ad870d6c7f5102ad95851f2fde4c165bf54e0f832c8fc6f435c83b0b786e910cc4c88ea41ec2ca17095fecc8a4502239337be4966ad5aefd33d2bcf77c8e939fada505a2effbe4a4b15753acc71f157e4102cce5b60288dc668cb6b38db75196fdfe251de442ac9997a6dda22ed7485ec9d34de443a285ba25deb015f0557e2bb44b11b134f9c9a086ae7ab919256526f7194648beb600294b171901ff3e01089a60016ccb589bec288fa365c5031967684069a51cdf9e7bc942b110d55d4a40aa27beee3fa423939493943316b1bcbd68ee217d56a8fc48b645ee4867e1659361c8778fdbabff68db74026b47bdb211639c38db76b11220cf842ca649be2340a82c865f0852d2da2f94823ea41d93dbb8e6caf161d02a39292a50f05fc3f2b1fcfc0215a5399d2bb8e557d3573c7c35b281dca6eeb996cf9164febf2ae85df0764790816d4f5d54b3b1fdc8190cd176ca43c058b63f7d22fa48215d529e87c87e3deb3e063492c2c6649e05378fa685e08fae7d77cfd8e9872a0c928984ebf1b53e23ea21ba476ba40257fcef041cf80bcefa7784117b0368a75f4da038c97d52ac0b596ab39514e48b80b2c938fa50eb81bfe516890b802233343b5629c2959d443db3b1363e614dcacfa03366047d89233f8a0d0c6ed77945bbe67ed71d331fe21b1b1f9f3f42cdcc095a3ecc4470a5a2f4d703ca9c90148125abf424f12ad1f1bec48ed3c686c6b79724d06b843079943c0ef3d561fadb5e1d268b1eb25801b7b4570e3a63473fcb7a1d8524939c300483ba7e548562f8ffc7f8a07d9ae19b8123bf0cd1df3b81b526476e97606a56c9c5b08c20c8e30a69767d42e7f493ca5d6a7b3ee35dede48c79b2566b135d549bff99a238a34f6cd991a9c39c865e600f68092cbead2a5f3584225792ab3dfd7cb3d7b31c6bde77813f36c2d187d57a82adcbb11c7e1485a262f2b502beef0f398a0483868916c715ea3fe22b47563831a98a76e95e5dd77a905be435933e207d1abb5371e3f16b725874887643087654063aba52da46f4e747627da4ce5ee1083191a6e07b0d24dd66342422734ebfd97a86d406b8e8ae335d42ce5a53542d861e9e8ee7f691877fec040d08161ad4167dab1e9e7c7bc33f2cb46cfc3c1da2bfab22205817e398b9501712c7ea7f656d221473eb6be1a21b2b90e926dea9de6efd5dfd4df36803c4c6098ca63c646831f025256760274859c0b8f2e172beaf0469b03bf1d184a49f3f3d7e6a2292cca29fb1284a58142a29fd8b0ab849041e02b2c805a16768c5710cec52a31e3463ae214dbe14724dad34f7a757f4947aded17cf3e7d2fc5730fc98ae904b900bf9b363bf01692d07af8cf41a8fdf3f46e92e59a4543da72f5dc12a6b92d8a49355ea2ccab77ef8684e98e1563e8417b31548e0102a50c0c9a710f6af2879b149331fc8cfd654a4070254ecf6bb853c768e53a9d84647f3bef4eff9ead0e0276f57d7d7e40e4062844d9193b0f4ffe7ea3e701db71d7b07fb8d0f0eda5c46baeb8b5307b96160d0529f741e54cc7234da0f18e66e44fc1641d1118214614ddb48b2c57573c46621604e92aab445ce14db604c4956d63cdee6f4d88f9b534741344f0fb7d7712d433e0d4dea3f9445db523493e7724295b21b8ff56acd8542488ef542d833b1ae4698718e6849baca3bc309b209f4ae643719852c83041715a0b30790206d9630ac1ce48e9691a403abf028408455ff59b6557f59007a673c4a16ee58415cd2f83ef5417096a4381bd45a64a7972b5156d9e1cf292dd03dcc7a04e7eb43eca6896047aebe03bc3f1caa12f7c090a6dc1eaa165bf7af768d6e9f8ebd601092537b91314742c8aa3bfc2f3cfeca13dee9ed906f6f363edab2d34c0bb810d4122278974b59e681ffb784caba399e59fd481bd156c63344652872b90ea21bb0656830ec76bf1eabc9306eadea1bab9c8d69dc81b946245ec8b0d8e6cd3bac6628815c19bb15107ff1f0928fd01021bdb1a56f7d0b9036e77966d84cab3f756b679da990fa74219d1e6d7f562fa9cf4ee0740530a9c23db679c85659c9ca64eb1a9e083c0b1ca5e26a11c93c89ed43152d673a2bda7f2c9ece8d9d8bf34fe6f33c848a6f4aedbae0c8c7bbad01b8d21e995b325cfa57d5dc944d7b1daa071dd736210ad0141e057aba60329cc9bfabfb84b8fa531a390593ea7b9ca0388f61df0c8de9b48d82c6aad9e05804d1e9b8db4298db45cb209c212db2a8702fafadaada38d2cc79f7fc9b896b9c845a48ad797c172366e832dfd72996329373068cba4d4a600485394129ee664ddbfd91f3e4f127ee51b6d5b458b06f603a0ed79616ef1ae9d0201a0f08dbe32cfa5efa43d46a0c2035a15d1ffa5c03f140cd154bdfffb70e1b5c237bbad4f271c266ad3b522231cf22983e3c050172892d3edb5bb35fba71f542781f63f9d01bb2c05fcd30b2c17c1b17b3cba0e08725d044bc8a165db241020bf04dc58951e7886ac56353ff50a14b83062003d4aec854b7d4930e429789cbd346249b1652595a194c0024699d848fcd48d9a0057ad7c6a36a792af213e064d92dc916da687874228034c463580699b681e5763d0a79fdc65f99e84a7010f850551083479c02c6a5de4724afe277d08f8d7544dd9bc85548783dd152c4716c4beb1abfbb654840e370919241d325345af7d99f7365019b190465a1f045dee8315c2eeaf3b1fb2b7d25eaee4b12a6b937b175752e91c37f935e0774a96e4a2bbcf0b3d43cac44c85b9ea8c2c0e7adc74100eb0af87fddc900fa797ff8f426e44750d0f64b21bab729d58e72d975c09a73b57a60d6a9dcd445a8e3a42f8dda2e2acf887a769ebbc93fb823da5cba8f9763a2749b25e93d3a3734e0ed38f9ea03b911ae5c9ebfc5f1e60e0d6281fda5311c96e3f1be369374eee201881aa18608e53f280b7eaaaf9dc97ae7b6e68f62f807067856ca72e559e22174fc5bbed7478f9857b2904fd2344df02eb1ba78846516a9057028f743cb3e0a9734a657f4c558b69ab463144f53d1f3095e264ad54f9ee97c9c060c23b021443257d0495b20be24601ca8c813d6808c14e4260c08b29cf01caae95749140ca16455ae09803126cefbf6c406caa33c6eb3565193937c118e87f42df4ba0a4986bf0b07ae82a4afe0ba98635c6be7200ccf621a1c0e06f0fd3442e0e6df206758cb75e74a486a8c0475d2d9fbe89f502830654c8fa759b459d0376deb122ae4aa8fd7a6a19d731a7365c82b1465aa3f77234dc4d936b527f2ac589d0e91325dc43f180afe5c28a562dd849485af63da847e9d929150f26b803f816e8c77442e94706c278fa0376c9f7a75c8fde5908295ddd75cffc6c1c9215cbb9fac7e9fbcc3a52221d71785b1f884da627fc8facde4e8a12404cc721a63ed3641c8024eb6c77723feb36a936c37a2bc6bd8681d5cf73f670304836625397a1f7667b8b39eec03ab7bd022b9e2fc3f99228c87f42959e35616955bc9909b5433847d51d8a86c2f192f844a9f687e3ff0e401983ff40b7b45801f7875e81c0848ece56768d5fd55de090f8285abc6af88ffd2daa4e5853e8cf04ded17f7d03c023bf8ab8e5c69d7be0fe97380d432fc3b9df27ea16801ee3a11f21c787668eabb7a598c5e12e336adfb3a2564001c6a7ee9eb10891a9bdb71a7eac891187a8986443e350673c1d721e2ceced5e26baf3a02ced6d2317adb2685a0e7e29392916c2b3469b4d8362ec50ff06d39889c301e5f1c164f7fa26f73b276059509dbc25cb008350b7cd5f344d7e45ff10c4bf6abcc2377f06bf4c1423d49ea8306dded785e277f7a90e844f5ef30222f8907b67dc3181719f65b7cac827e9a1791a0993e809fc104bf1b89b224276118e2f1ecdc96e7d396068f77a4204a061eb6fa97ce37944952383d39d0a0a816d682025b8ad0ccdac8859f8399b7f23801702092c691db9ad213be6f765091ea9ac4d3c572642aee0e178c6b6d162e70b72424b74ea063e9d5e1f37b56042727dc5698ccffba0cf6d4d3fd0834a95ce5d1da76f95c2196b9f93784f7995ad9d7aa4e8ea6dbcb5fff558ca55cba08b4cc1f3b0c56bd20e69eee2c33aee1e57f2adef8573b32bc6741ce96c7a67ebfcb766732395b3b7cb009daf6f2e714f121556b847be976097edf913ffc6a969ce597541be176b2a138eb10a47a1c6339c5b2aefb52252c6be7443b0497899b922210bf74b336e09e88b4a37895f308ef477b3864d2094dbd7236371fc7871fe2ed56760127db099a2f92b47bdacd087aba54895fe0629df471c185389ec2d2e738feea429675aaa7d029797a195fa77b87b441b4f57d269583cbdda1ae14b6cb360fc9df5524032ffbda6727cd71ecb5bb42cb5a5968eff5be8a91158912b59c737d666b8b33129ab2c0dbc644a3b33aa0231e54f25dda44088b1d410924eba6f0f9fdddb4236676d15c9b74a5db5eaca720272c1db43eeeb0308b94987535af0e33480fbfb8d0e4b4d51c1c73ed5423850e07ed299aeac91f1acd73515bec1943e2590e1375cdf06ef9220344f1c785857c545e91ae8cc787ee81fcefbf35f66205f937a704e24731293edfeed0629188075a83adcbe9a2ae1afed87442db5b9917d1d5d63b3b3790126aa99228c37b4a26ed7cc4b8c3a8df5b89b962c76de6ef0addf76b8e5db51f261757141bae0b52d85873eb030765dacf9f5372489fd53a180aea93980255948a54b33fdea5e1701411654e3bea5232e9965e0d68b64f16743d1acd4ab7ca3138ad1e1550597fd0430e1e782a31871dd2f87afcce08e0ac44a91f879d52e155b636da28c89060c6bab37fe6037d1c7c282906fc3d6e0644d8f57aa4168864cedd12bcf654602b77c47feeda491e2c1d5f69cabeefa580104f3e1a2aa7f07af74497f7550ceed72186e530541fc4a0595a7fa942abf2e62bb1bd7d37583e354d74f2caa7a2d5122121e40c47bcce213ca30c61ff201947c09f3b3238d140cabfc037b373b82f0af3a343997bb1f301aec55be879f74762b47b2b992849f281b5c687301761408d26df014ff5d29047d3c5444f84713d70e32ad3c432b66d8b01baf6bc80c2330229b765e8a8e2673984714f3a9b8f4ddc63b40553dda5d2cc6a8ea5560815a45640c103f8976137e0145b5c51892b823dea044208918c0f2f1e5dff8c5b17bd5dbd26b8d960ab8101c5f1feb3e95d1874f86e0d5602647a53a27ecc26fddca6abb0488cb382ba39fd3c25559c44b6f394efd44044cfd670978fd277d72f643e89993f7ae05f3b999741c48bb1cf699aae41e219a502179bde40e2136a0177e2f4a7fc32b2889c18a9b4d0196b62c8b8ff6b1db2e0704b6b7198bf6cb2be04e33f7574f502e7a8cbbdbe7320adb4a404d387cf9f88d5841453cafd0800e92211d663a06170a5984ce4bc571720d800f60f1085b1dead23318f2e0bba99e1238b94cf61dc709c593a896a4ac75c4bf8bf95bc62a1d751ff375b4f68787314535d30eb25c594fe0158b726481e035cb636c9828dba2e2427f8c1aaa07c1debcf1bd69bda6b08085b1467f237214877073312fb333126ab9f7fd125629b015125735b01f73ea2bf81a0e544f193e596cf18243820a14285c1bb850c8079728e2c3b94ad68b85a164529408d6c37877249f54abc1b6aab64d1692608dc6f3cd69347fcc202f254159350086faf15b1e91647a2431052cd8274650b39e8a83153a6f2660c4bcfd87067bcb3f6c535ef868f31e1a46ca91185b27de366b1f8dea711bcfe86b7b8278cd33c9c430ac6001e2b55e31c926c46745babc6c0c4ef05b04e121ac7f0a230e1193d42ce85b4c73d942860a4a420e6325efea9b3569c54c67ada50cca26dbb535668c9f7329e04743d8c65260f9a1b08f964436ee80f44c435c025efa9a829c9e6b617d4a9f6699f2c07782c5e7ddc97bb8c419a1d3a329691b3df6f60af2334e057322622d56880c458f1896aad45b2fa2c364dd51670cefb65de2051294440e8a1ac543ae4b71e3eaf82fa8967a106518fd548bc436805604d97ee1f443df274ff833380e91e23c6102c581abb258263a9a41130dfe382438d6956e659d8fff6c75630a7408e6ced0b7053c59d240a1908dae66a004c2463ab9c1cb81711ef54e57ad4b49e5f0df5522d1d67407363dabd7639d2b7935859c7bf662ed68f45b2ae2a1ffe5b4b62b6250812eec8047d9aba9009e6b80c40f200044db30db0539029102036364f512d3266f78d834b43772cf14c47fd6ead1f7e875dfe0986e68f2fafb871216a0b89b8d820134bb7de323571e14a354d7289a36f77c737055fc0a715065f9f17994aa15fde1e1007d578ad9cc6a598e79dbafee17d154fac4db4afb9ddfc39165e804a9c6cc150b1326c7957049a789f37eacfa2a25c96c292af48e3c50f796169a41931cf174be88ccd47b10b0ae82030d1d7388f43a3fd171e459d13714a44cec5735205e7d4635db5f94d91cf1f70efc3d2da572f6953b13b369749913dfbac2d8d64b04f9b4043d190f751bc3c76f9ee96e45d6535540216b3caabae9b9b2a6a12977480c49378676b0e9a3d339b52f7b7b0f9cc0f481891e2c99ddbf249077506e4bf3a594c4c722f30c7587dcef330ea76dc8f64be99ca2135c5a8aa50df5790ee5dae0d361d438999f47dce7970d99042abcf9ef8585f4fcd8c192ec173725decaff91c27981820dea99137bd9407d5d54433e22444d343fd8c5bde7986dd137ab29acb44a5dd8d86292e4a44ba024bd6d5c5a26a13999d00a3effc112a8a57c3a2c8ccc9b3caed50e5967fbacb1cda570bb9479cad1284847cdbfb41700700e1edd6b8f7c51f89edbb781bc50fd800820b9ab21db5a70196a3c3b1450ea75cd12a2ab83eac5208e9148efae2799628c4717423c3a4f5f97e53bf0e57aae8023e0831ffdf728bc272c69f57b4323f506f6853866fff293a4aec12e6c3e340c4b415a9f45ffa22d2489309450888f710765f32a14c48d975ce7fe7e823aded81a7ef3ca602b4ad8b0e50cf292addc6113afdaaf59f37c18eb08148fce477d888e3e8151fa7ae1989d5f2de641c5748a7a53e58efb670030056a656d81031ab913185af9c3924d541ddbc9a43224634893e598a095c385a2f91e7dfb53e25bc7ad2a67d60590548a041ecddcded8b2fa717c58598fcfd90b6fd3e1f43a16b2658cb2c4062c0bbb52f6f756a01ac8ab9fb24dd38af1b3489105a3de8c123ad9ada0c9934b770bbc83439ea008c57fa98129fc26ac381922e9407cd831eb91037390db47e86f0266e0f82ae90fe4f19c1c461f20acf57d99a2ee48f0be6cd69e406bb5b771d4d97ac06e5d07a9a1cc4e5e101b48eb0504d98de5bb810ae41e15d60ea0e58ee691688fb7a1107864938535e4ba746f9b3cf3f7425f998e3153c077a72a50927ca67f98e2ca37245faf2b56dc24a475dcc9102ed88b0a9bf95383916e03ecdbd0c46883031660115006cfa136113e531f4e3e554592988366f8672bf987196136098fd9444e9fe611fa89a84326296950b06209ee9784e1580635c485d9bae2ab9872436ec51f4ef9c68a002030b5b337ef115365222aa237629a3458ad7153e98cb180c96b331ae5135b026e9c674c9f8777a3d42fbfadd7168d5e5b6a3e95d30340c3695f219e0922243b1cc7387403736146bae8c33421c4c6fa6e5df40d30cf9f15bf2d492181d8f27e0ab17d1cefbe5f82248d717fa8b2c9b56e8b31f240ea05049e04af2962ff52ee4e8127685e61bc88d3f28bff387eff56a438d2a40256bf6c72d83946daedbdf7fb83040476455ad3b6caa4eb80a37664886453538e27cc9ab05c6c68e5ba1dbd6c3a3e9015c4830295af080e0050427cc9c951d142f31fc386e1dbeff14c791c27f4df4d3797d691c8ba9186b4ae6b780193d72ae144bfb32ec4fb9804be86a62e8ce102bf57f43c6dced50c7d3376e502673c1b5f565bef024a2ad78d580ca80cd4ac432bf246e163b8730d80dcde0e7f143410826972f9c6e68c13c2b8122723eee192e756e7668d6e4e5107413002a0d9701288926792922d6acfd66e3a78efc88d9b835363c3136427daf2d88d1a59c589fcd3e18ba67ea478ccdda4c46f3e93bf6f58955d99f6fbfc6e8de308637d17563e6e6f3e0ad345bad92e0d5f09f972d462f3b0e7a1b483b12d308aa139f7cee9cce6e8a17660e33791c85b8a3d75938931b45afd722b495bb0fb817cc01421c439481537f94133e4739378d5d4ad0917283a98109704cd5dc3651900ccf03910962a20111a182b5bb2ff27076e90e370f3a64a978f8634b32b2d0805f868937ea953af9f88652dc28930d3edef01c506d0f422cf688cf8abf6c5dbdc00a4413aec2e835a5d5487a778538a300bd4bad27f5230dfc06158808896c34417742485000dedf88aef321d462fd58596e24505261cae2eadcd65d8b22307f603fef24b21e7f0128efe7fd06e01394a9a8d93cdc983f0cb082a3ea58e01858649e460ede2bbf36e93b2ee4a3a2b084457ae10bcea1fd7a5654426b2c62885280c6e2807fbb87bb99a43f2c33aa097166f92f7b953417f7bc12a06e9258e0d543e198a5aea9a4e4518fb8954168d322e2692079b66a37461c63ceaeb4c61951d49d6d092b0d11a47ef3c1ea6044b66d3af5649d3c0d44413582d4275a9bea5324ff219146428bdf48c3b339af42017bfba72d770fa3bf6c95fe74145676ff3af9dca56dd540b05235e897e2fb556a1432bbf4a2fc4b5df02a02d50ee38a9c438a866b8132e82a78a33c70fff109860ab13148d1c0c6825ba1c9f4abd7303318469ca83062253f6f4f61d53368c1b379dc972ffa49cb6704a4921b08badab78d0ff992e139d88445f93aca40059bae2c0924aec7c468de9d04f87de5cbb34cad6528ce38c248d04ec8480beb4594fc4c950c712386cf3bb768dd5c548acce0d56818bed4b531ea4661de6c003f70dcd561bab081d760e8ad1bb843318ad6700b44222e2152943cd872ad80a355aa9f54232d66c9fb89c6d2d34c05e3cc7775eeb047c679449242cce11a2c178a4c5c0f65ffb93758ab72573d726556eaee12fc42ceff12f87e1ce1d477b990547d96dfb00b328fed4943468357af7d6313001ce64b2307040ca592e21661da7d4004423002128f6882c1185a5143af573bcae1f5e3c9d62bcd7f91d004c21d959c6687ae6011fa1b98a2f2dab9314ced3c301d396a35350e07bb9a937ff8429dd51825109051bd2cd91d7ba54d3ea8a8499babee02c8d2aabbdac25e619dcad8616b4ef3f6aae4b0d8900dee3348f88e1daedc1820633e6697b2fc96851a16805033f0aaa7eab62f07d84f00c25996296e54517715f68a8ff9a3a626d5e4c45bb93412046607fda0c0e03d0d07b8b0996ad5fdbd42c9e1e3f4c2a51a686c8df15f76081179adcb030a1316ab9133e073af2e883f379b458450ec694fe2f5ae8e419eb325e5c458304303694ec2dda161d7aece4edc53f29853a2da43430488fea24b025d489ca5218f9dabf9d08bde328eca982d19e15d9974b7985c00beb653399da027cf8e42e983ef04c9e15b33a790f06d6f7175260623214e3f2db595431466ee9552bab13574e86a35b3f301456bd7a166e154cd118ceefd5473e4240043a35e29aaaeaabf8683c2528b852e48273d1b0c42aa54262b986314be620c524779fe189664cd046e7c7199b71c588324c8f669fb960f3eff6be9f270784da4cb19db29b6556c5cf95d71a8562ad7a9e1509edc131efa4d4c76f96993b5605f4e8aae6642c6bc6e0dd62ed6d8bd7ef0dad97339176e13548d31a2aff939c2d9085551ed49757b4dd4ea7a48e740d6c85f6a5558e2f0afd5d7f0ef5ea77e94daa8b360a34a58e72e8c2b3191eaa4184009b96841f5df3a1f7389a17ead6137fc4532a3d6501cd6bbc6cac4414295ca681a369ac9ca3dc9fd026bbab1819abc9844b83aab4644efae658a9651932086e2d13d070fe4a646138643c12241fda17f28c890b8128f499852804018319d3e5e7564a46e63b314b73617f05a75d4271c982aa0d67dcbf87ea2ca6367cb31132ed9eaaeeeb3210242bcbccf998667f62d9b94fcab6a4d918026c0f9fef180c94d15eb41077ead8496a69c96254db0d940a91d70d848ea103453dea15164c3f26cd9f775f4a991ae0a41f82a3c79f5207fa326175a32b158b2186d285d91ab952e3c2caa40ea0cbf1ce772d5aa34d83c2929f582fe76fd07a3bb31b56ac24e6ad9f690a9392d3a9b376a42f35c6f4ee95bb0fab5f64371a52f2f5044240963dafcc203bde4458cce72cfcf2876ec35178719498ffe6a42601dde85efc5cc85299fc8d09a25a7a4bf21c61a3e25f2add0e883799ffe47c48b9b30f1118ef3fd96c2db98fb0d82bf201759891c94878ac9e4493c51523a016c7298445602fddcbdcbb43c3c63c84dbb20bb21e3acb3f3d2c2d88cd949324e97f022610cfe0132607cf4464306052690ddbe61375b3800e0be220281a05aa2d9788f612b815bec060a8fe3fca36e3a2a4c169aa493285fda72ec44dfcf0d6e6c19bf4f9dd2aeec242673178699438b14834ae216cabd779a0232f2a5842889d88bd1ab61d988d17f72c2de97cb1080037f3ffd428ec8dee6dfebfa226c64dc5d8e13fd9dd0514c185f60fadbdc8ca1dd1a7fc488d1ae67149fdcc6ad0e88cc92052d2d92bf9f6748f8e1b6968775c481482f5f5ceaa12a899997b73c49d8bb5818922f48e2746f22d5e6bab0f1b28a62d73f49deabab192fb1cad425381929959235e069eaad20c578de0c5872111ac0371e11651952fb56b3d56d9147fb9e26675ee033217e25c2a4b091f700fd423b45caff77769e9654e4e677d1e83084e827d571bd8354874fabcff3c147bd0e34ec96e91ff6a72abd5bd49aafdfc13939aabdf27d6ffcb6f4ab14a386177ab23cfb253819561f30d7c8d29bfd4086ec2dd2169e8c9410bb38f873da4ec0f8f5aa25b91ac876d1f4e1e64a788808aa1f6c86dd790663dac5e7e52bb63a06f62c18bdc691905993037ed8ca84789e9fc05e499496cc750a534de96a3ae18ccfc432fa3680484f4df04848d242bfebb8bd12eba9b17e72cd78af993a89e66724eec54c62d315345d85e29ec63c5e72484919a9b3e48e5aa64f5eb260800f9054e83a5bc90cba9bdff4211c99272cd85d0373284e7ef807c11eafcefd452b20c65ec6fab5c6cf0af43f005238337b989d51865978c3b9974be90b4e309757bffdb7e4299d645ec9356af874adc9b08ac33e42b0df72a74038bc46ad91d3b038a2b0dc6abb6495f822e9b17dfd2a17e9ac11b991efe3801e60b4735c4983519f0e52f12b825b62974437d16394005dbd76e90b92eb8adf672d06333211980abce81325add79412dc6771213bf84d1ed463efc0048b90913748647f29b575aacaaa62a7df5f0dde2ac7cd14af922ef3b3a287c98532692897b725f8ff628581f63f6a6f2f6659ea9278743dbdd03a511279cb4c34c3a4aea380c07778dbb684c2d8150131be9877aaf49d5ebdea569bf60fc75431417fec72ab71872d41c3f5dd08710221542348019545621fcbfb48da4adff74898647accd0fc333d9aab6587011133dea595f7a5ee2631f1192845c42ef03db23c798c28a9f202dfadd070c7a3d019c33fc258d37a7141f186233d96cb5d060b18505c798831e4730c5a4168c17d4fe41ae851d5ed136f8212f1e1a4d305d14269c451cdef9beabf4f15cc1ee7b30be93c18963f8eec2fae16f68d35d07da20f27ee5feb5c9ebfbaaa118fa9437481f1a241bba1442566e04a0d0ac6b7051267b8a513c6063a31f4776e4632191954d855cead401f8ae60b3a4ca08e97b8965a8d79d2e26138a417abc9ae8de161514bda6b1b136fdd3b080c6a0dcfee463a9b2fb4f63bcf26c5ccbe0febbacc6930e050b6fe37923b385bb1fc2fd05b4b16188e232b5073bbf65442bbe59e773a6cfac54175f587c0544ccee371ed3630b96740ed76ac19150a153bf890e9c97662fb2efefcced437d922fcd9509af05d38fa17e0a6959676083767821f7cbdaa24a028895279613e8e7e6269164ebe5f6932924f21b886e96fdff964f028f7dd55d05f540e1ce279c59c15f784e58c39f885800b3593f1cb71131ef93d5e8df9f5e00bd932950d0b0fa00950cf4c8470214457aa090c3afba26c8d5e959d5b602d2e5ae9a73fc1090a6905d4400327004ce613590dcd709b02b355f6454b60976bbe22c523f6741032eebc1ff5b492cab9426bc01ebc8694c871ff673bc699a7f7fe2acc36b6a147731fd1921ccbfd1dd5beefca12ce77caac58a15e22de68fea948d3d2f9a96b465b92b7b840f3a4d22a36663a30bf3da06a1c59206210f4d6ec8ae6deef44ea8805e7ecf7e1ff8a1e8a815a020258391c7955038a2082d52ae3ce1c0ad943d94e7dd7ce03da9c277970d97fa45ab302de92f8142df76ffc9ec4583ddc9496cadf7313ea097524e31b038b84430709536db2837043c2cfd5604fadcd3ecf1faac78f748ab2002c218aefc49a59deab8ab81fa0a11a89b9e8b9a5d06a7ad0eeb1da172181ec6942000e6808072662c506be9b522f9ec07080cb473a7ac7fa598d174c59b412159dcf23e865ba0ec08aa7e32f80139b7188435a6f36e5fe69b198683ccbf2c4dca45c3d86992c9c5f316d54aa5eaa0823c7df5eb32ad7ce4f987758a909768df9ba21a28614a19f33336d5354e565dfc64d9bf14529339cf88c90bf3330831a73d86e9b1e854478843aff6248e9964204535ee74f8898d37bf5cdd9b344d3f8ee8bc07919fb0e242e1503708fc4000b2cab30865bcf0bad6e4c5600cf720ac2e2142af47b3e806d6569675dcf362ab63c3c3ba25ed03270a7cac5ed1966866552aa4f143501888da997b05326f93fd03fa3870da2678d4920c1c48f48a3b8168c66e75c6bc3525089d096e6e23b4899c6071c3658bfb5c63cc65213cccadafed9442b0e99d04293f62d0cbc5b4c499e6a5cad251d9370ae4872d01d3e10be0fbadb0fbad91ace355c0e9b1cafe3f7babd6d4f3d9553410b6b0091ac1998249eb117f818bb203cc359f2460e5cc80beb733b7f1b8b61c3e42dfed367ded73e9b6798b0d9504693af8eca26a700730730af5abf2c8a09795f900c3029645e871b8e15c355ffd0280d3e23602ba05551613390b9cd8235d0c589b5206564f58580f590a36d32523deb15bab72fc8ed09c0da2de869d5e518cb07df2a99385a91aa995648ccc227b555d1d98aeb9d7b63a94e488fa161d58889ef19a51b9eba5e8e2ffe1540f6d22761eef001aa223e2ca008c756ebe638e82de158a36ef81d7f070a3654c26beb7b528a408c743d422cceda47700760075eef8cc02ecab024a4d7c82b4b74612e2d1932944ec224594131e17aa10d91f3f1c02f445076a67faf07ed49ca9f23ce2ed26e150a3b9709936553b93c68ec58cbb343ed9de0447f773c9c32d888e33dd9e8390cadb44edc3e228b53f0f59a6f762867e28ba5f24a56a1eb978ec6f208063e7c5cb70451e502add7d9860809bd045dc58232c79abbb8017ff85f1b77af32df1a6b8a0e95838bcd24e8f0cb8b9545be7e2d003af8749601bec8dce8045dcc7a8654da3af78857c021d2ce3b47ed6f48af8a72a292109c33898fad3a7676b7c8dc30ea8eaf0b3bfaad60fe7ff8bf32f0e4391004b1360bab4e1b218621d02591371e0d343351e604724f9eea023ffd57b956fccbfde907c8c843ffd49826426ae4eeb55630aa92c6cc34ab3298087ff69548c8b42ed692bd0c6c806aaa7d144b049ee921db46c431487d577f37c151490bc7ad1a095f8ad14621d5321cd69ec882f82fea99d27e5aa24617d8fcaddcc6ffe66364374ec0959cd8416490a29c11a3ee2e5799f5792612bd3fc1d96389102cfda86197648f9b18b51745f0ee99599b0d239d93706577df5b6dde51a4c981e5d1fb57fa0f4ddd1bb6dd1c7aa4148c31dc3e1fd1099f500b9fcd0e694f9a5f887acf6ccac5e02124aadd444bc94f9b6c67fb872217ac748a8beac182329f5b3008a36cd8cfe2bfab7e47c1b853567119ad8efc44efebf92620ca13b3ecbcd5ae0d1410cd1440b0217f378cbc87256425dc887063b5937f803e9dc16a6f54858ee07b5f31f316e6cab6418ec22f67f2c7221440c32e01a0fbd7f1765efec9f6c1d91fb7b2783af76db499b7c9484944be5bee649187a330032f0e119cf79da3398394491ffee1cc95fa37f1fc9d913c608154f66d57411ae84bd69a4a50a4c60d9f7e78c52837a9d9d072fb382cb6d233d06af54567c9799dd508bc478ee24727a40be1844eb6377e80c5624744b43fb96004c476b62f441f6f800b6c4694ff735c3c5d46653135401b0f53cbf583cd451caf03935bb7e907200b9178dd58d506ecb22a5cc5e75b09f7c8fbde73e3c7a4bf8c2868853b1e8c52de6d98fa9d5c26dba193c4cb8c34629b214c4b80ce084db16f1f26ac3f6c061e12d551c6319a330a20aa58dcab2d5ad99454957a4a4f7b8e839beec2cbaf43812f798de276e1f4a2ae744c2b635fecb57f1f625b03e37eb92c68ad2b4ff1c957b259542ce44a2ba3d67d98b971365ddf4c45f48d5b11d6b15622a89b1b8dd0389cd8f18a34374d4f6428783b5c300df2fdaa3b29f3fe6a922f0269fbc96b1b7b9434448efa93624cbbf4222fddea89b0bae32973b96e0f3287c86732721d6fd60a526a8ed71a73a28267aac829fdcdfa5765ceae1f18afc365e8206e3ee5898e98f624b165778d50dfbe78d520acd5330017aeef15dd6222ca573e3522c6e662a4e63c781375b36091036f01f0860192baadce6a191adf28e8adf2e33b61ac96fcc69cd00100a253a964f3d08f746fa51be0fbd5e38882a8dfb6f910737241f92dfb71f1f65bea982be035e4849e07455daa7a6bf186abd4a40a72c34fac0d69a04138f6a97662d6581c44a608dfeb1a36dbd2480b90e1026f4d822c96a88f0a0e02a53a9b56e25a4ab93100a7266788cc5615afd4ae4f1a1b1f62d0be66d3e30f7975c8b753035ea71bb83a0e9a50ab1f7426e6bbd405b092d2f656f3259edc5b846927ecfc0e07ab294c86c2cada7d4281b79db6bd27dcb49b8fc60ee389e875445f3409ec6938ae5ae4d35060caf5339d615931fffa3f2083cfa3ebb480e3348342eca689b4ae36ce498bc096389cdc98fad83b8b5cc246383acfc364d0d656d38e99e1f00c8aa2cc3f9641c86df475fb47a21bdac176a3bc706c6415344d6c242b061add0c5077c09352d44f5141e356e962b312de61d0356756122a00a096427e8798ae0eff6290558377d5b50eb4d1efd6420e40e6bd238ba4e8894fcce82a232e77f615ae27bfe764c5ed8a93f8aefd6eb6f3e39c99e5c346e23e5f128866dca44553234c9da3fefbd2f83387ec4ac964d43c23ac89a90ab9bb4758aa5d28b8735bfe9d094b4f693ab06d966856068b38b837f77d2049f1477e26c62eb438c5ded3f4fef79b8cbb6f151ba636c3b5b1ed67936b9f947ea928e8263999f4555609b1af2c3ea9eabd42c8c187eb9d1bf4198a3a3df264db31f2879f01c385bd28b537857deb467e0a0750a79baff72f050bae8c453f33fe5ef98b1f72d1963faf1251dc0b0df3538bbae8859d66cec30b0f65a18ac345fd0076f4d4f612e60803d0251a0ee28101b9e1e5854d2ec82784142c76ebd23ab30454eb928c60eb00257d2d6ed42fec6f2570102ec3c6f583846180dd15666ffde624e055974d61b7380c334de1df1ed6b57a2649ab3df41357177b30c96b82f84fe9054b8649fad4d1e0bf33da894e99c79fa4984a18a41799d25272c61c0d7cbe168a7b493fa826eb3513e8e8dc6d33a558b62d25e873d157b14343dfa2344d5d5041969b1b438339832a9eae8d54e70a946af9de197516027f9dade3efa6285f04a22f0e94b1601473c4ff083f763779379db30fcedd1c8012e7ad09ba56f5bac33be4deba806e4a3f2689c59a85955a517333f638167c9316bb4e1f4566f9ded66ea65ea49222efda9a9e4c89f0f0d05310f9391f7e7cb0101e228d8d59dd74198bfbf4f60bdbd45a5539d36acf53dae3119c453ea4b6f679192b281e51a3378849bd865cd7816df578ca3982c059329e48eb07dddf63a0102a4e11e6414ea0f6d548b348eb15e81159a1c5418804165f12e61cef76d61e68fe2d3c8bc23b3049d6b3b9076ed11d99fa0deea71241b6c6b3082fd308c8919d4e5124a5fb35c2ab0cb721dfbf7390eeb0bd025c9db1a7069c5d0e82a562d18ad010094dbbfeda54ab6f1619eba83493e4f9a7abc38f35bdcd4157093e8a7c990dfd2143567884ea05de966729f370a495b50aa822a266e1b87b3ba45ea910bdba18b28b74c9f36286342bedfb72c8480efc500393444432d14bf99ea71c97b49179d9fbee2df67620ccb09a7a7c29db2c6913687b686ff8efb0a18704996b87887fd1efcbfa1d77104ae7a3b499adf3b689449da4aec0f9c93708d7a8726aa914adf4e76174cb1a0113189f817963f72f7b5b416cf406988c43dbeceb710b9ff3bc09a24fb2bc7a46d72419c41a5369783d8061e9408402dd676c510403f402ee221787407451aef11062112a3755022bb9f6975d41e1a3cf15928a0f54136c5f0a5d8a0a6edd9c6c865038d6eeb14f2fa9af28e6ecacb6acd8675ca3ad739f8bf477ea205f89586da248844ccab75031a8f5baccacc44b59032f227b082fae159b3b4290054a63b71c0d5169750de029e05f2870ec030efc1ea359346d91db73cf5d9f7b96cb20e704244047f8149e0df1eeacb55fcdac26a8e0c6df65ba059600697d468c5b3c9db1e1ead5d3429e49321503a7aa6c75fe385265be200c9db926e5320b3bb4ebb303c43b9a8f76bf0487fcab595997a52a3f56e9c7dffafa4a5055c7d3a4640b09fb1021e383b2291897c3ea392f851cec8e51a0aca3e2e0037b5a8f3a530ab1d5f5f409c84c67b1137c21dcac47a4798cfff691c882c45ba2dc5b8b6886f1207c37f993290148cd34ce29a6fd23bcce1ba214ea8edf548c914acaaf4bc7afa41ccc441b477fde054839b745c273cd832f44248a5d31cd6dc1c610a5a5e17f20bc2bb45fe12f245140fa599c681a2a4a09f3b160261c79589b63c92ff3a8b4aa0c118f6a9f8e8995970de4bf7957e1c442d455df7e666d5236197b9f8e248ece4f0e2589e739764bf116c6952a51c656a43355939bebd28c14a6568bc80a60f88721e4999ecab6e892f111f76b8ec00cd95dbff63efce66f9f03ae1eee6eb995c474ad91f29fcc66780fcada239e2e5c44a06138d0d9a0b7ca80fbe3e1dda028646774b82f29a8db8e1f0f7674affe523178a46d6154d2a617254b1484b8939f33ded668f638ac9fdabc63ed8087388d3eaf9a6234b522f79b42304bf4612510f076d7dda109a3615d06c14d5540290e7f36f2e089a5413782a25f4e6b1c554e7a3bc8ddd43fe32881edb5ef81265c588789281d55904dfc2637a8ee617cd9777dfe880e7384fe74f605623809c276d1c4d7562b75f44a715aca01b65d8f63d1268ce32731802b9b5b20622e28050e9f13c974ddf33ec32e24862af952d8be7cd1687b1e6751879aa59d45cde1c03c2b37edcd099909567d31e9e5182f8b729cd4cd25df3a121ef40461c0337ff232abda48eb473ddd7e633d74be8f259d87907a42f62351fef8eaa3e31e64b0b22197589688841812916a2f9a7f6c5c650860a5217898b4fbd3100622e582dfb736fcdc4ff253bf2de344b56afe3d3cc556e40259659d844f4ceda13a43f7ed3d4a9cbaf2d5cb0d30a6c705097ad158a8e1a455e2258946fc20aedf769a789c0bc27f1350a11a90cdc2dce6fb7873e4b6020f862e1e925a031320f3d4c68081d8f87c84479fb1dc250342b93c376dda71d783c0831e128b38862ee22f00486fe9428378121b17507db3db8aa8c74bfe013e6ce35261a230feeb209744600195db608571b94c1289b98a9d2e22cef0da348293092eab81845bf332ca0db1365edbb522f23ff828e52ef482810bebe70662f8caeb9f71887721ffa799fa3e22b40fbcbabca793d3181dd5e34bf7805ec810ec7c038a46d7570f8d917c3906be982e129e96014d3427b56981327bf88e61a33660d1a18602f52e513775a09cf48877fb2e26b016f459171df617c6d53e35464dfd39459f5127fe0c44140c82a54dc78004b1826b001eaddc167006ee42b5a87b7ccc144ade1b26dc92523325c57f30379a99c55f9b4d7ae0d1774e179ad9d52abce2e2a5e492afd2f76dc1636bee510ea6c7ee2e694108aaf62f1ced2f8db1b06829b6d1748aa912cce34d794de5f3b426dde1ed3263f80dd199f96fcab73561acaea72a80b0be1ff4a41bd5860f303d36b79ed227cb8fdffc7e668deceec70da8583b032db6f8df2e34b87c083fb975a7952ddcfcc7bfc216c7302e90bef93e8b6dba84b13065a4093d1370c0634c3a236f8f5fd0ed9497df4d5c13d69959dcbc1eff83d7b22411d697c332a439d1153ce3c9b79b9abd0e939ef19ef0ece3faeb37d642dba14205791abd514dd90f25f23964b496b97670c99175b3a1b2cb6c447349fe24f320690f0fac0e163075a77505567bc62a3a7378f097325a2d93ff81d286557170ba5c93529625d39509d730e019949afdddbe03e5e4b641892c74f3bbe3148472e3f560f0ff93c0cf2f3c3dafa54681744dff12ca458ee5c4229ad66bb6553ef26467b8afd2b95bb328a2fb0f1dfffcf34a2d492c6920d0146db3d96b9fe735b6ac21dcc57098d1fb43d714a4192a0d98ba904ee70c79cf11d6809b0a8a4466fdb93958d6791f420b2e64fcd40c8f5234ded7c15f23144de16d9d7bb1104849d2aa40210338e7cf2000db4c7f20d3384d66485a03d0ded6e9fa27c194067746a3b17fceb947dd2afbe1466428d9cb5ea44990ffd6fa4a5a6b6ada76b7ddbf0725ac1d074eaacd241437f9b98127d1d5c835054a8abd63c5cc12674049330b33526d0198fd775e4202f378d788273f5218fda7c275916f140cd9c1eaaac27073b83a1dc6672e19d2344633d39598289b0382d989fbc90b09be0531dd346a899466e2fb64b0a5b940a5532d7ee615e9c5cc36b6e56bb6f395a611fb834b90ee1bacd144518ffac8114ea9edb489e6b0404239a73f300a2cdaef19e2d1b0a911dbb01d31752ad5cc86c7be83e868872138e408e22dac962c524dabe765772a18fd3f39055f2c3c2c184874916105e1d8250aba4181ea00f56b05b3668b918dd5f609bb2c2e4879e5d036d95480001d1445a9336e01d6e1b8d0b6fc06186e7c6e5d726f50947d7c1d36200e4491599208542c07f35d039591ecb4a709e9c57ce6300510989fb1c17d95a5cf702f9a2133f27bc9b7c3d11e8cd568aa42e8feb667119cc56f92a9d96ec1fcea90c0f4b01f28141ae6d0c937624930bd306e757a15e1489c158c4aa57457695fc0726b26d36f1b9dbd276d103f7d5687b462e70bb76a25479ec2a3728c3acd21585a06ad9a21ffd5af0e6a33852d4452ac0df0521ade01746741cea1f050af5b81d56966b6220d8759a80127b3f18039155c4d9ec514e5beefce82b55c8e60ce2ba66b06f9380f8c50d20dad284ee4e03d27a3b04414ecabafaf08f26a2c2df99cc830a0278d0183f9b5e6d1eeb2c9af36916f22018df301917f974daa6c8401e74ae2c47e44c2f84e83c240d5c5198a5e238b6d01f09cc4bb971d19e835cacd64148b7563f59da8df7a9de08b2d698b4cb6f63fce27545531cd1140ad14730acc5cb2eeff10ced1e6e5004b967035692bd7b859df93340f68464cde94a2dbc741cf63f470ed11015888afa73a9e0efcb3adabee5581d27a9e1af33a4ce2fd5cf1c787bf59d89d99eac750142da07e58e437ab9bb6de4792ec0c6db2c9d5dbb08f9d869c33247347bb93beb1a9b4b312c2a5b03c7cafebcdca42d203821f8da55a1c21cf65cbc1d3e566e626eaaa1676a862761d9b912e9cf5a57334ef75dd63d00c646273f21b1d568921756c2b685cd35ee1e6805df47aaaef0795c1c70ffd95e1abcfe0a31c444fdc68b7f3fd4db69bffdbb3db3b8d82fb5800ce1d8608e998b7581a0adb7061d07fd00694fa33f57d35a7a3cef864bc76c43cc11fc797e4f51bacbed1821cbda23c26ed04546449c15350a4e1ab6837276414308585b857a24b325d0c58e7e34afd693c749938850ef9ac8b53364a20e9fe2b00b16724e20c20fa902ef86e3d88b9f69a6c081ec9807d9d48bd198295cae4480942e3af0fac922a70e73c10950e3baa7df8965d8af013ac9f50965394f409fb6c438952d74b2e49a3525da6552ed9ca4031602c47760e42f164c4683861b892f51d8b48902fdd22d6bd3c6da87acc93dd3bdc91cd936bd4147d84995e158d2196d809c68d3d961bd87f096ea2b828e895e3e7395e31abc93594c28b7e7c8e51662737aa4c76cae854ac937f911669c36769b2326e62789584bec82adc90b560e5da1fa4a7446965c5ffa022e0bd35288937bdeb364650e44d65872d5cf8c8f523c90b12b848dd66e24bd2263af105ae1e5326a66533a0f0a66cccbe624540b348a309bef7e4078ccd7bd783d7e922a8c30fb81d741b75babc1ceec157a4c30fc17f6ce04aca664aa3292372ba423a9f748793aad0b12abc82ee9f021160d8af696e7dd94b1bf749bc29357f4a083fa4162d62cc848db67592b76d3932f1da36d297be896c8a95a78fca4f34d62da167be5923dbd2111afb98a638c88b81a6a502b3e182e9713a2adc078078af2ddab5ece78f63662da3286ab545b8231c1b8433faf766470244d7d342ed20988bd137240636db18dc1a252696993881592f79057a8bc86b27b14668df130c8f2f0d3200ae72f3c156cfb6dc9031c6b4ddb86a85f9d4e605e7f433d5cb074aea1fee1d286fa41e6a8f28da6ebe8175d3b4645e82d71286d30a5fee825ab18024117ba7639174ab0541478e52a4c04989674d1cf59576494dcb3e21faa9c58e33a3d058bebf77f73a336394d7bc0dc69b59aac169999a26cb8fbc7171ed30d28a033cdf15547f0b0eba61ce7243d6ce8de01f725db5a1c616d9f6c66fa6af55183bccdaab3a2ca07df4cc64382c56ece1e7b8de0c8c24f4413cfc45b9ffe7cd5ac8896a1c40ed7ae48dd5a88f2bec80ae469f2007cd9b906c280d113ef11a873433e4c335e37a69e3872e86646bcb7c5b8c8d5c002bb213ac7299ef21ac54162eae32ad06aefd9bf8a6ffceb6ff8e4cab537c680e471ba665fd5faf10948b95f2330da2bae12839c62eedcf5fbf34bbd77848b174e9e7021f9c06b62327107ec5d766b9387f62ab38b111754ced3aff4c253b343d786f6cac78cd9238b1cb95b6b3f57732c5de10b5647dace20c698412b32806028369fb03db7327c5f1d5f242fdcdd7702f78dfe1e38c407a78399afe3fe8977d81da408ddf55f7822889f5c16133ae6a9664a26234f17c74ff77b505a7665a74cb9da452117c865f604d820b23e378d38c66503084d694ae10b34d0b8788faaf4cfea6103005058da91f851cf99312f79560ce51fdc66724dfb9e39580baa350ea60df703a044f7a175fe322dbcf2efd46c659643b027d8bfdf49e980c1dc842d78cff5d86618d685aa5fe4ee03ae576d24566bcc4228f9e126f8ec57b6b364cbe128874b5b0147f5c40d9b8b806419264d2a05f5ba44a7ede33d89046408211637af1d8be983c9b9798d0fddc8d37cee9deceb30cf9a489f06164d3e3e48c9125ce636fcbe877a535fbb1336e94d920a804608c9a1e051796ed5b85d34e38a3fb984ca40dfbc9c3f71300ebb726c8544b98d5ab5bd17d14e3a805f132335bbf84fa54376806f101e7c66d8f55aa8ca514b57a97e826d1982bf18a37df3cbd823ec82ef8bf8fb5d426b36dd7dbe922ccd0a55f7fbf24543fe3b857768aac660e5985a0b804fd36c48704567f06630cc81265be590e3bedaeab0e18e3a2adba65ea41d652f75d50b7a7c474b41fbb7b7c6fca0ecad19533270bb930b8c35e60b68f04ce1cd3b68847c151b2717ceca61f694388d5c4c4a5afc78da7febbbf03c6aeb198b9299ba8059568e0cefc2f31f7c97fce22205578a9d24dd06c555438e7073e8a4d871ff07d596a01ba96b6b4e67ec288659409165930507d8c1738486e130be461a2237444af3ddfd0d78ca22478a9af48f118471bba829a2335c69175f3a2bfee2020dd237e844b501134ca90defdc94bf1ac5c2893a9936ff9dac6286240016c7a159a279ccc55086fba21964c6a6f9b081c9e753e72df64864322d916ff251948ee0a1351b1cb4aeb386c91183282b7df220035269123ae0003fb24d8a4651539c7a27f4bb695028398569583b6b919777788ea1723f39d83193bf2ec24c5e005a2b7858ce9a856b2d364e4725de98193d8e6ced9a68293d470f42468ddbb52395e724957d41b5153cb4d836197d2ded993fd0982a24c74274f190f77e542559070ab846fed1a07e6829be0437c63999650c00aac9879c5c709e6506d3d0170c8e7f2df7ba0cb14f02e02e7eb8d98a5dc95221578c66603dddc13ea9833788881dbd1593707c90f63690444a63342374f2349fdc5bd68894603a52783d756ac7f6ceed04169b94253c3c67a04d1c7e873fe9c9bc43478a60be5aeb7595751ec058998af9c618ae16ade1d4a129afacbc59fa31518e7406888d07340605bde62cb7d92dc508a3711186eb3669513eae63eb4aaebb03176ff64805870d60ad757a3463b952aada04923b6b494dd0062cee2ed75df3b315b36fc3865ed96fb3295d1a68cac524b31695d004ab1bc7f2f0fc2dfbca37267e264d2a057b224a852ba0ad83c4ca856ab3a719550a01fcd228928d527ee8bb60e63fe5bfd80140eb60e776f99fcf79c9f34792e232c916d7dbf4a1d8aa2fb2ad119edc185393a98a3c6e1496af04e18cf6b99a6d0aabf40bf29f46d07446a50e0136959656e8634ad39d5bbb6fdcdfddfa6e591eb52a435ee77677a9b512268b7e8acba64ea2eaf821cf63c24a7f18acbb681e270434dd83658dc4f2abe06835e00cee28fab1b4270fd19d7703f850bd246a3f96c490ca10505f16c606242b56ba4dec9579d188b1844e30e4149af0ead515944bfc02281b390cd2dc6d5e2449b48da9fcf2402591b45a18203eaf4029b9b86f9912ce98e02d49a31c4f5efaae32e62964944ab42f43c5f001f2ca6d00dc1bb03cffa471f34c601ef4b798644674c7d1d940e29a99147094168c1a182a29d6fea5f922210993326e91014409ee59807e04b05d1fa929fbb7c11ecb38298901e208079daedc14534a1bed52a89cc515a7b8f41dd5fd5a80c523d1381e2dc3446e679789d02f5d3578a3c394a6c5f95c030101c09cff72d9803af93515597f0443db16100868ca64b17ebba9290ec746c6c4b477e772b09cbaa04e45ecdcdb53af9329477f14030ad2d47493ffe42b29b91dbab0cfd200031791f84f64582dd81a5ed0a77a647888a8258ba68167fbb53592cc076a51cba68ad88c10e0c34abbcde12187cfb59b4b4de026f4604d4fbbe6e4c183fd1b37625c0c0ffc28fb18f877d60bde9ff3fe93092bcb5a60ff2657558dc2da08427e5f24f8c404759e82025c22e896d8996e2a881ea66dd03a459d45db44209a469eae99078395f76be5480e70db2d8fc9a23cc992d1cb01aadd075bdec8d4c3ab440cced506151d97b29c0dabec9cce551e4ed76d01a8100eb686386b3c22fe47eb6834cfe8c407faabb75923eda5fe67147e49b486719bbea639f039a335d465e83518180abc98ac3ce1e8d404ba536d9570dc17d1dbb9a8218e358c9c6cfc211738e1a45ed0c634836a752eb7914fa258cf6d6c6461e8ff6c5e4c1ee9b2e65458dae367a23e258904deda1342fa3da26dfac820a90d39c237b5d311af516a99ab7514810416f49277ce76e4978a32e074d9d7a4efc4bd58b204336784bf09a0c41317a477bc7c26eb7dbdfe5abc6f2c967cdc19a07246ea3c0849b42e1a1530adad4e08e8eff370f7fbfd4e9094d6272a2f66fe78dfad8b99bf5d1d4d20e807c4badfa2751c0b25602d22c4d40b604f565b813f48366f1884b0c8e1f00c08483cd0c09fabb217fb36763ee43da4117fb57df2de50f132946b426d83538938e7b8e08bef788ab3ff7e3087c3e58c309d495935d4352f18b70920ce7a0f940629b67f73ebfe9d8ff351c4b0afaed755f2cc97bbdf6ce1c99466feac009e41d7d55dc28f622c029d9227b7bba6940f42902abb48d3fb4defa436f58391a14e554d1f51c27d05ae807375c09cc2928e5c5c47faca31fd1f98bfb1643720c97b32a18f9f7853e3669081459da8795dbd36aa92b2710658e05429e3736b655276e1fdc246a9dea3b61f814a487dda546b4563ba5dbcbe7f686567a9cec06986b382c99252576c63265f5c063a769f1c3c3ae2732f86ff2a7b0a3e2006779f3946c71add58b2c42fc563c4fd9aae2c033f9dc70f72a45a94d7dca3f9b32d6a70d77cb7f46403796ecd30af1a96e952fa36ede33f17ad6aa3c879df286f86d44796ee1307fed4bd36c27a73ffb270d6163d8592c4ffbaefae8d2c17b07469a21f201e9f3d8182fe7641e8c77770fcfdc1bfcb95190629399325d3305ba0892030a448c6825fa3cec58d7a0d425f454a3c2dc33ceddb068c430ea8de3412879f77d49c51f0f5f6e0a4bc1a2df45de57433089d4e9352fbb6766c0cf49487d3ec7a929af53cf0f43c7863859a5b0fc4b073320a5cd42dd3b36337dfb35b825dbfe4f746dba2bd3e429140816fc6c37ca60fb2efc4443f6d700eadedf90af4b7dae4d39887359a9bf76d9ea45476a7d06b89d353b9c60a0bb220d189cef63873e21ae37b248cfeb524347f0e98e3c661060bff13f9b1c362fca91487bde528afd13fe28af02d32f5f5770fce44bbf13c14a308f39268f8aa5077c67849a58d147bd4965302a45fb819d31e7523f4ea5bce5f1115e644ab36387b844071b17b67e1936867a5cb46e946717b8480a9fdf33d65e5c7004a2627a195ee57bf21003206322493f2b8f5687ca99087c77016f92ecaffcfdaae02796765145d3b242556f275c1859edab15b8893bb8184bbeb9c33c7f340dd1bcede76662cacd97fdc46c92e4ec99744ef5de1f5f6c986cc083a3e02bafa24efa75e2c56dde8aa55f3caff7a8ebd2674e61c18a405c74b62dc8753c854d32406c02e1f1aa831cd824547c4d6f69fe17b3dff58b7a8a534d0dfd41a836affbf84eb4bdc178ebfc1ca3eb23da91c9c4203c8d8b6f5f633c488cde00867b59d63718d2aa5f6430463bf2c31416bfb6677a9161444c7bc1a112936baf5d26fe474cba557d2abd15b8b268b1bbb6ba6688c514d0c2f44dd8e68b28b1367a729304216fed8f9e42d7810799ebc3d4645e007ecdb9e418928c077709056630b651a0b5d80e47be6feaa9c455e918eee78d995ec95271a1b99463024910c1f1e89a80c6d64cab63f92ed05c9832350fc4a4031df95efe1fa3b3e188f672bc388d1517ab8b1da67874848d8514bc77b6403fe96accd8534751bf4882574e8f85c6de0666d2dab0c3fdbbf6019dfe6f0b67e3295fd43d4fbb8d5c460b60e874663db9b8fa1af8b07e148a9aefe0025ccdea1d62a363d97f3bc84cb51af989835037e4fd1af52d0fb892a32fc807946549abf8b01a7f00a8b3fe8e4eff3921e63766dbe80e36a241d6fceb943472eebf58007460c8e1fdb93f7697eaedbf87d5f19e7f095bd671d030d7ca0b7f3538595364e0d965a73a9fd42f52258801380ba524ce7dd30a9d7a711aed1ba3eeb4117097c9e48a189b574501a14cf6d8862ca6692fe24710fa37c89692843d290544c16d5bf2d102d5f6ea77f18a6f630c23d2de60c97fbbcea51a1087857ee61f57b8cfd806a435e7760ee34710ef1c209cb79d428107acbd80119ba0980d68a3a706f58921177b193e55fa70737f09a8364ba567e8d863567affeb3f132d38dd0e82351569ff580c00156a8434acb0c3304b87e134651db0ba88e1cf012d88e5920782e9cb3614532bb1abeaa2c0153f6d990bf1ac9d0544875c07b451c5bc71f6bc085e7591d0e7cb53caff762d27ec636df9159313b0e838235d13b3180c9807701f1a7bb1492e2de44a4091ba06eb169ae167b9538dc4fc058217a7ed7e0330b1678624517b0645143af59dbf57c30f53f5eedaf644cbfa24bd95454aac4bcf523b2ee259df8eb6ff8bbbf12b1083fdbc73a53248d52346b2ac54351777d23b9e217b0c0130aa857097a5bc71ad69a0c44e060837f4dbe7d041b4e945e00163a29fbe5800b712b1e641c4859a4e8b2befd60a78315f91b8826f9f64871a543b9c1e2f73e8f14ad83ef4e0791079148d37429ac8bdd86b66e6e207a147e19710fe24a5f54a4cbccf7ce4ff466b6ff7a0cfedfed46044a297a65a711825b4bd0bbfca5368ed69feb7d329312c35dfaf797d70f7f4ee27262f4e9a7a256211e405a3dfca6fc0fa2577278dba1436320ab36dfde3912f8cdc67864440f44f9ce2f2ff323e493710af1f21f4253c6a93ef61226ba96f90403873527b949a3103112800b5981a75db8668ba6f18458c0466364c64983d4540b5dc556dc47675e89a043f110d02d11640cb9e36445f29858bd014b53cc16a54828a42f193a8d2f1c82ae2458e5ef7ac2f8ee42e7ab7a2361e813cc35e1123f65f65dda481d14781f1396487723bc38ac6b4df9b2eece6209f17da06bae6cd8673ae4041d6e7fdb537a815418014dc6ffd30ba1bea3863f732996200caead4b18b3b33c43f47281409719c559f11069df6ecabbe059b67ffd3de18716fefe0b22475f61e86c7a7068f9dea12f7cb17fa7dfcb189ade0e2d982a4cb3e4772d2514d1e51a9494806f7fed7137e7e13e6861b60960dd5eb989d5fef7060770fd0f920d4042ee8567a5b5eda130bc5b9c66b7de35934b8d521c77560c79928d61b92938c7fc2294f982b46ed8778de2b8a3e3b1175b2281442ce9b07e3431e37f5481028fc12a4b0640b4072de6902712e193f6062adcea88fa93b5c61a4bcdde4f77fb4b1719dc5052bb9a5d62ae7fe2a76ea338160f96989acf19cf98eed2c17f3f04331ce990a6dd139e188848077ecf3c6e3e734a71f4397454627bb36be347eb30bf1c5461400f876c31e3b532e453e4cfd086571b4d1a8aa964981b832bec424b27ea614376df1ed5bdd30cf64422d2479463745d49c6b5c4be11232b423746b3887f8c26c94ae7ca7b9fc9a9fea9867b14b3c65b97412f0d0a158fcb4e5e021cb06ed45ac901a2ddf3704256c7ef326aa20a2d96e494e71f50ab9312be8b69a7ed081f19f5e914683391ffb6479a6723bc41e306f7deee66b65a8c4630377ecd2e171d0e062181cdf172cbe2a6789cbe9cae199b579d506dc5a1b9cce44edcd465abaaeb92fc60d7ae6d6436f6057f6d00e035bfede8bdf3f50de1959d6981270ce73f2ece962a3e71ac67f30d5c35474f137a39114b89244b826bf185b2ea43cd3d78397b20086b534c8486eb4aacb98c328564c0068d624ffbfc6675f20f0da42ebd7bef21782f4ca868bbea0bf7d7297d3b3acf36c91bfd8cdaf01108e9c5bd27a8ff1a481d9cdad4fd9a54bc39d3c1e71b7a3b13c1374294b64c903a4ea8c543fca7c2f644dd63dbd210a577c1216c2566d2988d9c399e0c2cccd5a55589da1d24e7abc7b77bbbb034fe1d3d7ecc74192b16ca01ee4543bb5f1a10c1db1fcb775c3138d757d08dc7c1529c92699ec58d3ac99dbb93e9c582de5e85ccd63cce791ad4927a0fdbc2204187da2fb3e5f5ff7de87bd18237be192cd56c21e4be9a915b50bf6b1371389188e10a996b44cf326a51143b7428c90a087466f6d1f0a2ac3a1c7a91b6771fe2d7d38e67413d94a8578333e2b1ab5c7f04fd19f50e63e7409d9e4ffd6c4eb6c600646fd7ce7eab6403fed381ab7ac6e15b72ddb3de2ae164d15af5b5d4d3121ea6a0641eaa87d6e443118c2f33b992ec138ae39e995a5c4c565f70ff5ae2383eec5db67976152c3c296b5da956c5c1715ea09da633d4862de8fa699f6c0109bfd9c7fcefd281ae86a72dac536f7f07bfbeb6facb0796d18278ed18cf6361d42cae60ac63490bfe4c5dbb9f77cffad801e777fa89f33d1a348c614111a5159d3df8bdfa5987356ede9907d81af9c6418e5a679d10f9ef1bc1867fdaa7758b34ab2a5bf502e373b675a75f744383b4fa3dc6afb2e614807d74f8e0197e8fbd9c01daacde3ce93b41efa39b1d3085237fe411938c2d5a86a50889389726ab380a4d670e0787914dfd813f295742fb177b69499cd9abf04a1207789c22826b6ed5113e283d185f3e0662b21c307987c9d9d8c646b05798752a14978b7b824920b073ee3771b30571925afcebd919252b343919c17f1941861af27d7f719b8603177705d4dcb7832836a631ad1765dd4ed0ff266ebb0de0081774c9bc86710711719be715cbc1e4b73f3c4636cebe4c9fe344398c380ee4cedac0bec8c4d02df8384a04fdd5794e7ad25d475aafa4332fc2e8dad369bc8c1a1b36a3d5657e4c13ea41096c7df457556a07dc80f5df4d78bc041178cffc28dcc56312f5cedcc4910457f6f2fef4b57664197dd805023153a754cf126605494b9bd96f133690e776605795fa943344bc87ab2179d36e9f7d89bd2303efb624f8b3890aace5a94295e47c8b47a10cbcf72848c52b1b17ba1c1f21a9ad827645422b3b89908c23455904b8bf37a690cfc060d6d2e6fd0891e09b9274ac0c41ffb3f05de35f6d0c08d329f07d51be0e0bdd98d19a779f5bc3114aa69f8d4b6d24608c8e0d339d31c14a9b104616b404fd34377f5617477ad03ca1407794935e3e222d3a151707875a650f98dffaa0a46caa25ba5a8e64f63fcb2402c0785b09ad64d364b272fa3ef039fd57091fe3400481c16a67ab3ab3eeada8a3a40a2bf724e7512c7850330bad1243d1ea51e0ad9769ccc503898ba1315609ddf72820e48ac4782dd161877962c090e4529b11658d3987a32165cb7d593f1e1065a810b757cb8f822cda591f4e4676920d0919492678867bbead3d91165db720d92a1c30c47e33e6e9c0d8f9583a6b8c3f80d9a601425162cbd0b9a5156ff07a03ce07f43936e3d1dac221a2b05e0aea7c1e2f3fc0545a02e7ca729d68124a2279b12ab50c3d3ffa19eb370c9d9bbacf168b71338bfe7aec15fe2b0d0452582f8f4bc4e59abfb1d0ed068ebefbc89da7c03ed0c5dba8994e5a61c7ac81e1b7ce131752335fd00a9594b5edfe55630a8dae3c9bc6fc7f50271a2292d82b1bc6ce9925bd4e5c3e327539f93d53c68d8ba90f4cd1570df8e39b1af93dc856155a35400f1260009c58f33321664450d61fab6e274674e0a2d2df4cca73f8b0bd44078398373e5ac7a444afb1a963f40a984dee2f0e1dfff210f8f8bcd6af91192f0d1e72deecd41b4359e09e1196618a87fef076fab4038d523566246fcff63af2259cfdcc58c21f75623213f5008cad9b839cf162dea861827660adab22a58820da382448d9cab43754dc6707c70e984c6af09ac390f7119f9912146df0f514fa0f6eb2baa8e6dbd330244b17826396be91783a4de689aac9cf89953b063387c3ac61019c24fefd58d02542cab755954e35505488b1b3fd596ef6bfb734c2fd46597f099a57e24ab9b594e34bbccc1878aa41bd92057af2ca7c4af11d726397c36467e3992a7596da8f2d6809090d760b5553fd84a6a7c503c91ee09b0e1ed94a2a28738afe6fb0232c3970ec04102d82d00e46d2c950ea906a626a23b1326091afe27418586d68d366c6c1d5a0de844d22e5e1813485d203862bbc33328cef3dd0d24d50fbae0723575be0d62977e93f8dba8c0bf950e293e7cd099eb95dcf10027ba525517feb437112f59715c1cc1a1ea5c8cb96db2fdd7c56f908bb0749b55bffe874199f3af8fde2e23500cfd1381f4258d96c92c2d47d42e71b79e83f9b696d51d07bea853285c6142af033064d4ea8fc2602bc7aa4cee85f02f4b796f9f360533a0a01d35e863bd13aca1f007c3efb4579d603966c27df7ecabe002a6db60d66f72c78268ec39e7caca719c417154bd7f834e844fc6cd226d561c54d99dec0341023443ced7b1c4d9bd3f81a8e8f405ae60b72179846adefd8d7b4e8e1f878b03e89afe7ce5329a53a421bf873c19643b18b3d4ab9cc1c03d77b61253b293bac62a477a6d693d7ebc95382726c2288a59c74982669eb2cbf1b44531c2bfe7ac56a20b9f036eba825c1d7a1e2c4497ec64504cc719c80d72468d86393fb25fd6f7ecb4b24a41a6df419782e1ca1d6457ee028256d1a645ae634ce9604d23d246ef84f0af4d99d9d836b7bd919addc7d23566a398e12b031988cc1abcc657d61d1d566f42c0ef0a197de485c3f12c760bfb5e4ec7a03c1aa81c9b14d15a476bb00509534777ffb709e49d759405dd40a698197f3c6851a5852d657d65fc4387c480b2a0838a510c4161ca641b059115be0a16e8bb0377a6bd1902500c0fd4a5f34284731cbb3f8ef9b997884303ab870a6f3d840d2cb4cb612c2f5a7664f2fe108916233627d3eb409dd35f6b9808e4e30a87595bf63b71711ad14e31efbacf6305db459b5ce8ca27e362f5674f0ef11c4a1455b4d0eb791d6569e4916365819e6d969d03460a1702c95f9f5741236d48ff3e79749f67e75db594d14af8b1b1fcba42e0a3704e6b308507b1d5222e100a49dae4197841d443cca5f5859da9e0a6e9eb61efaf0e26fac597ae8787455305d07ffd111f03522b89eedfb26d5ba35384b77dfbec2c3a0ce05f0b8ad088ee50f25041492bcbb3485ddfaaf74b11b8bc76f18cd2eb1d4ad2995414dfa113b26919d7bc1981c697bd8d20b8331876491c9d766ea96742e66a12ac285e42019d12c4caea87cf9b30466683dd19524d8ae76c55ff57970b541e23ad94fd27f1c10fa7264494c08190c4be22c65e4e9e0074fa5e32e5a04575272a70bdcba0a573a3a84e91b2cbbdc9c152cb66bd59e6282731c384be6687bfff96d081acaa0a0967e1b53f987d6162a5e67851951dc58198ff4654f679cde58858bb6b1a0f5767b0d7d51c56562544fff525d7621728bb1770216ae58474c735c884cd66f0d6d0610f651185a325f70781992f8511009ab7d035b230c21bd158fa9555e5d3bd5042ee3040d2dac77e4774f46833484563c6ab3b16307ed3ef91cbccc6e3a47f5da3f07f23dfb346afb85fd9e7a77b153997fd55be5a2e677fd1d6464647ca0e73936d8a336c391b6d2c7ce8ed385ebb5ba7064ac2c588173a1b1829264880167d6af649175f4b82cbe848534fd19f5ab58904fa2520bd24e745df23928f1459a2b7d7e517a327831cb6e5fe9130cf53870e9e0eead6196058f88b3526f86c0ba51b7f412ff80c95fef44030ca033a0acd659ffae38bb69d69ad5ec41c467c949913991d82d4ab28a144c0e02a650d63967e6cdd1343c8a09202ec05f205ccb28c32f3ef66427d0a0eee7cb29c52ec0d16ea19295be6d370f2db67591ae144af747b8d2e2ef64ad954c2928a2436e1a82e940951f9766a3b614114d99c256f645282999749d6ac2786ff9e1379d25b753fd773f779783a4d81084ff4a8900c983304e6ec34878d1e209d693587ce0be820650dd82c118763baefa9d98410e12708e821f2341d651d0db976d916eba7d458bbb9fb614378464d7a83c0e29b632574c5aedb459c77db0f2108c72054dbb317530d5e8e030d3bb83f432cd8036cae3ef55dd0cc6110fc0c00ea119659cdd24fd55bbcbf24e8d24538d2068bf13136737b3cecba73fd9ef4f5faea5d6e2aa228a339fe5c871d8cb9bde9a532cccb9801112335d6250f411636d9368b704b1588d608c58839c183b9560b750e8ca670b7dc8c91475d89574045d39e9d5a69ea7ae4b180de0961d4cb0980a052637717dc3135d4f6a4a509bcfb8edd2942c2d338099d6b8b682c54d4534aa5651e1b213fb95ac57e59e7a6e8261aff1722a189a9b695552dc5a6383fd9b2aa6a755d53fe5967b8e416bcb4a825e6fa67ecefbd89b8ae4b098aa4b847ac5a14a10e5839af83ffe903c843f26f5cbc856d452a765a0cfc5c5323731d9add7530083a06582307bb2aaac1e676ea1ffff358d8e5e4e456764c1449f3f17834c678d0fe820c9500a5fa0f179cba33936ded90443bdf1fabde95e4769bc67789cfa54628d65065b6aca93587d2e99cde5e1a8eb50c250d478f7ac4f6554a766184c23f6b393b5fa9ad1bff6b63d8d2df3e6d40e994acc6856f3f96c4fa866cc5d6e7ef160f63057b7120ffd5833f7dcb3fcbb0aa2a1a147e7396eec6756210b3607328e5d89c5b504c45032ef56b08d84a79f8a090379005fb97ed4c392189f656b545a4a5f3851db54a0a32b92ae5689bab81ccb931a178171ec28066777df8768b7c8e88abc6a8e39c5acb6ac28b929e4f56b7098d2dc8251a3c28e8eae232dd6b44f280c368c3eed71d97d5a5c3842319bc4af84eab6cff9ce19d0af57ba5a5b4cc8f9316df44d9cad01a27cb42083f64ed9f3684089958fee4d450108d42bea5b1b0a5e71de68fae23b04d5b86f723e1a8b6f72508e51350b31bceb2ac4c6a437861cd212490b9543c20c69a5eb04c31be6fd115b4ccd4eef2cbf97ae97a0fa111785468d2cf46e54e9b9ee912738308e9a5e86fe77bfdbf5fb89293f6834a33fcd6b06798c7b657be3fc3d88b8e82da01e155313bf2c149d67cb8982f47b28848f51103f008346362719cb1c0fe7f1168c9c932ac2642b0f23d9342fec9275d2b926dfbe90ff2d1508f8b5bbad57776ead1b8b8f79c16566e8af7d407b34e7d23b7a66884c7d1856388781ad2f3933372334b09f93b4cd9ea4673fe741635cc1f0259f923b5a8d6ccf921d0bd81586d8df42576533fa89a5a43f584aee6ebd8c152833c105ad9c85e338cc5c45dc3c32511c4737a19443d03490b01b41db0f84d3061f97e2db7726de1ad4ae6e7c1ec0c43d37edb994de389cb3d3fd1630377b8f24e89d7a0e720616178f00d1c9a2ab1b7c62c9e907823124ca7ce6e88f07bb79e16ea9a79862e5c50f5cc3c36e14d3b461b80302bdb613ab500b1fc769cd08f2edd646888a9246dc97074b181a04dddeb24145df793820e66a4b7bfd90cd5c84e9f99c8cd9cfaec9aa0e964ceed05adb029e83274181dd48330bfdbc8a9da61e351725900439b5d80192f9f8e46c4e0fb0b8b9259f97b5862e48cc9a6f1b35bfaa02d62a606a69352c2338c4204a70acddbe317dd7899f8cd0b1410b1a400efac873d06643287df3c9c123e01a36300e32cee6fb60d81a74ae8c3807da4049ae8c6c7bb527e99349f79e060f778fdee205cfa9db9c8a500206ffa9474b1a8e7d85a97b1df200bd05cf3751668a22f6334965a38a410b6718585128586ae550e007cafafa39ecb343497468047498d8c9b9df08d35d06921038e00dfa442056cd6f7e902b14c9cdf00e481735d22ab7882292098c2dac7c02295f038908e38ffc85ae0319d4fcd4af7379ee56d7ca2c092f862bacf0a6067edf8d0facf1f7862dddffea2a18addc255cdbb9bcaef5ad35a392557d47b01016b57388e8e44797a8d324b8c9efa0a77d2684288c5af5387e4d99baa25e30409f6e630e8190851f10c013c393f82b93d3237c4852a4bb5fa8949cbd778487d58c09f315cebd7ff73a1fd81732aef6461d5d716416f0560484449c796a44126edbc769ea187fa5c6361b69020aeaf03c8d395e82a0b2d1eaced320c6e8f42d30954c21f4d9b5be4b9482bd787851bd04168f7d227231b7fa2a7a246cdba9338b718388c63405af34f1c1753c8061035abd4da50745dbc18848d78839a4c332b3927c3ff769aff729359341fe0d712cd4099e865561c23f3e9ef6111f2198a50890b56489b5775296076878534ce9d44cb2626bb442421be35c08ba319f24b4883f743792316b7a2624b1218a79729c20ed459f76b5129512b62d1d51bd8ae7f07b297f4f2e35ff837f54c767d0b77ec00525e195263979ced0ea2b782723ecf56eb5bbc4c32354d1474e9b507f9a6c70b489aa46a0ecef41b19d35a1e49adbeb20606bc0cc7a70d7d9530f4107cce0c8f99218980751cb21bc3f04dd25651c3fa81b9eddfcbf600b6b96c3540a38fc7b1d981fa10f30de0fe1e60ab667981b281f13ff47c79c3bc410769041e0619a236ba5fd0d4f45778d43fffe4e22ffa54b44e9793b617e5e6182f6182cbff57d63cf7996e767611dedf1b849b55b9b224b17eaf4c89553cd4d7474eb9207dc8660ed0070cf2017cbb445fc34cac680fafdb7bf5bb9bf3d3b236d0bf243c975cabd00d23a0eea129e441f2beca357c5e8cc1050b1c43769a219d6206d6715f00ed383a2d17f8e5e0a432db1b7dc4e3607823a05d37ec12bc9d1e7eccb11887d1f35e2fcb4bb16ce2e3600125fcfdee1532dcd2cb36d27d72bb2700d9a5bf6b9a3edeee0f1417bdb1fc756a8edc01224d6b388c165309367e3f39aa69338a0014a2efc499472c8f1f17913684febbf1b7f280345780e3ffb71183b56b91eadab4d11d02ed3354bd996862e4b0e2e10a9a862e29b4d72e0e2e98e089ac364f51354bd1456afeb401b624c5a2d839b7d829b934e34ce7c89e4aac30bde728fe1f43eed6634612b3b8a20ee65431f5e39a321e9080fc6c7f415395e2bc4d8a61663f6634bc22a6bc54067c5e39d202518b5f8e213d38f9fdb56d7a089fff2e5167aab3ab9450cbe58b284c3a498e82d71ce4e3f3d5b8a4f49f595e25f263ba15b1e213425c8dc1d3a2a0a0a41ac2fa7bec95d2552322143b360c6f5472a6514ad7cd7a1e5b5c78270bae76e0ce722a0f17e81658ddc1e2a2012a8650d9da62356efe5c5cc51cf414471434b86b7b012fdc1291278619a41b54c79e2763d4ee8a3394009e2ccf4390e1590b9bddcc543e11852df7b4be1599ca8e88c5725ad9673e7b3751b248414e3826dbe9dc3caeb44a221a34beae9d205a121b1447cdd752e93f8906be68b82c20002511bd4205d9337dd357f2e886b936016cf4cff7ea783bc9d64e78c3b02403af84da9edd33a468e7fc32d130192c2c1c1ab529f251ec9091aefab805d875d55e8dd2ab0dc73f85a31017b4f02466daa52c02611087c0b086a3c0fec65fe35d1cd5065bdb204a48e1c8b721ef9949d569eee39a83baad7b57401b02c8d6e28eb756f54ea331d8e4864dd97f29898e330a32b39684a4ef512b91a0e4ee6e9a3c83e6ac694109f4c57f7603c7e043113b3317a93115c47852faae762d94f3a369049af936c8bf44989b7747357dfbfacb45c32d974fa97a47057e23e5d279e4778358e95df166b5944959688710a84d7dad72d6d89a125bc112b3c25e46e7e8d942b96d72b9ac5f6987331b59ec3093f5c068fd7d8b95cb0bd25f6996735e788996dbbec2aadfd854ce6fdba55eb2f1093f75830239898bc2484548defd5b5b974ae1c1860850f4905e5a9445fa1e2ead3468ca44bc155c9863d8169abc4d81fc5d54a4e63719503850ace777017734bae7682de21e3a0e782c1f59de047a9b3ac20c3cb8a6b0e087b8978cbe886752b5140ac35099285c913a3ef1c02bb9a26cb40abb8e4e2a5c912ab3919970f96d82baf0eef3791c5d3faba8d8a992fcb6935a973d393b65cc317b547b09a3505677a8cf54cde4f1b33953aa0af083383f1adf21b23eb3bb333e42224e208d21fa72238f0ff82d1872069c5895dfc158bdab1779a96357830ce6c77f2c94e86f481e07ddbc62533cac09a3ed7a8c74c7126856dec394c0edb36c71fb70c369075bcc070e57c0735da95b55c4e98257231e91fc2af4db659344f81dbb3822d32b0d8de425d9a22bb50cdc76ac7aeb0c1034ec82e9072307f88c0f852400ac4c94c85ac0430575b59275f62f81fab7bb1a7cacd107ce8b381b1986eb195ff25a98cd5ed52b146942bfb5685279f486742e9b2a8a87891819c019727f971e3132f638f27f214190faa36c315f3c44348fc732536e0fc2f86de54774a5daa6496edbd6f90bd110305d40ab6a890b4b62d7a2f85fd5cbb1798431b0169719aee177ac2718b175c6d65af9186435fcc8b067ecc45f94f6fc07f79deb59f2a62df2da09088c9603a756936f2903c91485c48bc8923ddede24b0026abe7b60ef771d9224c6a42db6a6dfec4ce2ad391dd04a9b8c856ee9b9bafb9d42f0f7c264be9ba00fd218d5fad50c440c662d39d3473e1f17915b9b484bb580dfd8936d2bb3d2a8414d1b5bd59ca48256e1da1e5fd8a46dfd81c821bb992770880c4e2fe55b4d2ec5fec6500cd4aef2567cb0c62da564725c3a4fd94af2c811b397ac850c63903005ffedadbacabebca540943f4057dd49dc8651ba21c69a109f76522190edd1beadd4b23a4cbf560f421bd5e59b1a1849e9cceefae1dd8ee1abd20cbee5bb5878da670efa9e81902889f2e92c1f8621abaf50485649b71f5923d2b1613ad8ce208c2c746b35b08928d3180d9ade3cc110b9f9d319c8fd743b3d92c6f356bbb7a91337c3c77b35d35eaa2a15f43ef020646e40fe4eca6527f156a67ef52738f48d1d9310dc365d46439cd864223ac7f854b150d04d4566ee8572d778daa15328d62a42a834d4e27af36f7c764533146bc280890624f8efbe25c47943cafbb284e87c3fb48a34f42d06367ae4b231ee0082578c4df3184382c9963a8c0d34b7aff11bd7791f19e8ad4a07187acfef5a97e6d2dff751c82791c46131626c5b8b0f477b3bf0012a773b1f1ef864795c11af51a6f77ea7ee6d3469c3916fe83d6222e2c9dae046f6b534adea20bfbc6682173d159cccb3d930e732b19f66f37d898e8cd8511a01d42d082674c151a9e3d786cc119d8220584a6b064ae0d61eea1f22725a6d22ded07750facd78da0620c0da940923d2e19ad919fbb86c24e0ec92a2d05cbbbc01064845cf923e8ebd01e64bcd7083805bff44a26f70f6a78a7b6269ad4a5d43ac69a0800ca43e0dac1710dec4865fbeb4b98731b584315c143bd6046ddc1dfa1715f6593cf2ca3385c9f211d07c6856c831dac07f548519388b69d6b8bfc6c0db506d3ff4059bf8568fbf1a49648b6011451298a3c49b7e2c3117f3c251a4a1bbbecabb56644a8c5d05418a37dd6186c7b95cb138871c63061ca79157723dc2435cd5db074dc3de93b396e767297a71c8c9ddf6a28f344d04f2a461f231fb31bd76d3a446492fafac139a580fa7ae4489072a4b85b23d622d9fbc0c9be3c2525da158d553336a0edba9c5db16b17393c00a963fd7bdc083e46520c82df8f5dd54b15ab5010da8cfa0b6fd158b6f624ef53f728a895d37a11e874a2332e55cd32e51f29fd22fce87a22e9f43df29074ec4a5c6c1b15e36353b62c4bb83fd7bf45a903516ccefcdac935232e11a59c76e2fca6d0e595c269ff1b0c543f847e4766093ba26bb1c43a219e4b64c32a71c7b5b801bdc0800abefdf381e7a03bd80e5ae97fee128e73c8809aacfc4e2b091e62716e6386a59881c3d3c645e14073bb313b056153dfdb8df3ba98d370af049806acd6194d65d88310d617d935b05f7bf3e89c24d1bad0852b5180ad2189de208f67002508bc0eae0d4a5625f9ae7a5c8bfe07446e22cc661d773a1dfc1fed98bfb67e66d2572dfc4a8ae4c90e3158f8d6aeb6e62e708cd181a17e86c9b3ebb5551891e1067e73eb178cd9d7de5e30e62cf93ca45e2edefce9339ab00968690f6e686ffbb95cd3e7c3cb2b31e811846891e66abff714318c93792d21df69fdefb6595a4089b68dc28c157f38048d28872e06863ca9155dbd38e9007a3fcce8e31a3662b7b562904957d462d2ab2d241758358ccb8f7d5f46a9cde4695141337b11a413302c3f5ef7d3b3f6c4713593945c372a69dd059ec3dc0d067a47e56349a35d7b460fbcd74c5254c1949e3ea0cba5ac4fc04b15ed39861ed4e824ee6ea3158423296f0441f7f4c1216d35c6d75fb77960fc86de4d5efb9ce846eb0f1d662158aceca9089caef6081c9404c0e9eff95dc01868f1fc768da5c13c4a10b9cf618c7063c6e15e94bc8a015bbc86f45b5245f1b04ce5f75a7b70af5afd4430c7008f9adf07d34261f34c108476b9c256716fd1757f6fff0328ba12ddfae3b2d68d90896e0cffa0f14f0443ddc4cf378e532f82a75bbe0c0f4b47ffb451a629bf5a78ba83204ea87ca6768a967039713cc37bd9454c96091ab4250e489ae9ffdbea3044edb7040a48f1051496d88817fd76b4defddb7f91b91f9359ad8138d426882614a71eaaa65f46d99d2435a063d3afe8e09f8e212488c8b29940cda4d824e6ed332c4d532984c6bf69c600d8c02556a51f8a88b0666b0dc134c33d156850b5bc0807e44ae3acfb674ef9a00a44d83fdd28851fe7e80a5684fb410abf1d4de4a8ec3ffc0a6e3d00ef8f82e68eee601b815e20f1def79980eac7e59097762e581639951765bb65eac616646c38caa54bd1a3fd87f423278d2e204d0664610863f7019dd113fc05d8988119195588d5f1f95648fdeeb9e650ca16ce0f4183cbc2ff9e32ba4f8accadb27d13b6b5025690d596d3ab4424aa137a72a53452a5cc1eda0eee116d576df9d8ff1be9ae877ca22bf29f67cddf53590f67f21fba2a7c6920d83abf6abc689658955b61dbb256c4480af290b0af85c6c84a000726be2a07a2a19d142bc1fd1edd91233cc255ef91807d2d33bc120c7c4f455621a968f7d8e32b35b3b4db2f71e937ca59a59208c8c0984d453b66110dc479afadc7f0d0694c99f3eab066fde0c9c0b8c13ed6d7827d05511080a0d98eee30fe21af2784d670994c5bfe5c5a80a05f01247dc245df9db18ab1e8b8bd5793f3f3dfeeee26419bb625fa7271fe94e5607675efcc43ba459fe772d55ec99433e7bc9245829827034cc41594836f3d99e67a9b8c5192d83d075dd75e23786a1b9ed646bf9f2e1f176a668086a7a9064ce594ab48a264495d295fe6d09e5f5f17f8231ff5675e403afa36bf72b25f18baabaf8215dfaec32306048ff6d8571fcc432b55f7d1e24c3ec86c053e11be859c5a57325650438bb6b0335770ceaca1fb567a60e654b808fc5d26c8a4ed3e0bd0fd8fa3c82eec07245d848772671a07ae25ab2de7706d98f74261b8975a27458e366b58c24cd26f143b573157933303aab504126b20da4126ce71064321e9d623525c6fc25fb403f7a17bde7395771587a22eb62ec3980923b2b925ded3492f7898ef5e3f8adee64204d9daf6c6c6f7ebedbe026d7514b0c7bf3d401125b2db2b3add7c96e08a44619a1cbcf2d3fd43d5de80409a1ac95c198821ace9c39503d61d644723671384ad03ccf698a764ee2ef31ba325304814bffded8fa64cbb3e779a8ff8943e538087d2b4faf4247c4dd75fc8e0a06ea8aeb3c10038f1bb47027db94a8a4603be7bd57f34aca9f35e6a5834d571ac8266e3bf56b7453aa248db68b6e4c2b4507244f660bb1acd7d266889539ad14a6a0bc484625e77a3d004f6b60d81a55703eb153c15e7d047ab401bb097e3b7f570a6954806e3dfa900a745baff0c4c878c609b313ee4f205b314d13920c9c758d5c8bcf1c4f55facb1b1cb9895208f9c59abb8fda3d43c7c4011fa66564037eeaf0a8f1d8cf9ac760c74aeecc569fbe0c5c148d394e7fdb20c3c60d11347482c55bdbc8e7057905dfa81c044cff271dde4c2b0bff8b371dd3aede062c6a8dfe1f1d2174d3af23c1f613212bf15b2e85f9ab8f50e7e03fdbcd4079ee9647eaa48f440343041179a55a748c5389fecf8259b13776ea64dcd5ee78196365ec9263650c57a8e160fc18d7ce72472738f9132d9db64114a82625f50b6e628a87d9ff1ea977d47e33f36c67ce3b9cd0c5d56d55f74c1b0a974fa2cfb2283f76c648f3fd7c7599e02d3714c18451ead24eb8b4d7f95144c61a738f890948b627f014b318667af67a09008acbf663a03f6fe5b0b4fc1145d855d62c1b5261a5372fb8ae6372ccba6d1945bc7edf5dc287e61015010743d832b1a8ef31010dbcf81d3835b9d06119eabf0d1a5011762c242d04fe86a9a241dfeb12e46431916e2c49a04ca53b1493d92fca5f7ac844057f9cdd04a0a36c1b314fdf40a68ba767067ccfe5e6aea5f5e5697a9dc83a53573d14a1a158968226599be75b888baea56d24bf40206a88dacb389825c4af51470985769c34570c4956a2040000a139e2910f695bff40261620e3e1582e07d0d794a37324e2fc853300ea1a9b666bd577ea9924fe8c280d683c93fe66c8a73af268656ad23a1d7a6e4959f844bd6f83536fd845215d86f1347013e9df0fb36f79881abfe174208d4fd7228dce81f7c3ed190424d848257a0c37e51eaad15a0d316e1462cf8ed78359db1acf0599e85836b926bc439bfe431a27d96bacf60c42d395aece25d9881e35a2a5048054fc5d38d965adebfdb8d70597a37c35d00dcd184eb3992e341f8d8a11299f2935c9fc0424b83f7fcc2c68bd628799ff3f45faf2fca435b93f9633efd6894b14b9bc9063515dec6c8d3c92f858f2ef4012eeb3c299b28f7141b688cbcec2ed6c96c744cb69592e43d68c3100ef61990e88743b88b4c8ac9864ab759db86b8b945ac7c7ac758815e4572d51f733a005069a5160af92d3a6a5c9438d155578a919e6c9645315bb5b5920aa129425e8bfdd1f9572f94f2b861608500b0723d4606b528b814b90f38bb3a06e519c25fa86319725fcfe54035aea7fb1ab27326794523de4bdddb186f0df582d87be413d243c809db0bd93b44309c3f9f937204abea4ec568473694f097b185c7c951696898ccdb6b04826771da9e7beb90aa49c66ce1d9971208d8a34da01b6b5ed3093706af5a4f3d9923a0fa48b8157573f995b53841b4ec325a701f1341c08bd8eea3bdd22654f871639d15873faa003f828d68b67eafabfab9deea6611050d2df1200ad7ce86ce8e36c86b01b5bd9ecbc267d039b2f0d215b7018e3e246443e1a44cdb471e468763dc1694cc62a35fd0486e9fa1f88ff24dffbb5ad3f68d4f95ee0bf517026f3259e447848cac415d08db5cd24a769324b876b080780163442ff6b24a6ab881261f22cbc08b7715d8a5824be488b0a75869a2996c0b025923a13906df24f65b6d2441af3d943cff79315ff9736908372df95636ddae5c2ed98270781a6c14065caeb0073ea9967cd92f46c806b043235055d6075daf64755ce0ac4b5c67794b746f9da27088fd9018834ec4e592a3716fede365f963dda01f0ab134892034902f96e0bceb5a8e359e3826429ed4a5ae5be3cec21659a33a787b91ce0dd5fd0b4f0ab39a5094078c4c60b770fe284a11f974963a0e8fa3d88959dcd36632533a66a35e36774c935e1ecc07e4271e09989269a46686fbc7443ce4fbdc90e837c9aadb8f59c57536e302517c681366f7a436ef9fe348218ddcb2828996aa4412f87156e53b91f79a778b403152bf8191f8317257a06dda22311185eb0364d57dd94f3326def8863d620ae937e68c02428da741ee72bd721929d4d838ea1332fc06357303c685601b3d6b63b622394df9d69c366d576e92f164ed21e580d2e849346238a5528caed3f69e8f2b0b943f749496baab956d5cf279f14b65555026ff1c046e2628f8cfb920aa1fa5cc8926d6fccc51f5b0947cbe45f4869fda3b51d2d5d73237beb2a86477e066ce627e1c6b769f8725b8844719c8fb07877ac4cdce4555970a003fc4c37daf648edaf21dec2d94f70ca7ff48909ea33156c48e247bca12a08dc7f9d82ed647795232510a8e45c3a831102d5279639a563b59ef721f4a9e9b4bd2d1803f36d69787c159d081ddf272c755ec91f0be2a5a0a7be07eae47565085fa031f34b4598cb83079a70afc208052b2902a2e4e4419963d89335e51bd5f340d0c1316deb9b8217fbf1161f2da545d97dbc72fc9f7614c323792bd8e1b9804c5e2acb70a558c5f8174bf92bee1e3e52360dbdb4b06fc35081a9a7f206f2fdeaa8501214f66b918b18f3361d9414210fb4e954b27e52c9d6ab0e7e5849288b52ef80f6ef0aea79a2405abae121b911fc46db38b040b6599e2abeaa353ff08deeec78cb922c161bc86b8363b922c6037925754254fc61a64dab651e8f0126f5a9742c02aef42e66f8d996067d4c7ba35571559fe02ba8639f9e38d756766d66f5f7a36dfab188d8e9289f701fb95c2784f9a6d604efcb82b6a9b5ba66ea341259e119af9b8fe306488c3192c50ce09ef5396e731f3bfcdb5350ece00c2a092b2e1e03aa2630766d6d134f3b2d72472d8bac8a507bb971f86928a0342e23733b5e48216cfeab544a377a4afb8d975ebd75ec99e84219eeaa70ce7d5d47e6c9e73cf501e412e32a62f04aed9f2aede9d441174c45bea7858b53f2d478dd753053bc826ae5f0eb31ef6327452f8b95fb0533468ecac09cb81d2084134eccc3f295b17c5471e95485faf9ac12da8ae1cbf3641719e9e830dd6887ff699132ea03df05e930d30d710e53dba702fbd763355d6ba9d82eab3d328b1f5b46b7da766f529a825a352190e7f9d7a8e5b16cf308e08907d7c48646de8769382ff0226b2fc5eb01e32f30bb512f73f1b5209aa24af23533964338b3797f9e434073aede7aceeb496a1b28b541564c3f6a0d00881ff40257dfffa5f70abca93041e0775230c28ee417672102922e6c65f03883292a722ce8d48e4d6054be5dd7ff995253656108b71a6046724d15ad419d00fe8992be41abdb57bf151d26bf5f6924be1ee38ae0aded12c9f0f177a8ad6cefd57eae3a7a773743feca124db1e483fa861e2c575e67825e5a133018d0ac608a8ba474a91aee7eba8694ed24b88580c39ee0896c2b944ad6cb0ddebd8d265d50c0b814830c9d49b1e6670eaa993113b3869c04f19335f5b9aa155b8af480b88926fedbc8a5cab459ffc67c709c85bf07fcfb478c3cd84c28745b10a22d70d9bba515fb4297fd33a16dd3deef7512ef5bfb742cdce8121bb6e9f6b14b537426dcd07347d52c40f64c08986e31a41b449fe41d63400dd62de23361222e9a2b344c0197d12a2479cfdfff62b1f03b30b4c7df48fd2e46aadf00d76c9876723dcef6c168c80ddbf208bafe2ae5560bce6e2b82bc6ee32a056e41bd44c6c8fbe0d988d9b7236546c2cb4451fed05b2f3f55a8d4e7e54b3bc64fdc07b1629ac9b3ffadffb2e75c775e540605c2996d247a2c867d90c7953f88a63a9a48735d3f1063f8284513cfadb75f7d63cd00e28aff93957e641a8f4a633e420a55fcb5f8eacc482b958a67200d2557dcf8d34e8141a0813289cbf2e4dd724cf53f157c70a610a50263dfa1056e4e98d6dc0eda95fcdb178e6c84807174312beef1f2ae578478511ebd93151580e0b385ea88485bfba33d6d5d5ea859979485af7f40144c3e33b07a2a74abc6569f96ebb7e4f53150964672755351f6ac0b1c5061381b8bc53add21d91113ddaeb62d7015a7d93e3fa8247e5c35868dee708f702e5566492a5d104ca34723ac0217787047304c6ffc2a72d71d93ad952c674e959d04e008bfb0084b100ba100dd8240e37fce9c9fb8b9450eab4d3f92deb3c98bda2ea4002a8dcf56c57e99277dba39726480f062c5da1e8db0f157f28992ea6350929e81530fae8e7245fc1d4861d7776347c57ab80a1b22adbb1f754ca8112e4f4663a9b7f0a88a95511fb62cf7a03656891457bbe677e0b9cd4c272efebc47e9772dbe2bf46b76de66d88be4f4f5454fd102903bb81bf1a0127e782c5e1570a776188b659d7b695fac55c300c4f5e760b264cf8644666b94599b9026b381ae93e0bf1b1c7b7c45ab31c973754b13b20c54926eb1fc556ee8676e4a10bc031ca1b94a5895cba6ace9d0d963922c940bf61b8a728324a32fc2991c07097f2857a30844f7b80449f3e0faa75549e48e4a807df9dfd1e66f434543b464c3c02736c9329dc836e273a5bfafd8450e4f7b8915fe9f469d9d4e06ee1dc81c5a8f94ab87dc63a399c3c5cd9cf163eccd477f8cd0ffe6457eb993b6f9cdcb5f5e4a96210f734170336a45526dd14e4e9a236d7e5c322b96a7492f9c2c7734dc2738f97c392e087dbf6846a4bdf4723ca2619a9cad40133a64cc2cb8acd4f7faec1419cc9a545ada01948cbb6fc4a9894e0d373f727a60dae2b6f311d4fb2d640083affb7425ab1795d62d179cb25a91b8c623eb5fb59d55269e56d732dd91f7d881239d0dc0ccef061e36690b9938b6a94d47615949a3d650e1b3e99fe459c710907650d83c67a1240f9151456afa8a40562976b9b9d2f0e2185cebde0c4050ed73345ab164b3ed47ccdd2a7b8ab2952eeee1aca9b601c7460f04be2b39638d6ef77cbf3e6779f03666a9d58a69d48b70913c93bece3d1f54f707213d14622657696a9bb900b6955d0c3cb65ad7626efc2d1d5854ed002a823575741ee089d3b76a7c4f7b8e1471f497ab0a60e0cd732e0f58dd89d9e9ad3a70843740771a48972684c41617b23462e92ea342cdcb8706d3a387ff64092cd261b862494fde60cec2b178d364a7189e1ceaa232e45cbd4af225e61c9603b47986abcdb83d6fa5bb78ede4774cac6159f44d1ac8eb258552ad249b9b7e03a6ef90e649571800fdd8dd953200574386f5271eac5b46e5b478f80bd33dd6f057c5f331a997e55db83832b52a303311f57789e06fb3d9282982f814888bdddf11cf559661b4aa7531ab1ca2e6f9c42e61097faf30fa9734622bef0634894a94a3bba3da8ca276249044bceb7c95a48c63f5933b8f991c9f8fbc4d04f9897bfd872a767088718f071e753ff90ee90fc068d00a73baf43967c0533a479ceefa229b5e2617fe0c0b29a700c17cdbf8fd7e83bbaeff67a89a4db321e55d9fdde3f691b52f3b892c111d6d2c25054c4cb935510fea8e3f6cf5ed5663ee6d4b53e5a599c3ebf65eb0f68bba1985a0308143e41eea5894bc224123f5f6e00e1ec13c77f09453e2b55427619d0cff9b1b64fe683e5ccdbc8d18015b12f895cbc0dd9a9cfbc74129271697dbcd17da8915869bca83d451072b7e1d52d6ab1a595d7d8da4afd8d52e7c5fac75664e46d4424c6c5bc138c61b9b4cd66bcba61240cbcf7d77b4e6c00362ba4405d6d9f4941bff23eab608b2a99477c9ad060b71f7e1abcf44332834065f124aaa6a6956259986276ff9a6c4c8f276a575443d370e17299d817e5b77f13c6fa36f9b0f45aa4b304cc2bb8c09c059994c30b1ac4cd64aeffe29b9d72cfb06c96361976197d526f9f28c1761ab117d8d3979e62a0cab30a08a15db2f73cc21fd65c19a07669f6cab0962e5a350827eab50ba76eced2918145f5c3095973f16c7c083bef28559f4f66aee57269d09025879a77beb966e71c4ff03934a525234d0fe4c0ac0639141c42212aafc89f268cfe170600c54bbfdae133517c3ae5edc5b0b685c0297b964083dc61b0440b40398f526fdcde531402ea3d8b40ffa8ef9776ce757e6a29a530ec81c61aa32903dc2530925ded0bbc899ceff0c45ff02fa53b8d3cfb55f669a21f8e0c9cf055dc8d337e005e09664264fe693bae4c4d85870a7ad741bf7b41f45896b82d13379770d4816368b03c30113b6df07acb17b0a1b2daeaa9ecc9580505a1e1af1d1c50bf7cc33effbad961a02f7c626b4a878fd57c0392c7b7508010e01959aa2a0fac7a47e15ae38e249b6a24cbe35ce243f25845a6d4fbb437600f7a42d34cfa06693067016fe3729f800ea9cebb8cd93db7e5f50ce24af417af19d2e3422aab54aa0c2031abed7c39588300b79a9b73e642608e1527c8917d1a11d9fbfdef0932bd35b325bd9d5882fcc0aa1b100e8eedfd8e99b0d6ab8a74daf05f495cd8ea3fd348a99143401ad143a2149ada3b562d0beb879ca225bd6f49862faa926a7b73537f8ca5838ff2ee72a37a6d03e7f59e37b3e04eac0e83bec0388ebed676b0118e8b5e89441354a10a934a8f74158e72cf788aa40921e288036c2f7827cbce889dad6087ea817ef55fdb096c4d90ca91399b3e9611ef48869ac2130954bbc0c664089eff35c708b4a568b7dc7525cf1313790f92dfcd99b39bacd8ac4cad2c6ef79736f288d2ea62802e7438833020fb849210438a18877be02b16006671317e904270bef664f0592df55bf489cd77650637eae370e24c1adec3dcb69a3b9dea60f6ffbaf85d2b8b26d757c81f9ba504be24198578d5f6550e5e3d600a53ade1fb1740daac8fa874b088f5afbbaf04ef477efd112a6c3043d169c7d9e17087d036f9b3bd15fa2255f583ec8997ac88c8310a33184fe026011a3b8d12d8fe5aaa6bc1103cf30bcbf921ac9759b667df34061502482fd031eacd23e15ceac383bdb2bdbb47786184e1e6a11f1d3d6601e476e0ccf447477f2deceb858af756668b2215602696f56b04c942eab2bf78e4a819e4aa2771ae47aed4b8b59b299b159503174dbb0707c6165fa088e1a96c457247e32425d7b87024133adafd56d231abc9dc2e5e24a04d606f60d1b8fffdcd9a5b75a0f2f2213cc1b4b9cf42327375bf1c525af2f202dde19a2e61be3b7cb644e7c33d426aba5d561445b0db8c3cdf0507d0a616dee5d7698373440685023880e6a5905e2aa7a1d9534a38d93bac4abf1ac31e915a227595695323e21a7af99b2b4d591f5d84b019d66966d89be23d9b2a193022ea2b5f67e9ce34433ed91507584f23e3133029e3c5d7c5ba17c1bb9c285e5b3753ccfe828f524f062cdd4a9d2b2d8a9462b9d20ea4e525bc004ec5715ce7e5626100cfaa75786630ac230b6b151493a0bac5360115ec3b614f8bc63c1c32e7eff0882ffa18932ddd04bc7af766ab561df56bd856c913a46b25af76efccb34298e98e3817b50b792fb178937dc98757f8b71cbab323c715e7cc48929c5f8b29792ce35878050c751724538c8d7eaf6333210d0efec16686a61962bda9599e4017a31845ad42b30a7b8c389a124d2321ba5a605e2350045810d8ba9bbc08cd06464027e169836ff6e7cd1cb76db8ec73af61d77938a9df3be27788dd811c6f3f1d99538c9f84ae312b6064027c83938e4ed9f3fbe510d05113228f0a1f391a88cae3de63048671598ebccb4a9be20e9cc07742b37ce205cbc722ac217cf481dc03a3d5e9a02f96c188de60dadc5b40d3d6301eed9a18c8075d7e35e2ba144a0e0e4eb32845465d146e4f9519668bdd9fe276c33fa5f4c215c701e8023198bc2aa107deb9871e06e3d722e277a653dd318aa1d795b8f3d388c46efc06adfc7a72f3010291c76ddef35d1c6d572ee06e0249472805a45ab3da0fc061ed37b84f1806ca508638d8a1e68391a399a69636488438f5aa477ab262adb7a4a2ddf7b6c35f05c6bf81b1d3a32151efbe33133c96d01e1e6a10ea00e8f63b27ca3b69724c1bccb3941f10efa7bb472ce8d24b5eeec9f177e378fb25f4e473d7cb373081cfa0a9f6121975b602de63971d3a6c42b2047c923d4b5293e1dea93744dde829300650f2d32e21050d96d82f2c2166b5df23cadf72bce89dec262699245ea7e0a934718c11ee99f1a9b25f0bcea0249e77e06566b9167732f04b9e4d11fc298ec0a02c8777dd9de63ed3c29e2f6446bec25ff20258d65e3286cad5d53792c6a1d625338ba6ca5f1df16d99cc8bd0e293560016ed6e8493c76532ad0d444004c4062ef7f7854531b0d24ee4ba645a51b1bcb9761010286031c789ed7adc81b46cfc23db24cf042d0b1b02df8c7c08b192133e0519c5153a363c9923aa3718c4e3329797702742a99b61edf95b0a53285586dc527b41682bc854eda09685278afa90645200f5468d91d50ac196a7a6ec5400f3edbbe489f7b1910c8f209b3a699cf02aba71ecd1a5483f7e8b8ee0a309345b0bbf898f4a8157300decb0f20febc34bc0f21c0dfaccfe3ed0761d64c902e7512391feb04fb6b1736b646652e984c5238f3bcacfbf764074b38b00f4aea8e9f9d548b262848ff2af96ac756d2664a95249a96a01a1bfcd9582ae76efef0e597d670678ad63840ef5d3eacdc7ec5ca32e0690cfd5255284eea9a68811f0d6cddb34f7c0a6a9a15f31076f6dfc3029a1a020801f541d581a0bf09d91d3b5ae10e15acb60efd6863baffc1b2853ca621bf017610005fd1423b236e337a34884f6135a39ba96c871bbb9959dfdbee4206851a42eec12f8e90ac4906a9a9e19315e09a553079e3e1776cfc99405f515a8fb44fe5abe7f9ea82170ff54c35d4378f7311529cd3c64b86b38998046d79bd042b170fa52e8a7d6a8cf7b8322e575bd06d586b90bec2052ac4a79e5bc5918e21fb8ab2c774568ff64224d7c8abcbc5bc3ee5107b5f6023fa9bf8f199c694a2ec0f127a5ae6596d31fe353beb5b7bf3acac033f85a98fbe5d9d3e8a38d7b84c62d7cf3c8d3147cdf6a8f4c08665d6396a8eca449256971f0a67481af740db428c8bbced8d3f2d35170742eca12f7efaa72d3326c8763f0df9997a43c1bc5563e01481dac9740ff0f93572eb557f646bcc37264231fbbde048e7ebb11c322ef63464fdf3128be6ecf2bb0f9f88647a52c5bcb115170b412cbb854f424d7afc6158e445af904b0dc57f2f491548ce5562b5242459ca3eb13de5d7193c149f451d26e921c9bc5fd3c45a45817e2cae469e963ffba6e59b69a9609a0ea88a859a5394f3f43126c719b0aea177e331e29c402b51c351dcb5155308be6830dc7065f3a22d55e0859972d9d654770ddea3dce56f71723348d94b0062bb5a6e7345c3ab16de5d1f8ec131321981868d5c17d23acf5d90b800f50324ee9bcdaf6b1151eab596df9dbfa1fe2c568eb78aa2520581720a61d73248b2ddd7c81a974e9f8a718fb8a7e04d25f7130bccb1b980a9c3184e73446bc290db795d29fe89f278cbe57c3fbf5b4060cb25055e2f9b0d9ce9cfb828d3c04a4cae5793590f776f374170f33261402d4545e09cd1734a7697e87f5df3678c0eab065e9443656f505b854fabf96ad0b2d1d6c043d2c870aef82618baf86605340cfffe35f212623fbf02aabc8dfe317588b170e984637715163b99606d64c6fecec84e53b245f286ebbb9a12c974dbdfe9c775269c99cfca4628d8de4b60966cc1c6e28d71fa1833cbfe661ad1c755ca53d2e50ae3c75017522230696017cb72c3429e6cd16d7d1ee38c6c70e10cfd6a5223a7c1b869d827d55e15a81c2cb1f186f7133ac447d5765c782bc64ce831ab7da738dd1290ca1b6287a97da319ccf6b2b50857daa992f2a125718e2b9b638225a4cacb7df58282e5504f646c43fb3c113cac68b3dca7843328fac3fc436eb53f4dddcf41b547b616268c9f5b285fb5dc142fc8d488c8420b416f16809089eea963d3dfe15668961f334a5e14044895e5b0cd6bd3966438e154c8c76553d03da05aad3dfd81dbd95cf094d349fa70238ecbfe979ca8910911d6577b1f5beac87bf83c4d91407bfcbefdc52041ecb73ff41b8cd313286e1a479433f2a5cab60308a3fdaa6b954e9fe0e125f61e1b6fb3acdba4aabfb08c58779ddcc5b5a964e46853e5f895aa14acfe7abeae89233e17a13a88723db7594fe480b635865c1d7d0d283b9cb463da8843dc302269d925e77ff8a499111627e1cc63c361dbcb1550abd8a0a0d5af119c00eac9d488d4e4dff7f1da877a71a44f0bfebff4d9d509379ab0f3dc8c2956fd94bdd7625434f1c38eeeffd8f29892210ff5cabc7984c1fde34466c11987ab117b34e7f08ad638487ff0e8b293db45d594594af90dc512d2eb8fd466497b21606b2a1ececfbad3d8d384728fe8dd320c7b7b7789d4c84133e9c6cf9f27f90268dd94c70884046d9233db7f49b077241b85e05fa36caf83bcdbb4d81ef48beb5831c8c1e8693808215d4a4f4b9613b458d6602be73c2ff7ee703a171ed30f4397caee76a1f67d946667824aae07704f70e1a8de4312a12d3683c604494ac4dd01f52e710f62e2f582dca6253f2ad61d64a57676ba9f644df8eeb3765bc4fdeb1485bb6dd7eb3a330f51fab6e3f4bf56d80715e068cc6661e1b35be05ba24c4d6a87f388a6d9da0ac8bb4433b2b23b9e1fb4d18061d6c1a7097a30790afa8bfa190ad9d7451b96fd6a6c05035fcf4100b2b1a963472cd266abcae84f3c12c1f29aa68f74cf225626422375736486374a575fd80672b6476405788e346b1c16bf9140c61ec4ca2daf97d105196e65cf5ef7908c31717fa1bb1ba15e6fa149241a8284b7c7e215e70d62399872daac51b68bfd36368980b3d433b7eb007a597e216e12c17eb86ecd952843dff249e1fd35c8026081c4d9a1d09dc4fc723a827c69ba687eaa53f26bc8ad636d288b3ee9c9aaab2e1788f8343266e27466fc086a7c4e6c0e342c0328c7d371f08a489aaa80044d481f625449fd1837a65080df05ad1668d49c4e7708f211f23860ecc187020b57346c27824417e89378a442defdd114f7bef50f55e53aea1b6c5a0ae26ff6b64f2a2a4e500fa2bf2612f9f2b021ce7c876a1adabd3c1c9c3f3cc09ba789f2b80159ce42843d24809bcfd9a159d4b601aabd08d90b4d95ffee08397a58202b993978f63c3405e453f385fd950d4c56514d0e6721a1973f7bb6ba7f0c3277b2b0124f06aad9a35c8b8b574cd29e2d43b9cbe0e436ceb9500569b69a9f25779a80c42b682b4ae8cfca3925f25d01a55eacf922fa66ed89f22385faca3c0158993beee9dcf7a62890c2e8e9f5004973e079e3e44dbd72e3069e4f454d2dd0edb26d928c75200de54b54165dfbbdfb202e7c97b87872be35870b1b213858f7ae31fef87bcdbe9ccbe430a3c7ec5e4396f37f84ea9bd1b87452e37dc71f5c346bb60333e43fc8c9dbf98587d6acc6b1a0044d3744a724133905521027010f3356c3c4b08aa2753a11e0660120b6ba393a2df4417cfeb94c7bcd6b7801ecf9be30142b8b5c3fa106547f8009c4cf33c2b1b5293b9700dd7f363fe2b6e0658515e1545b9e46bcf801e1b0248b87a447c529669d3ce1cca61f9fc61076cc58cefeb654f4b19b95c4ea44be36936da9a84c706ab185c7556a6678b07ee4b99351d46da9f445d4ce8b98791a0d6ad83c987af29b4e770cef4d40de20dd939f075a30bdabb3bc891b0cf42921f27948423bc666c06ce4d394d4c3cbc4314c17497922ca453a9e08d69ac2e66250290f9ca1bfaf6ecaf5ff7f13cc9aba0a074c439fd4551494633e97653d7cfbaa47e6d6937e80f9321fbb0381a6c923c7a85bddf95b7f9561cfeacf6a19f42ead4b5c358f9dee42a2a2f951a9c3b87934e3ee89df767a734cabc50aa0169181f1d2e4eb00091255debbba2d750226c4ebfc833f0a01a40becb5fed26b21efb507475d76e0422a7ff8753f78b435ff4b99231cf7a8f8ae69e97c444bdc822c4f09cfd1b2d99602da6b2df38e2b9f46a2eeb9c0f203add590cd15bee89b3ccac89693b8d69568e9ef38c3bc6f608edd0e5852432821aab83f674ef64811cc589b792354c0e49981bd8cd6d1f67e4b2033803777f718d77c96192b0612f1d033e75567545ba55f91b6c2f68b2f8974dfafb35b3b35e77269486e4544e9bd0c0a48073d932189d227f433cdb9be4d67c3d80223c5b2d696c8f04e7c3bac1e4179b74015bb631501abeddb5fe72e0f3700154c529862c3b2ec2dec6932e6a3e2119008e6aa4e24e9c5c9e2092b3337accc5f808cd9b93681c6882d64e8b43da944738a5be0a48e8e1d6ecb46323a65b4a7e45b7686fab418082a8465f805450e733dfb3bb82c9a1786f9eeaba500500ba638c30054df2ac4cd570f52e1d97111edfe6a578738850addc0060e85c81d869525229f36ad891cb08b8a73534565e3cb4114336dbf2476fcaa09f163bf675bce65ec14c93c372bc788d3170a49c6d7b5a51d0a4281660c46492ccf27da027f777e7e00637768134abc69b08442f74bc957631dcff3f2324b33a1db5c549e1c4dc4129e58b714af779774be4ad58e261019629bbe3f07fde7d2d7d5b905834f3e4f903c292bf63e9a91a1576f20a77b905383ab429d9c4c518a48404401aef07cdb8d7d44cc56415b2711e72bb7691760a2091861e2fb30cd563d3ca4c33953935cf3e2ff99f3962b9f23cd03af5f765b232f7b99d594203cde50d182c136f93359d5a28b465e80c6461a53156eba60f6d3db26cfc85c5cc0f999104846783ceac7581eff18c356fafd33e4836403473b86f10bc55b1220b83e8eb8184abeccc5c56b3758bd1b4f6587e9a121e0ff19d3e0716e6f805ec157343a1e4e673cb70806ef0ef982814a0b7587a57973d63ed1c58d60f20c65ae6e1b8f266578ffd56820c3af8ed03e4c1f048cd400fe0f68bcc151c8dda9dc9bee00c99bfde6c95c050f99772018e50498afde384d09badfb1c3c78dcf2e535616ba54829f58936d2f48d9b6370d317ccec31d1b576bc987a300ab198379ed7ff06803947c772c363d8bde665c24acf771bab9de1e8e2cac8edc7f3175d8c34c914704b41c23fb6e3f7bca356364ecaddb385bbad563c50eafa2757d7f6d18d303170376918b52bb9ab70bdc7d4a2f70824cad931524b441c6dfff8b32515263d49bd32cbda4f176c385955f5fe38cf43e123bf855ab0e8c9fa02503cdce780a245e5045fcf42a491e18fdf53c4a78f2930f0e2d7636aac0d9190c4699a65bc0622e41a15ecc35ca0b7d61c59485ba83ea0366e0673a0d2ddc4310cd52c94e7630e9101316147e486fd000420fc35ad955fec042969bcf42a857cddd4f3aad8a17e994ddc6b0d2e98303de584fcf588af5b106babf4f2c0ba426e46d846ead6d4e59604a8472decbbb60704f54ee12130e97238f7e4ced2f41c00e742dd2a648cbef11d06f71019d8a79528fb42eac584fd474b1479aa1bc3fe4a5ee5ea970ac0329be469b5ecca192e1d148b2a84d9d57615fac476dd6ed6516e4ec0a6112a51eaa01352623ea93c51be23bbd5c3b0e5ed962120f59fa6721211473193707ebda707fec774600815059d7d3df30b980965b140e7c766e0d5a784f6e2db7c49903707ac38e4f3127c889438371bfbf816f01ed15f5b57ddcb4cff6918ecc9e77bf42b6f3dd9973741c57fa242df06bf6c27e1e8a5cf796cbbc9d1785474771dbecc4c906c4e9b7f5b440a114979dc250603df2a1b41db686ca465c199bc6c4eedc94d8b5ceeb085a4225c5208ca2887832cdc504b6730c10b7f454ba0e03fb8a48f050c69ceaf100bc6fce59536590d74c2d2f2228e2b6c9e7a3f3d49060fb943780381d95011bde3e7106af9aadb6f37f6e4e9db5c74d16abe7a4eedcab89b4ac51611995a5bf7e907be93e40417b4f5d15ede068e7908e04163f30b5c0a54b1af0dff79c725d5e100873d7c9c3aba8bc915b0ffa439a3982fcd09b69b55bcc8c2590ad9fae9ed9ce98f8d21dceb5f2b5c4538f9db1853da677243a97ad2b2037d14484ebdb85b35ceb822445f8ea2a5e7f0d6144efd8d8ac8e72ecef6a75945af3c6bd6d381c39142780960c13a052ac9e7f15a30927dab8be5b8279119037d4d7f04ff93b7742214347ccb107b651cc80c4f347d38db1a7930e467aa96db196a87e1b3b99b1ac7fdb7e39f40c8e910902af781744532cf51747837bbe90fafbf83a757f2573d7354abbb05b694ca64ae98564fb5dc012fb053a782d3fef3414141084793baf4baf90e76ddb977866ddb6de0f409409407416fe2d2bbf217cf381668bd56f3e6fb3acc5896bd0b5ebfedfa49b3fd85dbfa56350d9ce850f2e527729e9459e0f7e6cc4e94a111129d271d202e1e28f479745d98da60570b5404a23d0e5bc401b8ce627eb969490fafaf791b5125584ae3e41261da3998de9e732bdb5c1a39853e3b2081917e00d52c3a86f635e2d39df62979e66b0e3319ef5a25f7980155c0edf9cfc442dfee97ae1e591a1dc7e7e156e8c330eb2a6e280e8f50f27ec12c499b3795bb8b49d6405ac75543fe42474c3ee7c7db8de41a44b73050eee3b343d4833de081ea985b2ab77978f98f4c227ddbe86f919e334e407a1695c704e1c3dcab4e661f7451d28ec3170b1eac1e814a914602eca6f53f65a4550a2a8c886c1948abb5cd1cffa415e95f23682491c02cb20da2428a7c73b4d7daa98681e099e8c045efc8ed0c416b6f7e52b6f605b75d702612fbf224741f30e983f6afb954d283cf0cef51b0419973464e53f19644c54eef1bd1108d5fc1cd6532406a713207bda056dc16bf80fdf494f783e27ec6b4366bc783ba5925276cc1e2aea7273c49fd6bba5a22adc6be511764a76126c6520c149af3de5adccf6b32cb45256f8468d4993e93aad0cb64099dca3f4c31bc86d0e6275cbd89299e630518d429fe518c97e210a06e228864bd69b7b91056f477fa96644b8a8db62bba5a217a710098c438019509bbd4742636c00af0cfea144b5ddcaf6891c35cdda43685095a031e83a5588a659e8d760030fd12d82ddfce6b5522a07e3ba9b38152481bf3861851810aa453536d0cc6baa176d67544a5556e238235cd7787d258e9acd4fca65f078606534a425df6e079733433bbf82a54500959be071425532e8462f9d7ec6e264f54cedfad102a60d12a8d2200b48230b97231d80d7d0f9995af861e8bf02464ddf37ac554f18ff7113e440558e56ddca0b81b91043f8136ea4d41217af861f40d29a163677d4ff170ea41d4a1fc820f3b6b8b8c31a6f3adf9de46cca9e8380d5c90c7ede61683e4802bd17d508d33dda5d7c94bc834ca1e33a5d3144b8b4d000e22a380810b703f632686b94fb1d3ccf2c231c981dae91f224b9f74534bd7b627befffb1f58c3dd9e0eacc8b937f37f367d340eb239c1547e889fc023813e69e5c4a3cfe4a33caee15205f01ad1249353b8b11d036818f8c8d64d03045461f06f44a038d473b5f9df32f9efc5a72097b19da2734f1099b5c7a281c7a106a94373dc70f059daa2fa7523c87778c2db49924bc2afc7db55491b43372279bcc4002ade9dd4db376c50f7a89337b8f0029a4d6f3f14aa12057b1a59b0461ceb5698aa0e6b409c5e3c7a51fe78612ed381995267171a9a07760be62eefea73adc4eb3ae27313eecb91a1c47585968cb86db22d83fe17a0c72a3a2354d3e9257ec0c54618adfa25e02af1e08b172ad594ca89b45ced24f609f4696d57d9da1644fc19b9ca06778d2ed55825f2ec8da2b7a300bb0c0ad6167867e72718b4a1ca59f53d03bb0a519e4b19685c8abad9196cf0ed2f39cc1026708e1577e4f7be7fc0b8d725afe5292a4d9a14580ec71c7edd6c981f4e439cb00f7433adfff19d79547651fa32288466212a931d49b94ac02bc1e1c898993f65c7795d5780a97ec784822bfb8a0a40447d0dd49ffe72c13766fd0d950a7bec1b0bd029c4bdba72d87d9e99fd226e7c58c421b4c5600ffa4ddab9a6c4e899e4cd0c92affdeda6dff1a9e03d4add9c47f780e3af6979c28879fbe13455940422b06fcb218bf46283c1f4c24e83470525f9fb4cbd3ea9f0186aedab502e61146c98958c81f5931e7f9e420f0dc4f103acb8330dbcaf37506e123c4071e58a5f6e30a663e351b231087b5f2382d89d5bcd7c0a93af8241fedea57c67db40915f6660df5f182c539ccfeff98482f6c9ecfb29382fe28c00f0cf7cf8ed5c0204770d125f5bd4812f73313fdcb211ba4d99c843e14e233ae21b999e5d18579c84911ee0b3022aefdc8581866a6f93d21d1a3169093b8a5a7ab1be6b900f1a6e9046da3eeb062ead744adc0e4935c17d3eb91d11dad3b6db4ac66eb792052676e55b447ebc87777d0be0d9d795883e9d47a87e2f2043696bb371a88a769f4af7deaad730470eb43f7af8dbfe97fe72723ee3c9ba750fa0e97f20b4d79b3e10273458b96287a71d48a25575cbfba522cc5c03e60154650c7425f1107294bb20ca29c3a1750a8f33a5c751deb57ca45569c14261729c2538917fa314ebd11d408d6b732493c158b4ec421cf2dc1440c9c53fa46ad1c9a9bd865623c140c8dd59ec908fdc6dd6ca7100ea39414eeae9e61d372bb0597789e5e4de5cbdf9965a5098107d9572737bc2e7171f1326048021f1c661edc304959e200fc3f1b1cc1c12f978f75ddca38ac56eb19a1ca83eed413436bc729fda4344d1803d86b3c0b74d8180fe829c631e058b3c5323116bffb592208ffdb5c6b05acced12f3cae89fb96a2b63413552c123bb233f5ed0860b1c3472a805200e3e859986cd2d5fdfd8892e6c8a3a0dea5a8c30939eb70af537b00a774e1a00335a783f431472f79405fee9c4c1d6cead13d278c6b7b88fad936fbf86e5f2b3a5d09f97679bc2e41dc2a2ed5728d14b3b348184f41dd0c1de3e5ebd3e028ad04c554c98845ea41c3c64bfb9875f9d8230462b1d6a63b014ba909fad69d0f5765da52d02b153ab3f8f25ac39b05039472998af473100eb75823cfc432bd58c0e12a8a494ea101821b8f9326cfcb6e08208fa8a4136dd899ea279b279de07ee8abefe0ea7b4080c1a62eea6cbbc3c54b2ec174f23aedd19e9012bc5f884c57a74ae2dd0f67818e5715330cecb7e3ed44f86255e1d65a94a9c21e20536de1134369e546018b3fae14ed89e7291da109cce40383706ee5a9bc268c6a55efc9dd348fdd68049699981cc9894b77be164cc01ecfd2de48772d09ff426e3248a56f4e5490c3a5899ffa7b9e8477bc54f37fdf5df21aed44438d20f70b68f3afe181fdee46fa55bbd95411127258361675f5a76a8883dd98c7a4d537a70fdc82f7cfb4032910f7bb682a88e54749afbe9d1cef300c44c1a1a7615c99fd77aa34e6ca5ea7f54559eceeb35893a07674e4cb07e66fe3e1e91953038fb8f4567d866bed795573b2f82a60e63130f9ebfed9394a16a504e332f6f211f0f4b9087c12553af47f7d05f7da5c40a56f95dd9e153370fddc2c5f8c1d21ffd22c05e521e3504f49ce6b666eb86bad8e7d817b85247ada79dba1dd9720b44f880ab7b7ee6416d05517a8804b89eff90e82ace1e0671a0251eb472e9ca07691ce412122d73c86cbfdc6253cb58e61a47f46d9c337ae35ce7b560df46fa34ef90f6d7f19aba627ce2d45f4f7e8527396971dd794fd1dacc78bf6ccd0b3723208f962c8340d121b1fc6ad3eb1c9f0152e65e1cd0de8b7a950785cfca0f1ae897a64a0d1fdb3383b68b9357716ab23d8e0a353619ecf644a80c2af08f8734852729d12c5fc99b48df6f208b6eab2b35082651d421b6952368bd8e614dae9cc6ff02b44b8afc24717e37bc3f3c1be14044275dd43a48c24968742eec3c8f7a04bf4557a31fb14400bd2696323f7bcc518f423538f6625b705ed5531498f4804f9643c0aa53cb8098fa9df94568385a1e46890f60133285f53951e8b635af37584842c612dece9c908f773dbff615420bd12b813143628448a2ad8d0d6383b1d77e96b32782e5f9339171400dc67cb79294abfa763341db7b1a2e6353b99a8ba99368db1c7030d294a33d48919da077d5da8e3a1f125cf34f64d02e0f51604922db400023d4a0b8d825b9bbfd7df787d739c7abfa44d5c76bdaa56f6b6be7da9f67c6db49a5adfe0d212169fd51d3d9bde61ba30250c671b55bc8029c3fc76775d1e2e95c2df37d8928a07ad9fff56372fc4eaae35679fa9f93ffb57aa9a7f84ab92913317f90da4b38cebc6ef6a03e6c6acd4f05799247e8e8eb44861692bc769bffcf7219edef3249f27125c2ed31d7d7384c5f56d00b5878f2753c8c1b6a22c4206ad775f8ff633dcc701af3b101e7b500e560eafd88983b0a1b8fef5a3344c2b43c08058ee71fea64f5f2f5d0b92193be0d6e254ac8dfe11cf9b0194678cf67989748d9d10d46bbb6a41a00a62097a098e98659bcbd5b7f6efef113a2d51932206480517aa0198ff6dca59e3c8d4e0f25e18580dee818cdf66a901bff894e29f7359b3ce4ac4b67bf5499b4f0e5ddcf8eeab9210508a805f849eea6981418a8474e00f95894d8479010c12b30babb1eb49c3f40e73e4c296b2c842ac168aefa7bd1d8125ecc9f42f6175536a55afc2452aab3687fd2af70935e5a840e36c2c40cafad8dbdf11fe3807ce67ca6db2ce5be73b95350f61218a8dedb7ff98b333e6eb7c7573a1e33f7f6aecd183f0ed5ea66f4447a8dba3c84c3e2a195d71ef8165fd56a6e5988a747d704313ffb54bc70c66a9f1d02aaccebd73aaa0ce01911e405a4806d6ac30c6ce079b031de7b72ea2841848da61ed40d81d8c8688e2e66cdb1c2938fe7e4ae398713008c60ab61859483ac740d08f8788eb5bc525944cef09d55f1370ba38245f1339e6d0d1ee9453cfd98fbf7693d37c1e808686bfb0aa59d4e2bb033e1875c22abb3a597b2d0740582a5037cea8ee20ad611d833081ebab16c3abe77e0886790a7b48463e2d4647953e5cd1004c9abbb0e51b53b844dbb0d707c7719145497b27a484b76f8d6d06645624ae244b675f92122a0660d6c3dafe3c1beb77b3b89a01792de3e87463a7679a7ae2c96a1d0d2569f9836df8f8b20eec6a0133cb5c9778b2a38914be750fe2926a76e26c2f9afc0e476774e4b2eaed1be30c0532a1491f7316769b52d2d00b80aa389624b5462c3875af150e913b4e488412b907ca1be48917ce7770a4eb38da70cbbb17ba0eb8f9c213560ba847316623047a371c29772fbd7b7b9ef0261b77e413621a8605fe802586226c4132c8340d26b0af550a67e656b5ecd5933291b3cf43a8038518b216f2d1ab8b8ecce816fee1275f201486e7b2307d5faa0a6dbafe47d7bf25d91d2bc83058f8277889b1e1be9e39991c6375c8aecf8d79e4bc05635770d1d37ba434f3841493e28e83f01483adeeacbf1a2c2e7d8595132adc5ee72f5ef656f9a0ee6e8891ff4696f285000f8873c33af0b340a82ee66786447a89612b11a751dbab54b7ce7f6da5abec463d23b2cffea840df7ba6216db0b7f55f40e67796017e04904faa230652d80fb21cfdae0e681265a0521261291fc7ba5a0fbbf6836428618e9d9fb01b9cf390b817712e7d4e832aa28e68c45dee99ebc606d167a81b3b056b5024cf6ae73ccb3e3cc181b2e2c45a04d7af7228ae3aa5631143ab1350612b0843465bd684696643766f0ecc3ed828adf500a410833381d89e049dcbba9a966734c3e4bf18e86d49ac9da2771440e9144be633e910788d6f82569377d374c0b525755962dc43c56531107e32af7bde3088377be31122d7a8648b580e3dd83f270ba513c47e4974d0b0ab7f819ef5e8a04b081b6850747762280d5efe0ac83a72f3c4e99daf2416004f8320b129966d692452197adc5b023144c2b3d6e9565fc11f61f12072e5a74f2fed042d32aa52936b065e13423b1d6f3fdf36304851fed792b06352ab30070512fc7abe6229431fe74e7eb56899daa0acc05acaa748cf82f4d5acc3f2d93d5edffccc8a63ec5fa478b46ce95add0e2d02865ce354a87c90d55c0a6976a64272188e0355fdabadfc38af0687d7c536336dfce1388f838808bb1dbec56f59a865eb1a0b13b896b0e063fde6f9d24025b56e51f2d8b3135a428a5e37c85494021e453a941c8fd68989805e366fa6360ec7487c93fe8d1c9de74367f008fe80fc148a5af54c72f81fcc5cffe742f029078215f9d38e3226af880d6c41c65953ef2b4440ac928fa0d9481aead93898821bb66d4e629306c34d523cf167f1b6d8cafe380c7fd16bb80bc94e068f6579104e1badc5579c7c39ae7ace166ffa9d881a947aee1015f94ad4ecf6620b387cfabf7bbb6ce81d43a2c8cbb48baf844d73f1e6f56b439ae23a346ed6132fbdf42ec13c852d4302b1120fb617b5c2de5ec1265ec72aff6315f26065875f7f5a431ed909f2fb256e6bcf9913d18bbb39ac292939cb9d1335ea5293176a00f4979b4ae62c30b3819d9c1de54d1cc643bde3f5fd1fdac69f3e98009ee0f59ef949571688755aaadb4ba33eb338c5202eaa30f673b726475ad5f75b3768295b31bb9d4de1665274d7bfe9fe0e62e36d319278cf5d7744dd0456fd1646a7ff9a26b9c4cf9379fc412eba57f76779b44088b207a91fc88baa249f0b2cb52f24212870216c5257b70cf7501ce67bf24f014e39338aea9fd4c7fe561c1acdcbe4f6cbb640a500f744d9231d832a593ff04ba5937f580c3d4ff0b7945d1530f3569a2e00deef20ffb5c7c0d815b8e18964de6d528d19a955daf06693224cc17c685d2aa4234e5b3f38134f6b264fd3446b7be48454f1bcd42f701deedb8f6847954e733495a3ddb15791882881976db2ab039e3a61130d11787a5d37e90212e317a98b99e983a46286177eb1df4d2713e50bb894b5ec59efe5396084bbb7f327e74d6afb5d001f539c35ed658f2ab17c657d59ac85bef2088eb72f6b335ff2141b5a49b677df6e6ee6c20889ed0ac17bf3d71daf7905c5f98ba66814bcb7d4e6afe1b9ecac2b4ba8e121ee92f1b6a349a548e746b8f4cbe54e3d1bb351fc6e1036e4d1a2707cd53f8537d28df23c956ec56ccd110cd9b60f1c659734bf27cde826b744035b97ddcf011aded98cbca77fd2f1f23bea65e2fe2074fc8e649e450467f90c8ea8b005ea42688f2265847267e029ff561a4a6dfba82b4ba4487ac73cb0d69d140ba039cfa25e929e5e0d90e055f118555981fef1981c666954b597977f7221fb9acde5d57ca5b8c68c00230684034a423b7e37c9b5ae0146926c6d6a57a3ad680551a8d9e5d0911a8724254141c6a54576c2409e1a84ced29b6dd3efc85969216d04df3badd6c9253f6728df1f64b3a122191805db95bdaf65c7ba24b1096c748a716a6a63bbef6182d15819cd4fce35f5f4f9139b7bbe2fceff5a81420ab07f67aa6c4efee2e22f4f45aac3ca7ed067124b9dcb3dfc67193e502b32baeea163e0ef38e13203e9c0f8e993745d176489d9b8e17178154e235979dbf0c2db20fe9e82179658a865f5a877390b36192cc4be3d696eb38d08b6d385c00ba5ce25ec836cd790b7e0cb28a8f23976d8b8d0e6bc80b47531b50e5267536bbf0d512183a8be432ad9d69beea42a190748fae2631878cc439e36be0641823076b3acbe377247e8ccc9231f08eb931496f097f1a5b859df4bd07b5c3b81715ce615d94bc0e9ca56183dcdf59b7e4e3599089162534f2ff6d17786d864991d673cd6a37a2cd8d53d214be68a52c8eefccd779234575444e1f81b8c89d6a40deb8c13e456e9d1780b0d52965650ad884e5934336be191ab4d596ec1eecb655749b86af1377bb9274d7b9cf6da56067fb283b2b07719c475502896b7803bbcf7d397da43b78964ef6d4424a5ded9acd18e1e93742e1826a564587f0169e8c807214cb3bb4d9bfe63bcaedadf6ea68b944b3654d9d0c2bdda50bb26fcc29e86f8d5dfec02e3b3087e1032c209a9b48c5a48b101d92cc07fd99874bb7563e5335a3ceb455577fffc3ec5b0a4c2db6cc62aca3df9634af8040a10c5584542f396de0fc1eaffc386b3a3e96e1c170fa2cc09ef2cbbd5b37335126abffb406e4dd3b294b1ffc1c139fd4a8af988166e12d961ff9eb5a4ced757ca77e289e0aef4e2b6c5c8c7cdbf21bbf049f7404cca2f458a43e56dfdf468d0539dd52984a0b2ac454b49c80b66d8c8d48be9ad67f05e2b102fc2990c0566c0d6b0ef945a8d989e426f8b2c11ab89d0931e743e4ea43ce70c80b24a0bca605b9ffff6bb5662e0ad02c9f5ac4e6b50c84893c5bb8c2e934b97b9df097a75cc2d4e5bf3c2977c11a1fa75745589a0e68a7717c5c887b83d04a49351031d3153e07a1fac4669ddd674bac0f0983e8b80cb5a1ffb2c2716e64916e321bbe8e84217a34eb08662d70fd9e4e66ae1667c546cbd32086fe7b6b6d5d9377be44a50d24ad0f0f71c5e274eeeba5989b509e13efc38ab97ec8b160fa6374c390e7151ab6a4c1e355cf8c59490d464655a500a9b20fcb67845d542e62cf057abec0b3a5e99f966430bf0553b2ee33358a8fde014e008fc8cf5ef4b434f0f48e08d7fc8d5d11a66d492c91c7ba36971d5626848f14ba201f6bd92976eb6a593e9284ad0db89fcec7f7050c4dcff686b7bfe4e0371fe9e059cf27c145729182e9e0102d688d9ae085efc77fdde0b3ef7a8ebb72a7cfc277edbe35606447f20a7ae4eeed98fc9682ee6c34c4266a66634a8381b676cf41e7ab8194cb791fd5b3fc2e7bb283acbeaca0bfa8cb1fbc132061a2b62fdbf5d71bf97fac15959c523e2dc6ade9b1e6040ed9d41950fc3b56c88001d05c6c72ee64d5c9b262909ba53b60f0d4cc4eebe4c4546588813518ff7ece03ebebf0828da5d40d261f5c1eca0a1f3634a85e39b77d9f043e0563514c2b5f92f2c7297dc01505e29a71cdfdac575a8c053d9e1cb8c648ebd5e1408ccecb513d00ba787a022f53d9b9eef733943e32faf01277bcc07301955567d72ba31c3c85658671e9364772b49ada7b7dcd1020ae89d788bae7e244b1223aa72b3b157d28560c7f905c1cf71e554828229285e8a0cbe1ada9b80aececb7aea470d4643ab6f28147d2447e87611721d213fc83c7225768f6e8984870166d9024d04b0a726c795559c0bed9b6683bed0a68142dc1cb1389ba6031a68d1a9e1a14c8c7baaf48f34aed6436ae8437a09cc06a5a939197e6d7a4d6afeb7280e5831a0673dc7632e56298fa25752204fa84a9e234df40c2f58f82c6d81f1540eb5a4637cf1a361f8eb03a575a861925faf8db659971019ba3d3de9b446eb6adacce554c3e44ea69e42b1df233b4836c74682e16bc6d6cdcda7f11dfdb6a17404132a6af31a4d1f7991311ca7fd0c16c08913466ff59a3cff8694dfcf62ed74cb8c4ecdd1fbc346258f845d83a8ef3d37c08a14705ceebc0a4e5d87a50e8ad4ff7dbe476c30bd67fa321e1655175b393595d25dcd99640e643252db3a0bd3a2f0bff33a969c712db9ac52023fe6af4facd3e371d1713d7706b850d4e4cdaf3111297228aa307fc5aa1ef095977de3dc51ba68e6ffe8552d12e6dd8abbf4dd73482af6067aa59cfe4b7a610c23c6badf1018fd556013188a52a25d7cb442d9abe3f440e16f948709d6999cffa1d41f7d8f8fe73173897307015404fb4310280a4207d7c2594443c2bf4c6961ba73693943fed1fd14f1cd852ddc919d3eac15e7c691d124c12e725582bfbfec5b4e9e53611511d8e1e413dde12c25e9873a8fc4c9a7e7cfa23b7cafaf0686454561c0d9e4ad06a210067d02cf6a15d0e687a8c8784e3219bf404305af26ba9de668683b2ebdae86cc4edd8f8f0ab539db2c2328e50021fef337e7f262a85f2c799a43f226c29293b5a9b4fc1c67289a7102af94dd2828a5b5fa49ed23739137ae83d0dd2d334bbf30b46a03bcd7eaae98ac7dabae2140b01ed316968d787f94c7f83ebdf5a681666b2b6bbd0f7d95bb2cd26fb9e2076f9799b9e04421d872947ebf0944b8c559aa6a71792bde27f0f7f427cbcb08ac8bd709f11aafbcd0fbd53f8ee3cd466c1b3207d29b85c435af46488bd8611ee0ffdcefe54c603fff241aa530337bc42adf53c01e65703b97bc5cd3af71c38de8908325b05b3aa8c855f160b4bf0960382f1e79cc21b6c30887e8740f865e8bd2914259d93d796fb884fd19433800dcec8f5b38e62ac8170778638e7ce8e486a0c2bf449d2f9d96b7ebce7cd78e525d323f41226f321d65d6a5fa3c74ed6f6c2c42654caf5bb0a069612bc7aba9df427a45bbfb896acc120b8e82680ea11cabac43e0c76eb53dbdac3ab4fe83c9abd2808096ac7047f7bf70e1a64cb91f245cd1eedf1352387a74020321769d3347f2a16622f8019aa45c759288c168d26321a4847549fadf87e11543729068b352f7da3766b6004ff9317e64ef62ac25d0b23b99660c19a98e5ce090ebe39b6696694debfea4172af1b4be71c6213a00a63d6b1709594a442824b4df1629670ec049fb6f5ac5cfb2fb0d242aaa800bc6cee050139af70177179b018dbc6527a77b33e863a703dd132987af72536f50340153200257a5f70ecacdf0d35d420ee01ce17a6874a22ae76431378e8bc338e476baf171e340c45a4354aad17a3fd38a99c229d1b8f0f9154a49fa3f556711a5047615a0dd21c0bb3db7d6c5fec7a1050de6310aa275af6fbaf4a1848c8cc7532d56cee540041f0fa938e8e58aa0c2a52d3b8dfeaa7c4e71eb7adb07f85fbe829f66c143ee2f3aee9ac9e10ca33581fdca03b442bec6ae8cabd3b0cd4af497d9eb197ba4af368f3c77c5dc7ef113d2b086c104daf9804953519baa3a61009cf305131d62a41bea4260dbbedc095ddb83b74a5261f57e9501d6635a732bc8ccc07fead1a9112852197a8c04ed27477ef7b5b73a72031a0c32c35cb7d58c960aa920d4bf56442386ae878eaa071f99bfddec62eb6b19fbdf681bab05cd1c96e70116a41295f5cd537b9686544c55470f657ce555963c049746641ce7d418a7344d3bc7b249d09683fb2208bd525f15f553a3620be7f6b8f7b7706522b6fdbb5839725daa205170679aa45fdd20787a91b72a35441b7c8d09f6e0d29bb0d026e2fc928375f1a3abfa10781224a207efb96da30f3369fb3953521199e28d17797a47f05c6bcf8163f59074e5a2665b415cccffe19e606e1db2e421c1fd44dfaac43c5f688638e09d18b60a42ddfbc3d5b72a00b52d23b988842d98e5327ab5be1016e19e527c649f7a0ad2e11d47f05ba2574f7e90436ab453212f521656fb8bb177161504fb06d34c1fc9f1e40285cc7ac7c5805aa4dfb22a945896de4c06692636deaa1bfd810afc9d8e44eddcaa9fceaf9d78a9d095b34a2d515fd327eccb7dff80fc212e2db954d53ee1a1f99b3183aec1020e28185dd7a3792cfec0e69e436ae2a7d3f40dd1f002c3cc512d878c9c87e7b349a392a7ef2553e8e9c685c47a7bb966362664043a1504773f172c9a35749d6c082eb4d339d178b8fd6d05533ae0d01ef18fe110d700c1d33b94011dd1bbce788487a93da409243b1e2e3cc6d9c456ca81c658e4a6349b71d6c5d2e95bbffeedd5898ad8d59152222984fba48dd6f7b20aa5f58faf74751523b4557ef33d060523820f3d4a817bf9dd595c23d9d9a4123ef03015a65cf8d3b3a4cb995c68c2bc5dc2323df36e5917274769a39f88770aea7a1f84517fccd16a6ff149ce914c7b670474cbd04ab0a602663632de79a9850929927eb457ca107d2dc2577ac32cc53fe63ee34be34647a2f5d3bb6edf1bbc114319d75ac52e55701d601cd60e25e40e76e18ad3ffdeec8ffcd3476a10d4154c35147fbf895638bfa2cad1a91370b603f8d9ff5433f99a8b976cc7017f3157b2996457867ec5e5de1f4c7d00a82416059338f250d9d446400946a89b9ed8d5f11f9fdc1752bc76f8973878e5cbf02fa799f3208af6d2b21a4830c936ed8bb14ebb3e6397fdfa6a919c823cda9de859273c792aa28cd3fca9020a678a837816d304d6ad404c84d049afb575f2b7c1705fc602fd12263c28c66b243a5b225d81b167e6ec1896dfcb06fc11cce2af9b173a3ec6aa8c4a0f864c6b39c45aa7281531afdd2aff6231dadc684666705462929e7a1c6941903bbe8a384f1085c73dd03d56e512b4e3e04682131581eb7229792e7f032809ce04426f12a02f772ca284ca421d1fa8ffdc81aa20538a3a7f9e5c480a3e09b0c07c7286404d4e8ff3b0cea76d72de401b2110d811e0ebc7d92269f74ea1a2e4fbd9081cb4a032b206547eae6300924edd7646516c2d5e31215216ab18f33fe84aba795b161bdcf0513c65db48e9544ff0ee7b8a5a498c90601ac36a1034ef7b7d25b365aafb5a5f9799cfdc08a49209b633a0cd020ef6bda6f3c5abdb39f542122ab67cf9f966bd04a97461598ba88a7b7187b6c09fdcbcdddbc356b376fe190d29b663accfc77b6620eebbb3ada641ca72100a137fded5b7cdb811c72c7e91e696e19138d42dd382e659427e57010142e985a10cd405060516ff859a7e85259880256242233db33324222118da0bcd1dce3aea10cec71ec2cdee047389c053e2b9604e2a3f9c6d9df208bcd729218f6aa3e6768ec81c8d0c4cac50ae4f2ece867fb923631ab634fb8e1733e97e011cecf9fefde5ed6f119794d2f3fb21dbc9af3f6c87cea767c5c293c9e2d2db6200dcd604411580879814ec2288dffeb66f76b15c21cd2470b2c60ff4b5fa0cb210f90355609cc46dd2b72c2ccb6e2fb3b1759b30f205d316b3babdd5793b41274e0dc668faa236790dbc32ff6eea69140bf4894a33449e62402197528eff3055b4633499cf1977a33381f826499278f75883b295b25a7d1361edb564f0a3be16081e2860a4b10956075ba0be748362d3ab82a2c2fe88561833edee4ee99bcdb2eb19803579ebcdc8dedcba67e2e9307749318bb0d080b140a3dedf750d231f0c4f4d920db138d62805d6a7dda83604c05a0657b100912e55e4a14dfb535bbaed7e7ff8d3173de3e6381da4cf708efaae5b45069718af616ece4b5e09d57d2f2c6df568dc01bf085dca8bdca71e89feaaf864d8daefd7c892127d48e1ad4a5207250443a3f3290bc7cf0c2a12cdd1e192c5e53126a54c66fe8eb452f22732ffb40f38b0a7d217c4eb314fd0a70cc47d7691e7e44dd1c76908cf237adeb3ac309845ffa9831f82448c324a80eefbf5c63dab193e98d001e75c51d240b990e5f5af4747b33f47b3a8d8e9f3f9fbc199959b7b7acce8217d7629c4cbb25111fc7a311d1f9e394169bcf37a3a8db39e48b0ea1c84f835ca3573f0f6456f40674694cb8c8eaafdd6a4b289a40f6717a52b859dc5e56f608f61dd6cdedac6fdcc7ea0c38d1db42b722372e599a0364f0cd10666da80afc67889f8732d4e2b823da460725755ecdf549b07cc23b52b55e7fe17629ffd4d5417a83a057acfac46dfbcf4e929e8596e1f287e29687d718562cd609a153659ede8bd23033476575b4148ec9a0ffef4cb7a1e07ed971a9265b76ee586cfb04513e3e9f33ec52a96a7030bd6066ac7fac136dc6bda106b19b4ab91bd96cb03eefb502684697751e6ea7fb71f7ec402034dc1ecb18cf354cde6cd522055de5cf2da990379451adb3fe33f3761a7d44fb3e34ea10608b8e0cf44d4cb500ff868385a26a687f70ca4d777e4323d60999e0d0479157659c463ac3631381beac5cd41d0d5ca6a7e23907c0674e27c78f04716be78716fc1232e3d273dcc0a0f42ea49f29023cbc057703ec268ded1c7a400f11f2b504ecb03b62f10ba0bf020e797e4c7a823490fdb3a3550073860847799e76ddb8fb86fe91935d86e82b8f4bb7b00a73a5028a1495d8febe7b889860a71a4d9815fdaebbd9ee644780f6860fe8e32d4bec6b9fb52524c805ce69d80de85428301f3ac58a5f3032008804469e4f60662daaaf7ab33413a4d286a7b4a3c4b717d0e7bf7267d62387454869944dc87799e712fdc257d0c74d2f94e583738783ccaf99f3cb343b31887058ca6c1cb05fcd2a1c9aa440f90a2cbd78363b2ed5d1a8cad1bdee64f610a977b0a9927859adb36614a0a06c637c1fcbd50c3fff4c8dc61ba1296a1d09ba29dc98ca27fb8445ec54bf08abd69f1a276d53b2269d44e04ef43a3398c9fcc2c72c7d09611fc0036891afd8de07b552db7d8982979be50be6c3f7ce6f67366f7a5bc64517cb6f3770dd641b2b23c18ecc747d41e8c0117b4a83ceb3c862409b03b7699425834ff5e467aea620a27e1f13bc05681e3fadec4a55cdb6c54adb46a2cefc1bcf5676b94a73b4563f257c24b1d656403c484d51ef6b4c7493acbaeb02ef4b603ed1750568d1980277ff83fb859b057685ea41aacb18e2aa574e54e4a2df7a8b11ff402eeb9fbd215f06f532c7d387dbfb9855ab719793cd4eb17998dadcedcaf9b0aa653f0ab8b978be4722b1581a04bea32bb8f3fa2fa2634443ec0482a99af5505e348998ce1c7cb672b63e8c5c04c9c7146e12fab47dd0b6367b7ba17c128c4cbdc0666fd6a5d2beb37f7f497a65d4967701f9cb3d3915ee255a9451de31752d86201e9b99d5a11959f8c47fbd42d82f7533d3a73402f64f474bcd40f6abfa08d30314d3b2f41bbb17f1eb09cb76e66d0f0836689be8bb73f0138f56a7437f0f722128245cfb1717c1cd70a166c2f363ea0310eb334479c22b1c30fda6ee10fd708a222000c6120196c3a280d2f7b52d2fe5cfdc53502e4b6adf422236d8885b11093137799c040d7e342974d9d18ac0194a472c2b8458417cf75fba106aca4b63176ffcf1bb450635257c0f5a71dfa528e0dc509a9da1c1ad27b853fe9beb5ab5db59a30a884fd2bdcf6e1a90e49655bf9ec4143ccd41b6606a06efce4b83807cd5202fe3684e2a8124cb7e0d4f4c557bb316960ec1604874d087598974f75a388cc5df7760c76f84989eac0fe5ea9092b77c79d8a7421323a5346ad1ac77d79e91b4b3912694d3dcee332c4d4f7f9e49f02b1777b0141f9c9af6db4e22f3ed5030bdf0ea94416e94f2dfd19a948d9e076ce2a98bbb687dc273e98afd91869d90c37c4c17a47d613f48268f7aaf0f4471008007ff5ace172421ac46e9db7a83cb5d7d510a2e56638cb27a1c4a578ceba4e3ff685510e7039aaaafdbac9acd153c0dbdbea72e43756edbcff218f3418a61a2216cca56b38099d2438106a759d96b1d79a9bfca4a91c819ca85ce909ec8d4ca986442c31150537232226965e4ab7dac00860d9f854584e36c35e1d386d960e6aaced1f1e3c87b686c1ebdab45f97b13dfebebc07309446993a9dda55531d1337a013840fad32a31f373c4b8f8f2a4f1488c946a10022740b126a7984146f5f4670d2cc5f0e0dd4b6b5ac2858a06aa24ca49608ae0529db458012994cb5658313a6f592c8ae76c5757005ce6f821172926ea6ed44f8729643e9c542e9648d849082cc41d9b7ae8604f4e9b96d210dafea67cf7612ed6ef498270ffddb33fac25468a35e4e23c7caf43bdd2839a97b3bec2b2876c115ede4ca639323f1b27c1da7b95764f7096bebbde5c26c2c8b8295049917664176dd6b2aa5d93c493ac2d64834b875cc98dbd69011197c21250ef5dc0a9c5de6911fcb27b07e85f576e5728ac06c51984a6a3f4347b52a29c9646d4e3e88ec005027932aecc1b49e2e3e07aaea381fa944d466b65db0a1376ae8a33f196cb21b698f1d8754abba154e715ce8982b3c510b66fa53b6188e99d5e69b0870da264fdc023c7d2c241c76f6d7382fac60be1ea45dcb61820f68406bc0b45653fe1b107d7d74a7b20b13a40050f3e29ff9b2c9cd31eb3c78c371d3f6cdcecff7c79803e0f5002e89253399038b1d8236a3e54455a710011fe58b00876ce191e70e2ec718e740ddded3ba3847d04fa88320b7b8b8225d7a43a0b2a08b71c8bad68c2a8b4bd379877200094c66017dc0dd9f1920afdc275dc7b2d1dde14f0ed89bbb5d7fa88912a0c742108279c3179b3926afc6ae0776cc092c34b2f28cc86f53d72e751e4147cde8088205262406f01167b4668a9eb2f7f07884d53792c7047251365c732a26e3722124f0702017dfa76f0de16d4df89486525242e9f28825e44fdfb7278615f2fd6b2cf2bd4eb081c4293267f215546707191151791fa99bc0bf3156041cce7aec7e2d141fcdb1209048c040a22f95168ba23d2cb6606d9cbff524b620d6c01c55c6ca8c6dfa06639d7ea70fd240c46b3cccf616ce1dc890611de7f52594c1c5e2d86333369cb128ff19ecb4d31d8feaa031ead949d2c94c5ff768de35a4f91bcbccbf803ea817773ed5447f10bffb0aa3461a6df93eccfa499b5f0d76aac3c58c2489169e70f7318cc4d93d98fbcdd20ee2a9c8d3ad7e0a9490860b5f4f0bd77d7b749860bc26922697dc4177c200167abb4b4565785b005127ba11a381b24e60d61f2bf0b2e67f2824c66b6e89f51389826fc2955c7ba120f78b2c728723b675dcab96ee72800725e9e988e9e3d17e60e88e3dffed3a17dc4cd6293cced70ee67d1f41730cd5c0b62153f3c6e226ed6a33e8df649e5dbc1aab4e312fc080de8731d0f70c04b017b274f90aaca4118fcda73cfb5fc4ede00cbc520ab7e12696e65f130fa43b62f1b4bd70b64f28a01d02c73c30a410fca47e96658dcf8d25bb0d49cce814bd91eb66c6e36a571694ff3f3f58a9615acf5ebf292e99a6ee6cd73e48578b7593d64bb484d4f754e22b5593fcdda0dd91b6f41d9fa27474fa26a8e11bd9593188046b4b0eb6db3bce461a213b2d7df9edec33b246b1aff12efd925e1c31d22b2f192207dc86c748028e73fc3fff4d23f98b7401345116ba0ca9bf3667186f8576c0186d9016efa383ae25ad13a01d02788dfb076c15648a8ec8c3048dc9a5c7f3b5245931b25b4d8ac9f34eb69da32f6ac8ec8e44ee37388b5d300ab27c737ebbe9519fb62f15f0ca2598c966bc36e3ca39e1d165a31fb165590455750f92e72fcdde6532d8279fe75543783010b2047e0f74554647d9e9321e61e226123542689293dfa41dba61e9e8a6df3bf7565892eb0950dcf6fcbae5a7aab1758584f97cd7eec5ccbd04fd20cd03b80081d3db9858c66b45877d3285743acea0084abdf7c9a6a1a143665eb642e85a7fbd8f43c09b39d59f6543d422716098f43678967dcd9f94524378b9c116251c65f07ce5fe0d4dc7c3f1ab133be4eb3da988ddd9d33887407f70bea8b2a0a58f9a8add0027555c231370840ef5d95a4106b3e90b6074f84dc3ec9fdb4df3dc2ea9f30997487c41e3fe24965f480c6b8c5f66a75cf19626b6b3ed2b72ad57727871c5543307f41b47b5b427eabcb11d5be173dc3ad76d167f61378ca1c30105b1751907440410f5184d7b9ee5286066263eb2e1a0860a9dcb2d1037fd1f966384682d1a70a066d9678d7542d8a33b7bf5676d22ed572f7f218e2cdca063e5fa77f1023b405d7e186924f3dac247c5770596a470d7b5d39bc8746cda704b64a2ee75a34c37286cefddb904b6eb0ef626f52e7f95d82c514f69125b41c3be1d374e624847f1e1afd7387281cf121d0c56f7f8b31b5b9e26541ddcbd7ca6f60d027c1c25dceadeeed62878cbc66f29e71b692bf20d2a2a64abc55dcb879b6374b0ff8ad16edc25a4c076a365491e6913698891c76ececbb0501826c7117f8a23dee9baca8c2194c4c9512557e57350d1468bc3ce6cc14f1d33d4549b61f9904432f14f14bca6bbaa0386d13dea26849c437e6005fcc8249b5e20ba9719cb67716cfc0aadf9555bd41d58491a0e2bfdf73e05f720dbefcff46139b942d9bdbf78d4e3bd715ffdab82dc3a5f307fc7500e72110dfe1546f1530f61665920c0fbbe97b5a566441c9db8166c62e72d3607efda55158495b4cab939b5889a7255cb26a2272e969127784af98a235b1681ca8970e0487b2b3a1f25760f9f02d02ca008dd6cf7cf30255f8fac816f1c1890e2b1fa5f541df86dc0176a211a8af23b348041cea533490ff748d6ef9794da363ad1d6f1f10b4ed6ca995655062b7a0c450d7f4a2bca4e44b33f1a911dcad6713bd6447e1ccf30e0c78aba9a4e93d22009bc24f7227c3927a8b59dc3789859760bf552ec796bac115210a5d5184b707d03a4219525c6f9bc004d9a74896408b13984daed0b3a0e4970ffe8a2aca09ad963669bcbb4db050a226746d65b01ab3837532ff190160408f58820f3323fae323a2a2a2f881c42c5918329bbb5a2288e82a30c50e19bfe04b400a33cd672ee46fd8327d3408f9e7ffe99a4c3ffc395b7f4c02f49a26f65c868a5ca4f1653a223d616c89bfaba8b2aebb19a236e7a0129a66dc9256ec406af29130d017965533bffd04e8d496a0a80692d63df8d4cd003740156de5d02ae33ee09dd5a963e1208e9c33dde4ca12c0f8d4e6cd88e006d140e04aa78c82ae7e2da90858d6b6980d9f004f505450c1a6f098d66fa354ca718bdc3696cba095dd0d109ae99058ca372274b85c2a0351e6d98e0586f368410a3f25717adc7432a437a65cf984198633bf0fd266593573e2193e90a0b2b54dd75b5d8c6687680a5e3deaf244be6d71dcd1f6a7c76b7654983caf3e3ba138469b7deb4940034c6e1f2171afeb6ec7ff88527ade11d825ea6f9e84db417e253fd9ab3ddf5f3ba77d02da79e57c82ef7180d53a182f2830d22ca79eaef3811928820e08b66434a6d9d53583b2a3f359659df8328a080e7c0f2517ab6f8cad9a10e32466080715fb246addf985b8b5b950ebd608fc2bdc826ad04e8f3fa458e223ed79c1b41652266eee2066b7d743f50d2b529927bc1920b00ebbb27e6aaaccd89c4e2cdba2a3e83e9de7fe828a15d8a076f16ccf39b2548d75f979e148b8f7ab2380c006630e7daf9a189e74e764504b1eab3f022a082c555c84513272b80794ea5a3cc2aa71a6adb785435572a249f037dbeefc13a4780e405b8e8f7f78c94495249a227f3d4e5d679bc7ad01f06b1ed7449dd4ea5db2f8ac882c6992c5091446c57059acf0f111d01d6dcaf3be11222e706f7f20482b9426d0bdca5f41fe59c7999ae2dd7ed9bcb66d33afd711930331fd40af80b533f8a7294164f00d8a8fb9cbb3431debab5f8981f20e24bcef178fe0f83ff4109b92a7c0d521120c9b41cd8d36c8c715fb9f3c51e5162d86e1bf0e728f37e97aeec7ead4734d101da375db87d7d8c35fc658247647cb3e2c7758e4e1b0d8984f69aba318ec21a2b16bf18bffe8de17e8dac5a4b92b3bd8d9e6e0ce6be5cbb3a85e234caa18b1d2e31b34704ea7ac5786232fbf44df81a838aa4513c8037e4a855562c8b556efcefdc75211c9d7481d4ef52370cd6b5304b2a7442b7aa2028cf9f959d7ec67cfb9f0559d1257f97e4639b7636ae50d69c28fae8bbc75a3450b592ef4dce74c66a0187ae9dfa3a8e5e3388677e254910506f19927dad86fd640150126475ebbf2f14dc9d6969ce555af7ef8706be85bf199c11382f36bc934acf033c411799aec0cb05dc0c0ab9a56c7793fbfffe088e47dd01da73a28c0ba92a9fbd90bc10c2b25661e9a3623cf93d092415f3178915b2489876d42a91a29e4f8d97c3b353d0b94d442b2f498c8b7c84bce1a88c6736da06f85cee6098d77e27ead5d9cf969af99e0b8973b98656debb28752d6daa0e8cccd4918b3d30ee142fd45bf73b8463fc3d885f59c5f3c3c6bda9a4a26b375df6337922e34cbb591951e33289c0be5953a897a980f73cc0b2893d73224dd40030b76741a9f261a0b46678af6c7475e1d492be13ec613c03deaabde51318617607b75802ba503f80785b78c7f722428ba642535956628613f815053eea8d6c325db25e7ff9065697e4c84414d4aea76f3926a52ef3dd04943326a3ebdc8630299cf46c11e08f4bba8dad700ca4a7d2318a1c5d612a92a0580857b826875931decc1a78a7e514dc2b855661ee5a5f8c7ed39e75cdf61f609d568788276663ce5225c3c9ab0de6f5450a414f02f2fb5ba25f09b40c296658814cbc239b388bea9362e23f2f5adba31c2a61b3ba5a46c0234b38c84136c72be9e7c50cdab0d2f610feebb4027494d497703274e725e54a503ac50d4afcfa0622762062367291bf677e688eb23d8d1e956ed96c59a3869e98b3b0dd205554b368dddeda1fea0527ce5392cbc36d882a6b252db989f0577587a629a12e85f3fa91c02210663c52498217ff7a4ce41037338e84c26ad8f5e24d7efd629ada627dd5c5bd36c48e413a03198edead6e11ea016032e8790b2faed598a999acc54adb43e91dbff3e6974a434f3d2709fe88f21fbe42e01356c893802acc0fb5d42e552ea438566b6beb821c9181d9c5fb47dc2a9418d49ef05b213824c2ca6d7661a6a2f95c7ac14fc8ed13a22e611d1a2acd01fad6d8a168dd3f06f950996035dbf040907b9b7acff59358f49eaa7c3b6cfdc095a613c13408151c379fc556de4966488567f494a1275a8a5879d7b9782aac3a9e4706efa923de54011322af02a709743d1fc0a3041c29aad336d37bd65519ddced08959ee6b287ad88109289bee4858fbfafb59d494319f03011b68c33e0729accb97327fb00dac92a43d9d95b7f1ff3b7a77bdad9312996677516f762d307bbb577a73aa5c5b40664b00461c3c61d0fcffb5417ad21dd05057eea031e1e32a471086fb469d2d1fb4936a082dbdf612c75e80d0ea5d2d88f07eee6b3f00c08c9c4557df5a68f0eee874c313f76c5b70f4edf4fe0151c7739c55e063897817a9331227c65874db0ab5bd9963f49b11e28d8686038ce0fc1acdde0e089e8b9c38c3315cad6c5cf4da3f78e2fe2c3ffc52156786bf1d759e0a7d4355533027aff9a7ea543cfe9313b1c93b017eb25668721d950db300252f4dfd88b66b0c6331cead71daeec9e34cf77f15a503f5c78718d08b0ccf59bd55ec56cb3990397d25a1e1a33227a3098485913f1654de45acc8da1631ac39499b23439b8e0ea792781267530fc15e33d8e19898d7098d7a23ecb75c010f49f2e7bdef246674112033cbfc75bbdd773b2bddfbe0d0ddef7a4adc2b63db5575bbf13efee4f5774befaeac33c0a46a237fcd185423f204cbb00aee0516ae202214a0a8b1d0f45f2ebf134e56de735819b84ec3d1a5de5fef1b6956a52ec473e9a6679517d20804bf4514d922f839f93b79d6e3ee96fcf87b4315b46a33c1a2b7889f38e40afd102b554bc48cb1e412309c9a8524cd768f48bbe91f108370bc5f5366c60e5ea4d46a1f95b428bef72b42152fc69dc1a768ab17b691bfe37bcabee284bae5350684c22c890bf5ca1d0ee325b5f8d0bdf7605066fb538a29b715d06f70d0505d59dca43d170f2dcb2482f9ec51affb06c45c5f135abb0ac79f00d4b85f7c56732c57d5d5f212f107352c30b68def48ac67e1cfd52878b19220325e69f7968cc91db7ff016f6487b36e60cd18ad2abc14b94fb602b930b68912dd1b8d4e9cd446e6d859014dfbf35e1451a84be1c8dba4da49d9225bf15a1ff35bef2f29f01dff1ae7e1c3aa949c99459df1f5ad5d643db4d45204d11b5ab3c88caefcb6495b00859ec3ae33394fc76b8fd0cf0358f2a89f0fe663090ad7e6b169eec6966d598d86af2805152290a1ed7e39235cd6adceca2b361588abecf9c73cc60f33ddfee96f207b8d8a304a63484eac927711af08d8ae92f4e01c28a4063cce2b96948427a15ae06f206cbafc32c4859eddc6ec5f89c2ac177909f4ce68fda47d7f4138539663b27489242a16b02d9f8d6809b1431793376ca61f8b0cabf9ee043fbad972ba2536240c694e6cec17f73438165f912864bb2c4261fa183e61d56354b35e578f6bec92d0d0d389dd71518ed0b23b5ac388a76494baba8475dce03f75a1f7aaa6692fc92078aba99e7ed22a27f82548b473c3c2af2d752fdde435fec8af3bbec99ea7f9388b6b6ae34ce342cbab03702548356cf6288f5c9d4f13b2751612a06a1178d9d973e26bc7b6bd3e11b416e5f43f324b05be72463accfb60da282f7add7aa31c0155bdfc9fac8f9142c788a148af30407b389fa4f77157fb5e71cd102245e8175cb8c6da302b4c8a84785dc09fff94ce481de1294b6556330870f12f722bb813bd1aaf0c29624e2614a5cc630994bb7ee7a9d66a6d68fc5c2ac8670d0d166e010fe1105071371aca51385e0a1a3d354ee6a43fcabd133c7f6cf9f1a31b8d008b2d18e56856790a83470767862d0a643c3641b2cac013fe7d85f310530aae6438c78c5bff897ba71465200c760cc9ed5a39521625b6851ff47f9be908d1707a5622856131caa7fcdddda8a91cb25671354d9163a4d956b9633c36819964f43b699e145cae893b2af89a913d68bd593398639494a4614c19dbf0b3ec2fe45eba18eedb7da0f7b859d4708b5473bc55b78277e5dce28e93834297e6a581e7cf620f1ef470ab0dcab09d0d8f0f473298ea5f613c68dda6d723a2d1c7d166c23623f59720b2cd84e31735c042a0b25405e91bd4f6d949fec4ab11ea922e7620762be8219ccb47d166707f4850d86d0a20662830bc626dd9fb6a1b8267b862c86bf46ae99ef75f2f05ddd05e915e436187e6dd9183f0efbf18ad7cdf553a818aec008b1993cff44407d06347be309c6506071f71d3cfdafff893af5095948c803147f20f827ef8781cab9289d83cee0a2653039ee1e61e986cccdf9bfd46a5fd288738adc7d33475a416355363515a879213dc78aa8a309f34c5fa1ddfffe8638885b9642069a2629587c7a9d290f1bc7a1433ecd73b0fe7a114fb9f0f2165b3102c5327198256d9736353eaa7f039010648ff56420fa3e7064da7e07d65ca42d78c5935cb4fa6e18dc54a02b784ea0acf6c1306e9181a93820bbc088e2bfa16d0b55aa0ae67900404eee96b63abb1d4edfb3fc8894291c24c16b62c0383ac47ed75baa2d88ed86ba75b369adf430c3d68e1554e41292adf7d2ead0a08b04b3d9c2ea63dfc52963119e9ee12a593742f2aab46819ccb0a68f87273ba3a64a142a691e51b855ef05ed8e3f13ee71019386257506210e6c0b94f294c517919ab5efbae9426706556409d6a79fa04dae7e0d9b90368c7321e1b5ed1858c3307afb86afbbaa584ea5b2b75df374ae71bfd57012fbef3300e39a217d9b62be2a6a41954ed333bf9db2207d53b3b5619e448af2be9285b5493e5487875de6b06847b123485bdac7922d36af39c7839462e32b6448a8ca8b7795389e4b802c84b87cf661a52342453b7d26ebbb4e67a0a57bcb5bc9c3cc3baf55df042b96832433900204d9132719c72b13423e419b1a95d1f794375d9a4924ce12cf2c3fae38c9ce88daf59ad6ea00a6312a3c345f2ee526b6455d1dad3eca3d5978848dd71ef9d13c6f2f82a914f6a7d2600f55a8fe45ebed457f018ff18c77da43b8966e58525edbab4f35ade1c4c6fe7114623fc23e92be17f4fa9968e08d9b6969c00b0016f45addaf0565411a0010475763bdcc6d90c6cf2cc6c9afa092283e1d88f4c5289dab46427b922e83b22944d47fe6acb9b5c90cc84ccbb695d8e12f8141c308c03ef2c39bb213382229a7304022b656f12398e48b1eb4af5b47b26b39bed9e6f3f30abe7e5ac6cd19eea3c8b593ffa326a636abd035871786f35fb8673da39842967bb382421548ae4e95ec1f1ed6b603536f2a0f013864bba3ca53b969e849f3fe455615d2afed1f989da71fe933f9cc7cf030b7cc4eb28fa276f2336965f4fb365e8213376a5e973ff45dce30dcf89636c1c8b6d844e4b96e5ccd3162042a8bc7302f1c878eaa8af1fb95fa3246789b4dab726c91083d47e45a15ee9a193fbb7306299f3454388635eca6429d51838cabdce608fd0f765d91dfda98504a6d6c407e56bf295109dbb2a7edc281ef0327b22bae0aa243f805ba0aa8e480f87dc690594118759b6a6b57fba2b74fece14d30ebe0778cb0769bf2a0ce91660c0ed54af5ddac931982283c325b48771ca97754c48cfcf344813a87a73d5d45e2b61c3c2867ca7a64d55aba9656d98c7d2b4ba5a5ed2b21955cfc448348bcbf9fc49c0355d2640e73bb47fd314e922a50e01fcb19bbc78df19d83382fc959574425a5da740440e3a215d4fe9ccd0bb41f6eb4cf338e06a0083633decf0d9c8f91d02f69a20e924761732085aab1644f5e6ee19217596bc99366350390376d3ec10a738c77b027a2085dffa4686bfb3322ee1e770ade7154a848998d13f10c9bae1211a1a15718978566901064150ae76188efed0a8c72dd32ae379403a3afbea2828e13639ae491c4ea28b4d071199643bff5c3445d0258b5aeb88972ee644905ab392647cb861cdd80508d78722dc95f24bc7ad9fd0eb885dc31562e06be93b575c4dcaae469a251ca531f65c2a4e253b28b283791161fefe734c1a3f8c19d75f8bed54e92d639d7e7462c8098cff4a44424999abc7d7a69c6e70b134856f374da387eadd130e4774a07ac896ac2320f3abfe90369d7892f4c79b084cec70955f55fa17b2c7273488099507b5fcaf34d6e4c154bb07cfbff8cba17189f88b49df097db7f73396ebbecce99b1ddb25e2ddbf870539b519c1735781c2e2476e27e720fe7537933c7bae08c10c57fb6f509c559e1316c7fe89a6fad19f97801b6b5c1d7e7fbbe9f7c75d6fdd3fd306aa8129bae786927bd0bef7edbf8d22236fccf71191d382fb6a37b30e1d1085ccf7b90c291a562c2d676d001807e4713d8567c30db23ff97c2d443db3da643835d81eeadb56ce95a900cf443f9979b8d8eca141adc9851a52ee03a6b25cc1087999c27aa25e8995648475b65aed9076992e7a357840a06b496067612d0deba6f22e61a357ad3f7a4d870e12934abe0133786817190bfe2911477478690473094381c761515d77d27b8a04a254d1ef59f0d4ce029e832b53df34d52340dc6e321cbc33775917dc752664b33f1483beb888fd907a35c9ec10fda89281ede6f65e6d36311fee23d70a781fe9a5322a14b25728a0b38a2262b048b5f9fb7791cd0e23b3d7db556fdcf2440fd0052481fd878fb431b43dd6f8e4fbc118eac609b98ea2aed8dfb1be0e6689552c55b7e3bdeced6e5403be013c2f5c9d8d6f017132c9b40865df1ddc944a368cc98a8c7bc64aa1b7563342d1f3dc6d9d75e7105467fb74f610f1acabd81e19e0615efec5c7eea65c1560e75a1a35c6deff08b2ec07efb3f74732595352d7786b1efd387e6e2adfc0f52b821827019b02dbd1c90c075c6e5dd4968e9b1e015b681bf8571d1d9b70b6ec93e5890b34fc23b9d82e788f7bbf0e8ba0d4328d6f0483d9aac4c30bd62254580699a6a15b5071b45b0004fb2562ea33fc67ffc271f61fc4bf551ddc8f9988d2157f197b202675070331e20ffe7b81c7657fb164f281e0d3c28b61bff2b79fbc0b4ed6b79db2b999813bf3bfd055bca3d774395cf1949466ea20dd1a3cbc782c961ce27f03db9a0dc3d2bcf270ee1bf783605f311dfc9ca385843cc3911457b2e006a5c6701a4e4c305eb842fac095a695f0a991c306a678c54913daa0587ec526c09978bbef3646020a28d7cd3483f7f1b8f4e248f74eb8cc412adfdcffe962cb3a4db7782da64d85076078f756d04f8a25b079d3ceb0454a1259671acb864d7977e7034ce454c3dc211369c8941d56d656ac390ffd966c29b96098bc0db0ca2018353888deec4a4d67874d49b7dbc10615a1f4efd4d859d42bfa65e5066a5f59526dc70061325809eed97dfb4bd3b4e1c57633dd2902caf374088cbb28c6b2e1ca3172de70b91bbc0dd506b27da2f79129f93f7746e5bbefae72d6e31aa4207b0acac68f8e0b8e8abb9dc917a3a6e2c6d9e68af0ce8135f33d5c85499dd1a3eb28420c7e9eb802457483d6b81405fae37ef9b40a651755fcab3544286faa33d77491e727f9cd426e5896313f59fd34acddfe7320faf3a63df095b7da27c139ea85f357d4666fe2c7fddb5b054c6da90bd9adfc84a916b04382e083d19ce3e89d7539d0b5eb69f5812a85e45a45d6a9c00f56234ec16f2f8b777d7463c20df331f36d4b477ac8119ce466248b1cb8e21470f3c58aaeaf51097a28cd25e571630b566c734c2d95c31405a96fd78ccb0eea38218b55c6c99971c0939bf75b81a9e70bf83f83f35757db1d37eee8f110c40b3baf25b24cfef6f445b16d62b3a5f32dc7fbcc8f72bdb64662442de51e9b91e506edf55a7ed5229cf204495c4d7df9c288a934cb766aa44afb28bf2f5242306ddafcbcd2d27095a667bcd05d681f1647f94a69f502dbab755280344fce271349e7435e0cb4553ee97c5989649475bc7c45c15fb6edc3a62f7d65d052e9d0fea8e0706ba42ef68d35a1952771c025f2d5d4c97080088e4aac79fd5e3412e5750a2fe2d72e1771f1960f27c5c663e59719efb5b88f10fcfb6d7841961cb2db4a18047a36319ca4b520bc2a6d78fbc43422799d43f9ff98d0cbdc6c0cc96188a6091b589d13a26583c62953c516b85a883bf68111f106fbcdf87f447b7138e3914e562fbfb825e40b57cbd0aa00cc7e179f24e4acc674e15ad07de7f70577e39e4c6bae313e9f44daad4985540d8e44dbcb8a3ff1984ba71c46f0b303c00d685dfecfee39eb510fe66765530b7cb30163c51d2737fa6205e319edfb369d4d7fe262e5f818779445a431b784f488085e64497c3034703723d7c37818a261874b7b3b60999dccd0d3efab67a55a01b3e6e914081668d608943491f2856cfa645c476c9a6347ed08b72b7bc1ea28d95943c210dc19b3f4f37dd4df1ac2d8dbfeaf45e1d5c458e3bd3ec1399c0be038166f03b271100b965b9ca4876075160d1444c456683fad8b2d6edec5664edecbf46576cee6c19a364a23471ec0ce1ab923fd479198ece8e9fbb75ef032ada7e18005748909b710ca63dcb8c645c6895f6c429df79e4c19cdb2e4a1e626c4fbcc3dcb007e504f289538fcf065078675fa7b07812690ad2c9ac6c8951bb0846806264f7fae473eafe28719b967787e16db80e5162538be1a8b54d67af560c8e06433811c5c9352ca384d1d5a966debadf96df7dc191a4acb0206fbc058766b6743d99373e1c870f4db8de8b378ae1c69743fad22d83248be71eb1cf60341ff6ded4fd1147bbea53771a71a5cca61ae731ae89723eeb80b5fd3003d7a24cdf96f89ed08ed2ba6ef2b81985c4914de253604c930e73886f61af9adf795465682ae93262fe955b7d64bb508f1dae8e52cd48dfd89b34aa66b891919d8379d0542960fe07646033eaa7bfdddd7d2a25aa4ab82a5c9849a6ccd755969aa8625a3cd1a69b4059152a6f9cc3e8ec173b661dcc13ba071914d5ddbbc888fca1644f1291a5ca19f8f27e0a0f7e8908b6189a2e5e5aa905098abf4cdc772b0247915f8f6a11711fb12e09db4aa500d0ffff2f49026d0ec3d40633cfe9c6832841b72af1dcde4b88323ef0b5fa2c0ceebb063d5f7d268686e50f3675b0fe82773c667f74fdd86e0f5e0f0b82ca94d87722038245e89e0b67b38e8166780f832ec9f780231b2e92c23ac56aab7add3f2d5fa1fe57952421ff2bd834654f5f2af6875901787aec164c8876f0e7e384bc538f00b40f5452d956d2fb1804513e1a90eeba362bde5575135e38095ddbcd9d1a09897c57ea93cb3c30af81906c0a0dee7011ea6bf1195d91c94cd9b04481b7ddc8b02bcea0b4abb280783fccf7ac92b2aa226816c35d591b5e153fae7225337711dfd1ff342b5edadcb9e07a5ecd15f1e345aa4e65f2739b3aa9438a76d2a7a91a7693c4c18e20f7d4003e6eb27398ea28c63522f6f872cdc3fc95ded1c57f499c46c72f89dd371c7add5c4f9820828b0373e857f9ff59a02dcb5cffa72a0437ef744f03b8395a11aa396e509ee85e05a2f06521338f14db0c78ed7f2c2a6b3b0b888e429c9d99933672e97f1027cbeb4cf903d3db45954ab91094a7bf496be4954a5ebbb71f4b46252d756d14a676b6127ad68dc0d085042e713899cc809fab2879231eb6cf7225bb3abc7d0760ccfc8ad9b60b283eae056c53f73d91224d92019b423ef93d3ecf11a53e9a0b7f2fcd226afe999898d465fb85b0122b3674e348102786c696bf0c2267199f9e0f5677e91592f10ae977a4972f96375219e17d0453382a274f7a916b75e640f7be89c05f3dd6355c2bdf197a0456b5e6e46290b103f0aadd67a495bea2d99573e60e44f8058068f15ff6aaa32d90814cb566a8fbdd28ef067c7ec51e9ae6e923abd82ae281c01fa7d0f2b1a95916043f20f9f289754307818ba93b1f84cf6700b0321dc387c0c9a114c6c4ee0c300e67a4957ee599166d22c25d661cf0de7cab5b360df4cd83297e5f5a6d05563624c989955ae9267e89480723f46a1ae248c6bba8d97773d67e14a5b6abfeabfb343cfe9f0584c0109200f0c150d8e986a6288b41c2ccfb01c445210535b8f7e6502c2a5a85d7ca51c2934d9a8bba664b90e1e0afdb40fdd7d3ef9d8efe40faa18804a4474a814977032d0536ab4e07f272c99fdbeac8cc97ccd4a7fe48ffdc6c6cae65c826e0e2c5a7ce87ed6554294250f60c9ba8a90f0de343afc8990fb9c5f694ab79cba07b4092d86dc01b4b156e701227cf2170693935b32497bd366d577ccc4aefd225a10480289f45df5204c027e79d511b5d1675dbcfb2a1690938a8b5edb2320defca038c87a891d9c9b8c8f32d4b4523abbb3e66fc979072c60ae133d7746d362bba8cb6b360772f47be668d44a50c1f2fe156e9e649080c294bb3892025103600caaabc1f6a437f8e4b080f1798e734972c43e768faa9c21976ea18eed9f7edaade6369db68579f21aa15a141ea0df9a78f4e94f0df47990a4889848fca57684ffa6fc6f8de010928a3a5b93575d11f231a40a2efabf0beffb260dcf1ccb2b9c9c47b4b401746949749dd917b1c68b13d59fb90a3642c56abe64b65d84a4e0316260c6e9171fd859a0876a5a78ea0b2912da4657d5bd8f41b58a102aa3a1e17773515cb522b905a677b426a816a6e002b21ec6760149e5d85c537690c604623cbdf18f30047e3ca3b60b2f1225cbd55c73e7f1d226768ad68516d917717a60d10152919232b9dfde81d7f5964a99100120f08036981b295014fc935e1cf5901bb29443239da18f4ad85dcf786c8e4317e0078a1469c4e1e1c900a4e886c0fd8543372eed634833fb518cd36f4bd01f7f9ffa1f91f7514e2f8cc4332a88aaf40980f14d32650163a04841c67ab930bdb82dd8621970151bb37fce16984d3385be9527b60075ec987dff053fe21e751346ecf19bde86462293e2ad2a2948b4a81f9c88546e895c39da454017edc26e611a51cca78e0a18946781b8682dd9779239bb8f885c1f73fc7a572d7f30b59cd8d11e3b2b278e740f920b9ecb541e68203caebec313d202476d6773799fd1055933c61d23e6ff38aa6f4e8f404bd62562b0e2413fbbfb4e8c39955c1714856830e97544af6903e289d96d4692cd1ed7485c764e9fe29d3264b26ccc688cb573b89f49300d9578b4f61a011cb397ea2b47fb9856f89467f8b61f9bad1adf21511bfeb944db6c1e9aec1ece86ab082b20b06321d54b8c3e40c3635e6da3fee57928a3b5eb98d9f4b5e00c4337d16adc5377a3e34e513227aa2922e7fc75d86f6573edb82c17aff30b66393e5a84c89d8f2a3719396463c2a0126d7dc4e0322f72125c3bb23ccf58ed9e24e8a6664586ae6896a0880d39cc347eb5521eee41439cbdd8a51bdc3f2a200e01f9ac745cca499790a37d973d31a41da3078eb917ce90e53698d8a5fdac96b10667ca0d2dedb05c29e69eea1b0c431031eaaf808a9c801a331ae2e09ca322666b81a23b632e0323efbd57e5e1e06bd9679d1d191ad019bb1bc59ac5d4afb18d423639ef9fc6698ff344f3cdc0f93f53b0d2781f518c86c07d4dbfbcf589eee85c70e82033760f12b91295a1d16af04243cc6488a2cfeca9360d513894e56ac11ccc82be594b41e3d2d290dc61e2fdd5007b34b53ff6efe2516d0e2d5e5a13bc7b08bb5414676c4c5ae7941db526647d0aae68e140a637a2ea70fcc4b929711aa11cc108b429674be8ee4f90634965f3aa898035f781817cab56dc98a93e7ed657bb03fb0dd4c82088b42bfbb1bc04f2127a18c88f7ffdb746ab29a0e3dfbf0436ff09b0f67ac1074a8c411daa7f6862bbcdeb920da560979b77e8f6fe586a8f9966eb508b2d599172abfc24f5a5ffaee84471057db3d2ddfad7b2f390b4ffeb273bb72deb3cd4aaed4352fa4b4c8f5f9bd804c2f8123b7323ef441a00b6e777915893a554ebe34dfbb69a3d81adbc549f6fe4a85011b2fb4a36c9d61cfeaa36d22c4b549cf7785e3e8812d6044cb913df30b35bdb75c09b062ac19f60ee9655e975f2a414acebb30f788aa5df421fac1d47341ca14c1cc7cfd784d8c80d1d5513b91c214130bd36f043bf28dda7b19f844f5917777836ec42894230bb908202eece1da999a8a1bcc1da6e96f285e01c707f15e2880caefda4776a2898e4bdfb058d0f590672bc1c863e30f557825106a1a901531490f00f75f7f5306a83009f0e4adb79d223a81fac1903804d8bdd3c78c1ac68e84990af2e379deebe67639c7f4215f021ba48eaa740effc89ddf69aeafd26469b7fc5a386af7a88ad7825db172acfc3a39fc18f1c7bdb91c832ca125dfde6b376258bc47b4b73c0768c033b5eb5380f0d57a8e42a662ccc44ac4acd17c3e38e5c7f375a13fcd0cadfbe9baa8d138f926812a0da739b502b03607bb6fd515cbb7cd96f774a1752778e2f11a9597fe896273fd98d1c2687618ba4f707a6be120db0cb68468b54b9c451e7a4f267b51a2dffe16add5a67e712cb2e3b16c09b7a6833e9bf987e8a96bacd8bd52a6f15be89365d10c79c7b733e3efc39bcdc265fcbfa59e4c099e310e7df4af64ed774445c4979713a9361c6a1c86adeb3b075207a01ec72a07749aa9671e8ed1084bf7cb93e7c981ac4cb28d36f0cdca1f29756ff12803cd8cb21dcc1a1b701c5e8381a3c12718ccb82852209be4c3aaab9badc98c53c26f917ff45dbc64da32d6d3053e2d364d96780b96621da42c1b49eca0bfe5a7c5fc4beb9c5d9f09920fadd62440d5a792539ea0c32dd0f32fa91581862411a0aa68b3f52b609d108b74844ad6e33f7107c7ee6ed6ab8abca9b1c54675e30a276880a0dd7653fc6c10e809068ceb20a53f26355d913ef4a056bca1807131cf1e3b818c61d04edcd4edb30ecfb81e68236adf7ec75d9e60a7440b77a7f39c47bf38335f6a2193fec00ddd0259cd9ad4dfb9a5567baeb612d0a2ca6188bfd1ee1ec22cf477e9eef46e97216b6329a5d3dabc5420fb8c5d3217e99a7ddbea5367e80253d2bbe758cbde1dc30fa43ccdfeb2ffade275ff694167e32a058c3e9e990ceda2989d12ed2d3c7008e5dca69f3bd1e5cf29c23dd61d2519504a1b9d936c2ea2fbb2212368506d21af2e47e30a796869bf9486ca8c5b9096a449ac81cca9e7f2ba1a6ca9759337e2c683bf31fef1938fef15ddf9d67cb7dfd87a4874308314b5bf18d03878d40c00cf030c11a35f6f5eb77404b2a59ef788313f279dc3f25f3ba3ed26aafe12eca692768760383539d20774c0db9057e5db32beffd4e4aece22e4b739111a25ea38550703198c4e497d56d93874e924dceeabd27752fc4b1cad72fcc610db6f0337bc2c91e6e53fbce8fb4847068427f26c47c2da333c1ba75305f044c209513990539bb08ef4ecccf4f6accccb8fb198ab3c3ae153d85d9ec44e6223c3695e8abada9ca16cb9ed6a0ac519e4c6dbdf32e63521f5916292cc7c6331ab160e405fd18566279af02405422956be7475f0eb85a113f76b9beef282874d5a2357d2d5c5425cad66cb0ef53ee9264d7a310d33b1ba52567cdce3f971ce640de38b5fc7124749a60b569ce37f541e7a72309059456bd33439b61d7ff17880b09ebb7e33257ebbae0a38b93d7f8951f1a9f708ce470a08c770c68cdb22c18666782a00439f218c2f44ab7b907a4e4cbf460fa86e35242878a2a9439c61d751d033a0dbc386c4237df6545929ed838096a90bbeef2189a9215ee5b02e9839296ec2bb3b69f0a2e8b5781d30193e21dce28bb05c3f5b4eac92dc718e2fd484adf984da77dae1a3a4488f26b4241ce3eb19487384a924289cc0f5f8caca8f53a1076b2559e1daf56ce1dcd7889191949d6776202e4a41f782d51a3c39cb0a78be048ed159d82c8c7aa3b1a0117bfb571b6f021c490a4c875c6fcd5b0298e12eda2dd117867aa3f56d58b11a230f30fbedeea0763059376574e53672b8f491624ad127d8bdc50c3d2d8a56724ca6719b93a364a42070967163440e1ed0a472e3ba6f4aea12daf8a3bbf72271203daceb43e904f2a95d1d4d55ab0aca977e26342d8cb238165533b2624851e0a309d1e4f3633b79808035d4f6974e1eebdcecdd4321e198fd57cb72c47e1c80f048191ce460fd7a1ccad67e5bd2d496288aa84e3b17b63bf7990eed3d4039ddb363a63cd2165959f50b1f5931d78b85782fcda5c8ed56bab05dd2ef8a756d7857a96f0d9aa01b21f2fe6cad4a88e75642ee3e5848682b3adf6760b3558ab2b032bdf5a7c00ec7cd4bc5d1f1abcd2d389b147dd64a001d978e57fd9af319928e8b7986d045515ff5f2d94e6be638c09389844b9efbc5c3f7bd99c496e15b7a4b89c897680cd5e2becdc48b79676890567d39cb4ac41e848d3cd563afc3a58f5d54cda7fe9e6a3b22bee8f189cd804c43a7eccc0e184f4827135908d5c984ccc492e3d1d49d6cd42c234341ac2238d86a4f16759677230a32a3c27364f8d0739ddd1f883a369499062dff5f500be1a2dbb620102c7249d56aad65fd18cf63eb0bd614894992daeda2ae055c5f65fd6bae9a4663c301e076c529dfdc2a3c07c7504a897a51ee4afa4cdb6b83c1a9e414ac128c27d938dc1dfc063bf6c63a4edf44a9477b2f0e3fe8adba48c137dbf2f4d5d6c5fa26a110eae30e71940d92c966b812e7f3187aa2f54343d053eba9aa8f3ce3b1ef25caf3633eececa59f3a0efa9f70e5ba05a231b342d06ce9e23d1fc1c770cebb86e5a09410b10946b3c6085edfa4949144ed0690517884fd78ed6502f73698aeefcf70fbd32345b01ce98a20385c1aa1a75b5306efc28c41732ee003b6fffe038420d0fd2feb8a7bf977cffd71546d5a0d2a6aba1d075b1ae9f51ab83b031f08e8ce74968999152b2ae5ec5add6b31b6288e4fd70b432f06abee186c10057d42aef6bcdea445aa70a5a7e427e45588d503b56e14075f582be271559ec56570ca4a2609ecd2a255a1d0ec7d95e8eb75f283ab1ea4f222d70393b0e137d5a86c84faaa61aa4e933e8586d8720253a7d058db8eb2d20a2be1e448dbb8bb930e20059476bb0bee91e01cb9c57fc7a7a489f2960bdb5af7bcc6bfdef411c52878d28c82d6a915778e568f1cc121600c49300c619ad07bd3e812b7112d093ba476684e8fae97fbbd80aa1bcb74c758d131b00645ed542a15e433e2af94fb5b7c532686bdcb6a11cafacf866b0c9aa627b5b5d9302b8af26c96cd98cfcb2df5b75cc2ff8ebd4fa7b8107c6c6c61953aa40d5e0fd3e4324f4cc559ed6e4dd364cde7ab35f3c3b15a3ce0e7763e6708ff0ac6bf3c8249986493341841caea74fe7efdaaa0bcbf2077c26d3d63cb0cc2faec2870eeb61c6bf37a50247370098771230bcee899e6c481f2cb776b9ddd8b07f50eb038f090323edb24f328acc2c220bdf82c43af3239d8690670fc9b5231f15f313292245d718ef89c8efa20719d5aa0bd8c40468716d9b0df1e2a47b8e3922723a21a073111ba109ead66d3e0678e04c0b2860c6fabbfbde09c4098e4432d5df1dfca0d18248ce874707c3eecb552549c89c900d61fda4262c4a7c784e82e477c66f0ccf99aff7463408e9b6af944b9495da6e2d117e4a57b45961aa9a5a6cec493d8ba6a42b7b738d1dfa65e172238f90d92f5a143172e76f67d9579883dbd8d8749096782487ecf539552b02296f2868508db03ed88c9de6b30aeed27a3e6b5f6c891602ab7f707252c2b9c4ea5243e88302ec803d07de7dc3fe5ca06c292e06e29d658265379ee8bca6f2b3094f9526913865d11dbb8e1a54ff552f4f12a1b8a789a1ddd72e6da343c9cd5ff0ebfed18cbed7b80ce1a613db9745ae1521bece2b21f1ee126b06c113c41766787fb2fbb5beaffbfa181ee119952db4ce2341a5da77c31ee1225a98109dc7b6e0b21172165e8a1af7f25853ac6bec2f96bd795016f4d70c9a9d8a10fcfe8e882cc3e264d9f1a930abf8614967f52cbe98bd9704d08217cfe3ce6a632cf702993f29f7ce5ab0e8675770dd87be68ce159e486307826883692381708bfaed3265c77183f07f3a59c769c9e24b584bb95f2f4bf776f790325eb46916d91da7e4a67eef10d21086646fa02cfd5400a348ba235bebc5d14ccfa969fe7c00f371dfd914d0c2f5ec1d61aaca9a530b64b78235959fa4f782e7033bae62a601ef09e8d61a63f404b49ed01d98183e86464cd78e16a936920958cd869e5d4334e7979d6eee4a7b9f937e714f440e50b12c32cdf51f945a33fbb91ebc2245b6049f78be6d7b2419d504016b169355ca549346a5c9d24bd2b0715b2200a779bd02eba4f72c4dcedcb62869c9cdf7ee36089b44b100ea99733d75f5008118241f38fe3cc7b25bd736844732e2c024e7346bc8369dd56a81dd55657b54157798f981a119b54be584b19af627e2ef5caa102876cbe361838fc3d6bb689457a50ac5269d1d2d7598e10e99245f602701c96ef5453827fcf4fae8e91fdb378ed9d95eb0e8f98c1fcee015332ced8604785d5ae3d15ff294ebca5148d4fa3fe534c8e97db67deac3c2550ae26d2ac616e17342034eb3fb156fb3e105ec61d79f2697669b658f74fe4d546584af52238f91da5c7d89ba8892fbecd1fded1710329cbfb2aea99a63a38003fc9ee6a546f259b35939dcddcb60d2e490bcec8f510cfe77eebf09f3176c6a3eb4b68aff9c0c1ba53fe13bfcc46833169253de953e2b436fcf4515cdc0606558c284403ba941f2a7d293db0213755140cce50ebd6dea03931afab0fbd97c564c83018b244dde28d44ea7d9cfb677acd63753e39933aad5c2503b9a62b9498b6a935fa2be549956beb354022cf033a2165ec17da19dc6e03da554e4e41e5d28e342f83851d6621dbb921d0114f12d1ba89e9fbc838d5ad34ddf912db9eb80983a2a19f14b19f541e50e4e7d5cd30eb40e85ce7c8518f1d78ded49a3106b731701b6bb83b81b3eb352a93809394922c6b35ba7e9c23421a40a9b5c185f385acf18c3120493ea4ab2e28f2861bafa8b6e9e2c90552fd6b651536e6bbfc0ef0f1fab34388a4aa497c62311d0fbe7760ec6b7ce638e31587f97fed5d0d7a731ef56a0693f5d71f842bcbdd0bfceb2228f15b72e6c055bbe3ab75fdb7f0c37924f97437815149634c31276b47778895b2742a6e3385601634d9fa25c7ce202f8fed69ec44937bd6d23b1e92c079e93b3a67c70c3a6af56eab443afac72da1398707d5fb59e23ac506fcc0652ef3adf991ff1608a5f554829ed8de592fa2c09bf926cb85add97669ffd4ed22bea12a9d6e084210ce84e4a34ee97664614ab041b777fd1e23d84f12530f8d419dc317bf234a3b70d0479e5ff287208ba27a4c93e331364f31d9b7de6632cc982e1e7e4f975560638c33a010e411f9144803402d74f9de447df560692f62a2ddfe05ab66d67857a1ff7303c121e5a7d34829f89ff40488b6e2a927cd71f50f1e02dd13a763507509239687896d57e9fae548c8d5dc5e4daa37fae2bc38094cb2afd00f3bd23d419af83348e7547c62769e3431f04f98c22629a056d2806e276f44e807d7fc03c6822d09d3c169d06aac22d4567b7adc7cb01c8bb0de757adaa88b1140fa7f62e32c557a7547545f322bd5135cda0e88893c8d7791beccc94173ab7c934297c45764cc43e68ba8a7fc1f59de980e670ecdb48781a0304cd50bad6d5dfe1abf4979fd6e3b0e8a637666259505d1c67482977a3f00cf6a73eb3ea9ea8d2c97cb1c450712118fd8dbc4d5cd78a6a1c4d8a845c618f3a8b013a1b50238fb1cf4a5e27f3bdff60ae638cf0f580a5af3b2a31b9c0a465825935b441783da6a2bbe56e3cecc02c866740248a49eed4ac1da825cba3fd0b53823d9fb9162b830d512890ff6fc52cabc45045053635bdad44cec6d58b078adc96b9ee67ea89c52d77aebabf601c0020f9110300b485943f543b526d8d0c2a866530511183231efab70f7854201f06403ad5f998a145868d8421f931a069203c5ef66cb289d29578bd7f88bf8e699d8565ce037815c53dccbb606307152d5d412ccd92895c3682d2765e99e44761b9611ebb3f07286979f98d390732e7d33fb0ac1228c2759e8589f1ec7d5bbf36a2d41db5767629c229b828a1768017665b3857fe76614b4d97a7373cfeec5d1b680518897f3a107bdfca6b04c532f46886d0f725670981c357f125b2cf8be64503105eeca66cabe9f15498b42f888b171f31e9d8b28ada5b1f7e61b80643228e5f4a7dc59f464035a47a15c1dffae1a2fcf0241b920bcdd36c3bed844d7c331eb2e842128fa6a1479bbe8e35f4eec5adc5358cd8c6b20a9519d57a39762db08620afcb3a33b91eb1edad5141b7b9ea9e429946fc97581b1cd35dc591506f5d153fdc058943b94b48ddc3cf598cdd505a728cf1740f8fb4898b696b6aaf088aae45b996f4c275960cdb2688e78e4a5c9d4f57c910b5e9eb5a8809e92f39fff019aa3aa3a04f7b12a46dc5fa76577767fbc1e160cd29f078cafd242d5da33e159829fc9eea57791f48f7587bb8e3cc9ff361d684ace5696941ef2a8b07858f6617e49eae0c90c394eb47d0d6da22331081999ee0314880d34b17918b87480ea1d623d44e91cab95c7dd1aa17585e47393fed12da03026f08cb1d0c8ac60e4f1252ec8638d3bb4b9ee4b7bc2136d395da0ec33589eab4d283ffa28fdda1a48a601bcec9eb4e753bb9df5533efdf665a50968e06d85f74780c18afd71419898d71bc47272126dce50d7de0d7107a4cf0b5b2a3e76fcab6eb44b98df695e3ba55c67cc727f1f017b26e141e4110a77d1c72d44e1033d8a0cd243d8cb8eecb852d3db9e0ed69f586aecbce66bc42584e6b9b39851c58b72866bdbf67773591d3d4f47824ce01ae7b2400fd743e3aeeb6bf16c3147bab3af86054a04d8c57b4704b76342996b92fb1ce6f3abbd62c4abc2314f7199f4ee1ff7e237fbd0cf2e2c361e7dc916bd4afdff40b3aa17e3f69cd8a6b93d8f9c0d48d7c44f9c4bc206d61e3b71e1d6792b6c3b97798892cbdc8565164cdb06047143989edba748e173b0e7fb6339f6f6089adea6dac2da8fc05c4b42c11306b0203580477d6ba351700c2bf38c6ff33dff3c1fded530deb5d8881300a51e96672e19c111b4ada8f1107ac4529f3c0da1c95cd3abbb39dfce38e330df78d5595e52a9e1b2e32d2545885e8b3f0ffe79ab24263e080b29fa104ebed3d0e7e798b18809735619d3abdda0c19a8b1039732578f3ef5721a9e5d59e1e796b0f07d7667817b7357678718d5ba81c4309e99600fb73359b8b372b849663f53efba0122ef7d3e443f7f74dfbbabcfda13b880cfd36f3f8a992b18faec03dd4f16d380c12e2c0fccd78d83f4d921824e435e1c48b1fe11f507b5900787e878ab2b3946eb5f13557bba0d3d035dfaed12d99ea77ac86c4fb02a4f2ac51f4661838d8b7b80cb02a252aa77224fdab4374a9832f4782c61cad95b5d91f3c8911db696a23232e227198ee7e9616ba8d486318abe38d72fe735f44967592aad5bf0434ac5f1fecb0dc11f25cfb910fa0a293891e6c5b8197c05d4fae9b652a15547730f4fcebb9693accbce451a527bc76e8825edc27f5e42dfcfba788fb4e81c4e1d1b71c3af33366c994f612a95c0a005d83b2ce974e200904531fb61700b8496840ffbd085bca522183ab121dda587806924e21d25c4a0ea1135077320a4f8d7b01e5c6505e45aa75a889f53a239e9454b49fb367e608b1c04022e387a2a4b580c4d8be5dd3e9cd13db035185f2029a47bcbe1573315e0207f2a1f1974d6bda4e1198db9da3403800de9a20a7b0840b3a98b143d865519b137374ca63388a0f8ef601b94a809ba609426eaef8c97a5f42ddb862bca0b04444d3021a357d33e65c90eb707efb096d813bd9141a83c54f9fb70c80bb4430e23af87d728bfb7d0d4ada849e8f15db00113a08800815335fed89096a263170cd13d640c02816c6c8a47aec952403aa7069cc221838016d6f1c925024efb8878cf354e88c2c069f71052f5f1ffb961d7e63f648cc5fbfa662f49d74f023f14dce384fccea6f8c940a2e9ff4a19d3cff46d87c602f0651d6a0ef3ba1b3727773ecfc9cc07ec56aa6bfb7966d1b96e5b3767a75d3e02a5c4978ae663fce6104950565f47a0d16c1a9401ab9286ac77f6eca96ef296ebb9c19e68aa0b5a63e7a1191cea851817e3c1f5410ec0047b4744dc5f28772513071abbc36a0982700b1b78147d29047547e44a90da39df96aa12a9cdd7b38e1ca80cd2d62eaf404eee67e1b87f4559cf7fa1d42c1408465378eebb0bef3f34129bddf93b0082e8888702f6bdafc078b75d6decbe3cfc33c169d9a21112f0ec6a8243c3b2f35c411219a341c7adedbc5bd864df881715cc4b62b051c073ea2ee90c0c7ab72ecc8ff4a02c26764ba6688ffd17c0814b94aaf1d187acc3d75e6de705b05e62f052a53bc7a8df8e659e5e6e7a74b79de0fb6c445694363cef82de3c76a638f1a3e1e2340f52cc3cd8b233a6f8bf894ea879f1c567bf215961282e2c49e429506d7a1c62c74a28e0db85c31fef95a08079ee5e12f8c2f7f446b671c70bd8610f8162d6b165dde46f1d0bb6df88507bf3d8815d20e4e7289e570fdba6b4e18951b68df56509d39577146573013e57f5b8e01bd47263b748e068a7b6405499969fda6a6218c9554aa297b09ca0812a72d97dfe611dfd3ddb6225b7c23a733133423d7c88ee253b8a7cae8cec69f31869d7129b5e6ace8c287e0053e6dd2906aa3059067f253758c815a1c7bf21840146ea07aa846150a62b8b34224cbe24500a25d7a333a834ee618ba98d899648d572776d11651457d505bba1735f6a9176e70b3f70a910015c0b7a7c239a77a7e80108df3e6a08b000eeef736e408a1c12b0116e2f0d66167af01ecbee1065a1ff744ab0885ef61b65a30ae85962ac9f75c5eddf10111d5cf0de473dadc0018f9dea74d2a16096b22a604df8382b35acf8030793eeffe8523dbd2116a757479579987974363c7d7d2906d2d672c3a5307f84259bb8ffb6b6754de7708f280830579100221a15270a53b8fee30d666aac39a11b360305a740b22056eb1dc82d8eddbf9fe5e1e18a89b1a3f903a2b28168faa04a356ad262203b74788f7e75e35cf1c6dae8a21f53a7ab29fcf28af61df7e1a1bdc85bf9a148204757b778c7ec2cd5b49bc2f09993f96644a43614a19d425c10aba2b475cec21054f60465e3d1e1bdef56438ef82ff1f5a3745e4d5acdff05d5621c528f7b06a3c4b4ca7cc4a066e6d4fe47c0c36f13ebd5d087617a53f513ab4fa3680eced9863b1b12e837701ce2d1acbf9e365987054f191fae3b64505edb525395f881cad913a52202e7ced53637d51a02bcf88ea0b2daa54efeffb17037e6f01b49ce39b1b1d1dd620e3043d14780a8109c389197718713ab7cdb41b0cdba5a7c2750064c18d731fcc3d9c9de6894caa60098f83174b8b636010c8d0f2a1d56ec49a49293c6947feca22df2cbcd919db7856989927020b07d7d2bbe320ed51470e56bf54355de07360734768eb7b15bfbf3b253452dfa7535e474019ae0553e1a4662b258b3f6148e069786b17e856847d92176051681e6f8e426df50b18f7a13eb68edf73d688ba087e00b23432b16838e3e792bd4afea9a19742d1c5fde0573340bfa8f1b9149933ab6d9cf2e8c80f08eee56f274e3060051adc8336bbb574a33ba1ad10f10f0c5c620124e28fe9a163d238c0c683d2e8da287e87ca4f2f0f7a165cccd55c2b000fc9fbe97e56e9209d3c723d0fda1efa1cc68912551694c08b13664943da77543b0b8b56b21edcc99d30fdfcab19cc374ab67dec364f6e44545ef95041a9cef5c3dfa08c43b9c1142f4c5696a61781fb814c25dfc7b9176db4c93fb9bd607d8d6eebd3dec1f405cf10da73e87097853bd6ccf3e2492100e42e73b0e1dc147a65053348f75902867040e36ae27f0664ddd70c09ed041bfb20cab761bc7a3cc5a393f738adf1f55c912dc578648491928c0f1392a88f9cbdae10d52772c50f8db741a67d2d094e80188b5db063ffac48f650d2c2000faf13b3ebf886d119e8baca768c32c05933c4a7917f0df1d9a3aae4b2c2378988ba15f582abab1bea2c79e6822c7614b869e258b01486e4b4a180f9e83d0e03e09516ff556ed93b3c4c237b9aa7d9ed6ec8b311426230cbc7a89c1d9d682c6e42f5542ed5b5d62befebd8b0c30d4ce606548f42e35800943e1d6e183aebf8fd21152720d9ce38b7d07ea0765ec370a6faacbe090d1053542d540d51d8cf90477051091552df929b002d71d670f31c0c4c4358111832bbbd39f991c4fbc0655c31bbd037163fafa4d71a7bc5862a2049475b7b6b386eca61bc394d92e301bcf07e01e8452d20fb452a40cfb78a6db3e4c328adb807bb6a92f18076d7bbe3942328347ef63fee86bc93002f6e68e1e083baad53780378be01bd64c01eed98a46e45460ca7904f11636aefb695198284984be6cc47c5bb5c722a14f394446ff2ac26e288811524ef998f29936e796a5f2df0bcbea4829c6d50856848c95644609239bbbb531995b609a291e6018efcf02a3fff636758df37c1b5429e12560b9621335da33e8e35ea885c7a0b31226564ad82cfd6d747e57c7ab35d8430b3434b39b29c4d21e2c5dc22730c1505c9a133c3f986a7b8b65cd9108252fbe45808bc05051c7cbecd5054fa22bd4d952a76e0bebd2f0b080089ee9b308cfe5f78b73f52627bad67600afab15bb450d0fbe59f65a579caf69afc696e2cbae53399a1822faa4d547bba5dde57d9eecd667d5129934752e645a25cbc1c281df408ed4d3781777b0fc7f2c9a2746be779967146abc652b637a779eedc549430addab8862e666c96b2f2352e22158f93b9c3863dab9544deee75e08eac710d33e187b161abbd64de8afeff81bf6d5ce8371d642cf2e2e06dc2b9e5e4a412ca9809ff7816123b8d85ed038d23bcf42bd14537a20912d34cfdb68f9b303f30085f5f103690c96a275a3316e37491ae8e0544ef7c1f580c44826552801b0fe4686a93c216eb875629871e010dd61a53e236aeecde99bd1d5ac66f6884afa219742ebb9121051eb99e013a7ed0f6d5b60ea5272035fc71bad6b140345127f0ca1a3b491c08aa96c6a7b081579a2e0dba6af9f03c2a4d24eb050383faf6351a610482f1866251c4b0c024e154481795f644fb2e30e8b8467f7f704a5f54a22e74efa5a4bb069e2f278429bc31c99ee5e0f4373c251d5cfa8a33789f97792c6781ac7a6a6405df810ccd3bde0edb004f78b6bf8ec3df35d11cef60f2b58fb1ee6e6e56f4a7fbc3886055b5a9918bd329a234398e178a7f9dee711104f8c1c13c38789e7839205a0fd42aab3eaee86f770e83c13b30da9cdf0537e03af45abcdd58bda90968217e843aafef82013d5438314861ecfac77de8c74d2a2041dafc37f0f079d1df60a29d197edda5069319102d87c95c6ebecb220c4121e90f364458dbdc199c68c12872881633909b2e9dece0dde56db6af1f1a017cad4420f3214c763e310145291e859cd1c9555fdc56bdd4b29d25a5a5f4d1e123c0415a95477aa1205f6b8fc90bccf579de45c019639cfc8d3bd4333a6d79f5c68a8de611e55da68c938028aafc3457a532ce158319b319428a051e197c6fa46706c48d6de0fcc317d54baabbc0f816dbce707462b5cb7eb74cb9e607138811e44c4586db80afa5e8ab3ba1c100a3316eb55b6b1a314599bddce30854c7d23b0982f04e88c6b7fc2c3f34d0e15b88d85e52b9a6f2cf47210ed5661601b1b32685dfd1452e2a602c3b787d351b1b00326828b3eb47a7f4b1b835c3eb6979f6821b7fdbf8c67c1191c6364123de882ba34e609adfb51f05b2353027e799755f108d68fe1c1b9d87734f7e0232e783d9f6c65106309121c030e82e2ca7b6139283fc5fb22d5adbb58245931dee682e4b7cdddfe9c85a565146ad58d493e86b407d3494f84e1db7a7524f5d9b6f49211c77a3f8397929e6f2cd4999697a731a21190c608a2852777156085d674ec762ee4f060a3dc6b39eba977039cf26ef026620a3f4bd3e7a7bb207672a97770de1412c8ca531638806575b4b5d06f01d1a4c957fd2d00206898515cbf2a8fedadaaf8da61b4c1361dc6d43242f9d3d867482949d605c8f86e1e9a7bca1d5b99ba9887069f8b4681a707c4ec34cf73246e339893369d707a6a69805f43045fcd7400a46eac118a45db7d13c7b6947224e13031fba3a2f6238472484ac8d4bafa8852568c0cb943c04b0b7866e0e04c080e7808832bec6f92fb85638bc18f7f36c004da756caf59ccf26973ee009e732436b65612059e9d4e6e9ab2be2b260a488bcbe896713600a6d49fc26e0157b23334488d3d74672c7ae0ceb00e5e0ead83eb95f005953b86e7a9450c9953a230239079477ad3e3b6d3765297fb01478bd04a2ef3e7831471357edf209eadd07921671d30bb0f754b2b2dd3bf0fb189ea5516c51678f06468ea709565f7243daf42ba4a2ab2ce3ebf3eb27ea7a11ceacd76eafe07e3723d75c6512217b596a91e870ecc69213d9306fdeeacf442e8cf1fbef964809638202662c48c250a84a9d9b4759f029803a2228058f47167aafb0f9feb0c28ebb7921ea2a2bfb100782c8be3b43af3b2d85cbd23e530fdd95694b82fe6bad7c47cb9999355a4bd93c205e39fa0a92c20d265980245529511d39d9f021850a9522b5ec25903a90577b4d111843cd35cb0e3297df37b9268089b2c44974d4fccb8d57fdbddd6b70169e5053662b66961e7ce11f123a9e5959744b47965333497e512974bf2cbb9989a5d7d5f9afe08023abf8d4ecd96c5e222af2457501afa79ba6ae0827994001eacbd620c13579c39468cdabe3f8b4ac7c41b182b78cef4efc7da84f28171ed78f60bac667451041c66457bc778e2488689d20bc3622b72f5e249181d609bc951cdb60230cf3aaee770ad7ba159d8f9a502e067b0fc1e35a4f4d0f81899e724b8dc3f1237116b7fb5590e1fa2acc3f7a114a5724e3d6cb3a4a650db378b9d2b318633d2cc34794c859be7d0897a6e961d1961cfa57791d63d2abb2c420fec7ba2707a4058a81a33b43307411be11ed938884261fdc01146d8439d0b8503ddf3b998a592501832b2fdd6ffe9f77ce9295d98cc722fa47a868e6ab4f4ebfee430443eeaf0e8f1761814cef685f2f01229f2b21c3d734cca8de7781f333a796e3ee0d258c4b2eab3c424574eb20f2df43e1a3761e40ede43fac17ca3ce3fb9cd919b7c3438d5b2fcd3ccaf4db2da5006483fa8eee4ee86b01f6ab6d4544c349c6ef269bc3f7b33d9548f3f03721201ea12dec3682b04e014073254547d1a3b7cd93e3147f3f038b6bbd2c93e744e563f3d1d5fb7c44a2f6b3c2b1109d952b52a40d9a5e4b34f2576b5c7e583522a235f0ba94151d0250e7761fc96febaceab05f2b36765170ee5b58ef4acce0eefade3c25c20bb24c9b58765ff56bb10c86b2b46bf770cd6c04d2e5705be5b04d483cb8328684187524b1e08ba9184bea73619003e0582e7a8e2c3b48a313d1944ff79aa0dbc57263b6ad54676c854a431e5654813e18cc253b8b525804e8895cb169464b32cf095ab780a9fdb737ef68e13da23692b05d63e1d20eed799e243c8f0b62da1cd820bccea7168849765e4aff08ca17e41a8933528d68c31188233859d501560e5d345b2512820062ab6db6805210550ed593a8100a8c55c3f0cea3a2ab2c714913ea3f2cbaeff5fde567b56f0f8e664e371c42e5605f32e7c78d16b54fb80d43ff023fc749c48dc96348e6cdb760f7f92a41ee5cfa1dfab44b107f5e154ee0e06e0b23d67cb78dfe1ec097398c690f1e90010ba5211d917f82a41d177c02bcda59ae1f9804bf8ad3d914970efb233eb56a5fbd67e609c2e7c32bf8f021d00373ef0780ceb037a317b47578f029af9e99fac7439322252375265fded5d0d5a6f163e6f19e2e4e7a7445312eae9c4ace7986363e399e8669a2b61c72d6326326469b7e2e7b83910ce8cf74068a5f0c42a4c70831e1e419f75cf4bffef67cfbb5655d09e1aa8371d4b4a26a60b5ce417db5afe20d104ba2dc3b20d4b861df6e7701a5151236c56b01a80c938925aff13a5514076fbd0772269036ee698c2c223ebf3d4ddb3ea65cdb99c4edb09e6b48b72d5da041c3768487391b44ddb9236b6a38ee2e2e7bb9d118317f210f775173bc153c25900818e4ad2dfbdbd027de85f3b8edd7555de1cd6a00dade79e276a63973a111c8f5a71aeecdd6a2d00bd96249bc7761f189be3375998121cc9c6c54e1ae93f6febc0f1ea20b5ec2cf3c97a68804d00e3ea3bd527d58f38a7bfcaa493bf9409fbd573a9171bde02d8925756d5f8b55355939ee8e7182945eb905ef65580a936d0e9a9d4db36349a987d6d40c31cffb3759553195181567f7c7d1676d57601d535a8fbf15e6d7ca3c9e19a6f719dd79baa9c4ba3b683ddfbe193d952be6fc414139943e049a66d4df453468861c10414d1b1739d4021fcd44c63771b70658ca532039baa658c2b72c9ff109ed0382620fcced48e7d4267642f350608d9f2924854dfe97fb8ed49d1da2039ac9193278a4b1cc1aeb5abcba6b19e7033ab68fa6e2617be2ce48070388a95c1c915cee19a3ebec0d41591d889a708036229ae1ed0522dbd67ff661114340f6f41b5ffe66d9c8e842049e3dd8284ae61a5954b99323985366707ab93f2d8ddd5af475fff200b3f2431de86924f6acbbb0d52ca00c2e84fd20146fa95bb2b3ad83cf1313d14310c7e0871569d7ca10c9f584a4e57deb7b46bc6f41c9829332dcfc626f2844d0132b1947bf4bad2258e4a67a11118e54eb6d010ff9db747677e841394f85ee82f54743783c7ded7b23f98c1e905159148d27647867310f6f929026c86b272a5c13d98198544a470e6f73f000414fbc1636f19edef45700e8c2bc8e8bf2489cafa426c271ed361f43579c6ec2746a67898acf8fe485e0b0855beda7ed909a0c04a5e162d949bbede9bb65af23e380fcec75cba8126368b2542d2969c7b120bba17487119b450edeba03256909195680224addef8ef6de109117c47d91526816a07cf1216e86bce0b47bee0bf57207191ed095b2f1f78e6a286dda9d6121a8d8725cebd7efe372effc4a5ee0ac16a87b9d3fed3ac1230c611bbe7d3fd774a4d48a93ed78332116e8ad4db69a1c130cbfc98d128d237dda1bc0e22a9490cdf2eceef361e55632a8c53d8535ceef98756da2ec37b933de770e2c46d3775216be9eb2d864035fe218ed79980e563cd77fe248ad6dc341385349076372be58a74125c8f9ec94478c74d6a8ec2e26db8ba7464dd1c7c796ab0fb3a0f75ef31fc9a2d4e430b3345784f53d32318d29c621cef2f080630d216213a316a888c1959438232240a7408f828b754fd49881d56fe60250e24c2920fc41d80b564d10d1b73a8c247f5471e86adc03820f1b7d1e00834f971d5568ad65ebc2de3879538b8b7d0490da856c9af2b1c09bba6b37579bd23a4bd478c34aff9d4eb77da66ebf4c6cfd7bd4e54a34b74bf6973569f57abf4507decf9db4e2b425e9355c9e834e4036dc23219080ea7348e1fb702cc5a740256456c28c51b84af8b4e9a9d2f010b9c4ebf9a33fee45a155e08d43332a07f132bbccb6095c8c282c5a44456be1a9660273b4c1f60bee430b6a010a6199d86ec2bb7d6ce4848b28fed7015d2e3fb751ed4303c3621fb8577dfb68db9e00125d4149837ea61b902687360cdb84533cbb941ec16785ccc097fe654705efdc40f61fd4078d6de1cd971e8b721828a5726990aa3e0fcafd970588d4b45300cd55221886b456275d35adf46f43bd91e06083b7d5d9639ed837c71aed6c3cc76b6d7ed3dd1a467dc42d3d98878492d7653449d7801d66ddb2e6e36c296cb78c51c4d16dc308b15cdcdadaaa018a3b072c3ce348aa0a321a7be4ba5bda670dfe9e224057c3956b24e085be627208ae66886a23ed58f5af9c8e5707d2f594b014a932b22d570198327be5ef98c151b64091765fdfdb773916871acc8f035646b3284de096ce82ab94b1663737e4cad98006d8af582d38a1f7e15d87141bedb1c3414ea4d0e4f6ab68877b205445407a3544b7e929d51cff7fe718a90ffe38266efcb18e31af4827a6d511506fd1f9229b696497e4ff624d368318ca86572d0bb03e612183cce264f1a4657e49aea4ca182085d2ae0749c7f1abf4450deec25eb591e356365137ee21bbbe0360d1596b616c40a4d1e3f8d91710da6842f938616a20c001b1cc7d5f73e604f81ee653a0b2b0b3022cb7e5db162094d6cae7b8c8017a1f6c24fd5c05851d2a73a60e8d64cab2c5ad4fafafb73e4908c4e8b3339721fbaa14f1a2c4d71ace05d98388301f032ce554ee86e769a5f6a8e057b1c27eac47de75ec13228b62d72b30f842443195f821074221aa928351d69df1241847eeb361e532c4472fc3b447534d709592a83861b0cbb541ce037d490934d948c1df6b85598978da72090473bd6925cf4e67258e301e47ff76b5a656137a311871de9332036ca44b9e494c09e7d791e5638756179a3e6818184290af0b00300d91a62ed57634ef7f9d054724713d29a6977bdb7ff631feaff8151b5c470e3321a4d5e36eb3b40c5501305b2bfa912b66c43d4144ff665689d1231ce52db6e64936565ea9758ba5c269bd57d911993d64bdcd33bb0529b25daedc2f42959af7be52c0a714d676227bd4dfa9135af0e9fd6ebbb4b8b0f69a89ef2f9f82835a73fde3c39437ccdda772bf05844470b9f5f8cc0481127523abaf94e5cc839cf9050569702d9c23824d2f6a192802f3028c230f08dc88b24e932c335ab7af97ca3b5398a8ba7961503479f61e6bc5085d8a5d4f512045f493bff25f5ac46fa909e4214f27c03d4dd0f73987091321fa5efaf2e7e74a5406aa6f7ee49014dded96a67fbf5d53ba0f5a3847b37da6cf13bae5d3ca657b808d5c19cf3063b6365f3283472769f9030ed5c7458ef688f4be91dd0e764db13ee9c1e311a33ba6bf4646dd14a8c77a1f5a4de1a06a32ae5b0acc5a9487d7f2a14996cb2cefb2ec544b97479ca484f63621911c8c122b32824fc4f6d80023798f322946051f9e7ac6d00cf9611e5fbd77838ff45ba0d52470504a87cd3c558dedf623d4bad520c0a837ba0a08fb011f4140f8ed3f251434a0da1734516947b13febc2b3bcf84fbb46de148295d39768da751f3f804914a6e868c091f2ce13d365a95c72ab0923c7198792242c69b72979ce8608be8778a4cb37c385703c4da1df110915edba542c3ab849693cc79219acf7314ff086de70a81e309de27d26466841821151c3049069eb197489dfad635019a3bb1a0ebd03fd5edfa6fe67a8ecce2ee37e09c4dc8ac65f659d4a325a55effb3407d851e1e5f78ebc169f5a93d19e3cf24f0c387339beeecdf757507e3d1360a353aa72f64715e848e2cd5e70ac103ad8cd176350e03844d976b521464b9a3fd39251ea1f49b585c0cdc41aaaaf723aeffee886a1f2573b1cb26428bcf8984d5ba56f8305382c48cc96db28ef9e52d855471b9dc215bdf802d345abebd9f109e0efb4e15c62be0a34f4095fa7c1e441f8d732e1f9bab252dc0b0eeb929ead3adbba970442e3f7cd988fee238b83332e377cafd4b0bf7bf9785fdefd0fcd0ba009dbd1f1f9942fc54ba577e87a85967d47f156391a4462b7769a6c19cec6e764f0632928dab470b2f872f0e7b8db487c71e7e40353e81c55c2b62a57141688710b0b7aba4027c590fb732094f5b432976b648994efda0dc4bab8afbdf5dd4393ef3081a85b1a9b27bef5e6a02f7239f3a983605c9e59d9122d02f98454cd6635c8525e599eab8cafe86c738432e1a2c817ed2b23f621eda4b42f21f8dc0a8c4b8e6b76a4d3cd389a51318effa2802c3e63a9963e2e747cd7fe2c1e281fe481cc3926de8a1102df834800f4684f017a5176de96df651625f0232313ec8a31cd706ce48878f3275f51a74ec990215dd80162a3824c2bb4fa8e6c4c8f0290d44abb017f4acf083004e67cf6c081d304414ee1be40624b170f7fe6e4cf548e72d4126abf7244c8d6db99e8be8bb15a207c677960bf83124ddde81d6427e9211c302dbfc0c8040b1eb3d98773a184f3f669fa9bfee31cadf142d7f95829585f6750f2339804d4a1eda0fb391132f641652d635829098444c390cad51c9c43678b94fe6203a202f64e0079090a91ac9efe8ac2afc57618493cb0714392153c1f959487da744f8c772cb43914f3677f180fdf20f5c5fa09599034b5eafd7d289b828a7bfc80a57e51d184935acc190e9dade4a57ef177eb00a06c624694d2ae07cbee4555e30e06e132730cd46bafc6fd44ffe8ed338a457b6f93e77429c1db365c3961e2ac10b5158410c553f4fa73f53dfd6399e72c0362b6e5b14c113f7bdbdc3480a14709fbe9773e12ffc3a389f6b854c05c59b4ebae98a5eff1d41329830ae49e24f8c3651bdc5412cf1690a2e893bc015a17f4367e562971bced6e68d3876964629b19b34130805fbfd1e0273f7f9bbbb2f54f5c6a3bfec94cad4b23416b191daa4388cb74c5643e69bd2721a458937727c44918b633c050f8e3a117549363b6d0e76b02a2ded1288d3f7f8db4037633834c0828024d472cd6845fb6d2042720054795c625e18c15dce77ec31210e8bbcce2a4465fb5aa298ad421dee79394d841ff519d58d19c85f4513e18639e0388393ffbe77c628d378e96a78986d75f6ffe9994889e999a60d89a5e854ad5ec169540fed1cf3edf31f2d2e3f09c687078fb7ebf674a513873b353adb6cbf7c4824eeff58875aca02a37325d5ac89c4e585b081b7555f2de5e8a07fbe7b1724956fe7effcc035f2ad2db689abc30e74f38c8719c29c3f7cd02dc541406ddf77e61e62fb72d89a188eab1a5e43cfc87668eab4697b184ffd29cc5810cf76a600e05a6674f23ba614b8d62dc1df5b473be9a4ef08b167fa3568b80c732e885acbbf7860a8905b241769c95a1517e0a1987a30424f6c36788b8a9c62810974420e10f78354022419191cea53fe0c7084a097f819aeec427af26dc15976ee5e3b2eea250dde72d0a94562e0fb4102765885c386dbf5750c78ffa402fdba22b25c36d272c43056ed9213d5984ca20e53a642f326f4980cf53f099044c1235b46fd726ac9427679a8e430e0105cf698ae06130ba85385e154e0c6c9ff88a251e630cd3011aa41b17cb5e3d60cc86b6045997120516278df23944c5d214b71c0af443cee5f8243401c4f52f25b3320a860e687bb5c920645ec4ea0a62e21bf2b80c5002dd0f3d9650f2af32c878f4d948dd2a9da32f3e96ffad6ed6b97779164616d0e3c5abf550cb15a6b4971143f57def1098461be715029d61409d05897a14c27014de5fbcabf540c4cee79878b322c77985749e3cbd5428babd36a0e43bfc2c99dcdf92ab8618b2c64748aa71d2d798747a98d0aa59c3eb3e38b21d0c41eec2b5ff7e8198e92223954bf17b298acc8f7e7528ba0b72ee06e6ea55ed7422c8078c44eb8975cb992272a6bc9a9fa7eeeadbad2c15edae67ebd51dffce7d31b9a9364513f86cc31d9b6b2e4a34d595726ea5a28ed07b0e123c249845b85e3b8981193dd0213162283354f3a60d2f48d0cba84df794b0605335d9ba51ae3a928e5dd3f12faa8beec7614941231240aaa33e82ff438947712f40423c666aac976985a1aeac26ff0abf22c5f9e19c42ec4497f8e50660737735def74533f2244a127b638b5eaa3247fbd57c4e8d1ae77bac9d60545c9b2d0b002cbdb9c85917fde4a32d78affdc81e0a032599ff9b662eac6fcc594e48b5ad623cd2aedc02741eb17d13ee8ebc606bf29d1fc3b4e074e3e074c47e1634a4ddbe7255d51527be0ef68b83852996709f88d991ca2d4061af46e73ffbcf19e0379550bf9f1cc68199518f4e8e6c270a3609cc73e8519c277bf0bcffc3b69842103e0cce76e7a0fa52ddeff4f7db7244342b1c60de7b35fadd717606628c24fb9c13471b47c65a96ac81b4079430331b0fb73049be7878324914be866bd61326c56925d67c76e7dac2f6d8ab4d4fe2436ad2046e0e994d353afcf4d951e8c3e16f392508a2bf6b36ef20264dbbc11f32eec45ef251add90faf86f40ec5c547ce666b01b46d4246e8ce32fab820fb31cda491b48fb8b6e2719bea9acb0f675c35c8b8b886257409ac37351269436aef14dd4a34f45e853fc0cdf31c88a6c0f3c908fa126936d9e1f10fd0814e1984e86062cc6e6f58b995a5ce740d26171a159b415503dfbcdb932a2119455c963d39f6093ca2d6a7e290e52bbd30e051b5808e67cc6c359f6f6a82e57a9a45f3ae3bf4aa5a7afd1da7505a03cec667d5c025d222031567c1117c92d6c5f221976675cbbd931d0ce927bb045fcfa264fda744583c8e0419817455150a0663bec710a1a5a52384f555e81af8044da5a69ab0e378c090fc797d1742cbd6d991600db7811ff6b0bf595efba580bc3fc365f906bfd6c08cdc2ff963bfafa586cb7b1031e3cb608069537703f150377efd4982da57377a4d189705737f0002ac9ae9ce12634aba81ea681b356d214be6364fc9309309e9c24c339ea8a4db7f64d60fe6b80f56d6ce63935c9153d70dc4e6e2726d27ad939a3a3840bf0fe0bb2f64364891a616bd6e65a15a397c6f3c0a8a9656459c53d0aeaf6b00de3d84f1c67c9304e53af3a8eeddcf98c5fd481d34b604c3bc5298b33a04098fd40ee100ceafd87aa0ddcae686e089a4db6182e28f120a6376ff98a039e1fbde1a963a9c40673425910700f62a8d19f5ad9250cf8d21c08e3499f85b55698c65566c2a300e15fa6eb9218b2c94a5cb531620c545b49c0dc2f8ad11189a77a745c1b50b044d5bef555a4fd06b27f41a4f3450c48e9bec7207fd13e489cc13b2e8d5d884742e917dc1401690242345cc31cb2562b63576d7a1dfa07a592cdc6c58d191ef0c045bf34efe96722a858f07d62ceb8111d66e6ead50181386fdf335bbd647ca72e5fe24d510405fce0b1301a7f3e2833a961311fce5e58a9b3c575c6d320fd84daefc9257403fc0ea5bc1025f6e74696d77806fa347b183179dd099252cb7d9b9acab9c48235725b326438c956a79eb6f1b6e05ae53afff4293b303c1ad68edb3ea26024b59aa48aa8035e18506d0a6de0ef66481b63fc559560f0ff1aad8a45373370b6cae1ea148b349a6f2a4ae635dad4d6adedf56cfe643ee3cb06279328bcc5da99239fa579ddfc8e91e28ffe362a77c755e70293b5e5ca098abb8f49808bd9de7d70c6c33b700e0dad9aaedd9b1625e4c83cb6e7cb17dcce7323731b6779869b2ae6cb4f1e7bb9a015e34200ca7af088c065dac2d7f7cc74262dbae0295b2cd3b8a039994bb5ba4d6113fd5f5d84b0ccce78fbb3b0b497022e681911eeaaf49878333251e1a3936e66b371c64f169e333cc9055995e9fe3346e83c2f072d60e8f5674813b73da971310f55120db44a564d9039fd0a1449098670ebdbf1ec61382f869b17256cd41e589227511417b8fa244540790d83cd3f60de2bce53cb97a85eee0f067d1c937a521ecaa75ceaf631e04c6229648c6f7b85527ca6740dd248dde958ba1a6e8b72c811d9f09ec8cb979c4d0ea1697c286de18adcbf5101561b7455d042816b872c7f0c15985cfa4b379f5c40ce88042d6cfc621d7c98e43178da2bf845954f1282334dde3c550a6991c00a2b9260b7fe9a36b16baab885ad87f71ba70c95e3dd89305b9627973f618ee8f7d01139de2bc21c96d795daa2c437f0fc79b2d19872d2be36bebe0c8241527a514aab08f6d6de2a2c8a2217a0ce5da49749419fd0af40973bc74070b915bffe31d08969d2ae805f43300ebcde6e5a69a270c869d9fec22d717b41da8b28c527e230f97238cfe3cb0e7eac5db2e7e907a7357293f93806449230b6e7af16169038abae79abf8be4939c2e6a2152d6f32ceae6ae35dc8db87630ad23168bf5f07f5c894aa709ffa4e5ad941f47a890d5ff29464f6ce1970409c0d947772bc405c4f7b7db02df617e52c3c96b5a99623e23152e58f9b9e3cd36a11e5102b2ac5badd67f7969c6f0763b4980eb1d5381547f0bd6c1be8eb9a2c9c6e040ca2903b0627b55b826318c42b62f0a2b58d80a8c09e7863eecd86b7da986aab600a6dfbc99728f376e8353a92c0e700665d980f224800e9ebaaf8c5a61de96d0f1a62dcabe895be3b639820d338715eea36f496a421a103399702f1a5d9eddb31262f97f31c0e380d36b8b459c880f1d0ba34162bc2c1c276d90bb3cd7a2b6ed756520fb63696d1ac5af30de85d5e1253a3668d1f71d3e29456a14ab368e827e9c35ffcdccd7d928b1c072cc10a98f258236ff3f814e63958078e12b31a07f4b325378ef728af3bad8a49195ab5699e2cda6937315acacadad2adc1741fd7611262fe380057d0539111de0ccca547bec3181cc906bdd6c82e7e21b1108899f4574aa30fec4237039ce7295b863e80cd28ca6beb0a5b4989a620393f419d20a67d1f202ca6ab1c03f192b8af6ce52edb615fc4da926d0c8ba46d3d547f78e1cd5c7c16cc34eadd57ccd0996a0338750ddff82506bad8ddd124a2a4e70f4d03e8a09acab80d12ccff4155c749870b5129c4c404da3cfd6970ef3fcd33d6a19c6e96939868fb7bc2f53a15a4a87dd43e793cec47af4727bc451df2074771ec0b75f969a90007e4a56f77a7fb9e2fff557ff27173e688e2fc3574bce22d8c16540e174e5b2d9e26c3b05eb31a9f70ab794a93c356b2bb2261fc13b13f106f1b3de3faf3cc135371ec254ad009e1b043b13c946700629e1c3b0ac2fe073f6f438cf3806e201f33fdac163ce1d0df881c6fa4c8fe0b49b58d62279cef27608ceb898d59872473dada9e3ecd622c54bed7644c6c8c47fcc390efd364872f03653a671334e4cd297a629f47c8766c75041c7d67f54a39e5d2aa23dacddb91501112d4a4477d1b1c83d1c5734a45f859fb8569a48b251af39d657a218593b53bdfaac98daada01b56431de474097b4ca17a12cd0fd650b3b484642dccc2d742b00ed66b728032803060e1cf051fb78fb04cf8c6fb36af7ec41389dce58f5706b56535b31cfa5519f6ce8c947bf602929d978c5cc1265c2b4f9e0668a152d0a8cbc9e1fb1e18ceb014171e4a4d0480072c4488b9d89c1097d9a45429c90fb3b3956bf103072f8098177c8fd4e60c91ab1659b78a1cfa680459d0617711fa837096cfcdf04d13582ce59d3d5e3cdc947eebf84829032f5568fdf80ea57849200530e26e8a4efd1cce5f8b6ce1db1a1d5eff9bbff6f0cc168ea2e33ff742617fc2be4d8663001b330d10e361cc81a8b4871b763f2274ff98f6cc04c349e0672a8f1fb5d8678936761327861b5817a832b92f90df78c9b4dda76709c03eaea8491ad7d439b33b8c5f3adf7497b4f7fa3aeee8f39f27d1d7c77850b19c7ed0bbba32d61c8d8bce8bbbe63fbd10a51ff970ba06f2158d158dc5ecf9bef3227ef24396165776c65a8cc65fa837f50f91b1bddf7471fb947a4bfcfcec79bcedfef8e448d2afd0ca7efa50881256fb790933ee16b518bff57668653475a71dde3eb3cdc446d7118b7333c2a4b74faa2944d9becbf237311cb2bdac816b198ce898fc1b3737cc3e0ec7c17f3097a962ec06e6331ce65337f80e37159baaf769478a5b6383a6ba1bbe64b98e2e46075b5a69506c835b01059840545159263e88869a89f1a7689bf8865b15a2cd8e1c1292405a2a0453bb8c097e93f3efdb1b6bee1d8c91b0e17104c3e21b6ccf4404fe456e3b9f8192e74d2bbe471a63fdc6988c3b563e837873033e2dc7e55a43b1dd84623f104d94985cd161a58e559fd0b52c05a1af59485f5e167296c30bc45b194d628540e1fdb1218a5b6d33cc61495c59c37cdb845d8f50824e94d7f52e6372847c7d7941f0427f9eff560528876624ea5a11a7cde59858811a86c93e4795f4a4d7375dea1fa67604a05114e2f7d10dc0c5e985b13b0455daf602c827962e96871294fd0d8e8f05c68951aa19646143e6db848cafc930682ebee0f26ba3b7e9c299be9ff8774f45be54ca3fa947194d45ee55957cc5f11d1bf37b5fe40a93fda60e48295e69feca29398669d039adf40bf182890fdc78764afcfc70f44b91b4a60a3dbd1bd65cbaf216ea7418c699cd111dc777d25c97370a7fb8ad4958591a24996b8cef2151399945da108b838b5b8eedc0be2d1a7dd0427759d5c21b3637fa891683417fa729ca65ff0a975e45838ddbe52eced4bd6850e53c6fdfe43fe2c6487995602786e3c75e491058b6eec40e25de9c1dbb256f58f6851addefae4a1fccafe960e0cdc83fa9b64c2a31e5ab0ffc8b98633e7147b0333d8beb9c1bb4c277325224d69faa2281b1034c8c94eb6c7952ad451870d8692eb9238d26d16c7c2ccd8ddc4ec8dea15c874749f5763bc52cba5b59fe4a798cc2afb879774a6ad1fff0d6c9271052c24d23a84ef3453ea60deb9c413730209a04f3d46e09ead9ff0d5b4510632b25d1a7593b262340c252cf7461eb25a37cd25dba58afc6c474bbd5682604a00c77da58041ed2ea9bfc1cf89709c29be9f663d652b86b27ad1df301043f2453c4b1a9aaa41fe6cca0baf4fa74026a3ad88718809f0ca0b1ff2414d2470eeac8dc5d63be4a01cbab8fe6740d4db71e8aed9ed0f557a0f823ef21976865c7dda3d626f68570135e4d0d43435dc4dd55311af44a29c8311988ae66385ada914dedcd90d14677224f114e4af5c19887a174c28dd93c029027362a4544eea8fefee36b775abc73293c9fbcc87e23a2a7b34541870161e12432be58326f71ba1d10acc888e5843d73a675b8079587a87de6162087b3aafea4e70faa771af0bf4cfc06353b3bd2cb9e900d2c89f1d21c9498d922044adc7582806515fc0d46588374ad780e6fd4bcdad571db2b5672a99fdb480fbb6ff86e7e24badefdf7116d6e9010ab65220080de0e660582ec4188e23b7b3c73640a943b2a1ad913b6702d2566cc89a675bbeadcf87a1ddee7e2a31db0411da4a1fbcc78ae6bc9018fb4c39289867bd7b13ec50bf488207bffba8b6a6559f021314b880c010697ee8f42cb1985b06046d4f305cc23d624d4dbe9d222ab7374e3cd0ffc186c6d28421dab0eeb8f84fae358a0f2babc54710909b0ce9784bd538a8dcfa7171beac7c3545323bf179fa52488e3775555473b17d875397bef83e5f7ac33f6e637009c45a844a7d70e484110c9c3df33fe7a1f19bfabc47cba4c4e4395c7cc3f931f5a0baf9800e70d85e8c1b32a53c1de160b815e8a14f3df4b095ee69d6b2b87e54785ef8fe9f513513b855a2840b5bcbedc3971a644ad37de3e7d3c6b3702a409d59e8223ec905e4ff506d10b7a727adc165456e353f742c4f3e14e818ad1bb818a9c4a37b2d9ceb96cc9fee5f31ebcf05cb753226afa82519464d666b48f5275390b67cbb30c12c48d0078c121ebb67f3c56bc8cd133d741475a86f4b56e6515eafdd281d4c6557baf2090344f42e2202ed0f7933a3fd4d156a57137510e15c61a3d0caeab181e684a0e4feb909435274715a6f740951c59552e963870362ba6ce65e7fb34cbbe284bd88f6d4455652db0c307ebfd407c900a83c4fac21e904042419ccd1b06ec9ebfd2b47d3bf96cb992ddfba53b0ab634de1f7566afbaa120f766a78046d088c1bd2a9044b679f26fcaa6beb96533040b8a64f38b0f80c865754db274d78d3f04d55120fec3188e1c105548afa31d3e63813483bafe08386af33211caab616a23587edf0ea3b5ef5cdc11cdc9843a881f3d3fdb6d981c1b2138998c4af1129c1fa606d2c5d0c97195234135f6cdd97bbcfce9b424a4fb0af8a2b63384ee394b29877a20c4e3fcf8ff37142b9ed60e267c96a115905d482e35a78c70d9841043ba5920f4be7d4d5a2d17e18f4e22b06e89bde2dbc95d3c31c8dcffa81d92e04f733de097969016a9865fd34b1bf6acc34986313a03cdb0b4e35bc766649e981169c4758ec80cd05f6890868e88c3129cd88de96b5fbc179a2fcfc867afd3d050f269fcf1b2d3742fc31ad7007c4b3dbc8ec79cc2ef95f426010da9b5b2d29868e669575f5cdc73a89725598de568dafb7c4cd25ba8ef02e8506e879f5fe78ddafab80da925c05355a780872a235de61574e634e686cb5de1d916e665f2a08b989a2ba451eb7319001df405e07ff8c13b0facf57fbc2f80d72197c4eb8b5e4ac81be6a8cd160d84fabe507cf04d1cc20bf09ca172b3b7baf25a481c225123fe69c1b9144149ba7cdc5913e4de4debb712bb5c08f83ad5f70d8fead9837c7a73fd93a337c502ed07d0f1e6ce5e5b3e46b7568a12108036d791798ab56932891f77541d83336e010098fc547339ee674dfabef60649edd8c993ae567f4cb6072ab985105993814024dd5c89e56e2206c11a3b5ce425a387004198c2be3d3b6ef3762b52f82f20c6c3924bff43cbe2eb8ac21b5278998eaa5b113e00bb6b34bb95ae870b2d7268a6830e2aca43bd8f1533549f140bb08d631ee8a2057f4a98995c18d504eb51defe8715355ae8882dc95042071a9cadacd68973c486f90e2a7b32542a397438f155da005db543501b09c7fc26f8a02e634bf46756d5007a6ba71f0637bf2c26be77395c468cdaaaa5eada0a024c6f312d472a052764b87f37a26befb8d62fad7f2e6941b92f9185a5fd59d2c34808abe3f73423151e465daf93dd23228b5a82f73ad0baa6715b20117c8c31803aaeb1822f0e2be07ed5d900e0bb5036dcca9b003f4e61025daa5210aff48e54a54206b344f5bcf945de12e2712eaf2a132d678e7995dcd86070d40e995c5021553400a9adeeb5c3d0f1591c87ed52688c84725a7afd30d89fd1b4ac156f8d171c6d02fd394bd2a42000171ce9b6a29cfe0fcb7f8f995db1a195504ad7ea6f05f74ba76e9880a12261bf9c3056775f765e0fbc4f5ab6c80b65bbadc49317f331e1b5f8cd34764755bd91d0c74e5420bab93fd06116e5fa793a1640b17bec0947ef1304fcecdc86dff0455157ed44c6bea1eab6f84edb167e82227d679df29c3acde05a862b1f79c3406e5dccc13e2fe5d92866e58f51e781a1ab6f02861e3d065b40cbbdfd4ee4e73fccb29c4a5304480c1d87df7b5903d194b664394d7add4c4cc3a70f21c7da24e3655ead23fa55e0c2f69cbaffbadb50339e80fa477f30dd8109c2471ec7486fe47cbc88fe9ef729e1a3240a09d5a12b0ef4c7a01e6521c467891c1c1056dac737117f5fa8cfbec984b7e9eb9a542a8ba6fdb7914abdaa78d506bf8c55201d1ece0e5b2b70b279133da7d0be05235758941c3dbaca1e01fe1bf39830c593d69be55d9395b178ded677fe644ff22d0d03d1d7e0db4fb50d55d33c8c55123c1e3849894672f794f51e96d40116056bdfac0bcabf6b4744e686d5f1334d8ad8768a550b618c730a82e85713e461bfb18bc0dbe64043ee5db9c707ee6c43b02cae34dfb6c95df9ea1a44249acc027b5d10f81ec2883e7ad802f877f31dfd357cbf4fdb3801794d4ea070ab6b9217e74855d057ef3e797435c859da6b9b013b8d3f49ffea06f8333f897c31b7fbb881db9210014a58b49fed740ac1786d60cd59262d58936db4e699c0debab62e2e7d8811c347fc7e5d3bcd4eb038850defa8959803ac603128e0025afe640d09597162cd72fb5656d020c407086197455856d1214ae4c563d6457cdfa02340c0e0dcc8ed4c25984c047c23fcbbe5c9bdfa4262b27526fbd3c8f47527d136b53b8b5de436950f1c5d071107d6c0692c95b92dcf14fa45aeaed24c6c27b3d6517b2ce58bab3fc803a148245fbdc1107854fec2f007cdada880a126fc50bf2e5b08000729818e3d64d1cd051dd8deca62995c96ab614ff193d0c3468697f539fdfde0581bf0735a24f16eed09a66cdf5bb4452a8b00888d679ae658c90de181ee11a7e998a876110ab458aba9baa0a52b01660051fbdd0d511e8935bc75082d7752b0b6aae76ac97e256a11209da05d44eef4d3a4a421320e606a485c901a1e86bbef25434e2fd4c4ef003c9bedef08b5ac05a4753bc105cb702e2896371a25788dd20b0623b98791afeef53cc20407ba26096851c2d8b466241c078e1e879d5721907160a1bdd9d0c13a352381da35d619ed796daafd931346b5f15e69f49c9764944743bdd6acec2fb8fbd5fb85bfbbd0e088335f7e6f9c722ad782432fcb34d3dd3549f42c8d1b0b396b3db8545c027c663e937960b43bb94c265be69668f284291cf50d691bd2f813efed3732451441a50f221699ba204a8dbdce64b3c096437f1ad37133e04fa39b3961c6bfaa3a17caba21357dd6f11a22f7f2b05ebf44b747881a005d89aa512494712e3a35870a320699d961c1beb9bbe0767a8abb243573a4b2de622b3fc3b328f2b900b2704a73be136d790132aca26b9641d42241b62e7100a70b0c892aeca3f6e3b56d173d7fd7bc8ae525f8509566f9924f1b1e00183b5c4b82e31dc59151cb82c7f506d19a414ef34207c93533d21ff436539f5c140768821e5f5ec7c069d25a28b7ea71baa125f1f3257537e1c3b043c4e4b37baf9c7556bedc767a523487ea97c61d881189d5f966bdcb9bd9a90fae501d50c3b925334cb3e7b1d29f85c51646c59d41c11352ca837a353be1ca43b5db494e5fadab6bf3bde024de7ecf339f6a0e141360af2a6ba7d62da69371d2b8f6120621c1c4fd767487707c7270df0cc462631fc03e720b3ba451a1df0bde96ebfb7f12d0f3728dfc0d8aad7ebe5b05bf465d5caf4d377905121c402e5eb934837e1a393fa5b0a297be02a751282e7788e7129049cf1b53b58fce82b710fbe00f750e8c1cda91c97cf766108567ecd339f22b44b62b11ebb90d6dbd2ea7daf9186e583123c3dd602cabdce5879f79a9ffa03d06e4353bb58a808430e9ca88b51fedb010fe5f3cac22e272c564c5d68376b7ec4229a58462033b7a4cc075c69ab98ee57ef85cb790e4a84cda75802358cf4797109e56cd09ed204360c185b5fbe9223f852eb8e71eb996153850e7e2b4b0013aa8d0d375db9e0d0f90dc707a04503cb72a53a7149cc69cd7a4f00b3f46c21976ffca3de4190677e1cb7306a3fc9e25f3062946334f968de00a5ae5195c5c3872f63c22365bd1c13f6b73eecf58b7bb9e18f144ac32359adb6ceccb53da105be5b10c6b7dd0d1fc37086d205a6b7ac4125b2fadc08434e08183671ac80ae0942ad4bf71e9c4e0294a38763b4c887487d26d7365aefc043e3e09efc36b5d6e988439b8b5aea14b46fdc21ce208929f097d422db1620ab8a34156e72ffd0781477e866eca28f725c0e1617472b86a95f4ec0ce2db44bf3480228cc70315ebdc6ce0c3d7a216acd4c1051e3b01368178ed73d09b39796a8a427c5e9fe65edde6bc52a9762cca2811acb8ee4f4f1af02cfad06876169fa0e223c4291963e44fd4c8b2e9d6d3070dbe3c48294a4c92973d8b0517d1e2eddb6d70366d7afbbc50e5f03fafd8e4902a7aad034d49732690eeffeefc1ae356c1ed0b6050b68d02966a1a23917845e80c4a0aa70180b34e171d1e691cc81633ae2597b42b1032a3cb9cd79e5580dc55d8f2cd6a43145aa0f33f4bae5acfa8e9294659480310178dd68cd757a8ca02fa1e1cc803187f043a90351ffc9cdf40b7171faf83576ba019e07218c63fbb8f8c43e2618b48b9b36a311c955f0ea22cf22c3a426b987b01e6bbbd78b9f01603c4fe4992da61bfbc670fca51b7f29ea6867a8d77fba3daff2800113dbf6f681cf25649931482d02698c83c8370fa40f146846eaa8c5b2fb6597f40cf3b4bf9d14015b020e558f84c2f477d76445bf135d8bbb5f0409c3cbefd87fd07594d1fe67101cf8c58cf9b800a5fb163680a999ee5ff237d72e96fa7269d8986b73557a359574d86ff45f9a3a366ee8b281e369bf187a21d2f4bb32e6c1e3ae431a0727995871eeabc069a8326d12c2befe25fe36567ff08466e9c9df835dd60057b6fcd2292e4d2a243ea33c002b85e0156eefb7f455495c0432e4542f4f961003fd93948338fef314763356a68b1b3f1c1417e3ca722c0b865c4d7cf31c39e6d417d622d443d6285b7f07d33a98ed5c6669d7c7e3a128fb4aa67323883b4ea2b404cbe27478e3fc63cce0aad7e2feb195b1345c9d60f37dc6273cdbc50e79e67ab6dd540395423bc6d8dae633b6f1db349f47c7fc77b57e8bc4f051938e5f96347326df31c006306046edbee999a458181fb066416301a97a491dcad129db22397c61fb93ac065e97314fb4796c6530c891612719981103744148842a4593914e6719974fa66a3a311ac49ad5d6bee328ebd81b604822f367b2096b5186cad48ba1eb129379768f7fbc94f75aeb094a5b68884dd22ab943db69c43bed6b2b136e7207a0c26a0691193fd19141479fae9a1dc530434db67617321c5d24983fd00ddac87341cfde8ee5128e6c427097aac3095f4a77de90e556dbc02fa3c864e006c4e664e304e69fb207cdb1ad0037ad168fe1f76fbe99eb56e41cb62c40e0caa135cbc80bb77a7c078c44cf8253369f61fe25aeb171fb3039510ae395e071d0ba33f833853539f6a58f5ace30dadbf87e298807ba267ca62979b107237d97e4fd1c08dc06453f07c90a233033482589fcc9fafc4bc5fa008890250b47bc3a78fb13a8f899282d6c3ceaa2751b5a16a2e90e03690420226cd7562ee1ceb8c355e45742f663658b92652b13af4b15306e57bec2fc2b31fcb63b793e8ef5d2cc2639e70f0e1eb4563d2728f7c15383ad5cef06acb775b5fb95fa799cbaaa753b8da86c859d87c06e70a2c3cf8b9b2ee03afe5d099dbd343c8d26e9e8bd51c077ff1bb5787a86e09b559221a8ee5866500b6374b84182663d1e396400bbf05aebbb6265da6ec2032e957afe6f47bd9acc31c2d459d0dbbcf7510c5cabbcfcee53f5e1504b136a497ca961527fb790d19f6425d94eb4651927ecab63030180f481573cc0db1922f3cb17f4477c8ad1529f960507bef15005360834e828669fc93f052403255533e8ee8c42ca8ae4b7432a99860fe31aad686d044aed175e9d203694e8a6ed2559dde61f799faef792d0fa7669246a31a3578b2c05089a16d3af946984377b0158ae56167311d098cf3682d2f39d9546e3c9c68e8f9d962411cf6180cc6acf16bbd3e42c18e84ffa9aece7f6efc3240348733da16507143a6caae181b4b917a4c22b7db8fe917df2acf4e6d47d9dc401b4c2ea1cf48e75bd15699a1c212bd8b2241b852c29d0048cad5e42e3a1937d5658fce02ea1769ec122fa4c3d620399870832b39939a41fe3633fcc2fdd47dd4ccdd9c30904e67b94b506313214311519eca556ae0ed1b26d9b10e6c66a5e5d6b878b15b18726b2d0aace744b59f16d902f56e20ebb870624932781a6a3aa1565078303d139470820b6ba63858e8203b7e5653e11343edf5f2698fa56b317c66eaa315284415ba1730916b14274f2de9881081e94324395676a6e95909f7ec8d135c5dd7d28f5f822661a4bb2d4f7e2e6e7903addb76e321c60adbbe9952b24dfbd49a30c53ce6274ee924c7362db6e1336ebb679c851dc817aa25585d3c83739a751e36fb5fbb29da83ceb5cfb597491d0169c06b2e412c303b898d2a3aa65560dfd83e88a4a4026b1b80d2ddef0e2ccbc123d5267e9dcdfe94d693037590a6d57c88e14cc4ef6f374a77bff739ec76a7c02654284f4e9bd3f3a3159df51ebd8ce1b35c2382f4af8002b95465d8a40f05d3267f7118f43a1a7710fe197c1674b2593d139d3c0d43a4f70e4bdfa16c8ad66e90a5a8478ea57916e8feb8fa657b1690267b7ee86a7ffbaaf375869da7c496720a6fb7a66d5005085dd20c5c4f212eebd06221411ce932a29b766fb19c368ee9334a3069b1367344d32b4e6d611c47fef36e36056576f1508c729d6e4c78ecaf51fb047561f10ecedd6b94eb9a846df39a08ef32fd3020519b604be7e545ff3a33fa03914a07ec436155c3983d4b72531c19b4ba19e69bd933189969339be065854c7a84034182ebb12db7eed494e9cd87b09057409249629e3480aad52ac803ebd09e90341e82ee5718df6f05154eb470b2cc915452bca11477934c91c0a210853ad84dd8e1399140abf943c4d395e758c80456e70c2d6a9c3799db619c2df407a4bcad5efa030c20341e86b3c68f2e638cc4024d6b14885dc41f18dab766efedf31b047e42107fa8618290429a01bf4826150ab1618a6910dd372e9d700b088fbf3bcf9b46120f3ad979e119afa1ac68eb08a12bc969810f1e8f1ac27f5c2d44c91dd1697660e90a384734181b54209ce9fae698023f9e7ea908cd0c19596c445b7396647499c13a31db64959eb3a857bc07ec6b1e6f10da44be6d563a25dd30bd13a8cffdb81a17f5d3b7da17a751ec156f75b18bee7d2a4f843f801248a0d2bdd7878079b72147e8c9b03db025559c984a4c63dd60fbefd0c68d7e4d19c603821a3cbaa3ed69e87f8ecfaabb00517382fec7d195fa2a7ca2f9b588975bc6e17be2608d941567bf8e1422bce1fe250de91c44524d8cd5e0b755cc20936f014847242fd6c84aca2c975a30da2616759dfd9f211a1a8720381138df288c5804a0049f0762966b9049422d35f01ab024f860d749f975595a136c18c7e7b89d946ed29f51cca9298253737786b9bc9379b5fff3f2c0fdb1e3aee107bd818c6dbacbfc26da9238be9a9d34cef8fe328576c6da6d1cae403b0027b8eeb5ce8e035eede509904bc530dfc9618fd08fc5f703c6a69d7c3097b0135fbad81dd5e72dc72a63f748abecc593931780a0c56d33f378ee3fb7ee3cd5cbbb648b02aa89b63605715b97af00dfdc31016953b6dd26d2b962374645fd0205fd894b18a47b6960fc6ecb05a82e628eadd0b96b8e9ce2af10702151faaccec27ca0a3eb76ba1cb1643b22f225c8b93fac4c613d86b849ee65a591ed97579f8dd4bf0b49806c944df5120a066bacb8025e26b895eade6b96b897c979b49c2a7fab38d5dd314123b1cb22c8bc911a8d71293a288cceee1a58c7423e8ab6c4d7ddc4f83e67a48197d302fe3c5297bafffc118f313efeb036f7bf2353ecc661eee4d374a981c935a8701c14c263c36d3a11cbd9312d040154c1aa7191603e2a2d73f273f8090678683696a6c27d1b7b79db118d87d640fc8f22743d2a2e75c79001f45e861f48155ab63042f8fe6e24c57736759dae7a49bead51bf752c2ee27b2e0941b87f4aafae509ba215f7dde2dc4356911e39b48185fe326152f4fb53536bbe1c52a0ebd213f83fac77fb32e3dd5a30ad0d31dff8a9243fc9e266f9485db8b669376db4b121c7352ab0e9bd497487d9550f0a4893514437d3141e29b29132b465534d4bcac67629663d218ea922de533a14dcdddcd4267cbb94aed6d7673bfa87344001d3973ebf0402540bd0e58480aa4d7a36a6084e2da9dbaec608dc8a85ec0cce00d0a2fe05f83cd949b185d5d8649ddbdb26d0c6def0ded98712648b367e0b95e9464709c4848cde4b784966459a5a8a1771768eaae6c33ffab1d8eb1815381a5a5cdd018949e4238b680c363e4bae40fc53b887af9db0759ba7b4d63a5bbe6ad8c0c88932442a4a4747238b8ce780a2fc4bfaa88609da88f8a446eadaae058f487a3858d29cf1a49e091b15559845d43ab2c5d42615afdd1414611011cf47efb08e7e6bb8573f030874efa875f14473c6a821e8739062c1d11cd657b3beec5e75573643fadc942fcc9bb854f54e775119d1536dcf8c018deafaa731a2c74996780e88cc3939c35f21a5162d9c2707b9a470d8ce9933a5fa2e4950a592b06288b923f82c744df3b393dcd32750131b2cc1d6012cd276f13f1a0f604d399015e86a88b410d2e253c56c34faea0511f0051767534fff7d55ea3e6b57a2400f209ed19cc8eb4e1069a4d7ca5e0a7f6614ee39778b05f3569126868b162fe22bdb0926719aaaaf30c45918db855aae0a4fb513cceb7921865b34267b881e188abbb82c608685a2392c6e635b14cb464cf95409b679cc918f481374759169849ad8bd236cf94dd33e6212e1545bc0a39cad33dc7bba3a289b5685c57b5356964fd6aa2441d940307cec51c9e7cdfefe1a07ec3688ff5e42fa36ac622a1ba21a5a97f8651aa769227c25c237f5a51897913ae107057dbf340650b36d457cba697633f13ef2b0f1b1553a223cae3d130be8b56284838ded4f0953bef96848cdcdc18825514fac1f19823e389c399f7fa5d66bbc3c9c7fd88d20fe7d8780ec372ece294b456036c073771e0e39443d82a535d7d94580a1c19e7b541a1092335654f2da5d0d4603e9a5237c9fc9209590a6b72ae347e3038a0b63717c81851b5a78c10855050321fd2bf3039732c7d275e3bdd57b83c78437bbd0a81b138f925946e21c9ed69c02cc324bb2bd44e83ebb356f038438d2c6eada9c478f3b73fd47d6d9f88ce1bb307acf60d0c7a3be29a44ab02673bd000cac57cc69cdc89e63806cd80be69434b9bacc89f5516b90cd34efb8949ec2982d333bc8e6779cc24bb6228c48e13d11eff332dabda9761e0aad12404566a2e886cae79a1464900966f03c893232c811e10c0937f12e43d3ef2bffb195d79f8f27a0f6d1225ad8dc4f1aef7e370faa1fab814d64bfeade6a2354f3466cb57271e338fa5b5aae7608829b03f49aeeb0b09c81fb1f64dc3f38e43080a81e316993f524af37b006b77acae241c206bbeec45a70ce03d019f57d29d1264fd9f220c468fbe76260d955bedbb7f78b69504224b5fdbc51ba701ebb5362862c61cca301b85eabd77286abb42760aa30b013db6202bca92159bf67b35e3e733fc93d0d1efad3ea91b9e482d79dac52345d5792b91618fcc477e01ce2695fbb9dcf001602c443b42ec01dd6378fe85637cd88cd3e4976066a05838f4526a1a66f5681a6668871b14204514062d17510693748ec3a195e8c0ecae0018e7be3e6599e528128da514080d0c56e96c85d22350212d6019fb1d2b8ddd8429147598ce5591b8a75997678bcba1d81b2a5582c2f8d5987222b51e399d28f8dc219728b38a9dc2f3b49f310128c1988276134c5e7fd3f1ac2bf84bd039654b9a7b40a456077dbf7eefe081db431b0c505c63991f188dbd31a3a63639be266a3b828f4148085f6f038f3b644b6932fc8dc524bbf7b4a8d4e6d59af800e6ac75886005f894337f84b1c59d2ece208420c34503929985a1c048347f704fb7db277c634c6581b709c4d73987a0a9bd41d7fc0acc2d44038fa089ce9093f8e5c73c72ecf79461cd28532b2766651a4ee63412dd4c648e51ccfc46821fd8ce6e4ad7aec9cec759c03610d4f85e0692176ad890adce1ff11ab2d117f3248f80ca624d7de9bb1f49d34fa7ae7691e8f28fd18eb2f9efc2375b64cc43a86a1535c605c891584a6d09c58afc1514b985b093fce1b128f1768d5cfeb049372780f22ff3f478391cc402a5637f22b4989a089cf04522b10a4aaf31eae09575477c0707fcbe87c8a8725230caf8aaea90630bc1ad2ecc3e27bb63f7cacb78dc6c46a26d95a21478f808628d624e70f8192f65cae29ac8b6424febafb19d9b00a07c6d165ab8f2b592a1411719f2b001c202933417c2e23ba67b96619b7bce601598b5f8579a7ce9edd9455946a763acdc5573cd6d1632c341be6dfe63f9f673f67aabc96b165b7f7f47d5ceb865d9aeb93beb5c3c095a890a33fa8ae7917c81831cc662ff1b9635838f6eeb90fd7659c27f909c61734e21bf2f52df1525af1a799fd976f81d76495b827c4453c2ffa7296305a5057b240e8d2151379e545d4c41e4de0165018caee7203f62bdce7e6bc1305c4a110836e18a655fea7ab33cfffcf2571092a3bdc2942fc6c31a31e333bb6429f4b26c9183882f5a59e63dbaab2180dfae1f4d3a20e0ca8755ed42af0ee98a0cda90337bbee2482ff48f0b3335ab453de2fb49cd7f71e9606fd6d4bf187b76ee81bdacc94c1cdc476aabd3f0b1f665182079ca63c97035ede3d8580108c8e67022eb28e61a5aa082e4b869cc7395e7a5cb1fe0118916834be09e8d2a6351fa2f578d393b8d37809f35d5005a2c4cb24e376aba18608646322a18353af7ddf995d879865e5b07014a9095f0ea11d2a2ffe3037690aecb7f562be5d69d4200e5cd08c3a84de49ba67ed89cd6ee29dd17606b641cc7b78878f920480dc42e434614176c376c2f4fe6141e7707a22d6d76a9ec881713202696d3651303ba7b1fae3fc8fcfd93d60e970b626e304b044dc4c8ab2601c38be97b03229614c029d82559a50fb0a647a811992dba9c984c4b8fd1f4c174444506591d15ed915dc6fca748934162f5abec576d211de2f62b9d55ac1b88ff473cc374c4b1eba3befa66164e749d6bc6fc445e2dcb0ea96ce9a0bfd9a03a7340e7d7fec5ee8a748597001ca7db13751d4309fbe82b32ce2ec152ae78f4e9eb02a7d6f79f67148fc28c9ae60ddf346b05af5f77a9c69cf8f43e77f2470d018d47f1335a6fe04687e1162acdfefe0af7df581d7087bfecf7b5df45e9897b4d188cbd13715b9729b1daecaea5957d12c15310d963f99c05c2d5a839e9ec59d837199eabbedff7562e40c8e480ec4c3244ff4f950055fc2e7663c88fd7d45f86b9a015b4f3147b56fd75bdbaa43474fa14c23fa46a5b9e7f2182183c4c50a9c8618a21cf03261098559234bb30e67d618db62fecfcc1b3ae73042cd2e01a092c9a9103eab96f9f031fd9af1fd9e60f73a395c8da9575a811fdb5dcba775e62ae23c23ff6dd072e7597d05f33f9ca80d798b7b8b982882f1edfca913ec6a2ca9ce5bf4dbe77db30e1a8198599398133183831923c8d818da5c7247d57222430bb549947a4831c1ed0873ca93893d38f8957dd521bd129d85c97b50aa9fe3ff98c7f416fce3405543fc7c8e08e660cfecedeb93f02a805339e5b841737bd8b5c677099e37ae8b98c7561e6c2a46d3a3bac3fa38e9bc02d06bd9cf64a978b72f881f6403cb0bca995940d823c4295d39564ef717d157d9a67c29125e1ad25e7eee62a0888e0291f2332eb24ffc10cd01dd26498b81c8a9c927aa8c2d4d0b9d7d6b046db7537cb5131687d4942bf27ca8e5553805fd8dacd5b3fdd48313586acf4de6909dd56c6ea4fb027fc62f408ea3bc7f33bd36fccfa2b2290e834f243e47a8fe579f9c7693ef908580f79c1b73073060ac1b57b6fdfdf2525f9b242490598f831386df7734086f839bb00cb35f4d9c78e9fb214d8315f2741ee0a868ae28bc32a9ef779049625f10bb1f60b0228ebe2a9cd6ce6051373ca63f8de31fb0feee5bcee2f77c29b8ea735331774a8e6b961c5b874593a8d144e2ae6e6ac6055506861f94deb1cde2358f6a4d57600b8be3dfaea41fc86287ce36c5c9f5b64c3d0173e3b05beff2858d526c60d1c4c5202f1d468555ba52136877327203b63dae5e7596bf4d216f1e6f59692b7ea186cab839b9c8aa9eb7a1a23d4fc592642b018944b33bd1483cf8bcc2dcdb54729a8b1b63a6ee880dc749ab445925a6e06ffea4401b231e4a017f71972e2b0f4362c3c1bb7816ea134c27f30c2a67b4cb97cc591f8f19dc90ba7a1dc891160dba20eb74c641071f39477bc7cd6ee879d6078899ae4a8c1962e019e872afe7b8d191a2d7d90bbf6f2d501e1d057e0cc276dc8dde123cd17863354e606fad7a657a680525a7db81a7df739c196a2f0240b814598f3119e56f76c6f4bfb2d528a32437726f149e3bfcef5d693b65bea671e09e2a50fa07a041cc56f293cb7cd2e5451fd9260c79a4ded3a09d28727a7936375010d40eaa880b8d600544f4024bcf0f809c2cd878ddec2a39efec396f84f55d14b681b7630349ad6d16053c45c8638ccb3b3d17caa146ec745776efe68e266994c3c8abcefd425215660c1367a48f0431d39e488ae1e54c0608c7cf78f006973d377217765c0fb15ed45036e8a930b3bf68269531818ecaee98cee2b93da0a8045282990ed74b2b450ed096a33ed6a370d34988f2f2487ef3c344a9f80ea1c3a29289fdaed027b53223733fa9848a2e1631211737b1213c7a3877fd2e93736b23ade6326c45464aa1c708a86fa3db4165069127bb736e319d24d9b9ad4abab34e3700c82e82c90d244b5afc66ccd855e6ab8d81e89f2191755d210e1988e170eedf5c1d7bd9ce812e2f6662cb904a1870f38067a650a483cd0f2ff6e254dacd5a53d78554ef6d89df40c5ec6c99f4fcc59d6ac04f79ed82acbc45ab66bd3bcfc0877d7d6c28d74a70f9694051f8f4f40c0d4b9e0f3ed126b18355826687c765c53ee900e0e055f1917e95bb23c55fa493eaaa88caef9af640e4e579c993a8859b6cf8ff42295eeae45c5f9c1680885a0260011763623323bdc211ddad8ac256e3e01fc49d1840c328b0ec8e6907c53cc0661c7e604770104f23f19028d79feb4b8090454b3987d12a7fac76b4cb099440655bf3c408b532e05cd2347b82c043f6dd436db255e17b014e7b9ebd0c30f77ce99e07546ff94f163a9b4454770c2fa004f363faa8e800df6553537710212c650345208eb1992eec68b38076b28589e8a962357e1eedf1e05eb2b51170c04272cf30640e506cba57ebb258a90edc57e37dde4deb2b6e2d3c729f76dcd7706210ced4734433a9617b7ad59ebb2e580804efe20be82693e9ecc7c0872e92e20d2da52a89d00e7132afb20780760c099f275060ca76b8d5975d01a2eba53f660e2c055f191743ccde0c5bb666747b03d510df6e3e33c135457370248d7cc01c78152ab44f840e730472814be9c5e8d7916243c52060fe15e681f6109feb17bcbda3b9f2c3d2acb5c433f0f4d1963cafccdfe443c958ec53e052bf8fc549b9fe5a9ee7888ed33be5101e3cc4bb0fb6980e3bfbffd2db8d5b045802aabe795ab5dc3b9d72714f06d522ce244c3d4953316b4e2e520b635c72ba4ca38fa87bd39da0a872543b9c707efe9eb77f00921e4fcc2e17684416cfb845e8936867816dc8e589ba0f01e2795beaa5b7dbe39cbc3a6a1bed0a6207da77cac1c641b8f95835e7c40879b0d0d69ffb954408defa704a58c4ba4c23a29e39ce6fc167b69e6d808e76af4aa7febd85b1f1f8354fc4030c5dae1146c0ae3210da806c53ecc573bf7df0e8467c179a0d1dbed49514455496070f92bf14bc8ee3f1ea2ec6820ea9d72b6c6394340fa9c0a53a5350547ef760806b182cda0c803445e08f5764dae4e14d051e04f72642d8b368973b739f013f34f0d204be4129970bf18393f746eeb78cc729fa58e9ea6eb3673185b493fc75d7e75fd1ac215097d05189d1b52bdb88c9dfcca7b66fb614eb78f01524337cd973f5659fa6799bc945e41b77fe5e5404292d1049b0aeb521bfecfae2b68c8065493f9ae0b087bfdb407855b01d4938393d0c1b75be36c6fd2c8021e458c2f29faf6f304507b0ef5d8b41976d99caf8261c201813c91c943981f212a3e880003c5629c91c6b55790c7b7720e7864b152d104dd4047c4b4f4a98468886c72dacd6f297eaf045cfd036a498fa57fcdc8c8aa4858543b8cd41fbf999aeef334e1401b50287d65e422986e4264b4b4850d86cd0f80044f68d4879c7a46aed12ec71ee55dd43c52cc38b054bafea8cb2d16ef1177ad66cb8b2a1b957aa94d4435452815f5af8e4842028da68bce24fcc2ac341a6411f54a4df108fb0e75d23148878a82ff93aea2e826a4631b93e5de349518fdb16576e2e380696018d2f37fc8f774853b5a916976fd78f80f9172ad83ec7b8d2d79cdfae8208c566488cc6b95a402cdb941755360634b9a897b9c8800c959666e8b2741d898973cf29553e0e911e8f833f2cfb080c12137779039119194ea7468fde88717d210ab3b889d8c14126e8ebd4d46063eeeb3c692ba7f9a74d6e32ae4b0601eb3f1b0d7ca06fdc35962449f94c6bd325cd08010dc38f49c57a0105ebc74a9ccef17619f97e67014a32026b30fdeeccd126334a0c82dc8c7cdbd0158888c3e48764b8af5dd4b01c197ba03c1ffd803bae9943ee1b8694d237da402a285085cc248760ee962a7d4a07e2aa1b2db112fc5172cf490f76e74abe5727e4a346d881b4885a7bb0d0b3a063b9765ffdde92060639b5b139c1514ed99b44ba86fd3268bb08a24a79ffae099c6d06d7056d2be52f5ff1b0f0f38655b83f7b729046b3d82238ef37bfdaa0f23dc2867fb6966e5f83a2428bf6d188fb0069c9621711befa64421b7d2d38544e003797d7202a94951ebcace60c8c3ca7b1f81b41626dd371405a890a8cb2de1ef33e638b9321f43afd33516590023162e548235b7d058eb691a530137d3db3141b542f82cf5f56242f60e703abda46da76f681a22b45cdc49ba906d7e4dd0f55c20903e962e7cf2695eefc81bf2416168a22d0eef228121637782742356a9306251282bfacce830476645ddfca4083c89b4819c2ff3a152ee8b5c7aed9b24dceb34c9053190240ac1b15b79e6b32de9d99f3a3451b6c578e729c8ae2564b75d067bb63019e74f4dfccfcb247c301756685efef2dc758a5df03a578f2c77d56f5f998962948a11d2361165428fb277aee897f37d1b667f84f1d4693ef1c75b1091d6bd44694a70817e10127add676bec3c8906d6d7a227ff3c8f75587a3b7fd2ef70bb9e96904206e6c5a390cb8e1da721ff460c9f2d3c347828e66049e722e2aba26644cfc73af7f48ce9459f3b70ca76e746c29384cf7096f92e40c6de81fcf6f8815ffdbe745f23554cdd2632e18d0a21a3e522a924048043a4f2f9d3e5f16f1c43b50bf2fde183b2fb9bb5e2049d96f31c52c88dfbf83189d077e9d15c243ad2e1ec6e646fcb528b1fe80341581c7f41ea99e2d45bf9ac91198bd2e88825c09d6fffb836735372ac91d7b52124b465b6a1c71574a5569b5d32d144f43c7f7ee2a3a0b37156af819012b83401f873f5288049d7e1025b40a7073c6d92614b4e6d7950e76c6f2abfe1c1f11402190b04785ee84c8fc3d67e2bd2c8f185434c2a3fdf231d240ff2be17fc0847d494442c508dcc846548841d9e980e01045c425ab6dfe7471d3e421571e2a3a1788b46f8151b8b96002d72ff731ee61bf92af781e3b76e495929931d16fb2e680f7f78b2967f8891cfe8598abf9c3d278d00fe21bc802992901b4baa1a5be4d20ed653d11391691c8d3eadeb20c63f1bc5255ec5322f32baf8489b154c42d42434147665809bb5f5f3d1e99d92dc8d9d5fa3a74bf00a35bd7bbe8d8cd7e92283355c421295bd4b39c05eb20f9fb5bf15d21b8490addccef39878b3352a5fca08eca9e800082e6b32766af09161a992591153206ce0230ea41479a3e78bdbb8187daacc9d8cfe71e55f93be0dc4ca0e251aaab096f22d9abeafca032e4eff0daecc16ea5b54ba8d456a52622be4a0ef1b181d9ce89508d683848917f520b9aee6bd1a8f982ddd47589cbd65b676713453f5279d4a966e62db7400891aa9e61dced8e9e8fc9302494a4e5c5e940d35d638d6fe9b51def6352b53e3c0b82c5f1590e46f9ac651db95512ead9b2334acf6f91ea00381d74756fa75a66b26c4b3f8858d6602b1e23769434a174e70435c661821cfa5d7d99567c336e60d6d0ee386e3f48ad667f7189f860109cf98700ba8c46dc000736539bc843a57ced67305648dd5a031cb0fe5d011862aa961e3b49ae55356cbe5ec4e3a15f83769b6491c0fd5428e309718bf8a4f1350f7d8d36ad6c6052ca1f059469bb1f2244cfab6a4adc35ea0d3df2803b76b0eda4081a06ae3aa3b61144769cb03e2606088e91e39ca4cf9c836d33aff6ad9db6c22bddce0007e7813571b4fb56687acb729ca8614739617cd21a1ed70b22476072e2c508e345d88c455f3a381120ebc776f94545c5725e9a3aeb282b7a7bbf1d0a3a7aae825473acf6c75242c5b3c1f8bfb087744bfbf1f13616c13e6fe68c248b44f65ba76cbf99b623419e0c289ab475dd8db013a270e1086f3f686c7f5346dba0086f9902bf942dbbe73cc9020400fc3e627b5ee17fb416d330f72f9a6b92196654bd8a2bbabc87ad6eff3d037993b4ae36849ed46ea07070183fee8fae480bd3ff7a2050c5596fe5e40b57d302e7d358aac6d09c77132d5227e07f29a062f4c7d60be8ee009cd5a6964e442f8275db377b0edee143f11dc6c096b1dde5bca5787e4f40a63a8f892a36ed52c0bfd2a5b345d51e0550c60e9afce869d9e21826d69b4fa6d96f831b34378c4ce283b46d0eb64413d1e4c514edc659d1adb09bb1f6cd693315d03d37ddb576c30964b35fe316de0cf47e3ac2bc6629fe2337835fa597ba3c7a05caa83e0b5e590a18cebc455130ab4ac0167d1b18421b7690a9cf60a2afd7921d19c2fefaba60e3ed00b50b6ff19bd03d520d6638ecd13fcdab241203abd6e674fca942d6345949eb1cd10a546e72cc53077995807de80cb2e92807414b56175de6a82883d154f78fd213b259a22c78cdae061083ddd85c11f58c8980fcc4c0c6e70abb427c0831a5b697b036f92d2e57960a8b51a2d4d01bb509a4e8e76b18288cc10273bc6eb0bcf12480e88a0965f65ea5969a33835ff5da26b4f4054acc582cdfae98dea7017c62db76f738a3daeccc575a0c1052ce73728b27ad130b0a0dad9304eed657608e376a46f954cee8138ef804fa713261d073c00d5b37d5f3414e80553e106f7edccd437b5927b7ab8c7448b795a328ceac12f1149d60b78dc362cfd471d00136ab4e90b6ad4bd73398ad3260eb6b5c2fdf741749f45ec31130922c80c6b5b022edaec16181ccd8e36eb1f395bdc4fcfaf30d7ca464453f95de66b495dde08cab436d165d4cccc6cba63960d515e867d850ea01d1046631efd7a9497ae03b1b04ffd15a717a54e83117502bfd20b349e4a36395207d5ddb214b447ba92eb0987e069a124d44e8d82223ea5015ebc714cad1941301a5d163cef7b58339e5006b278f5f09a99fe293a1349af77a75c70428565421e980512e761ce6e671041cc112cf8784c319fa042df9555a0b2d1eacfa7d5d6efe539f1fc3b8c704be4996aed1550a80418114cf6d5ccddfc193c0db40106e85c79d2c5e997dcd50889ba415fa979919fdf3b8612f3cc3ab642811ee925db0af9edeeb7e72f57b1c4634849875d1128a21086a951c8b5487f91467e06e1f8397314cb39de9e1cdb5b69dbb2ae64084420db1f1318fd3f46b4bdf99625bc3197adfbd27db6845295f9509a6ce769a3b66fea35c588d3fc47490af009c383dd4352cbb7389de2b3026a60d710f88fbb342f417b5df1b091d6d3954a78191ae1f1a62f621dbf82f876bf0113a6789ded3ad70e16ed744ac12cc180de38caccf1ca06052f224af4c4ac0881682724a5528cb0e43e8cd008144692f270aa4aedc9f376f1e3f97b4c0706b6fc6672a59d94a57da0ecd9b402891c0d95416aee5f24e8da7bf7980575a4b275a3942f935daba286591989aaa6450ba9b208b95eea00291fd4507647479675f89a98de55af0e8aadac41bb2462ece664f60c7a2d1de38d02884b604123e888a8fac94bb8159e07aa559c034bda1c3aaec54b62c5e54ebbb93442f38b4c89446980e89ae73b7055a87c96920fae34f572bc7b7e4a9698d5d77c7f3179f2416b5cee9a800fac46fcd819934514c0649ec1cdc5ad5bce91c8b8372ff26933ab24edd106efdc5d0f42a36782961cb1a034ad3ff1053fcd8ccefcd5e69570426693d778d0cea8d5833d54a9907ba3bf936967e8a43d1239e81157b784235461492852f460b49667c48379ffb83d68f3b57781cd5efe6149100f31353c57dc308c52b8d006a407cb9e24bde8b1a031e602058f3c93b9c540be2712cbcd83d090a3d4040030f690927dba7b6621a100463a2bf4629ad0ba9e8965b090fc272bae9442ed531b2673a11d239421f6e488b8f401e8b41031d84f5abd4ad780b4bbbf10c5c1dc284712e32142afa4e0d9db10da19eda8535e5a68284f55062723c95c48ade6d8d34e156f7dc3d063c6dd6a3770145a73c7707fdb86fa6816e03f182bb20138d98978f23e4e33052167e9222a80adb9d2a8dd2ce01bfc58d6e84f7ee815c4949c3cdcf751e214ac69ccc124a27c89e624a65a69131747c70bab98a81bbfd25c0e71a0704bf514a0e8c9a4cc0cec79f656644a55a49568f836027873b83699c97ae7994bcdd5aa4f3779d2d8c5e360abc94585b947b5bedec2b44ca9c25a315a0070dab1b863ab5bbb09c6d9104a31e941f39dc0cf57eaebf1fd913256f971fa1e05d8cefb53a63a3a433dfaca93d1d77dd886fb9d14a323d69e6bc58a1f78c08deee246d6f4634839d898c9a85010743e89de55b6de686620241aead4deae9c81710fdfe1733d76cb17b8b9486624f6df37bdfd1c39eed0c2baebda7884a31921c162dc1bdc6a4805ed6ff9ca94153f6f7239dbdf4e446b64fb473e77fd8171df822ec127a9a41dc711fb58fa84dae01f0132a3bbc1a4bd0f2dec60ab2670b30ee1c33621a8785aaefb79c39c40ce39a4dbb35e90d2b631f84680f9fe8f98f43df7ecaa6ed2d928f7dc5957504f4a21d01311420605c5220ffee3976d94fd06cb830f61c613412f90f71db2783635f9eb9d6be80b6d7c2d7d4d1be493f0d6c961067aedf9835fe3621c11235d7d0e73a656fc4b242682a1e52b6d6279fbfa922e2006b879e7fff7ee1df628b377d33d2a88da674b0a56f715211b35c8a4383322a092cafeb72e8d42084c437147f5560c37e857963806d4ba2344d342c5f6764e7e1b2d645185487fd816192fbfd500b86f2a88fc0f2ca3f37f2418805d73bbaaf76c5e00acd9e8d52bd60d06017724619a3592e4982af90bd67a8e7ca6ead65daa65b00caac321b3e3d812fc472015c57867097a0b4cf331b18823dddb43a9a75dd4569a2781058d7006fb7348d20498a835edd067c5256210f3b0639294cb5918c5b4e4d33c2094b4a6b67587dfdefd077518dfbdc10c9d6209ee5b2ab1ee462bd39000a05470a6cae757e6f5b9bc968dbd12bcf34213ac0b044cd50da74e3d49f26f321cea7678df7436124c5d7d92b319e6969c986eec730d5183f37a5e20b90e709d7243aad101ab3797d86a6905de7387726b2d6c26b9222c8b585fe5cc1f9eb426082a7d1eb294d4dffcb89b87beff6c1dd2bb513e96fce21e2d76160980b56f02a20131da6b2be9e7b86d4418b6988043babe6248a360c8c0918166ce64531e5282ca948c40b4a6f9034741b70092ce4e8875ac1cf38bea96bb25bcd03cff845351ddaa8ab9ef5b2dbf0e6bf17f78e8f18ed8497895685dc16b17b28f619cf612907f42aa7cb401bbb25c67be89c6baab327f33faaf1427b96634ce70505989c4499cb1d357a47c3e57cda49e496cff4c5a64e4dab0469d84917c7e013f63dfbc0148728fd92484990e712292b01b3b1928d3ce7cc31c1b5f7aadac81e5d736db61a825f57c85d84f0f6ba0ec74fb8f117821137cc6dc0f71056a67af767d2f733ad513d82c56548b298f43daf3d8627272afb0c0a01918c9dd596e78099d86c355670a9edb31f05c321f462b88403d64127668679c95d0df52a23e7edfe2ae29ed43be68a762570de810882f5a582a0ea398473c9129cbee51b5768f929fe3e94c25eed1a6d3704e5c9a41a1ca70c760cb89be778f5aa687699150ffb08ded1286087a5df7a2fc52c5c7526e41417499c22b0548557345f5fe6439208f5fb212ea137612c81ed998359ff82951f9afe20323263981de93866449901d93a256fa559d626ee324173a9e828f99ff090e3092df74bc69ee83c778ab65aef192bd18718e7d435d6c418c11265e172b327ffa732dbcb6466ff51ca0a646027b9d0458427346e019cc99136cd1f5ea1a1b2cc05890dff4296f63958bf2ca3b1134181cad3d9174c9d80e7686a799d9dc97878b1bf99070f5bff4a65bdb293cde9bb9566dc32b143b9fed4c0080cc10130df157bb985f931428ddee93d498431734ec3078fbe79792b44a6887682ec439072a370d2487e8e42e9be6445b417cbd11648982412d98359fd037f488a39ba3475ae4268dd42927115dd97dd985ea82c11687cc5296527bb7e0d808174621de4ff9e3362818597e4c4a3c754e59bfcc48a555b7885adb4ac1d885c04a52a36d54c989d8a30a2cacb372e27aa6d1b9541c1f7ac5d892737291b38d0c17ff7b80703d7cedbe80b4d6af95e5433e031ccd3f28bc2cfe0fbfbc666604d6c9fd409dc37e58e3b83ae808fb16820162e7dd98289b575748038a7bcc97b56eb8564e7de8078ae5c11940b200d695d2b98e3a27152a3bf32b9e26729bb5e246564146cd75105b14fc304988412b30fbe7bcd68c06a761e2dbfdc57493a3b1fa8365d541262de2e99ec8be7a6b9dbeffcec038743d2d954614ba4d3f57c9ade67b577e9a322dbc043669a78f59a65b69595a5ab7afc0147245416550201c3514bdc07a568eddfcfef485573c348d315b3b7e9dcb432f2279d1046e5a389530fa00f2e7abc9012f8936425988734759ff13e7c781f2ef7dc5b56b738ef5a62a69519ebf4f5194667415101362c5c169acdd89aa662c5e2cfa9bc6404d947faf69021b83425337056a7025f03a0ed91bced504447da43a59c5ee4f2fcfcbd5e217c6aebc2d8efa7e8febe7878530b715d8cf8d4b549f086ddbcafa65f85dba58269b78c2d401864a0bc86c0a87d46ff5da6ef4dbd0d8a53e09e4a4a205786d1f59a5ec870dd793202a1fa1d91fddb22ea00ebbf6b93c040f798fd92dead1a65fe8ba1910b95762d6a3d8d91963af168f6c31fe0c760a49c02ab60ad060f977dac1c023eb4f7bd2e2b70f219ad559b741b840ce211ef43323c443a7b8ccb82773766cbab16655b7b2efea5b2cc2d9a34443c2d4cca8558f4042b7f1119fcbd01665df25c4bf510ad33a5f1ec59714653d4bbcf2d88cccadf30709e220b2a59de4d658c43149ac38b8b2591b72cd1e21c9dd68e92113f14c2ab6970eeb06cfbce918296165c2dce0deee7dc4d50e79af59f15267e0633af7303b9947617ba4215dfde9b78e6c59363237baf7323b39e4a2ce417ae2ebf41d3a1985fd39ef91b6be99176c34ffbea23dd421cf597381a3b55a4c244f8433f31989bd8fc169405be9e508297e202da46dfe94fd278d5449c5517680f551aa22a7da7ef2282ec0ac14040db424787bc6695ceb600b5a97ea4ebea42544e7538caebaba19c5238aec6d36786ee3f7865167939671eb4ad6a816eb0d39521df2b1ed79988769af6d5ab932119b89fa18abfd691497041da7d1daffaddaac9480b3773f6f43b87e45c1eb0dac318d87acaf65a5d1e8935388b991e047db0d71f4a86ffd3ac926a05f80a33341ab8955d66222ad3600e32964d07f953a81be189dcf19aae67d5ce2f599c9096957e74f7eb4471527e8ef541535ec108a833dd5a20dcd467d5f3c2543df12973e08328e6c1e0f16f1a518d9938b77c722196852384a04a1129130bed175508167615591fdba346fbc3280b86371f7dc80de32ed6b1e49a744e412499bbf442e39e72ba0008bc586bb8020a120ae50474879f98846b82e0aad5962264887003e16e4a2272ab0f921b290a57f1ec946da9d199c5dd3f74882e9c6062f968074dd986a86a61674548d4d89d1d29975c0d8962b5126c28c134f65e995122f32f4d56e4446dd749bd0a952a7032f90864524ca9e2d0c137299226539446350c9348f428bdff970ff41fd1194f4093ff86107c4c95ea89730f144f8a421ea5d2552dcb8d1a026769b7949acb541924f1e89ee698b92bba3f369c682d59ea8cd0e0a2b5ed7176b88de1b9981bd89084bcbeea21e72835af868ac8d495bbd153926ab94f179c1b4760babcf3bf34f26def9d225e41e6258a0da4a64beb6f1632b7682ef45462cf58207a040c104a94de422e575f9c0dbf1f658f0c462aeb0bfa9ada5905e4b402b501fa15f05227b7a57bbf3087e06d3d5d26511e0246b7daf701c0d6c6537376dbef5f13fbff26bdffb85b44aa508258e744da062eea9de4af6937e25f335501b6599aac66a0e015d274d46ac28a06819a59e63809b3bce21c3650a718bc4d37d5a87a7b90dc67abf6228418372a2c67c2ba77aca2ae9f3e6f593cdeea9668ffb2493e585547ff1401a4badf73bd1b209a61c3f5f064df56c64128eb25add5d9dff63ffe268b45b656069f10d7c17c450ea2fe05d8fce5ff895255fc021e5c408664add9ef2fa039fb54d66be1b57ec0e7970864a17a2d26fb765a2efea5c6febd464c176da9072f067b1d158c15f9c7b13e0c97a374327cdc47b8a96292fc47eee9a57d0388461d2b73e56b6bbf844125638a886db859e554ae9ec8074bb5461c29e762b63bfd0c22739be0eff73fc995904d6b79434e3afbcc28be0f124c9513c4df8a140aed343bc2c022f6b56bed8085e8ac02072584871c2f22c77823850474ca7a647726159971030ed1f2e4606cb45b78b00f2a914fa51c237919c1e77931167fa1b4fcf075a9c0023bdae0e076fa69fc9ade711865b2d15dc64d7ca8d6d0f95ecdbfc31a7c5a7463cc85dd4d3dab84dca0592c339ab27934e2b311a3dd06123e15bf21d58a177dda0c94f740950e675b2e180f04679e07847cb7b3a4bc03815c69b524413e66d75652b414d2d313979ff89193583e53976c0f903b3114cdac42aa3da0b1435ab4bc92cae1fc73aa658b0d03a7d88f93fccf9d67495b706ca8a2dad7088e592986a140fac85f64758777f0b04f21918682119de5b73d79e98a76bafbc8bdd5e74dff0a9edee559b9a5a58b79327c0bdccedede8d43512ff88966e120d0b930593dbea03a73058afd390d49b363231f9255f4fe839715b91cf7c10acb12a9008a93d15152c9973b090132832a02d326600e3169b360c2548e5371ab6627985914a48478a85810ff704904799e830f3daff9cb03406b78e702052bc60cd97714cd440d35470808db00535a487bd67744f32c13abe3585ae153c6e5e656903f096765312628da1e0a24828ac9ee59cef69cfc129d6f47c3cf85ab9cf1d6e720dd9d900ff91cccd331c3d928ece07aac86dbd27a6b7dfc42df22fa47e46a0dc085318ddb514d241738bc0d79940f660025e016b301a417c4f31a648d170b78cc8ab84f8e5d7e8784cb87cd8eaa289059033f496dbd697bf67dbae58916a8c7b305c2e6f31704cdaee3c33bee718bd544ceb31ff5def17086a3affff97fc6c98134e8afdc313d5d1a0f94d5f599f9c78141967c7cfc2ebb709ccbc13e08c44972f6f18ff21099ebb060e0fb48279ab687efdb43356387df970e5a5bc189a5c9ae68a8764e3b124b9a6b42f53d3dbfd69d5d86bba4fc941ec76dcc70f09bc2252139a0ca304f404332b68697b4140ae25325bab52ef607b130eb10e59be2c0d5dce92a802c5280f35575f212fe49ccf5a88e76d2cd65935c2fd703ae509a4c3b37f4e2e849fcc47def59b78e08875710381126ab2d990680f760dae6c62ffe12055a0e44e78c1cb5fc40697ce2477a0a440b0a7557ab27051b1e44aa7fc9c46d123aa0613ed129cd917f5b4f61613127e50893df5a39ea3c08530d22c51cb39bc506e4cdbd6c126b3b090bdabd6a4bc051dd0ed911ce0cbc1d5e0910efdd4588fad8d53dc19aee9f90787d02119153b38bd32dd3bc32b1d2b7dbea0a136fb578e62dbc5ce022c361b8dc00c612fd70c5131e5673e70d492616d4a7397da9ed79baf45ec79b96023dbca0603f897c00614dd836d20feff3feb43da5b59e391eea2f2f05429d06bcb8199099cbf87ebd5962043f9a90a7f446467ad031dbf6aeb40865fcb2ea21212c4caef85dfe2ca959a1e207be2546b9c9ac8aa0d7e00408624ac9722c2210714e64b256ee42ea0c2116642f8ca8f9822f6e3e4306350ee6030760dd41c52c421b92f7570f5af32b9c8aedf19ad3f14bd1d7d3e9c1728df0c88097de2d6c32daf0e7ef164f8b7d5494f5ab0f4d8395e4a5163f484cf6c89ce97450bafc8cc90a2909d7f561d6d2f437af4dda01099dd17d26b21ef4fef808276ad0865c8f5591b741243722b5b23d5d473a74424d02e8026f38e2316fffd568294a8d0383f9808a8e02fb968df7234ea18de7895b70924a10b210b42cd9287190d76f629ea94f01d41a3b376d8f887d348f2be30aded9320ebd9ebf8dec2d71acdc6af0c8259b3d9e487e3093dc4f79db058396cd2fece73933ea1588dfaa034640605841a4988496db2e084f11a9d8c90ad98bf2aef327cf0736ddf53c201faefe199a070a5f89c0e18704197ae88ae2480a904a5f685e721a5fde2565ffa2f23983d1c6b49d1ce533f7fab36f9d6e37f1c645a34bd2023ae48007356b5b64adf7b5bad5ac812fb38e10e628fb0ca65a705eba6445eccb17cc64f68e4b4564e8bded608dbee9dc9c4c9b555378a1d11674a0b3b1bc1a7d4ccc10ddf004259547ef2dad2e3ba029d2a6ec193bddb1377b6cf7f362a6a7ab360187c735cf06ce301e7506197de4c9ce90305df8a6089b54312bc461e9ebd3a0451a31e4ee3c2910ab879de4bdb43e3c59e529a535dc8577de1615d4ee86e225f197ce669dc08f43093cfde113108341faa4e1db3146069ec7ca6d539a6bed5f8333aef6afe81ff562a4cdb1bf7f48dae148a768c2b40f1513a955c633b55af86ef673ac5ba038e7a1304b60eb2f792aa6cc98b4305e9ed921641f74953de86134376301b459f05b16582a5ea028b5ccac5aa89c7a3b7dcc60c551948061fd7cc2816410a7faacf57d5acf59763ed2207365e63ac3291dd604bcf13fe697380959fe8fc80068cf46b2b385ea76b5ea25174c4e981bae8df761552be69945b6c20632219268fe8e6aa40f4272e22b13a22f6191d19d79601c7a1628fe7d79d3473a650485a058c90e7b8a8aefb7d59311eb74de4eeeb47783cb168619ec8087588f78fb2e9bf0456bdf0652a521b61dd6f47ee023265be04c7c67c469e4b31cba3efa4bddc6dc9c3a416872052a82cd93894a348b2a0f117efb94d7524757a363fd0c7dfb9ce2673317de702f527e3ce747264193d337638d0a6e9eb92c0b83d44d5f78bccefb65b2630b238c969f86a2923523f0c8cfdc527207763ed1089a13eecd46cf5554fe0d21497a91b3e6662dd60f8b888e880d97e7a61d05e3dd927bc2a5929b9065d761acb86c00546062278ff6414ec0fb9b1692c16dde5d1a0bbf96ae40f62928d0a3278bc530cedbc187342e4c1e9af578653763a023423e28d77100e43b222d4d5367d5afded8ccd60f93df0e3cba08eff08e64f2c28863c39c3bc0641cab89d4c693bf4428329f2f82bd487ec2aa710999863890b2e72e2fabf2d5f4d752129b2cfc86da1dbd161260bba23ea7d155fbfea76e2d9829254034eee4a83c701ffb659cdef0f606c685b6b796299ee7c2b49962d3def09316c9fe4a17b9b7d90fc3d462f747e73c9e92906c7ca478f35de2249c47a5ae019c9ae47eb6b82ef2ec620804bb191d15529b9692bfd9271a46cd9124e026565353fd94b508e423eb53de57e39d6982b852217154491d9369f4887eea59ed49d8860bc5bd59bd2b2ec5d3bef7d0170db29dac1cc9a73ea979155dcfcda29da34377a67d1b0b6294562679761c8da0e8774184961c00c77e8da9cd2ff93ed65fe69c13c0cbbdf38a5fa64c27cb156539f21276e1b88cc293788968de3879107e761c74a4a498a5bccb06a255a1d4fafdce9c084690cb7eb63597c7fa73121121babf94d63ca648e4fba5c22037f0d27445dccd1630fdada3f67e2391080755656e9d1dff38d059b370212b6c3b4864c4f13c4c1ceb227e5ef601a45ba66df519910f62a43090e20accc06d9f27e0e13b73a4730cb29ff37d51837b42f13cdb19e2c32b916ecc7790a34b157c48a59eafb0acc1e617616eee927702fc8565654ad9b50c769deefe1a994c8bd8c85f7cac566c4143c5ffb1a0ae8fd6f14f33db1dc72fd5eaf574e9e892a1a4cb16ed9dd1407fad2a1ccea794ca126ed7ab906f4a8aebae6f873266db033480abf011cf747cc2a6e067243399cde021b1bb0d3f12adc9bb68e8cbcc2bd76f77a918d33c97fe7acbf22f9cabd6906e04b68940b5d5a7f5ea5a2189f2e3c88ba72af386978d76c7a4b11c465d53edb3de8ecaed8c7a95833034573d602d0cb317178e5eb81ffbb729849dd1479388368d9632df9b071045e2d535cf2c7a03cb42044e87da92286cc8514589596a132b3beb750282ec6d58c00a854b5d1b22cebca670bfebb9f0e5859c6d1237defdef21c3a67e1fca14c437ded5b14ee30e2329227ffb27f8809f15ea16333a6a72060a54db968ef76e62578a583d0c433e0b28f7a4bcfad1fc4c2a3f2d829c4700887bfe3996651765bc137fa5e3d6629f3598c95ebbba592428385a41932d2a6ffb3886bb01d8ce117c863884093df00dd575931a27c477324b3872410e3f53e7aa6da0aa20449cfc071875703c242140e5db2d30812b5fe0b85c20ee920820811e25cd07e89f94bb1dde467abb4dcb24d045d71a517469ba74c2daeb73d28fb6cc5e383ccc488f70d18d79fcafd9e052d07531d21f4d3ba4915594a25442fb60e339d840fd4914452415c7c38e2cc5bbc8dbb0421fe1cb699b3c6fa5a6b0d493a537551010dcf10bdf22cb316a1bfb0fddfb4429aa8b48e6f729a5c445bc6a38a103ebd78a7f7164f1fa28b38e418ead087d7cc9afc9578ad49a06a752708695acc92fbdd7759a3891f8631fe3200587fe43196e970d2e78d6b6786d6d84c803f290007c80a4eabe1644a4299d5adc4052dc869c6fae43808b0b42685c358e848497e2a427eb81cd4dde136eacedb69339005981293a4dc1befba66fafec2a55bf51e9a2a1f256efe8dfbe31284647be6098b94e922bd675da78e6d106c3c5186862a08dfa80dc363f44db7fa2eeb2fd8b20bd5096292b589e9465fa28d15a0fa311d5428735ff8ec29f6d6958df51e15e4d7bca41e9c8d9e9a444009d97951f525ed47f8c62519190bdbee750d2207aba9b8c5b22b1642a8b09b974452928f8d92f17188dd8d8afd87aece4e5fe51058f17f99a489e60fadd742bce5a17d8516f64b09b80b0b3481e9b1bbdfa3b5b7b9e80a3f35f8cc65db4af9709c926dae99666056888b26f7a094b02050b467e0f8dd3690fc0ea420e4c7a8bab537bc78408f5f602dbd08173350da434342524496d19a8a42dbfd447a7639333cfea312d41fa664f694c8f5af8462a20dd84e8f059baa4f2d830c0cd2a778e9eacb5d384b30c8f0cfe79d55f5e9cfdcc352e78e817d8f4c0809255af3cbd520bfc3524e803025711c66f997b030e9835d8e95b8e188eac9ae8a4a0a52b96893c7264e5e18c1dd35fca55784a76cb76cc869ef3d2cac93df316d19e7d874ba01439d254de5a5ce24574dfdc1452652ef95190a7d003ce7150d184dac3829df30d9b0c75b68e3eefb0533fdc6c4681bb83a40ac135ed7d414ccedf440d24a3129780b3be900786e9dd96cdaef3528050959d9ab6ee532662ef5ac084564e52c38739c43a22a1b9498c158f4ed9502450036010c72323fe797a8a73e17107090c3d58e9333a706c4802d3386502494d618f8538b449b52e2e62e9720feba05b683f11c910e2f55ce21684090475603b2b89966263d145f8712893d1f4ba02fd8d379e0ba8de85f6016f802b418e02804893a83ab1207d037fe7abf0047871afcbc6dfd42dc78b1873ceb13da4feca49638919d4959e37fe4ef8864c248b2451e304d007f38b93be7e48d2918b647bb38c3b90b6ea9d92ea74425d29b59a84dbf287232f50d7d149b52becab4d1042ce85e26d2f442f2fbe863744f9a86e06f7c832ec6d3311d898fa11275fcab133cfe57ebdd7dcf43d70a52fb493b94dd339be5e4e978f9efa77a9b3670c164d0bd3b4bc100ba44bb3c49389cdca8b871bddc8d6ec818130daa3c0663c406a49111b05403db87b920f575690a363868fa8875460380f965cb114c9953374b88afa31fef121edc9447f5fb14656fa40a871e55930421ceb9dbe4940fd21c0f7b8f36fa1bb557970b5db0c42c52a265e38e61f460888b40ed294f710f038e7c68337999be9a57bbd2b5c68f219813728f8c4d8f03666c40810e90fa771fc7a7a2a7b7d37c3e6be526a1e149466721d09ff26b9bc18c547f76d9e5543a80c4744466bca319096ca9dfc8e433a4bb9e3e8fff0e0f879480ac22511bc33bb94f90ebc8bc53ca919e0627a0ec046194fd0d3f8df7a1b9ad96f8da6328c20356287784a84e0c750d7b0f90b4d6d4df67705728a1ea0e427fae3384ff8276bb21b02fe218e9ca9460c7162883115272f8b6d2c96eb38b976f5107929ca3807657fb7a54ed06d996a1e1f4a6c7b15e74f2ef68bf06e1f9cf419c51c11334ceb2ae74b8c8fb2e3722319b60a8ca9f0fc7a6f39ae1f50d2fbda5440e577c8cc1953d5e07bbfca764014f1c8d2e1621fe3cfe292354a37a4664e5bea09c1c3be795305646b24cadb1fd5b49dd69f17421846408b95d01150d951fddd5dbd7612d578c1acbb785092d9f83a04b8baf5ada105339ed10acdd8bef76fa94d32842f06b0d6cd3acd42ce4a00d0c0f29ddbb34862d6443c9069372b0930fd8f02a677b998a295e5e40794828ee5b457eec28838e112de781eaa07a06938899daa70ff94fa7f35370035e9ee4df3ef0d4361fe8bac5ccb1a99a8291b9711a2f0bfcc7ef6ffd9bc11120304e311ea3c4d7121514652265794753fd604ef01d35bac24a4930fa680762f639711145091c853d99e7eb49090ac0351a73119833cdf5f0b8c0f929ea37a9b07609b200174f8662584915aacfd15e2f1146ebfadabb7ccf8454ab7ab39c8947360da72d89403af43d2a555cf6f0efdf1f4a5c0acfffcae2090ba1ade3b2f0a5626653a717f18314ae677da6105a5dc2576f3661a4bd5cdb2dabc469217e0457e2d523a39bb9bb14373db095b7b6666f457f13b1039058a02987b57e3534f01f6e023ca13758a254fd5ff323c6311520b2dbb70e03210a2aedd8f99ceb82af519db39f591ef1478f38153de6c1495ed86bc77c424f682824fd0e9463dfaeeb81632e194aba29c2e17ec147a891a09e6c03b9cbc6e81ff7f80c3ec61b584420fae0b1b8d8921a9b7521cc74a2f4a5f568f3eac985db3a17d44bfde13aaf36e5e5c41cb0be370d46bd4df708b316b459bc3d159636999be8569dcb8b5dbf46f642874603a76de7c199fe186beafb6fa67b604adebba53a6d1f99cfe57f7b883ce924de50975c34390564e948b3ed28b918d94e6258b4d7e45c7ac1a2ea138bb4015c19f908506dd31d51885f01946fc26750c0dc1846c579a475759286314167d28d99680e31496d784573f834065dd0a293f6a8e8ee4a1dc544e7c207fed18358666faafe85f612fc77e3dd57523b2874589d93dcea2e079024e1b44d825273ce71d97ef514ad52f76561fbe973d7638756680b2489127ef813e6860f399b9d936eedebfc233973b290c4ca37c6f55e5c4af93316f057875450de6e8935d74b92d642a46a7081fea6eba13a03da764c4fb26527e6fcd2e371fc7ace1e5eedfe0508f7cfd7435af0266342096f5bce8c9af16cca479006d81fdeddf3bafde355610e08896306a20394468522c7a13e2c9600bca7a8bde778aa41098c9b298c595782bcfdf370b46c9504bfcbfef3175973895d1a1a7e6bcf507f20287e29279bc277bbef1df09ba7b22d7815d069128eb89e8613b217fd0c8fe5c3c39d2278a14b04fcf358f9ccf88c9af23b48f7fdb2afb8c217eed1a46897df327e736ed03da1f054de2a809c976c4388b20cfea2632867ebbfb7af17c5b25ff8cc1c12287940185cbbbefad27366a5404e27408c564f6901d47964ba31e896b8b0f1e9fc3c9fe5840a0b05544d5e8febcdf1eb37c4741eb218ee975d91ac0fb3e2dbc792ce1190684ee4c2a4149388af14245d15cd2cafe53f52918b2c1e24ccffcf7472a9db0b04e953979805d39eb5ffcca6a64ae19c07b4ee844e4058d7e167b8c45f92c22df4ba12c158ec3fd053a4edd3aa21b28d5d88e38a43fe3173a3c554c5823bcb0df52dfaeccc469e927938533c13deae2f66597533e35885f439992568e9faf52fef9ad210581a4eab31ae8f41f7f981b23aaa426dcaf7a9dfa31728ffa41fa0c11becac54f793528b65c6b7999b10d2f346a7d370325cea414d71e86135941c2b167a5bb587280be4defab04552c72c6c0114145f9d712e9ea71137898d3ca6e6594aef600fca67475d806a0ab97fa9f29849ed784c68f0976e20bf6fd1c804994ce8269847e18eefad81cf3035998b0c614c66e4db42f3df303d1f26b4dba402c14d50bd523b88c71630ff5044f10803a7aab98978c719feb826d58090ae0c40d46f18a234bb73b2f6a6f7c584a48ea49b90b44bcf7ee3b52a809671e2a4908864ac8e48e9317163da3257e22479102da9fc344b8485cf8370509046a2dbae294fd43df8066991dcf8908a8cbb115ebbe8546ea3f62bac6f40b95cad605d251d27c061fcf5d19c91b28e59486a280cc88cccbe2dd6fcf71504a6b8c37fd8b52ac048b9f83964184866cb8e7a325e72cfbd5543ece1542471ac870594bc2fc419f2c73856e358af17c774ab4ac462594174b27577a18d670f8966755ae8c8c6fa99b9afa949b9c144d706b6bd3f98aa69dda555ae518a8820ebe60e77749eea4048389ee5cee7b5ed111c14a95d8df5eceeddb4ac537c1a97483c35acb5e469808f76318e29c371d2ba636048d2d77dd5da4553d0a7b6e80dad2392a85f86ee140b5cacc5e7679e80b3acd39126d6f1c72d3629051b39cb41997ef955716089f0481b7065585a4120fdcb27648d8bbf6b312e2cec29e61fb1ea473e51b5f6739aa1a08615c34f9c232ce6048e64d0ec565b31a702110875e5d6b4cc1717aa41ee0bbb8a9d809c03dbcf4139588301a9871e18aa0ce553ad5d15f15f5d78252b9eb5efe0fcaa85cf4fc0ee2c9abfed4ac7a382f00113e3a3af7bbbb6ee1aa43afb5989c920f31a8da3e5635a262eed84d6083a8de14ed77aae8efa745314159ebe6aeca4b66fb4c9153bafd297101e7a949dcc86937313c14a5e27a86e3e314446af4d3eb388509fb77a14e715a5f934700251909c2f5cbd50f2c311ee7f0fe6b1fc4a0636a2cadd9df897a8c00eec1e5feb95c99bdf9e5452c6e3076a8d4eac54c1b005ec374b2d883fc302da8cf96f29c99b810b76d6831544baf918c159a96bd6609cab4060ae27923e7ee049e8f0271f694e7ab6d96382ca2cf51c1787a67439283a4f0e7113108c11d9159e2bd7c93bd3c05d788e2fdbbca4e8e1f230d9c99e3971e7f5b299feca4daff30bb6ee1aea3aefe9f81b3cf98403f3982844d64718f40737e0577aea10bf51208c385010c73bd626041d0fc4f31f7773122da7edd818d47ec653bc0829b21295c18d36068eea75907aa58103152eaebd9c93c283618f2f482a8b4893bfd4ad7b17e04f0cc8bcc1308bd4f5605703677ffc6bba71e76660943fd456ed12c7d0075893cfca91b7f87cba1c82656d60416eb5701f2c4efc4e2eea47021396e140832f7c71f1c36c3bdef021d3cf4641a22e9d881da23a5ac3b5792101b993b8a8266b61b1a532cf753c72f66c9bbaa9ae4a0a3bcb39878de6fc088a291fb95368c19a4430640b5baf23498100ea08211e9f24a763029eb0f802cc38d994bce5e3114ab2c601f95b680db3faaaba592caf8e2b448cc0595684e3eca0f7fb5736ce310f90dd3809058f024d59ff6c306b5fbfb52507ffa1a3911b186141779af0636818d208541f4beb80dc15570ef21ed8cb1ca2aff147c01d91766a6cc8cc04949203ceb45f6828696835fde55becc79ca29092bd71cbfa04b2012f76ee52674c7e6a5d3bf1e14e0d97290e92c3a97c0134c12454d7a2dc7f0ac9bbe22e909213cd2de7249e4c139bb8801eeeb7fd93a9574cb1b028a703eda5ebe36d4dd015e1184414f59a699181cb88afdcb0b68d5730df4b8fe5f6f3b1505ad0e01bfa9b4ea987a27d18e4fb2bc226df7d35047cd2b000661a48d306ee25f6e582850097a1749a68f6136cad276b45ff1799f0d5bf243c2935fa8158d921e0483eb240431ddfd5b26d95e8c571e35fb1803495afaa916f80c238e91da4e3f30feb0f7ffd065c4cdd4ee6d71260bbaed7f3a10d4dbc7993b5689b25911159c33fbb21a071226278945b1835b40fd08430a78436397621be6ebf56f7fb23ab78c8f86b023438fbfcd5cc394a7c0dcd69c527150f4cb1cba333ea088ee8a47d85283726942db6ed377b42534203576f9de42bbc63381f8ff7c66d310f52f7ae73353d62b5821fedaff9e3f044de61a0776630d831b3dcdbcd03a548c06546230faa1b641239373ec0f895d5283869498f8da1e85fc93ce3250c21fb6ca4eb2784d25f32248f7a2e8c408e766ea838b24f39ac4c0b85f0c252da22d26e48029408902e0114c9a76342b1c105e819e3f373b13263981cc6c3f8545259e248a8a0fed3eec3d1e1aaa5302ec6f1ae88fad084cde581b66b23febf9e5f236f0e78531175645977ca2f94d97e489272b82b3fa925ee06a4a6c4f25c0fa6625d8101f8be86f3d18b3925e5a899324b21080e9aed58378dc56663e30106605f153d88ce916db978b9c59d132d4ab15012adc3cf348bcbe075ed7454c5a72d9966acf6e8d30dfe32db175b3e29b61699048646915b17023f78e13d07f63eac4dcee6554e20ae086bd5fdd49f846529141820cb69063ba6040e63ffa28f9b48cbc104080275abd6e394f536323a0fcc0594139a1d2b9bef071d778d46c867fa1599631096b082173da035705fedd1c6911bbc0aa993cc311a4caf31c542c8e3d2f2c98cb3b7cfab06a1e7f94d009e3e54ffbc7ea49817d7f34615a94887142d272c095f5212686ea623d3e27941a94059ca4ec44e40a4bde29cef2a4e2df44b4938b5978bcb65ce8f5cc66af3fed3e5b6e177cb5be27233f12add7667ea1e6e0c28790a6e2fa27e40d8ce21a0d652be1c90ccb15a8f5c507ae3773d62e249dabff0bcc3009fe3b1a6aad6a8f0007aadf269d4ab7d69e033c8fad245eaa02ea3f82e7cfcca7445372912990bda751829e819a0fb11790931d8d6f8283a0fe5cf0993363cd61ecc5bf3a9526e61bb3d9620b9d5effe9663c5d002955b3ffe562874dd04b43a5bc46ee617e26471ea2df080a3ce325352045afd68448dc73112c6a6d2810af536fdef5b71eeb510f14106741d4bc239cb2eca0410a53de2858be19aef3113f2627ce29c6e270c5b4883603791ed88e0c7dbfa987b0fce44809fc437f1c8267a68fff78f42726f1bd6e9e0c4f1be0db4b192f9f98aa287df53afc98aa81711a43f9e8547a24c323d8c49424ddb65942ad07c83d4c25584be032a0be5172090229dce1d4e25ba63adc7493ee4b79aaf12be690e2342b852954e211603e571a1ee55eddccb905ff455d371e97f394dfbc710975b4f0d0749953f077763f75a3d73f2ab62bb5824f4164a7d291b475c102b06fe2024054a8cc7a06534e81542a5fe4a4e056508af2a1fdf6c1c52c2600e76f0902f8918af3bc77768b9198a356870841c97d77f6553aed963a0d360dd0183ff2f0a8a17c70d447121ec5dc6c40bfc621973043777c4c685b1322b1008e4220c62e4ea794a13efc9efe9e3c7a8aea6cc0f1cc16ac8df8ade77c98af1dd81a59ddacfb73f79f40cdb548d5b49aa1e7ab79aa49e7237e2b302d5481395ba0d48bc363ededfbaf9f726776cb9aa447f4c69eae37a13cffa01ef8939d915022b1246f2a3acd9c570c411adffdfcc6db8a69b526f9fc6a7c3c1fbf9f315789ce489e244316646df54edb39a8d7e13e7249867217d8b26bbead7298b80d9824118922cc40847f4ae6e7d36b0a50518f1d5fe89a5aa26302ed803934702c8749e476ee910d7d0e65c19c5e4b0843da868044f250d4fd8c4d51d7b32970bf5bd1f8effc70b98c043e814ca5c77ed3ec9d4684e1f37fa2451429079451f648f476ca10fdbe66ba3a3d59d398134a263dbad6576169d7a36278df5bb0845d46a5eb84ef685c0fa520ecfd48356b5c0f67ff5fdacb6debf9bd72f48d596363d9137a255afce39e6b824be1121ebe958bb4fcabcbb29940c825e0027aa438ae2ef9978aee1dfb9c2f1a0083d4841833a53e672811139477c8018fce6af137644d598f2adf54d175f201844535baa1b8a1bcf39a5520ec34c35d4a76226fb37891ac2815a77e38c32f36edb862599b9c07bd966c176de515b16ebaf7626e71fa1c7b46ec17743c1faf2576c287112e87de833166378b7ccc3d20ca45d227545c89cef43c6522497e454c3307b5e1d1febf91637576641a41743cbe6f7e8f7e0a233e4d4289f981cfee9a7e82a0451b4d92344f8c2c15c64071069467ecfa95cb1868cd0df355bf5721810c1eda9bc855c11e25d5068b09120eb77f8e83ab69cc71541115d0a6b138902fa96039cc1dd01212fb8f3746cbd5ddcd81a3768e17bae2210b05b82e81f16c78445007f886a606639711b3d05519d550ab0a4f3a9d958677c0a7159080b8622175ad7a87c7694f3e96af130e0dd02c115877a81c9fa9b75c0d56ee465493be8d809df9ad2484034353bcd05c0371162869b85dea2f7f39531b3eebad4f79f466bea8d3a2d65e6350dd9d766597592f556d66edf863d86dc24f198779e9a23ff250bca9d8a8c3e0541f8d9ca6c7e1620ab3d4269f07e1f4e9b7c83494d50616aa620d7be7388ff1c810df52561b7cf2bda98e86a7dd830902d9d40050120aeda290bb3f9cf5e2f8a606ee6e9bc0694b41b75fab717ccde1b1977d831e24a3007d8f01ce899346f0c57fe9e731996edf5af7189a49ebf5c45b8954891b2a0624362644a1ce4a64e9162d0a7ad6c6a5d6b574ce7749208375e348b2a07c3563c15c6e33b1368fef2f5842b8429118253783bab09c0156ff2ce37ecbaa75fa3e9cc9836366d43f4c04858c7b7f9eb2fdd54f04e83b6d437d8e201e538e68df5d6ebd23fe4ab24e654381795f91ac168451b73c6674e910d23937813754d817b1394ecfe2a5b6feb361204ad0ff09b8bee928486a785d64c8a69d5ed5d1e4e8d7987c3d4bcb26ba70548c1d33352fb6f19444c07e865f01485359d74d38a6fa0b17b8914e5e8eeb82dffba84069fe8ebaecfc10d3175cb82ee72af2ed6b9248aeb06dd614e583b3d077b0abfa26cb88a85b42e80a6ac20e284bb7384f80ec8fa49175229a558ffa4b8e752821ef3eed466291fff6da8c63836fa445123d7c549f2b7e49a6d6bd3e12f20df887dd1c7b43ef6c730a2576f51137be386db9a9546a0ca294b13515f66af086a96abc0a1557acca238b436ae0c5039d963842404a68d7cb339d17cb7062b76563ef0fa5d72a4a880c029241671082bdb850f32347a70fada899aac49b3bede8eec4fb7edbd0797528e2f251299734bda8718ba6b7dfee3fa490041cd5f8cf00a70b5e82d309ca6fe98270b36818f95261b57f58a2ce9c1fb4be82a3a3b3ff1e57cfe041ba73641ae5ffabc95c814d899eb9ccc49c26e61ae434204f7c71398fff5b06ea5c99888fcd5db4148892fbb871657c360ac20e448202284c386e5e02d0c1575ff8b5fa32957485acc9a1a39a99e0e1f1e8eb902b0ffa76c1bbda74ff3dc5bf2c2b78009a264d6015915dc6681f10b885d59ad9135cba031871b226ce088e782ed752918e30a498901afc531f2aef03636015cd5452099a55d520fdbe8a02e10f58fc5f27f32848f9154225795d2c6e86737fec4ae76e2f7e74b06d81d3a357834bc731b55fdc584f5e02cb8679b123287ba5e30fb897497af2565cc804ee0ce0de9ebb5c4425830725fa2a560410ae5e99aa34a2b6a4a486070e2947848bbc42270643c6e739ef20717335c0431657466ef8a54817a2d375dbab2c665594a1686222bc2eb11e63ce091ef60a77856e7b6732c982057edd29afa03a4f70540a32148b9d5f43fc20bbe2743362ada53abf180e51170d35df6a8a03714851f166bc41af83bde1115ac5bb320724db217f56dfb5b18add5457bdd5004635caa415157bd3f34b28d3ac7362185b491472bc41c1a304c5c92d77bbeee6d67e8ea6feb976a452218dfd8d9fdb9fee66b8166322f19ef9c76c9d3d4bba7e8d145f00e7c3e2cdb83f449d42ba8675dd7efc974326b149088f36cb4911db6a5977615823ca16e4403e1b347dfea7af6252f34a5fe1e41168165e321d151d23fbc7b738d6d4ffacb41d00273eec4a8ea81ff12ca2cf88bc182d9a04c68774aef430f494278925efc86462fd2f9033d567b4221124156b90464aa3979ca611549fd604e670b541b5963c8e672feb8cec9a5507add54a7b1965a352891030c52aca9e7945ecfdb05417dc94666e45c0ade35ffae9d8b85266762f3836456fe7f6cd4b22fa668eaf18bf0f28227d9289dc0438b92436561ac4b3d7a960b7bf30ca2f7f3270b20914fec2a77999664c9a5a35e0d429c340e481cf3854e7c8b810c4d8ecf18da7ff4b845542e9c2cca197555d7da4e8f80485a9bcff560f2f020828d36501a967debe0c15dd3fc188f6d517d1622ad891f310dc6367a64c6904c768c3b5f55bad7ad8304a0dafb3c65f0d4b5d8f983f6037e5bbb7ae349bbe7fca90758b29be33c6d2e01c311249cfc198c644e0b89d39dc2b17c2e6122973778e7435d388077b1a6404ad5ba04cd4921b06210bd2ae4623e65d46b7591308b2d36ac27893ee73c2c6ff782b3d8aafe30541bd1b16e9253635e2a795c1d8bc5929c14e50747792b53a093308044a25f5e62f394949f7ac44b4deaa50842136a668131d523ebdc36912889f35604724f13b9abf4414fc5e5ec3d8c43f314effb535f87bd5428ef56d0d54cf53c060a040f85d5db639bd3c5614fca99ddb86f66e3a694b7925f4c90f98f0f33e6fc12af7a459916376c8768d04f3a2ddf527643b7a70b681f51b10e9429a81481eb8924b02b754abdb089dc33d1b47f78057c45276ff643c38b305c86678f11153a88c0fbf18bd496c4dea4c5ccff4878443d38f739b660281f6b13c02d2cd8dc3058410a38b77ec2aa2bbb1385ce190dc0e6a8854b833220e5e4dcf8446d5efe9510cb8d08b5cfdf482b69e7152fe81961d79fbed533fb43a907ce9d18ac823956f6cdc122f89502da4f9dcfc96ab7fef33f4f647bc13262929a9d6af9c45f035d87dad4c99a5e7cc41c981f69cfb0127f79d3219412a916c559f59d836a51c7664486d96b0e6c26c3e13000eefce4b1a77493b8de2eec93a720fbde9a112657f70a575bda890b04415e75d319c84be89519467720c5f6940a7dee6839d8e33bea35c4200994c97be599a8876edd2540f10814e61cd7438e7006cbd39254a14f9a7a741975d5fb1f70f675dcdb20b583559fddb0e58aacdaf51e3c5bbf2bc370079780dec9ca67ca0528ca6a15bf73e93f50c85670d9c5029298b6c7e9370fea9887a99c82f0d6efe46091f7b42aa932140eb74191ff8b390759dd91649a9e04770e291d844afb04cedcfbe0d4dc51beb2b8fd23f1bb33c9dfc3e232c986b75489accbd04ea4e0604588d537c53a218996f0146fbf75397dbb9ca4f1db66af56925e6b67061cd6c00b7d5487c889b2743e133215853758a304a8375e4f86436084f1f4ddb5e8a02c01977054026ca1e4fdfb0748b90aba211f2d6925389c0e97480e586a9093f57e7e7354a29e5471002f56b5b3f1a8e94db8d1e858bfd3057f82b1fdc6d2428701757a2907b1cd7eae1124578355caa17877e57a95e8dcb20c8a053742f0127219181d1c00962a383a6f0c5809d596c07327e7a612aeac23076e7ec5c10e971c3f04b7592d89b03c86d56ac5bb59f81b56d252becc6b5dc3e87cb646c09f2ce558acbea7e9213d75ac3ab73acabba32f0d03113f5104d0ddbe78b40c4b26c9c880ec417db4ccdc8a358802eef5db3d657ad04594e79928e101febd7e74171f414c999c87ab446b7ff91c333bfac1af2dc11007e7a7da18164217bd4c1b310ecea2cb380a3c4e3b11f7bbde2985eb9d267305d6947038a5c0008ea2e073155d42ce6e9fb003f9c20b8c93e9245279d8388e5305aadda427133db1319164d7b4f273e4b6d6b15fb7275e0a6e4783982487df5fc67084865eea299b520cd900277de8a069c0d2f39b227cc3b1996954063eafe9d46d3bcd80c267d8d70e4e781cc8d1a9e549281e4e95909ce1c2aff5e94b632d79c722c9bdd56c60409e8cf659b370f6805ec012a1a0633debdd4cdc669f2147a4724d43b3ce48247df4855dada9601b366b21df4421e2290557de0a2d0adaacbe2afde7bf7d49fd45606f247e717df6d04588057e59a603d4cae2b20ef69b8a09fb859813817c4441962a8f70b96db04163de94ce7397e62a3ad374241b701b4c14848a80bf791c0f43d7356b897456981ddbb214cebae3eef6c4fd10ca804e3845b5dc9bc59040f8caac1522b2a3d72d89d9abaadafda166fa5964f4dae1e70347cb73a76a2796e9858042fc3ebefae02f215808cddaaa15335f52208b96fd08015ce8206b141ad2a58a7468d9db70de3389c2caac2eab1e979291111fdcc27ec35e308e2ce291365f5dd87c471ae0e0f4f1be15158571da1b0d56647ea6438901f6eea9d17bc33938baac56f519dd14c3dcea73c41b1cd8850f41756ebd568c2fbe60a202eaed9a21b6b5298c61f5eeddad6d3613cebf4a323d6f984fad42f3565c975733fa903848629621007b8a88837e7d3bc01795b631901b831eef6557b89805566f30bb6c83f2c9b5ca06b7fcd84dc52925046d6308467cbc90ff570a4dea99dee17025e174751c0e36be25cfcf40f041cdfc9565a225c6cc90f367f10652f7b2bfa6e380a6600ed7df6176dadc60129f1c5587017e472082545b5f21f10a83e1262ef604da2a8d69297f7e2a168c6d05ff48ffb79d2fdeeabef36d1e602a9d7a4dc7324898a9ede043a7140c2e0e054d709d989c7e91449c86ae5a37cac0a7574b22425cddae83e4697ce9402e320a7b6e40855f1f8df8b83ea6d8be8b93fd52c4f8b366ef1d7350777f7605c1b7dca6b4cd4b72dfee37ee55b74b04b7e10abe19ac269ce40793b08794d3c1ad1719ed7b82067e54375fc93030952f9a4ba9d0a89291d34cccc189cdb42c6f1500c5acfa71fd8d9f6da1bbc727f2160f57aab9be65dc3fa1e63e315728bd1bd1c327674fa9642800bbc38a13ebbdc6eae0ffb1df29d618c9be46f19b946c6747a04b5ed86834208b928ecba88c9c3d0e60d9c0f96c2d2b9c6f162226fb88a2ffeb05cfd12f62ff10257f07935d0debba8f228888a6426c8d11bf8aa9c07fd7b66334d5a73995d9aaa67af1bf7a4d871558c65fb05404488fc0046720c04457dd5e2235ab1b5b3a90736b543bbadc9273568a6f9dfb5e1dda9224612234379ece8ef78b1cbb73698a84cb01a2abdacd8010244df6fc3ed2911ae903ddbb483afafb006d49b39a00188b2c4a4615f08f72c003ea2d51f1474d14a6918c6a571aaa0c58a973448f775b0a7978cef7b501e1993486b405dbf0967f78a1dea8db5a3b2fd6ec2e3299218c296f67a53f724d5d8f5d0b8f07e18554ad892fa0adb3c0edb02f66992edc4507159852ed48e41b357bf9c3ef039541f94aabd0a46cba730dde0e7be3dab196b35065904e9b475496d54cd2cb6688852af34a0fe0964f9ba4ca4cfc8c3d9fc0155f14318e8e2f55cc1fbbb04e19ec5855f79b143f360c4ebfacf9c2468a061291a41698862f99d62e4046db15f12d978fea3a11a7c794fff6da35abbd05bb179d24601206a36e8c113eeff2d7ced5e4df44d8ff665f38e46b2e156e4dec20484a184e136f4273834e2022f01c749e2777413d808f7363acc2e42a3d34ef46f132b7a55cbac94c696d872f31eaf0a96e2b0d673f69b59fdec038f32346c41ed678aa65ef83124f18376a22539a01d0e2ed930cac915969fc2de83419933a7143b9b2ab2604d6c97b0af23fc2f9a370711525eaa710a5e8c3a6e869dae9a4665b0d7d189462500aed3f81a429db2799b581e7270d3b9527f116661fb48161e27ccefe6dd16fe38db9580c53ea252c59c369e9a7c043e5525e9bb699d0cb744a89b9a9366392e70311f178ef07ed6d18d3fdc01000180082e9e2a8b78d20b5782d77b65dee4faa6a2df1be881937981aef663bf7e4f2b78f90241d0efc4c54740f1ff91ddb7b4cb686b430f8621d6997885e641d0fea3122c38ee5f71ed5692e3730511f3ed9e3070e82ca09ce06866647ff4636e98ee0f011ffa81c27ef323ee7439e05890b03274beaf0a8e941c67330acd909fdf71211f52f5ec095430f01664edb07b55eb83ebd000e970f2b6ee4bb63281b58afea20972afdba6171dfaab473f39f77efe581f19fb040ea6626631714ce7a813300fa581abacf917cfb762b82ff1205a66ce4bf928a6483a9b7aaf454d6fe6eb6865f7febc3bd80e3730bce5370e2201c063e91a6b064d4c16223ca91e2cb8211d6836db9628c689fb446fae2cccbdda32db761d706883356114d0ce16efbf829f7ac11195ae2b80ff16bf1b5658b477ca66de0782d002ef6e0f26ad620a2c1f3b470612c4b6eede12c1cd53bca969f1611ceb00f12e4b1fe254d44f60eeecbfa2297cad67417fe44ff81e7dae76ba4c02d9e7c4ddf6d34d729882e7c709d75360876216cd36de4c8ee37dc32dc156b317265217ec830dffa7515e5bd89378fd70392d92fc57eceb59c29e4683fa27e932a5fd9bbfd3da0f3b48058a8990fbfee725405dfc0d89f76cfea828a441bd28fc59cd88aab4a4c96539c7556a99fe14dc7f7d0d91804725bfc202e0da557b33441f2ec33d6718ec4609455c72ef27b50f303bea54945f3762b6a77f2122ad16d522e538c7d5acc9de2fb1a751c39d28e0644a3d5c309c29fcc4885795483ec8997909a914328271e05f26c4d4f847d39df115c09de429573abb6d10117536936d0f002d7547297e18f77c310140fbb3672b6c10f01dd89b60845e342d5cb1bd9e65db2eb7c978ce5f64ebb74683f95a2675ac79fbce48ada317cb2843a3d52cf1a5f8cd819d114441826978a948d5454b3ee4539ec9cf39192c575fcf35d976586c8684e2e8ba87ee5ca6eec9a6936c84fae6e3aed7e4b8fe940db0289064e315a443eebf448f185cb43c59e3113199aea922e12786de8058e4a5e72d9b242bc36054b9f42c8bc6e2835b4c9035b5992aa5ca16fe8cb3e8352901b4070ad7b52521611cd6b8d9dc0cc49d2cd1a2fe9e7042559ec594fea5d98296cb3390d1aaccc1fb70bd985f9d5034c0c01a8a0057c436591cb347227839c57a8e944ee9cb09bc159200e3a6a51e5731447fd15a5ba4d249ebe51b7a479b66c152276f4210eb2b65fdaaef67700fbb2c7a3b876e05435be80cff56cf662a603242ee7926925a3a432a491e5166635f81ff799971d071a37cfc852917fbe3fdcd34ec4af90ae8606a6b840b493ee5ba577cabb17fd3d0cbb376080ba992a02cd470fece883eb98f5f99f52b9ebe91ce8d334e7781fcbf184d327ce02dac00f4e34c8c2e0015f251463f574c480a6aaedb41e509965b7a59205ac9971732eca0436162f183a2b6b8eb1c82b9b16f46e45384f6216b657488c3d40d41b8039af31fd6d170d786906eba24277c1380d014852ee79497960f207b5c01be2ef56c2d493c302bc70d29a097d53dca3be85659e501b7d961c94da7eed968b760d0375ea5a24374c77d32d98f8a630f92ae84173b12ac81dbc3390484a712781d381df33d49f411ac3dfce8be652adbf5cf2e499e6558873d193b60419247a56548cd38c68b3953146112a31aee203d82bff03ec1e902b17175391d94c50295388614f87a04c1b30ecebef0f1a1299ab4377a2519ef7f32b6a5e2834aaced9140c4b214883979b08f91fe1f6f66bd732f661a92be7f2766eec93f45d970bec4e8a659bfd6bda6c43089985518c5a80d8b189ea0f07dfe835765591278b41f6194b55c51c2de6ce36e60d62a733608f12c9f12375c06d46eb6bd7fad8badd49642e87c375b03362933ca372368a8fd306a537f21e3f689a9876df1c5ec14a6dd8c449bb73d6dd10c629412d7ddb42981fd57c0da1f8bb5845c2025a670158ba18bc6e4482f62eb2b2e60e1e48dca4296e6251b348beeb11706cbf28bbe4be9a58bd23a86f8c4fd99b0bf86831036edf23479965fb4fa7fb1fa20a265bb1f81e3fce8ac914855efd375e55ad8e20ef5773a1af21a20d514c2fe5a82a2ff24172f1ea27ba386bddee2e993ad164990bb29dd03562396eafb01ed07af89ea4bcddc01865db484f6ee4e9fd4e1b083f4520ed773814f33f087dff47ecc34817bdbdefd96e74e98f0e4a011a6a9297b4f04f5567f8f12a8048dec2e491c07a13c11920d1afe4c92e5c16626bac4048caf02a830779492462517648bf504a72524b5c74ceedf5cf381ace0b5d76318d3fec2ca3fd01e95ab4b5ad1acdad628e3010d062dbbe47e47707a503408bb8d3267f21dac78c48c43ca68d0a934d6cbcc1fb164336639147bb9821bdb45492270c5de7b5308ffeb1306320a5eef8928918b5b86aaba0df9603e891691fb174ee0abd0dce457a529cc1406bd5da44116998c71e2885ad39986f1b9f11ebbe01596bdcf4b0be9d861ef22bed649ea06a5625f162a34aaf91b2f0c44da7925d83c45314575590c94ccc39ce97594ada7b0d02945a769989ec04f55a85761c5169d00132197f447374342e5e919a3061c685b803fe2f1789c911f6e64ea7f3f59b7224e0c48f308d493d53600e6532b33e343641ef11c66037738815508932320c60f394ca2c310ae2a37596e229fb63c53e427c7726532b3a6a8872648293c611756998e2078c5b989b2d8298fe276707610f346c1b6eb1d745ffc9bd97efb8389c227a2233b0837315774978b79e349ae7f8b0d2b61d8121b0a2e99ff64f847e5bed1d690e94f1c5950b037e2ea19d5df32d016f32b1d6135ef26b8d1348ec8506f9366d9e4eea8179bca690b91a181e70fcdd1b1db6298737fda86ee23d0470073d6bb8f2abe422af3db7c12156cc5491a0c5e0479b69c9304a87110f944ce10391c5bc2dabc0ccd4c4dc6da22f7192a2c0f9dc8eeb51ac0fdef3c261c0bb2d9a0937fc7664a73e6fb42211bf154cce13eae507c7772b813e0dfc0555058f69380abbbfe1c0ad07a7a67a8f32b29d475b7e1f8fd0719a8e9ba8c37a828e89dd6fa83895b9ce4a1843b65fd6c16251b998b96c2992cc9d2aba2473c10eabfdd30f928296210373025d5ecca1b6a0974858aa8ec718b5ca0b0702ab194253ac3b13e8a431da8c0e33ac3d71f79a2becde52ef580b8398c19f50bf31f0eaf7fd39f0ec83fde5a723871b54c69bd6601cad2a3476a3bd9404994cd244c4ec4e4ebfd09a61d9cfd99cae4fe72462ef74e86a3ff174cd79173f651d595f2b4c5cfb587827fa4c1b8e4b4131c9dadc8112f4753629598f27d6d6a2b6ec77020e812686faceb695eb5323d6c2eec1538034e732b8ecd347414d96e7e813a758222b724ff7902e8d7e6e25249d31db4b71758f25bbc7d592dd6b08a23b2b0aaa2345cd07b230b4d91ba292318571a62f8a8288e6db1dc1f93d776b2b905d5abff66393b86b45741fec30a394e8694087ba4c079f3e382eb0edc4c30a8567d64330772a5e6256751c3ece7002ccbb2ca55ec59ec879ac64be075c86d69cb74658a040a67f68d9be7b8e1fd6c5a865ed930f523aa4f9bb1c9a78f88ebb88e32bdf5229c8f693f10d014d1e7d2cd789b7c41e800012bd5a4ab359ecf17bb87fe8d248e578c09352a999930cfb39a2c5506bc4c82777819715f22e86bf8096ebb7295e7fba8fb9dc6d220668197f8be07d5279f52ef2ea25701ba95348e715433604ca033f8ae4c4e141996d8a0cff763422fd8af6e9fcc56ea2afdbf64f1d3f750ae3e69afb4fdf5aa2c0f555d8b5a5affbf3fdc9d249abfaf4036d22be647e74324c049c49246159ea42d5266365eccef9aab56ce460b28ef101515cbd0dc69e5d1b6f96659125fe706baf282c45dca0c44304ffe168bf29381a90af219b0f57dd99be0ac42aad6cf0f7025db630d1091972f6e7ef089b00685e88cd4748e43f9f2556db8287b85df53f37cce630c59abe86d87d5ea9406b58063535cddee71d816fd5851d882798716c8f0dfb9b6a642da4208fc56577c24ab531c5c1f34e727f9fed8ab225af8dc59711e0e9051931c76f611ea56b78adf3ea27bc671a489e609f5ad40d9075cc98a934648337042c6e97715d80a4f64976a5d697a78179f58af6766614f71fd6f26aaf2509e5417797a8ff1307f9984559f1f1eb113e679d23c0ad5426a0bd24a7d8e46c288a935dafb85ee832f0afc0c7d44563f4d8f7c893c7c1caf55112d7cc2b1d247d7bdd71a1255bebaa568414afeeccebcb48345bd89328c41651d9b2ab8013a08b32b23843b89157ee42db4fcdec755325ea4d03576094d56ffa7c085412579dc10d79cdd451c33a2ed04dbc9d74f77cdb4acc275476e565a4967a4e413973ba8e9812e644386544c7d25cb4753a900889eb18dc7176d9cfc17843547ad46d286f02875cfb916e85e322d4808e627b5eacde7bbb3f18ea9cfd09c7769798d95b0c818fb0ce570e9e3b32f0020f5070bd9e275b9361c1ced36eb807608b28188740f13bf9db77d1c6062488ca5cfd91f9dcf2401ecf693b25e2f0886fa4b14373c6234890976c45bc4ae579381508c55bee6cefd45159e235c0a8866d4a2bf43ad3a99d38d2bbe7f56effb7372afede6f16d5eaf15512f8a4d45f9bc6490ea7af08d450222070f562072f70e7f698f44612eee43165e54bf5904ea8f6faac533dea041d44f23e1a73d092887cb51f1a161090e4d2f6d91742030e9de00480bc46aa8c37d434c33186139dbe2eeead3ccee2b6f91ac02ef591366f2f456ef996fd87c2fe279e27cd6a84100e90d65e06f59c17019aef0e4b99e9291a5faee5401621868eb1d76628f7f8ee3ff1c371c8c48dd9ed78bac47f7273f236f06bba698796a834c1383f78146bf46ba92c2c64317fd57e0310f793e9ad9047960809766a8ea828a81e55eae6c914f786968da6c9ea8c34978d329000c6379edf2e190eac36dfcf891b55e76341b86f6902172cda995e69e328fb9e788411872dd32e987c2a15443b788aad277e7faeb662043446388071ce1e0ecfee2114143bca780a4a9f282cf67d132fac39e9960c7192222715f5bb9662f833677d2fd85b3a217f729ae0cf446ed2a8de4d1d0246e90ed8a49e45e4fbc8f9978a24ba0dc5646319eed91c05d8a3c24e62d26bf4bc63afca13066e40fcc0fe70bb2dd11909ddc4cc191a6e21f52944820e6a1aa01e2c3585d690a57147744aa4c1ee9bcc54ec60cdfebc948a5cc1afad2609bd867ae9e73a0c7797a49195466456bf7ea67810e8b39a9c7ad8fc7be256bd6f585c003b263788261c5784dbedf056936e935041c5a28f3616be6d9987f439d0e1774550a51c709c72147928ba0cbfb605c5a93d14100e0904ca686f4edd185bdcc7e064d95d7175b7194858b79cb715d368728c724d230e54ce3b3958c98d4a003cd3502fe209014fe31a9cc30d1718db9c68d41b6ee8d55961591b8b8b47b85707ffa8fa0e8af33bebaf739fafe1e5ebb4340ca50a3e2b3dfa68882f8f919d57d37f502c369fd8fedd7324b3e7abf552173498f4c91d3c01694dbec71d2d16ce5ed7fb6f2995348a7ce0bb306f96aa6363c179f0adced53524b6d806291e3e976be57c405bd79e1bb67f7e0e23cd6ebf4fd393857946369c17f42303a84af63561821d157e9643ecba05eec652bc87d604e6ff50524884e1db9fa50a698e489fe1b0c32b664cac08b4aaa4818e25ae72b5f3bda68ab38b6a7501647b75ea9fc4bfbf6338f0fb17c49a641cdeb01fe0a7d0f8430d1f3b3c7e62d2136601075cb63678bc85958fd256007134fca51004e8ecd79f5e7d6b9a44bf075150ce3d676a64d94a30f91c4c792d44858a79c75585da87718005690afa1d94107809b5dc2584d9645ee81b916c419ff41fd475c7be34fd4252ae94a1bc934070366b1ce1a07d09c996e0d515e3f5b99fd0aa2d8a2ebadeba0e1e85d28f52904448abb34a96d5f44de420ace4dca535d0df69e1a9b737a665398f5f0193e56cd0969deffe705db3dfdad23999f40802a675cadd61ac0883d5c7c039c10e7b7e42ca4cfe64863fef2a7be6b1598f8e24a298b840ecbea67ab03b96f0efc433401d4db4d969defe9d1b70ce79258da6ceab779172cf5390beb8c35e4c4e2b70335585ed44a760347e66507129b3deb0fba03675be3ad7367007e800d423b49db8aa4c7508785a1b1c89cd2087f09e2be335b055c26c1800ebfa13f783e9aced43ab9b2064af50973f6e5bcc3baaddd5f4e4cff1e8aa68bc8f69ada297799e8f91514f403b92fb0e2439285d1ca7ffdf50abd8c531d8be19283a6bba92b7ef510835ac0675002e9807c1fc79c589cb68e1331191f5d77058f10d53575ea01ccb1cf40669444aae95e49c4a3ce013cd6ff1fbe70880c0c9da7ce791a72b2c895a0ae0a3d4652ec9d96c11ee35de78b470d44dafb85377e0edd65ea69700cc29086fefb1fe708a21e0041bbb239ae18f7d49314521a695ef71e0973793376b92e6e4ab7490e3417226cd9465c9fc543462df3082b490a18c6fa6ea72d8e3dea4275004715069a135d4b72be144636f3842e8c973a06d4fe6bd051ceebe63214522cb28d8e4c0ce39fa2de7e5d8dbe23ad39a6c17aaf2ee868333aa98fd497f3ff05c88fbb67351eb6f553bc1ab93c846056af07f5336c509fb8f70dac1edc9c9bfcae056619c5efc9be4e70adebfbdaaeba3e34177d39f89b00e56bfff285a43a52f190195668a64fbfad53b4531efeec8bd387ef191cd8ef24f40e364f560c919a51445baefd7277a99c48802adc9346f3c2c6bf41ec13332e42809bddd267a533ae9b158a3e908535b69f82335d7d87760f5e1ed21b943051f12ce5ae83837d72ab910b1e93d2fbb3d33b6c24a02869a6fa509e1a62665aba077fcc3873818872a16cc17e32b920404f33efab5743f4270025e48b275eeb8bb973fb8ec1e7aff3ba0b3061ff249d7643f4bddacbadb4e4593fb8ebc8e4cff2e13928c724e08c2ea0761ecf5c7506be0471d38173195c642391514ec09bef7124911246e1551153f134fbecab674d5e33206328280558d884d376441a5b8b8ecff1af6ff3d4794fbe760dd20504b2f2a9244909afa423d76655479d5a0256a8f93b8135da11fcee58bc2ee8724445be4e983659c95aaa949b62cf8344a99f3477fcfe822b9594f1072311f4d1eaa3a3fec99752f48f9b10528c3f8ef5355a57d2d5eb62e18d5bcfa43d2bcf9ef535cf10d3b8ae2d9749d8c2551e620b1327d26e8609ffc2743d378b991f79671939554c3cab87e27ae4cd54b75cb0108019b60c623b7761411029cc5ce705ed5fc304dd3b7495f4365af11e6e4af3399324bd2259ef3029e951006f28b572021ba3f7484c7df553d5607651d90468e76ebefeddd24344d5e89b07922d2c63cce81966ae2e548f90f142efd97880dc7bf3a1dbeb35907ce30843f63c93747eb7edae8054a37574f60d0f7bd99ac2f70498d82fc5c4716c7324781f73cb9cf7c910db8b7528ee075af2979367956d3ab588e875019f34fd0c563be4b13fd1574862a8ca9312a7312c507e5abaf98a065b7e67995fd40f215dc13c4195dbd262fc6e3772360fd19eea362e73bff3807a4e9f735b1319a011f0f5e85d30684e3198ed0f9caefa008055a776df320f44e88a53bedd54dafdc0bf4598e962da5f1fbdc9f37afc396319b63a254bef26d69aef7c8faaa47ce008ac4e09e6f5d8d56816f95dc789e6f1085af5188cf62e5bb3291859809d4863f2e9f0d1eacceb86cff6fec7d73c1ae013a70cc49f02f828f5ea4570e2663cfedbdb44b86eb6116ac635485d4b4fdf449f594dca95b48e9de4d40b3b132c0f2781dcb954c7761143f08b31fd9531e806fa3af9e5cab3999cce43228db0bab8851e456dcbc233b61bd0b57a2326da4857e14393c411cad57bb3b692eb33289adcffad6b652aee489a2b5e1f0ec130b98449de13a0dd66eb23111161eaf38e9d8b4ed9cafe95af4a3d0838f28fa41012efa011a8a31529ef3beff6034fa5841219157f282f7c39a52b603f631e90ea4685ec5f8170703d975c8c91778318e3be216398036b66bc7094135916ef3b26516ec574a69548924f981c903bad736d12f030c5c7e30f38c4efb98c78a6ee8a63308975a51abb818d6ccc0d7553d9226dc53972ff7813f4ebeb6efd6af30638707db35dbc51e990cf0779981deccc9bc67a5ffb168e56dfa2c79a0317c51d22ffafa395ab2a047863e555377e86e4d4ab8811bc64d4aff9ba0e4a9daa0c38ce7f57b45ea70a4963f9e15b77f36c192d3c3411ccc81b69ef132f6801821fe7c23c514d5a2cf2a13afd9808a79c0ec969c4c1b2476f60cd6ce7cebea996a8a027f18323fefd35031da2509c1c25484176267a94c023e9d29d71b01132db53aa51a732f0796b002be990bdca988bd1a949838990a3abbe87ae6cc71b3e7c7a3765bba4944fd64d4cf583b192b503caf81343241350d28cdc77804857f6c39875dccae83f4834bb8b108261502ba607bc2d8fdbf04fef4437a59355afe290b4f016b8b3532f511f494dd480b5b6e8416e477ada8d7e12860cc2ed3302f941fab2bc5e81728496ad7098d55b575fbf1764dd6a90476c71d69b5f2d264fdb9139d16e87ad198d146612fbb5b40ac00cce3abc7b06ae001ed2487100a6fe3579f425ce5dd453a930931fa65dfa0668adf8f962d47b2273b7a79d94ae19faee2d53ba67a84e6676869b77fffc2d84b235f6513890ec3694a2d615cd95e2ee938c05c6ebd35075f4789d7dd8eb5828ba9de51ad5eeca1b94325519bac130f79e07431c390e2db3acf38a9f5aa465aa712b7b13cbb6578ee2c2f610c21f95595fe1dadb766d101649048dcd2de24c3ce63ef823c01fc9827f10f8fdcf1061a8747e1b1c12059cf6597270462b92fcee694e1d2e27a7af44b2b02ae025b51ef3c479a99fadf2121ba02db9fafe68fbe518679f3076c45948fea77710a984f35c518c3283f7aa1b339dbe7394883fd17d573fc08856fa69d6939bc9505fbe1bf3fc6155d9a1f48a677c27b1ad8cce9ab0a8eb879ba10f4e414309805ae72b4611a7e3f60180d708862d2fc7eecd60ac385fde9a48eddda918977039877cf710d802bb1935dbdf4602a07c8ca5c4ce7219bd16d924243aa24d0797319c1fa48ecf92fb3b8137860098f053298c0e45b582ab8b3810a239980d5a03d661e49a4e1594affe99dffa67b3e990b79009414080d452973b99f4cc1aea6ebbeec39b4466fb193be927191bcbc3291560145b7b33d3f699634b6ab7ece8eb8f296f1dc93b8b5950265eb08da7e28640f38669e6a65f1f6c8640fbfa02468e55f88633cdd21e176de5ef41fd0589974222ac45b580ec97107304e23b01142bfe16534ffcf1dd30815352b1ff64d9e181de2d2493925ca013bb47a86f1c62cc171ebd54d41491682069f5ced2385703cfc04637e81fb187935053ee3416d43d8b6d88896fb8d6ad51cf37493e77b9018b40e4defd3222c97b005ac996fb984f968214790d48ff7bf1f4835734e0cd91bec09ef1cf1641c31d0739dca03ba1a700b359126a4809a9347b8ad38bc26eaaf3ccf137357b85079525c65bd06281ff814d70ded195f80ba0e07ca6020f7b8967f5cf2db001ac22b0b9e87d379ba4233c9ee136bc358f7d1f45e35e47463a218fe50dacee9920bd4c39ef1ef8b2574a81c08434e8c584827552b57103d3c3c46bd25a286a9128e9ae0bd99dd6332ead7f877106004b3b7daa694191d1e1d1695b599fc993dcf90af90cabc96d62e092f0666f6d5a72f87aaa067f784efead9a1ba396665d2dec5370a227e093b9e8c23c69df8e79737ff23b7f77c733ee3a7155dfdf56184defc7b7dd9ed714bb776089b946b8a0b398503252aebc2a5c4d2885e537e0ed5db4a6f252e006a17e07e9dab7890f20c814a56811990430845da16a197479b29cbb053bd581674da12eafbe15fbafb753be543ff2b6a4c8316272bc4b48417c23f954b02cd27f3f99c2e615a5cea72ccf4d9c0c90ce724fc022b81db8d61f1af6a8e42f7471c3a330284c48e8a9cbd965ccadfbb03076515f1486c4a7044fe7ee692cd4a460671383a3d01c7ed730b1370f84a7b23fd73ed9bd586984dfa5f0f6119cb64e86cef9ef679263d6dcfcb9c7197cc9cf14c9bf947ae4c09d2f2c402c9b2d4a33a175940cdc24eef201514d511606e5a27c41cf32ba3aa1863e7f697d3529b53a2907c793616638fa9cba1367a4dbe16e887bee3e005bf3ad6533a052b4d0167290277a56e66d3a535d2f0bed90421cf7d48329df08a605d8a87d509113e679f782772b22d158b6445a65ae5693625130af474f2fcb867870524bd7ab152e12744fc5d069cb7102075729610c6e5aaf8354154ed026fe6efc38ded4decc5467cc15f8f1dd1fc4df6c6369a40c60c913d57bbd90301f8879115fc7712031516e1430e0f37d84696193de28b49dd9a694262ed302506dbf3ae9a7bd8f1605ff923eb51c11a9b1b5b02dd2e1bd556cbb2d31aa6b4157630c36957de51ed50c01d0c81c5b5d66b1532bddf3aab590084bf6caa439b1d72a656b9880833360a0e635a53edbb0e0761f1d2c883b9d15688bb069cc020b518602e3974b8ddfc60f9e1117b5aa0ba753cb8de2a672d0912160fcb3d2523db6ca4b383773b44d48678b20356a4798c4a9173fb6089934fb17e54cbd75515b47e6a06712763902a3a871db0e41bbbf3eec5734bcc8616bec239a5c233cc78da19c2996316e0313398c021c544578dbcaf30d6cd9db91a94aa5e02c11937106b29505c820017ff4634fd8a275de77897aea743f6c351cbb824fc4a9c415ae3b0056df98dcdae78df246e568d716ff587ac121124a719f87891cd2dd5339cdd4554e25e5f0ab00a72db4b525b4e95b5eb9f5e26d78ce0afe9c7622e215650508af4f9a42075de18fbc493c372675c72ff7229f508a4fad1e1e35244b9c7a0ff757eae5b8a595cb792387df15ac151fcc4b900ff8ad62a449867fd854d3646b55568edb4fb3f30a9534ccd43fd96b4e86843fe0c8f243261623e6f0083ad61a443c4b7844cff832e02eac5be6e846b1333a0608a916d32addde09aa17ebcb2068bc3f6e8808f2419641154bcc94d84654075316b131f92ecea0370f9c106bd689361ab6391f0e21af8ceea6909d7dc836af9630a77231db152c18c09e1769621e458d28a9bff71319c12d057320763a3929cce260bd4cab0cee2e40d15b17c5506ec22a51e82cc8151d387a8bbb18dfb4dcf0518ccfaf967f4e034d3a5aed3d15a4c7f6f5b47d033c0dbd732ca4840aa2fbec4ac391c41dc4945c8645e72afb5bb91e27c12af27f636ec8eac6743190c278cdda7976eceb0f0159ca2b05554f161f9bee7e0cc29e8592e8470aba4bdd1f631362fdddc23b1c1898fa668be7d195c7f0837a4c67b0a15c8341046ed8b74dfadce09b46411bd4541716ad7276b282084f87c0f21c60fcb92111fd7f11a59d21a90d98c06bcebc353d500c98414ba8b2713da0c8c7cd2b11dc0f881429a0897f0d0cb79eb7af905bb851881484111c03c3983407296f716b87d2e5e1c2d910adc78d31fb29dc8a4b956c5cc0e0f4cb46d975589c260514558ffecf40eaa0a3fe4d729333d085f79647b051431e290dc6aeb663c64ee7ff7fa5d5bd25bd2a88537f6ce749fc12b9236d0ee44f7709086d4e41a9031a0358146b12f6e9deb51cfc5047f499b10dfb4167f31b1b0f01a5454c4f47be1bb56c3750b18896f2b04ac6929e2b341fc6206a47ee5107814fe8401fc3bcbc375de22c9f2e5b021456e65b38eca3318aa082d67cf126a6a1cf94b5345b629695b5f2af87ed0021e22caa632bcc35257c3d7238e7f2212c3a4a875970b1240a21d3303d2189b3e75235fe6418f8068a54328919b1255a5689ec03ff34a40e46319678584cf513e21365f8870d0715cc90e51172fcc21ae65569d36111c664e3321270a26e8a91acd7331a39f02ec0bfc4e33a72906e87c606a1ee6ad01bf6cfde5589d7a1c478d6eadc459f84d3e3034188a72cb0bb29d03c198dc6af9b3bc9d38ad5dc0d042a1b2e350cd082941004fd45ce819cb81893fb261cd3d981db13f21275d466206396190e505acdfeaf1b2be3aadacc0f301ab0046f7f467b2886c2903c9b68fad6bea1106c034e75e855679fce1c36b34d0a534336fe2f7f84150e3e1187aa8c5929c4f9880cb5e9c5d52465f7e90077c7d44acc7574da60c6392feaac446b1ecedebf0f444e1f8f1240699b3cc14280a5cdc9fdcb24f59dce56d66bd56131543f30fbe20718e12e3c15e93ab1ed80b8850ce54d51bca630acefe4655d754d58de765feb112b9d46981fa416caf9950d4804f3093bd7671d0a9eb5ecc2692c03a59f9ae308afbe7ecd579116f6343fa28c2d8a9a79bc18356049acf3a6300fdb6c51614ed55a204974518a33a2dc1be9a48197e7943663371aa2161c39ef95b0a9fb41dfc7ab2325e727b7df58152fb9e980f1ff5d86207f85bc8b26cd18c9b85b0c6e8caae4f42759f5ef6c8684947367343b3a52ab23f4c1c47a1d3e566711f4c1885ba7e850d1da47c33febb8084c2e9cf8a9c135d1163c82b9b0a9c6e47da0a2f27ef004ee6b994ef66d81df696d4b4ec4c2126d2d3368d1009f5cb7a0a57ffded9307314d8c4a21803252c6f170752b904e9126b9a0e25b810a68d5342edd99cf193318c7386ff668c5848cdae08e98ea6669d56fb67079751c54e3b10a02c166bade40b4f207dbfeb24b8584bf9d9e37c8685986e4f1624140b0bca996fc65c59c3c59ab68175bc3d8cd5f1f716504ed74b580a3bd900c52a904b9ad11e846df317d9140c3e8fe91f3d17ef136cd8906f54559b010e1c72ab3ea49dd1ab84a35093fc72a7afe87c1e34cbdd33bd926428a01588d6bc0d1e82f493c43e3185e806f8aa6f089160c22693c0b55ab39202315e3af52ff18319fcb3c4452376d34064e7f14260cd54b87c5e7556bb67e2c813008d4483aea094f75e101fc47d08ca69db2237c94a2352fe2c439fa3a0aaf6e0ba890a5e72d9909cd76328a6347fdb0d9075fc0fe5357be1668410dc3e0217b7e52343dbc893478d4b0b907cd8d0245bc3b24f3e003d70b461c445a4c6f075228e5ebc70a9153e5d27322f9ec268a8a0bdb342653c1803d6df36ac85fa94fca197c5283cbb6d8ebaea8179f11290d0160eb6a86be6184208765d10a978be3d88bba505e1884711a5f62209b3ccff103b3b44b15703ea97df2015c3b2a1c9b1fa8fe3ccaa77b8bb9ae74cf04e6205a12b5785570811a9035b53508d50f22f69ded7fcb0179549480d670f4af3f4e1b0a35057955061590dab0436de48f56d2cb57a630c14e673cf4e856753d244162cb4a90d47b4ccca567e55ea06f4ef97290a5db34364bcd25f934beef01d65b1ea5508336f95b0f942d92a41a10dea98ed5b798b568093cfdcaca516ae8f8b351d16fe7071ffdaa6f85d0cb11dae750b8172e3b27e9c4ba57293523b9c43c4f131dffacd8041a2f385151c6d1321ee23547b58a15276e432146fcd612c30204254857e3615489c32f39ffa546da03901edb18cc97a500bc297fa4c349b74bb1161a72698cd72ce1fb626f41caa74c68ecdda60dfab4c444da10a91c05732b52506e5956b6fff61d489ad23a745b1f78cab0880575c565003e8f010a2cb089f77eb45a320f32b2d8339a1e11e7dada55107d983f77774180a017e8fdc87d7e2e2a27adc80f6c6bb819c6bad3d6fea0cffb60cb7c77ea21de87b7cc4129214f8d064b113fbdb8facebbd97e45257b5f5123b8cf4099f5f7d17147a44969888bb95e6e94a44aa178cbc768c66fc1b6293abf1ed6ce066167d5b01a85da8a791392393b585fd3db54b790addebe7bd73ca33d0460f9bed0c7567806847265226ef18987ea842d12ba7bb231a4a83d295416d1e722290161a157403bb89b9caf06a775d7cfd7be82d0325a9603beb3bd31ca8273dc403ac115e23413bb50350a0e556651041eff34838812b37ea18c2dfb55e6eca3886e6e13b36b7470fe5cb6dbf4761d0e44583934f5cf2935e6adc50d6ee8a9946d2d9ae5c4d9972d586698d1e319ca1f07800e9c430f48f50c5fb706e97a37ff2abbfcb261eecf0a66bab1e76e72634844f7ddfe58406f8093a2aa4968a2f5d65facdb96bcfb2597fee0a4780275725b743178e961b5e1b4fc8f1a1b63618a155182e878a4de7bc8c6f1241e8dc9826538fd606b604d0ebc4e6a600481275d9449725f102a8ec1ef81947d4329867a48a434852d6da2ae6f6d2387035b964e1c38827b36779e1011dd284c3fc885a57b4f66ee6e107058c0566f58cd1d6df5b5bbd048bd6dbfa26d3e5b62999c103d280ca6ef2f969de93f612985074f7548c3b42f9f28630e0a0e961cd6834a49e420cf14b05b9e70d1bb1580a48709601c594425297845870adc2efaa293199bd0afb9137aff5e2bfc3c3ca60db7b1244d5f9132eec5c266c52fbb9dac661b040840c653ecd8eac4ccd8d7d8ef9977d7e2b590f1d60358fee6509778de6794a1fec9d5b9482489b8341b1d4ffdcfb7c35a5e6b67b259e9c41c8356c7cba97322fb66cc3e376d2e30d2ebf9c6d5d04c2f9a8a7c771a2b8c00d703dd669172c97540a4ac27ccc1a8d3545704b373a16252cd46f233a13dd1779209207c62b05efde9692f8e5fcc928e000e4bf2561cf019245cfb943c61449651172d9cbb23ffe581e65752834c8bb09c1a4601802eb3a404b319237fd059be1d58f557986be16629f30d8f194b1e5076264f1c9c4c59191e7b370a84ea78bda8a43fa8eb6457d9f8f8534a3717d493a593999df0aa61238d088d31c6b648772368b11cbe9f03e0d2f9c0209d7c5122445b3782e4ca851fe8856c1d4fe99dbe600f334997ded10584c9dad3c2d5fb5737bf2619f0c7c280002777ddabb09d0f13f42f0a55a16306e2522ad55e4154e35538a38ecf632f36a942e5e5e0bf1fb4cbc285f47308f0a669ded113bf3239bcbba0930fe64b69d131e4a40bcc5bf0f2cafa15b0ad46026f913689a1e0cd386479ab948dcf6e930908b8dd9339377e43cda3b30a43378e29465b1c034ae2a0e50cc4343313e61280b2a52b28bc4bf8f558498ae7d9756f0494939bfd014bff8263704171f1978319e8ab0f719b5adaddcc14a625b853cd6428ed7c161344472f6af53bed64cc210550176c6e5a269cbe68a5f73c6a0160721919562ecfee3299d4711c5033c8ed74c162aef6fc63ca7a1eebda5ee78a9d97961a99e5ab668390ce3f77429ee6f9207ba361114afca3c5d5d2377ee5be4bf09ea0d0230bfc4e4db755cb6de9163a4a89481ee2d27f1a2ea0c81868fa2f3c6db90395028c0f861a9af0d4824fc21bf0de7f569250bd34cd8f43b8988b27d9739e9659fa459ee18925f438ed93dcf6cfad2be511fdcf82e5016cadad76fb10e6836a0fadf5399a998ebb7cdd71b5aa1ebe0a8ffafb0f7c69ffdbb6a1568ae47d0c62c45c444f6ca5e61509c773b5804b6dd833db24683332a5c3922d6291ac532f50de197ec2a5cbbb50b47a016592f790bdb6d3e077a190d1d07fd761e7bf53f59943b9f6515543889687cce781b2e9df6d7bead3b6bd80fb25120d3bee865e190094de8455f07429d779ea7a6c09887ba58ab82b7e595ab29f936431c0b6382d8ad028a9febefd7602df5d7aca203918cee97d0126745a98a171225cd14e93bb39c7d1532462dc7a6566fc194a4aba42f0391ba197bab618d50b99beb3780782a150bb311d42988cadf5128b510aa5a3571f3556fd132d71a3f8ce6dedd44a8ace1e19596c2cd1d073d7abe32a6abb06870e981fa67e66d58e6b731154f3bb7fb5ccc29274ba0ad33cc2c05247d52106b57cab26be4be2eed45d2b8d802f49ebcce1d9ba74df2ee67872c06b9dc0ddb822203d3b4a47f87ab82c2d353444f9eaa7ddbbbdb5c303e3cd1b2ee7bd076bb02e86eb01e745734ce18294e9cbe75ec74860c1d4f9b1e3159cf02259c0d478e56e4d208f431139bd75e98e8ff85e1e52bf92cbb5cae2eb5baba35dff57cd66128bde375bb721b0545eb2c25dfcba6bf493fbde2b29846bd38528e1cc33deb70645e3b2f1461549548186bce7527af35364ee55986c052ac860757847a9ca8b450a6e0aa2db4e67d3e30b3853150250d36cfece41aa5796db0e49687e3070c0e59ff9c9b96cf577af98e9f7a864f38527190e172f4511bde8b4f7745fba6c6c983f1c34af4bdf279a5c2b9ff368c47a37f202a7c1f7d3116a2ad495a12db92e202b7ddc666b1ff53e946cdbcc1b68541505d8ff521c36204d4ad8493c91cfee2a0224482c34b679da7bc293ff68f26a1c7a781fa01e61152acc12b4c61bfa1d9f572329a80c0a7b46aa75e5aa5d39654ca680a2732df254ad4c334a4a0c84d6b95fb4737c78c203ea29b96943a5d0fb1ed85b9398cda95e3fd7ae141652fab31ef2129dba1e75487a308832d1b3066755f095d6ee4606773b0b46b894e1e13b6a335ef03664492efbf6cb62da85b0c29e23130ecc08e14d08b24f7cc6c034166f6b8dcf9fe99b3ef4e628814bb8898db120a704bf115685e72503a9d14362ca16dc75e5d174c6078e3e0dcfb20f2a85744a765605fc6e80c9e0b37423183d757d2175d1dc8d8f09e873444100670cd6cc69bba04cdafc38f35aedeb50a7467c25203f1445f9e9b4d6fe9e28ac9da90397944a2b66152d5fa7a081803292f3edbb86972bdd75e6036d7e9c13d5aa66de66a252766f98a8b51fe9c2196880b3bb1cd81609bbac7982800c6713af21d74fdc7d02c3ce2640980943fe8abea43b7e9523fd731734dec2117d7bf5817be9fe6afebf2c0348ebc84a9a0eeae6dfedaea013f3394b326c9a39a3ea971dacc261b518141204a0071f0f0f53334e67b365b5afd084854a921b5a993f71586d8fb1004fa807f47b4ef1762558d92cab039489428bd2e39539ee5d74db7fd562dc1a57b1aeb5487a4ccc538d8c8740ea8cdde61c48bd6af8e6155a0f6bcf458318d2a442fe8d6ac17287151c82e40bcc8671c136ad463a2c66f43698674f4e8593fa3231ddac6962759e6b73266b2346b32b2457563447dcb3bb1d38d93a46e6b96fd2fdf11e2b0a9fe703a23befd47a1f70983f3ae20aeec07c956c01eb542507dc27535e0e68fb21943a30b4add27202c6910d786a507667c786fbe2bed87fe126ef1a71136ae1ed64225b11309fc74fdcd536a64da01a8457eee79abfbffa641e03bb92fc938fc097f7bee59502f22e163ae49bd74b57c508b8174d201d0a06e811743184b106f3353e1577c70b8373a87922b396809a7a1e750aff3e79114820ec9c2c6ec6fe337ec36395044449f62d4177bc9d7fd94a56e6b716cdae111a8d8c2588b45c65118142cd904bed2bccadf71cbb65460701c3ad9a37a1183a08036a2471a23aedf7fc6f9018d664b16421316b1b508279150e0843818dcf87abd8d3e59d5e219bb1788807e313006b3154ada062c08d8723c71156fb78b0550df939bef39226c2c7066dd01754c58d5343db81640584b51730359fa09b51aeae81e24f182a03130cecc36e347d03cbf5a8744fab69753a42c196c97f0c3c177e520ca6076a384024449cdcda2c229ec5f71a4ea0e0bf6826e4813e55285b7171924cd34e0be979d39a4947688854e3fdce90ee16f0506da300479eb77b70b8dfad7ecb471a106a37c29b6137ef2ea70ca1bfc1eb5b76a10105648992ba0539109ce7f34948dd1eb58462052c07e733879b5bd0e7a3b58ba3a33794e9b21bbf00729e6bfd9130de430a15df6f411a9c5d59e69f4b1fdd2803c800ddc3afc25e4d341def90cf6da5966e80f0d1e2f19fa0bd7c9a21f5383736b4b492d0e3f07c9699969d8fdd085bd846ee416da1d1477c7a8723a998e5cd7591c58d8c3c71462e4280d3138e4d2c4fc52f544697217964c84cd3cc560f083e7da2d9905345b2d0838c34c4f3b55231084bfbd115a01423bfac6f23f7cbf6e88c79e5056c42d0f23c81240dd4bac2ac49d19c61e8fa72bcb337f39530b0b670ebd5b651b3a8cf69d47e581a9ffade277dee492899b46e0ce70103fadf7ac61460e36462e4c674330c02205f163618e22cd0d882e0644e48f29846609b42bc5c562f03f7c21a7a854af32af940e932eab72847cd6320a962ef737e66dfb2d6aecdec86aaa5a9b0b45049b361704b8598eb41edfd262c36b59552346d7544d05d876bd8bb01d31d36bc49bf19fe76837db5b7c1376b86c6f19ccc9c8ad598dae82b6814dd7e969ba12a947cbada64f9e60742a365e4ac8be6a8e352c1ebe785edd0c63ae49f1988e1e9a625593f9c38f8c635e2c0efd1bd337e0a302fb50f5102d1712de7ec68aace1d9083e40e6d6b357f03d4b4846ac8f2e973b5ad1e6719a811f593900cbc092007a3fd8a08ae432777454e638fc251be61f0b088ed05d3fd25912e03f73d2a37071c4aef9c7ebfcfa0599b3fefce770a8ac1fc913bb86a2b67f3a449f593c6903c01a440e0fe5545c39367cce1c164fb3b3ac5d222ec6bc5891f2db1ab4c38a6bc3fecb704b6cb256628746a684e67f2d6795cdd91b0f29d607f0d20f879ad9f3cfec2f6b96c41c0924ddc86925ca682483646f39b10212068f86a57fab7110636bc1f6d9b8d69ebbcdf9d14c717205ec624c26ca92a8b21c3b76306d565e426760f1a8ef493a8bdccf51454c50ef67e6da9cdfab4f0999d0fd5e52841c52105cff7e4edb5cf9f4caf0bb44f89571a73039391b7ccaa00cd6df4445d0b01103486a4e4bf68e6de8ef78184eb1a044eb88594694373ec5a43667c5fc0bffde3b44551f570ba782038ffa26d7fa5e39a047a7f2bd5733eb6a5d4fea28f6e3e8b0700a992f6d7d7054c10f68a855fa8833abab73bb00163b9542420d949b361adb225a1e8b68741ee0392b7c934d5571da2b2e1641ac55acdf935235d86f963a092e27350fa5951305d086fb2bca11de0fc62cbb4c8ce906e66c55f66dd807b8c130c835f0730f12645e17beadc02e4b2e941be806db18e6828de1fcaa15606a60c8500798ca033abc22a1f03e1c8d503d9f7a228743644cf8d9ceb686e89adca5a798ad203e3a32333caf6b722635f1a091cb176c732d04d3ab101ce0f08ae4bff2dee2082e6ae9d1c27587b7c40e1ff0af20e1958040e87a4260aabc011cd3d03a5674518aabe0aacd95d685f7b07d5a203a482f50d1358c8aeabd712e1a0373d701ed205e458bb9bbdb4236f62da38e6e1a6d6c6f5bb9428a73c3a2b5a09833a891da3ee94a7776458f5e3315bee631d3cab155b4b2be965efcf2a0ef9ef1197c91e78e4371d53e84b30ec0ecb0482df3e10a95bc38fdf3067662921342cd0ca0a1932f5a0005f1324b66951e6c6ba5222307d60a56020475821e37600c73b942a31a3f6e940411fba4b3195a8b41efb3b36f1a391443a2c944ad1a94d419e2822a690b3bb8c024152363861f153e958c6231c7136f3b58ccb2b4e0b376b4900d6c8e34869cc3c6da57013e3bdebe474a911df2435e731cc91946611db27faae05edaaad2941d99699a1a166f957638656662f14a66454c7e30d83124300362b798dfd601a419b14c7b2c4218465b24ca22b858db457cac1babf92fdc94e2d5d20c07ced7f9b3846bd04ac04c39e48c38bafbc2dbc4f136f7f4c6b461b102ab6f24c2b0c9a439ac8d80231fcc1216cc54dda275994c8c4085707076da1d946d86c6160cdf05c8702653ebe648c073b1407d4bbb702ead1dbdb7391b07fe3a8d2223a4233c77b1c7fba96fa9a2d076d3ae560a5624f2eea4d33a97ae0709dc42fa478cc4bd0db118f9fe91775632295d085aa0f833baf0602f52f2abfe70d7de264206c8d445f4037b8bbc90f49ac8fe98665c2ed6304456e22556536ebba4d5c378417abea581f56399e091a3cc39274a897ac7745016d42fa55d87682d81e7df514982a766b74783582b4e8b9444a1c414e92053b5d12d2a4e85eaf34161571b9b68bffa8fd59960c9339598e605ff2123506319c675b11c82acf9ceb7eee1c5f0ed6806d61e62e31881ff4f78401ac7c3edfa076796bedf70a35635336b7528a2a7bc846195e337cc62ff3c76b542308e991501f06ca45f0e69a05399a13825fb1917a3cf4330416dfa4e5d852a95a4bf23254ed7cf351e12f0b9a8b566bfa211e95862f3fc1045d7e690a293e29a6f8dfd73498821a1607c02bf3eb834b143ea6fb90312493fd9b02aea8386f461e413ecda8e2a20e9dce6dbb1c9c06dbcc4a78c92c4345e28f959c8852a18c46893486bb6b01068e77b491280bfdf60157339976145687cdecbeb021775b64a65fcf4b7dd96593c91576bc4110ce42390255bedc28a6a7ce1725f590babe5d8b9c23309c26758e0c1d6e4550fd3a391b9de84b2f9b333578d8c15e16f5d047de9822adc84b20c0816ab73351a9177c1c77d233666d8579ffc329dab238a833ad7afe8364d91d6cd97b0064682353ddbf6abee937aaf7159f1af76ae59852040a76ece15d098198f105f11b375261e1b2bb80630f9e9469cd5e26df575dbc140fa4d3e0b4ee19304dc4a8742ee42a6b85aa3699b8d3c61409140a0a82db490e68fe7e98d726947215662af909b0ed9cdd811c74019cd70083544217371cf295bd4e982c5bff3b63a8fe09f04d9497aa1f5ea85f77d14d221769988ff23b71915d9bcdc6f597ba46e73dd2d77ac7e2e55afa5e579b3749f1df5a48d510cff5cd3942a67a3fa18d01035e28c4f1dd040c5e7b674ec3fb6aaa4d470802fd7bbeec8e575e39f43555a550a1003b4ae26d766c1b13773518eef9d6f944730c005f6a87ca563d999a8398515a99bbb4ebed928c7b089237a07a26d3142951d0e11cc6213cd9be6fce10f65b82c2f5302d4fef0f033bac6b3595bf56092c86e69e716349bb0e673d6920e57d3dd01d270501c91e2d4cb828b141b18aba1877e7a83a3ec3758a64a88ec6e53de0a230ba9dd50c9323cd216839a3b995351c8db2102ca7a8de0d414f12586d0ea9525fb7d6e9213bc7eb941d1b2ee545ac3bc500a5f9d88bf7181a048bc4932801657ebef0c3f391195f4df673b734877a3dd97c3f84d4d98aa97c2d5ca98f5fd812d9bf514108e1a8181b7dddc72ce404aa90b7263d9bb5372994575b93183376d9575c5f80354ee7d1840bfd12c37abd906faca70551a3eaf307500cac665b8d17b3fe0578d01e8bda8ef0fc627e04efac59de3fb9e1eaeaa2e9c060850969fee40915f5b2ad62fea7b0ba80c0f89f0e01dd24b1ecf6744fae77f42e62eda1ab3f025372fbc4a033920eb2a67e3d598e19db4779e534928dd2d58a1b236e2b39f875529cc2c994621984c2205d4d76cd16e7540a2c4b5aab71988d7198e4935700c6063915bf0f22adbdf34cc2bd5eb9b869abe78e319ba74c7dfd268273def2126656877c9d9c3236faca497d6a45155da5fbf5f9ce4b5a7f805f43058f47281508b2fbc1fa96ee89c8c0c69265d5c7d668697607d1ca5e447419abfd22772dc682ecfa11d236985da8ba69e9e6888ecf4a1a5a5393652d298e65f1bb7fa8fe616c8633a48f53fbc3c839a2277c9aec9ca587deea64079fb6c9467b4ed7c85e4b94f99cb6a0b21d47a0f4f9ba207e7049fb258f53860940fc0275aa7a76b8c9c75ba9b2423e8996a0224b90576e67bfc1671a55d97391787399cff04bd397f64036dccdb05c367bbf434a95969242a68d2700c7f1e9a85e5acb73adf39d8a6716e9cc9da3f6739cc4b21d43ad30d7c72015f7bb93bce8b137ff78d11deccb441c1b98b5df42d4e2fb48aee77b6ecb7be9294399652f3daf4a0e52a2d94215f300bec3517b34b275827eaa9821335904560a8004c23294a08f63ad286dccd59d95bfc6cdf9f6f22b1299ca9c8599470c7981ba6f52e7c1f30490cd4fc34ddce8f11f627471c0cebdac16d7f19ad0162ca54123afbce92acef9f37d433c5ea37d36a84b8b31acadf1b360edbcd6f620800c3961931f72fb93dbb19f4987c7f0ba6a678e2cb80c596296f7a20832e9bbffdd7f41af283eeb162d1d76e5cdf9f00e4a75ca893540c6f9523849f1013607449533d2014b1bb538369910dd0d433eec6c54a46bda9ddda5f097a7f85c975df1e3557b2e16c30966ceffb4c4071a52fbd96964c4547283061846286672e6757958a502bc39a78b2402cb4cc35d1bc2abe507eb4be5b8cbce2fa94a973ca3c1d50e655668a9aa631307665ffcc2e9f638e0c0c9510a29cb0797df11c62e7b6aed35359c1b130b3f8ffb81e443a8535bcbc47e55c1bf093d86813df0705223e32aa83ac27afd15854536a126346e9526b87f4d7cb4e25ab034303cfd0f903258a18c940e90a90caf2d5513a0144d54fe094b0e6474770d53debcb1113f76571c99f39c2b0797611ef1a40e5ebc7cc7068eac1e0a07f8761ab9f227b3389f4a2aa67a3daa8c692ebddf7bb2d9a5caec59d882dd9c9074ac79e3ea00a922a0304058a82657c13257af83bd4b9387164c5f25edb2d8b85a40f71d503137b6a09b4e3609b19550f84545afe0fb17cce69bed1be98108608becfb1e445640e123032eee2884e7b534f7191631b91faed473ac0376cdb8a98e4796a758fddd0abccb1857eed7dd83cd2ee28cd85d951e586d9a466e979e07fc2b4cf71161188f802bb69c064f0f37a8d6127ed375ab8c86483dfb1da13aca4837d7610572f8b43f5f37e839cb5c5dd49e9bc46ecb5fa667178a8f2dc53fb6d0068bfca73cec5e9d04570d1ee98452e4613f4188b9b2efe2a6ba2f310ca30677f0e3ab53d3adadb93dc3bbbfe6376aa572eaf1fe482e6048c74088e588079a2def833065c3512c5047dbd0ab8c7f1f7bfea2279f538b7fd75d1eb4c2154a52ad0228a345338dad74e41d90d72b675b44ecaee77dc50682383a5976d2154a7854bd914c475f14d076cd0a917e4f1846454bf4dc2abd32230ed9d6eed9d9ab6f3f3bec0772df09fc6e677722cb5b941918d8b95a11c7f337fc3b4a798fa856123a940713c48bb52c17d487682cfde0f6b2fe13be2018bd6d75c265fa1075fe7c9162c2ee5c48645ef34f98e081a39ce71c1085d53ab70ad39670b68a4b260ca714062b970abb5c3dbdbae03010653b19dfe513568d91f0351b2ee6946c92f42fd021b13b4a4f364e45dd2fc4b926569aa9f026394fd6ec2d7f7f7c0ecb71680988111aaf2a1336930f768cc4eafdd27df7258ff3d96076317731a10b93f41b980288853d007a9c153cf3fafdb74447f7e5b7dbdf26b1426618ce6b1247466e0eb5f35b4a609af8e9944dc49e1d6fd8d551a5a79912fd790db553f7353c4a1aee2ec6003e0db003a3e82d26b39667750b0dcaac9a53ac0db9b8ef4655577dad275dbc6c76f4584a3dea7ab525c3fa39ecbd2b40057f4360f0d28498a43176d97a0d38497b390f8a4f300f5855a4150f81d8ca138fc5e3cfd0e3ed474aa6c0567b890080a8b28606736d35573fdd37afcca7ee7b4f6d7f3c0bd20499bb22e2c1a13f6c57c8eaae116971bc8ddf6f22774faca0a5c53e2c0d4b0568ff2d65e10fdaed1bbed0de06505d4e42cbb99a0ed69ab5da0b9b2dd1b56b4c12cb6b1089096ef615f7f671ce2df518a318a29aed2a09bf4b71c5d73f92f51001595813373b4fac041034c854fc37e2dfb0c44758fdc8185c914533b0532ab45edb9373bcc84d262dd7e7dd9269f00bbf4889011198ebc5366572718698fe8d547d59feace21247cebf39315376893ed62e0444ba8034ec9c64f81c6dbc811dc01194e73dd1b1794892333667a02ee42a9210bb2a63423b102768c505809754b3776f4c793ac914908aaa1c561bb925c0ec6643b6b6e4b36c5406f0971e1cfe863a3cfa7f0bc2a71741c56390b85049a9077547729fc9722bd2c98fbe2a927d428ff96490f13131585b1dd818a5fd91f63777654a12cf1e4dd6ef664b85c25d6c0b25480a6cc92e9b559c192eac884944d94b85a79431b196d17376db12a60770a001d9ce8984a767e43821095d110fa9d61cae149456c2193243d1bfd3d03118f7d0ae6695fccf209f89eb73e2d530a390cc36bc157bd3431e5498ec5b3f05d5f725a86774b8d4634e0bfeb5152eb1c7d38d12d20cd16dee6f765047cd5cfdff6d0bcf8863816d66ce887f9188baf8d998b8e19202f5d638066f245a0ab890c691a679d17894d112e1881450446331c7f9b964100872a007237794a3c95adffc11cc620830e6b0869d6532b72e7a8be1b84ec909bf7544c2b6f5a7dd3a399f89e87aefb272d04e49df051bcebb8f4ea800b911deef4b49708bb34e6ded006c9bb18c98cfea523c4b0263f40ab8cbe80d3dec8e358f136b00cb59495cf167b753c07881e92c07faf46561b173ffbbe5d957fd962416e96336a6118d6e4e52c3e3accf8d29366599e8653aa06c48c8b77508df455222762bceab8d5ad945f6cd73bd5efcb9b3b78bd76d9e04d190cd1c0d443495dce3cac24edf774e07dd0f68c5768b6e99371875c063cb5bcdfb22f616ff0a126671960ff58aa65b5b7841220a5b4f0517ca6f5779823482aa51395f9c7ca245ffaca0c5ff64bc46e642c7a630cbd87b7cb96613b0c3b8f483a9e8408e3de6108791a29b0e33e13e6c090f0f6b80109dc2e0463d81469e0e43725624d07ab89ba1fa5d857787e936b07d0c6ea5a557dc0bacca1f6aef30623a895144203d3614bb3b8e9fc01ad13ec18bdd84896bd03bd620d84b7095fdbae946d911067d62a339962a59d7266a347f1ca2866a5005800a45dea9672382528f972d062f41e48be3d1fdbd71988ff5cdba816d35ee99b1540d3228df99754481dce6a9611bd17ff4d9a89768bfaec69cbeba77bcfe5005ebb2bd34f6075eefd6582b7d1b9e070890cb776bbd0e0f6b99f37ea6be7c97259e722da2e13ba5246a846a5dfa8b979e32dd7cf6536f30d889ea9fe0b1354c78d95b906f6481d2abfa5e0d148f62647d356d85c51cad366ea54078298dca2a6bb68eaa8d2b0191ffaa1f465a0e957e419c9dbc87251cef695f5c3356475ee4e29c1e40ada51ea5b7058c7cb1e1ee18dc95e3cb64e32fe918ef81facc456c303cfaae490694fd8a0be89a25adb1ce4f8417d9e82aa2896b6b8899b9ddad615e5defbae660f2c3a946d0416e8d0c92c7b549bb218c3db4883cd3b2a9a0eb909d2928be9460ddd0264cb740964eef6d748962508410d4a093cf575cd12d28b46da6f393e45afd4db73aa96e57f9fd2b96de91e8f7e7a79ea2b7dfdcbeb45d017f46ab7e95166b783da67a79ca0a7dd859aa47216ff9230ed54361cb07393616f2e8b5407ff4513b8a7ee38891601aa941bcbcc4157ca44e9e0605f91a1fa7ef256e73da6b2f4c1d906e9552718906f92f56afa86ee34bb4f035fc3b048583302d104ee08320eba6e4371bd50c44a5e8f2a1f81c8063e7bcd4baf8160aebd4592f56d75e182f98c150f93c6d072f2ab2a5a889e757dac95fef993332cceebceaa15068aea11fba0af3a7643c7ab5d2b11f560805b16218efb720dd4cf6c6ec5d25e3afc697faba5b959a4b0874bef24165aa8d191b694cabdebf57c837cb77ef176ac2ff565b36cdabeb8042075fd3ee0e4b3967fa2670ded45c90055cc686d216b27996f5a75cbf22dc5220765ccf5ef937c53bf4755f190808afc88d813dbb3ebf55b809dea84870ed4eb76100ee620f40f72d81cf8feff0b9530b31092c9206a95df1c2c4c591729a55f32110e0649e6ad3b89e0050daa31c54d4a515b42fb0918edd372006f9f3cb29b84beedef321c5ac15c57f75cc6368a60a94e6f1351cf533a2c3163fcbb36c5c22f1826436f985c27086fcbad8ae120f825cc723392db1febbbe98a478c40c8be9c6ff5365c0bc210c71e28087a54240025b09412471e9a2b4bb3b88c7859e8ffefe12352f2524ab884c03ef290f322ebefbca101778e8d162f01cd5577fc33bbbb30ad808827f5190debaccbf3e1f3fe2249e4366a5287d65f3258eadd1d757d8a832b9b2303828c2bea1d56af2361440e88c94dc2065a2371fd7d70fbf4bcf5b457c0ee5f4910526e6b496974da2e33839df72594d315ec6eaeea9958a05df85b32578494a5c308be77a2b430088b300b8b37946c342fa6715af9013f3b28c53b98d87a79ab04eee2665b0a980be4243fd00e9f9e82427c4d4072e7f7a686b838adbd2c716d36691bb49a5bdcb3c44c1dfbc45aed8503b64565e51966f3060d22e87defe1cc59bfa7c435f031d3f77e96cffa41afaf24c03a96a5bebdbd22142bcc01045acb08040a59f0a9f358c5d35186b1a436880d8726d3df667694d36c97a2f99974e9ed16dcc36466ae32c384b5ad9e3e687b0ce25eeabe3032fb705e43dee84765ea721ef2cd9d7bc05de59e4a604deca72ffc92ff78d3e276414b8743f27772ecd3a3393e2aaa188043369adcfe5ad14554addc753bdfe53b350e3d34f7072af3694756c723e54eb547580c95d96e555c0a780cb2e7cd438313106d0620a52b396b2336ef8fe26868eeb9cc385c712ad83c93c614e4e900aaea6a0249469452f29fd3de0f7bea4b6fcc90b35995b443e55ad8b20afe69412c4b0cafdc33e67ffe174edd40364830117e538c102bee420617d0734f6c0b416ed79b7a5f7b7cd426c984c06aa59fc6b182b6dca4109ed701e603c70c92664773e63650e7302586a6420150e49d127997a1fa9e63b22ecc009445acf06f1bbefb84db8b4aa982b293d94efea3f35280b22864c00f7ee3db9e25163291570a7284ed122967a037b7365c91570b48c4893929aae4014c5f1d4b7cf042b144caf14195b04adab55bb82b3bccb37f48f10bc83be237fa1ceaa41fb7fbc79ae82196f9bcda559e11eac4540b09faeeefd7912a4f7232263a1cd1545fb0cf19d2c9bbe390193bab02f87606ffc325ce56944d70dd5c9c9e9790096decd52b38edf0c31f385c073db039b70ad55f0520c8bcc1f2b7b35f3361f927486b0f0d30378bd719f42c11dd2c5f32e90b8b185a360d76c0f7234925a957ce7e11d6ccae2f0320d6bf4b7430fd77077b0e2d352edae1e3e07f2036cf0cec6ea43700c7702dde765e232005632e6ecdb5e58fe46983c5124d140dd26ebfdeca17bf081a074be48265da79cda26117d6f204438f8c6fe7eeb1b5b20c3b03a05986ab14c000eee952350741bc28bffb51acf9a2064281c401907021916355203ed8ba88bb4658bdece6dcf53bfcb8e5eb4a5fa115966cafe6bc27512abc2e50dedbfb8d7956d5ec193cf55960738bf7cccdac730f45cab51d924bb2945eeb2e6474851830fcf3dd5e4768217768321698ed5d3c503eddf75ef03323517e63a337c31c99dbec5801e81137b6d3251592cf15e2fbc30283e6de3c696e2c2f2231d5f3208f14d8109c2429f82c2d011baac33ae96c20ffc6657bea603276900713920939bb4bf47285478d7b4a384cdb2cb1de2de1a82d7345adcac9c3913c17f3bcc95a6b2048c6199aa147bea79ed398a4193dd6b98fce5d6f2369ed7bbb92aab416a968d3ad7a25ba1b980cb206f2a5264dd3fda56a16581a0db44ccab2a443901cd4cc1321208c017c3a766e836fcd594610117c3bb6d7713937de6a972d31d4c337218cbf7844238a926f1d375b36b8428354ea6c75b6bedf85653e155337b6b8b2f9b24b20808582f702530f80c04fbbaf481e68f2fa4d0543f7a749e1537c0cbfef19808683f96c2c6cbbb8b985d04083b61f9f018a17e86e742f68152543f533d12b2e273a688c1aa473fcd2faae95a7c788005612c22348f691481d7b7e224763da2d8465a7aef17056bc87ae40b1ba00495c49b74a031e3ea1ee3e7092cbdad5b54a172b26fe21691e6ca8fb3f0136e12b3113a8cad9c291c1915f67d7c77dc07d9c0e35587cdf8ee46bbb38c89732c2a18d3cebd87b37d70dc4e5945cd02191a5d46420228a18bc5049ab16d67ab3c8406f3d93b32cef25e4357e8412854011ccaf19d75656357b90a748269fd2ed3f2ea45a9f2ca4c91350dec3bddb333712ebd986059cc18f5cfd6736237594d145a1ac5741d02452abbbf9f7b44d787a69ee4fc98653ad72a34a62cad1535cd2f5af3e2875315c88cea858c8847cac01dff01f7c5066222537351d27380d84155e9ca19b36a43d9cf8852e76a685e1d4a368c2357cf3d0b440068403c053c7f0775efc4acf30c586bd8aec7e37d49d80e918bc2d960a8d09eb0b015e24bc3af001226ebe155afb1ea598f122c2ce996482bd6f78a5be943d66f23f5e1a6091141e5ead82e98f4cd0d2163865fd0aec590d0f39a2abbba18de814c062440a2f43bad8c4169cede6431c1b341c80f9dc17dea0a421e5db42670e43cb3e2bd9e978abf8959a8b0c8111e0937e8d176206f70b8a203d8d613d8aa9e29a51ba2c7b08aa77e8d4d29673209c1d0629accd15aa92d4894ae0bf07695a9bd4eb7c6d244d6ab0dfbe00ac5c3ed68827f994181bb3f88591e544908023c9a30db6d5a57de83ffb8aae527f34083e6f0651385175c40e2f468d716d516fdb59cb4c3f02d034c3329758cebe21a3561a8a3ebf179011e3e25b1d0f19190076e11ea9b430b1c684820cf9fe83ac478a1e8c759d39669ac2674cbc3375df3c7a63a15246e397a82b71093737f8ba24ae406db270028f3edf768c0ac2fdec2ce0831146b208b02171de3bfff81048fe42cefb56fdc0d3b23f6849c3b44840667d06135747c16583ac51f2f2542f1d13ae433fb2b98d5bd9b522d130136540ff9441abd0c2da757f99b74e181a4cd426612963d5305118ee46d9e65d9712b7ce3fc5d0a0ed875be9a4fdc3a7f9209866730a2db5cacba7c9f808e5eb018ac168822cf2b45651d477e5bd856e34f8cf484d96ec106072d4892d00b9b4c779318f75ac15064160e47a2acef6b1ce8f96871f6fa78a2fd9c04a54953fab6272828771351d16e3ce750ed4f5d0d3e6f2eb7263ed86e2a0dcf1e1c88646055090831ccd3e72dd1f662ad9298b61d2b50c11eeb29a2fc18a77a32a8c7bb7856cd5b6b4ccd54f0d57d8b056019be672aa52bb13cfd2d1c6efb99711ca8051aa3ffcfe65c5ae603ae3f002758ba130c286da0606048e4d9052d289952b679778bbe97b998603f641b7ec6e37af6cbc1e2df0720f89f4b9605c15bdf27471a24cd0ca6ac2d13d69d736ef6bf06d718945413c88a3345c008a2cdaa8732fc68f822e0ccc8b6ee9d62c015d37821195344263383120a789c4f8c057e8ba8f7c70b5915e26a4dbea632c40fb4b8d762aec63abe81ffdefcf23b75630e5f6bf97a11e6c2e4c676d9315cb5195bd490da99164b20994807788c467bf368bde6ab3691eacc7df4501013b0cda2f48ebeda5ea415d3c98ada9bdfeee4bd9abebab511e8ac0ef907f367babac6946edf072d4ba410403d87d7f988943a367365da00489d56555e5ee0b314b27cc4879e8b049781a6d95ccccb522291ae6d8c42e7a982d83b6f8aef81acadcfffa53d68bb9f7cc37b4b0ae32ee6956e7df024cea36af7bcacbaacb53c5b122aec2bdd7178d9cbb457daf3f5659463e74b703ed83b1463c6c9500f8c9565ee84bda7798342436ae53fc24e312887d1def087472b8cfc4f64e4be293d7c067d185c71a2b94be3519d45a120b60c4d654cb6f8204c908363694a5729d30d5f7e48fa7a30823a4ee7dd9a4478717c9e7613172b443c44a474723e09eba90f13ffccfc2b1ad638f4c558398aa8f038bfea71e8e0a71c6a53f9e52c9ebac793e3b986938261326511507818ae8766f404ce6c5e92cf5f1963ae45b94a5e5a387b3c9f3ac9e0c36e4e54c211251bbf3f75ba91422de802042d55039cd052466ba163c2c7d51d1502ed06685470b0c3d492c131cab4096b45edd5764bea99d975e0eee9ce4bea72006fe9975cd7b58947551fad4933a262ac4fdf9705b2582a46e091570d648052b323a35b34fe89208ead8a602dff053dc2cbf462420bb96c0649f6a7a5a4d320a6b6fcacfdb91246ea8603e94756e4a8f09ed1abe9e072b2886aacc544f38109ac910823780d9763e23b62b0e1e90306646d73a9a2333d831d03cf47c68248cac2beb29fe6a7cbf6fd26b13d275c43a1db29a3e4e6992d4fee161c946dae082a1adab260431028c128de5290a8b1c98c64675f007882b6de87f6b3a33a346510e9d216483a2d3275ffdb5ce10a3d530c64e5e9c3b5f30cdeefe6d042b3c0c027953480f973c33471def45ebf9b63673fd4789f3fea7de76128899c08ae95c955fa6dd9915b9b671eaa5827e48785b48425ca50b1f53b3714f74bfb3c2db8b8016c88bf78e052f2aea594101bca1b8c0b6ed143fc07cf14e5f6406e4399f10bcc24f416e642da615f1b5d62eee5a3a4ef4dc62b908ee01c92e9fa7d2d5149570bae161da8bb4ed3b2c510f3e79213ef16dc5cd1c2e4a07add4311a94c604e58954e9eb59bea2fdd71adddec104a69743ff98d19e893e67a8c7c26601d010bd914097537a3139e4889b94983b7ce74a7cf6c9f93d419d7ffa66586638521b27fa44222952f360934618db720fd1f36aba65854d4c614a9d82b5931e177cf1d69ae628bb8639bad317f6f11978a97534d0d3827b6eafd605b32b6db7972c1ffbbcd0c3271c465820a74212858f1fd6c17a83909adcda581d5c5a5c53dbbbe302db8dc3a6e878baf7fade7077c50c4c83a6afb455080c407e371d7d890fed2dc7f4bcb30073e6f04391e66013fc9799149f23a3555703d20d4c604763ae5f35ead3ebf06ba20b7c68fcebb0310873dca5e559fb9df51a9423945ec3f87796fdd74479efc18b354546800fbb35ce3c11164f60f5ee22f3caa515c16a3ec8857e35b87d36800c7e87b215e8d1aa428a055e4bcf3af590b3ed955cabc3768e18f7a08548fee793a2a6c77af8f0daabac6412739056693e4a51b0603a139c7263a3a9676305b6c92e31b719f32c9d57e1ee3ee83782b60af45dea8307dddfe661852f531940e1af396053003438d179c439a106f819372c7d20b31e11668496b069894a425faf7a9fda6265330956f8d1aa0c76db4da1943c7f4d2ca5581fe9399d98b49bf79ec105ff57fcf8b264e2b7f76dd79823a196d429862119165fa8eaf7baeb5c50c5ba98fb36fe441e88b39394d478430457a7289afa1c8f3737300e64d6f93ecc7f304e86e5e0416111f4fd1dd1525ca2540ccbe5a095443580b5192f82ffd8a1a0da8f2166b4360d2bc07ef29b90b4c4ff2d2ef32cbe21cb6d0d26a2fc00aed4700fcd5b2e9d0d8043aa10b7f7f227d1a49ffd14a614b3e53578d2abe56d35ef7d18d2c704520c2e97619bcd9120c6b9b9220afeb3c9ca4709a1cc16888f62833d6bf1a22c6559fc761f088f793dc38628c3280bb6b142f9c3f749cb5699fcc3f714a635ef447ca7ec053c8f80ad6c1a97c0f83f2e372f37b54044640169018036f733c77c05bac1477e1137ccb0aa9afc7281b5f24168bd49505d00b70748da1d254e7f6afca855a8f41d470fd7fefde6664733b7cd32ba3dd17a88c21a4c30620830b97c940198c61a2e09efa1250811e2677528d09f8d23cf922e0e6664322dc9a97cf1f70a25435a193af2d60e0ed2a16e2045e24b5ffb1bddf9704b6d12beecc3f79d6799f4680b49f353cc7098dbfab3eaaa64bb84d29f11cb6ad32207017488905a8a83663c2ca60d9993ee69657a7d4228d5d20548cec348fae50611b8b25f1be5ddf300c1f87fee9986993f526e1239786183378f86cc64c64aabe00f17d4f631f1709556bd00fa4e9a836f29998f0811a7128e79f05c7fd88ed413614432733c9537936289194e746d7ec3a19c6b2bed5b5d19f043baa264b6cab98fa029a2a37d7941f5597ab31f2b12ba98e0b89080b3f8f03776f8e320cfc67bb73a827aef17c2f2f9de9da835382df4713e63fa2cee49cc4a0ee93ddc27e65a3de0679e5a3827bc472b186a8e2a0dd81b5eb2499b54b2b29906809ca16da7f6a8448c48e305c5fe1a4b08a32c6fd94a3b0dabcc2fc6e841521ad855f5c4a6104c2a7bf779d284a738797bb0aa39e3abf673259b45dff5e3709046ae878b409222b2611e0bd81b9402dc1166d18009dcd1236902ea392f6d9c0e19f6fcf125fa971b451872124e067734a519e3c75844997894b102bd727206c3b369890322d1731a01c610f9bc4ea217fc9852175b9b66f5fe966774ac817cf5882e891e68717abfc54456eb3af4c0fecc7a86e76951ae4b2c103da1b7891b3f37e635db23622c9732a3af141531fd71a7e76662264f0feb632b24eade9560e343aada3e5ce7eea7b21a31047457e6b9dc4c649de91606f025df3a8c4ae0dbb07075d196e83ba53514e0af6e19e64ed07a20623abc4cc4bb598e42d8a9fc320cab5d63e2e49450b82b7e6716f45067e4e73ae914f306bd84b63c8d5986dedf4e099ee2900911a8e908ab3e3254dd81aaceeaaf2c272fc0e0b74477dee13e3bb733d032cd1a43e771491099b51be7ee2ae7884d9d945594f5b4aa06acb8585a395d6ac163b9ca6b40d69678afcd2291cef3495b98e0b681de5fbcf624ae9861c5184a614a5babefffc1c6e65810989a63b3208c44c5ac9cbd5dad09b0eb127a53175fb6f1115ec33e8be7ac01f34fad8e74ac158f084080aeba0f15b5556f8035183ff52a8ef0816673f8fdd2a46873f141ac10f9938dd488c33368c074864b0c245a43005abda078aca6512be1436d51ad86c08570fd644b17b9972f38c8bd3ef8faac771156e4d994ad9855bd1eccb159125c2250325ac26008994febeb4bbed2354cb444581bb4dcba7f78ed58090c62bfe63e64637ef08796241c54c1f91961bc6a81d99a481b65010599d1bb7f91483815485f790de42e94b1f405befdc79b39201e8e5396f4b6f7db04b8cd7a97f91af248f5756e33026a5e78595e17d7236526feb0ab86c1b4fb0ffdb60889b14fcfcf34b014db22741ccac12893acf5082f4acb474d10929b6575b0fe16413f5a350d7819dcfe3ef6d83ae5cba339aac4bc53a4d8860ffb03a32dfc07f346f0b0bf137d6c6e4c96b908deb5f84ba3679f9b0f16df20fbcec9711364328626396bc9e9c21c356390afdb4b786e2224590d25e42c8590abd0bed3490bc38f5e1842c74123bf3f02278aa177ce5a7e6f473692ddf18eb549da7d76587edb38f8f737885502a7ff5606026b0602545b2ce1f4d61e42b4f6c2b184c1bb8bea8093a200fc5a514f2044ebe42e44815a8ebf5510096cc798aefb9a2347d4fe205274f29ee4459b392e6f55d5a109e9d1807e09aa26379a2514465bff6a4c1851d2971b024f1a1bb41d7ff0f37940ac9cd82da00dd093df6802bb5404a88773ecabef791895733f429c1eea303e4c73c32d3d4ad063ce52c392819babf82a6bdf4915b6506fc2f2670abeb6e77900f65ea7ca545d850f6a7dac1fca0ddf64c72d3fa61d0078ddf2e2ce13be228139093fdafdacbbc7357450e56b83057bcefcb03476d68aa507252f105d7fb64134c4f8660da5ee0d9744603bb0a66fa08c70eab63b6d03426efd18d259519470f2b9fe970ff261c053492631a8c78786b7248bc9e99dd7b0e27002f6e436f5e3f46e9339a9df8260399848ac40cb0b809703e8e3f0c5f1b39894a1b49271a570429b0724870fbe2d64af885c0cc2d28e3493eddae71bb31f6447549c62159f137eac7c51e6ecf5b1276e7b3a7abfbd1abb20c101a7f61c030e9f1bb60d4024814d7838061dba7ac69379fe6d2faeffc202ccd9fef35705013a0fbe5c8bb444740a7ab452f373b85656a854de931eb4ab2e63caf7e16f6ac61a5a2e662716bbef6cd0f848b519e060dbfb7c1e14563f23d8511050cd70917cb0fcb3b19feb0f1b012519107d35d6d65665e53d7a71420fb73accaf3e4382e0dab5742ee8b43e2c50422694d8f4b67cb89f6970e04cc3308d5802d651e9dc3c74650185f8beb570a8052330e2a63ef1cf0133ac619d716fe21f37cf6023a376c469e6b336a7e972f60ac4a9b91ec13ae49d094e98474b21a47006838c25ab804e3fea5daa0a78b05642f1f9cd9466bc9224e7b96dc274c04fe18e4763eb4634759a91d32fdba7a689b2bf6213a4502b8f3e51e368563182f311fea315196ec3badc7baaec690b82ceff94b06fd435daab1e3dbc14bc5f59218e24d4695a0cb6c84cdeda52696909f076628f100be4c017221b3b52a6fb3dbc3f7bf42e77becd96c6b4c1a574e14a2f2f12f5a03fedf886a886c6ec0053f07109399ffd59a318e2dcafa101cf39ba71e8ea3af03fd4aca70b0ac391ee97b86688ac8db8829bde5a95da48e59358bf979a34cacfb145b2ebacc6ff4f8732df50aa307c832efbf8d86933230f330c4ed5953c906e94c0afcf5bd744c4b312701135476a042c4dc24fc92a29984ed1a20b1af2ab4ee024d6cf11e8190c55b8fd7c732d1363c7f285f37af9a773139fbf117167ee23e813ef99a6d07fdea45db7270b2cb6832b1f57d0a29bafc23e4992e3fc19221758b08575ed62bfeb82d5a05c6125255b4990e724560f77e50777b063ec07b61ba3fd36eb532761e26fb653f081c63e30e0d8cb4acec3753c5afd4ec1c447649ef6f629981d01958efa41cadc471f8d4fce5e1cfe0080309a431395dc74ec7ae32cdd1acc8f596c4671a5b4cb13a10cbdf00afdf484bf9e671837f8e012209e3c85d07d3af4d3181e1defebc0034cee5c7cfd5cc98ecb1bce999947bd7889edfae7cf2a1aee5f38adb86aea8cbf668184e35e6ccdd990de30028f3364ec17752965e8399973c8427cbb44d017842988504ded2d3ab2d05af275bfa61c8a36a9c8da5230d696589987b76b061cee6e3a7a836265675bf0165545bf61b3b077ccec1d0fa9f6672a3bbaa0e9e800f70006e830f1ccf2d291bc2bc15dc3dd5cfb7d1eb7fb7e92722ef7886b6248f8e38acc2ab0effa0d2e714f13b8191c039cc567b625d924f81c1d270c8802428f06a023b3521bd3e845c39ea0625af8556c699c546020ce789a878ca4739deb0fef83d079bb93560edf2050a90a6acc482b2356e16c83784d0b0d4b9304811a1da74506fd761a847dcdc0a43d405c79f6fd5c37b05b75798358c261cd3d05f7b28099b75949d13b74c0487a0d7f706287d32f7204d3ace2ebdb6c862e0237713ce8013f42a9bc7d655b7d3b94f601634f5ae6b7e40303cae5f248db5e8865b3fba7c7056a003055524b6f21eb6f892a6d783db3b00948b2f4ca75636961753d53672d1464588978e26728312d34c923791db56682ca00fb5ac89616892b678e13a1738a46539c6ae844d160ba0c48d706cd68316d03f77b8b169302fe406d1d98778bb67c07cb97affb5317e779b595f8ad68565fe7cf4341b30fd532fa9d6db1121110131cacc04d5192cb9c135a021f4ca9d0751f58083409a40d742503f5b7fe06447dc2cbbe4c7f876d23e56a67bb9b47fb3447222017f31f28c3ddc4c4077b7e5180e74c24426078fe953dff9808a9209bebfeaef576dc4284189615550884e1b7f93b5c6051f8f2500212b1189d775f2f59ca38d6df247001f1f3a726a7719e30947bf526d176ead918db6f6756b488c428c9a895da15179a765cba1a62f8cbe5bb3340613fce98e52981b6979eb40a503585315980aaa27d1bdf8ebe4718ce22eb672cb7ae524338e379620196af8015f55031a06d0fb4db6732ac487e4c6e31c5f3f300d5c25f71b7dad198810a49d736d0844145a9df1ac20c8cb44d56a13147f3d7b01a99ec43e5ebaa0a84e09df2fea05fed755f52417ee9222aba379565c148b27fc9b7d7fac5631c8205ec7fbfe6b65368d9b28ffda0821f9a214c00d4341593a8428d92990e1b766b2fb7331c170ccf076ae42fb75cf2923ba5eac22be0160ca64c1cc10c0d131e838a250120ee3efa3938045375bb37c33ebea823b7fde21979e33528c02dc871815923be456c0d2808d4d1e7f61369c643e4b06c8370a59477e99cb30accc4bd69ca47f700ca28cd46634e192b23f1f754491fcc33b462f305aa88eb023c75d0b88127d7017308b1b41c81dbbe31965a44a88c4cad28d933f5d2d2296cd9d31b72565607e5ffcfeb2655461b951fd19ff21c0b7a364293b76bd2ef7f8b7fe0105276fca9b4c337797d380d0065fb38ac7c28191a58739c86e56a2f8068516222f89fb50bc681aea834b30cb44d55a57f08f997e5a5d002ce025dabccc28447adc9f63e55ab2d342e01ee5000d65e8b9acb89b2c1311f6d5a482059c25df50900e5693c9be2e5b5c5405ba5bb4264b1e726cdbe35b23de292d355d0c5448fa06ecf17c603b63ad67fbcf83f0668e20e612bf444b6b490e3ac127e3ce713cdc470522268c2ccae4d67752553280f7784bd064ed59a2aea3a45ffd821407788e77782ebccf307d45c24d596b872ec3b8da1b2e0473bea40f867c68809fdd13f0ab9a83c96cbe571fd4ec42d2efaade91388af1eae0378786f9e0bcdcf9f049c40c598018921335790c2e89c12387294cd57c6b936bb32b86f53b9b9e9a0e05cf3404f2882fd42df079fc0b8b6dc130661157757f566c3425420ac0cb227f71340c0d15cb7bedf03f2eb35096dc53f6047cd43599892056a3ec8eee3e0ed5ea3f7e17a733051e7e62a78da74d7e5ee185733e62df1a9f82c8dcfb97c3249191c195e51f9befbefed321139ae0bcd1a7996863a3a8158f0652648a8c0ee50781a919666335238f9c5f6e673edb08577393aceea5b44b7579222f7256a53738e27365779419d022442767d781257cfa456b7439716e953eb2af83750af1709edf34a54dd2a4fb5531a46b628470802ffc5833f113cbef99fe02946d6aa9c8832955975132001bd20817fafefe243b1cdc57b288667b64350daa30263b9ade5c6d420ab837ce2cc934dfe243a0af79a212f898c7375190e11e745f3033e45bf69f981039646d3db0bc699a30dbddab3906230ae1d7ca1b6113bf3bd027589602b6111809614c43dded97af3de2f8793b67babbe71f4fdae59174cefcd8fa76df4655f698b028fc3186ffc802911c0884d7b465610bbcdd9fac4111cdcfd69c326f21e172e4a89eefb9de791a89e7dc1669bdef51cd98c6bc9cfec7a62360cd723dad5b389ae3f3886fc9396456161ff6564489f5b0451a25afd7b8ce4ee73035ed9247f8d79be21aa2a11181f87a5e84919809ef50be5a9ddb5a201b338e99f12424fc3f22c3085f4aeab14926a060dcd6e6d4c235292355af7d08100443020ae996515173cbd8f01835905ba5deb81736109c8036e8efc6225e8d230330f8cd6266e127a002d6701f43fc9a23e86c833ecb096e89c1e4260e6ded1f2d743242dc74a1cdc03e6dd99f0e59ffd084c5926711176489ca2cb14e99652de697e340b9a9f6841d3fdeabf7781952edc9e78976b64f7c6393819f6f37c4168a6410523172950399a69853b10de872401673b65dc5bb8e21520edad1b2893ad0e576e5b33ac4ede985f623b2d33eb1efbc918e9f94da6a710d211ffe4960a43ba02d247a9520e92ea55c8f2f93b1d517fe792e662ac14d82f0d80d4b509c68aa804daebf0b9c119a727ef5f49a98a09c6a656df11dd2336dac03d4fe887a61f4d13a4418ff1ce7bf08cf7be782e8f6539c2694dac054d93759503f7fef5860faa2f26b4333a189cbc9abbffaa0be566b393c458b72d8393b098b3d28957659b2ddd2804d7636b6ecedaffce9855c94c206fc016ebd31226fd55cfdd41b3b1d9ad6cdd5dcbb45ed993de4df4900f6fe760b8747d0cce039b0db13ca4123b5eaef8aefb785ac42bc0477bac35b897ba94b956b7c4ec48b4ad6998c89f695d72bdfa9cbe9f1c2c6851f00960069bc5f47a96e980a19bc3080d01f635f812a9dc151702b41cc73bbf2d8e2d374bc1b3834af0454df87ba82b88378b396f1e15aa2a4bad4c7cc5c58986bca7ce625152a3082dfc496386e3ee7b7726bfc4339e2c35f95dfa3ac18d36e235ff89942aeea4e42a03bc71391a3638269150033f0b008d968a860640cb1312b951d8f3a33abd1768167a1821f2884e5cbd73e8d69423d49520bbf86b840b385be37153f77113224473464ea0ff2efbfe33e8d31c9fce420721b42a9e9509fecfc9027d243d2a3a5c0d2f0f3b3be95ffd489a67c5318d0cc26c74268a29f8619a8fe15e78e1871c726a60d0555e7de1689e5d543d57fa0add8da46c31c3f2679313e5362900f12f7a2f5f7dfc876ecda454863678e67223db737f3d71601d6fc35756c749308c370ea7a9adda4692d3fad528c1945ae227819d65c521f81c814e1aacc952332a661fca033297691894b6543aa523473bb5171dd9bfefaffcff1bc1cba4bb62903a061f44fbca2aeced3475a4b819c93c6c93754de616d4d82d2a93ad4c166e89f1f6c93e8cb690496eb646bf94d7541e668eb0dc2b24d852faedac62655380689a1635c6978309d24a6c2898b694a6f06b3f4ee117c6a3dcee0411bb5dd0a044a5dbd4eef2284f16b8f3280f260f45d9438107bf70a6ea5bf7bda5345b611e5aec1d6d7aa1e4d2f5206b29a8c4cb62386ef6d1182cd5f38af13f7358d3e841e9b19b7be87850d8cae0e537c3b1369825560277db069dbd6b7df8ed2d244b08cc5564444dbdfe738768e83eb1aa9da3a6739155f3cc0fc6ac07ab969fcb0433d64eb57b3757d7bf1444d3b9a61e54270cb9aa7cf52de5636ab88219a1185f358e0dd9fce7314f4ee3a6ebbf997859d4bf73e26f800827a029f7b139951b27eec9497d0ea2497021238f9f8529b5b4ee64bb7d2e95d55fd6ca9df453415d765cf13352d143b2db407f3e51a771967a206c4ac735032918b6a623f53e1ddeea259299d09e3acb6dff97a6b739d1c6a0880a905eaa84eb894f645769feba701064ba56ca0239e32e0c81c4e4ac49d02c893f264ca727dfb0b5dd34f3074899daf29cd8990579ae95ffb2d1760de9d7316a420325af2c98ab73cbc3190b423107d804c186489e3f159a29d56752d0191fea4350081987248a97b6e3a56315306deb18c25c0a923c91af2535346fea7eb5e80a1de9ffd38a9ea330a01f580779c2834a176baf4c7f31a7c04edbda34af4854527bd9f9d747141c163b6eef79a80ff27c08c1832e41619f38200d183154c7c4ac58cb1027c3a211d95a918543440becdfa27ee0502a19f9741677b8d36170bb3d7c7aaa8f399d68e312f16dac0fcde46fc557b9241d812adeb1868ee205603832254cb8b64cf32e73fe7b301cf8e82009115d0e525c35ef92e68db08b01331b46a6b9a6b9b5ed89ecd7f6e9307266584f9d71ad39f981f5c987f537c2e7ded582d46b56f6c64fae67275d0498d19d3d1257f3de283b9d03fcc362f1f19ea250714cdca05fc26e77fc33e6076c874e086b07bcafcda6e1230c7d3d68d095d7e42b68c93e172054cfd376f333b502560f72be3ed0dfa91f3468e60d77371d0c78dd6cbc131e030f84b3976bb4214c1e5634b94ac7aae883f0cae44c39a476bb920299e75b061261974ba9b07e5cec407532981fe4f2a8bbc7fb21c489c82f19453a8338ed723ada259972607b257f8f26bdbabc2617300c95c99bf915f63a72525217185bcb36923be73db4148fd734ada4c06a629aa86492ac3aaa87aa713e6d10247dc37b96205eacf0abe999270d515188141df14c7343ac4e7a8d6722e7dd44f045eb125e3c4ebc5850c82915a65b749e283c9148fa47f11a8ae126a2a96e1d09fc1ddeea299ffe573123a1bcfd9b325baddf81076bdc74d56573b2c986b2417898dbf4c8b1d4d603df4819530fd5aede368de29573bfa0482692e42a9e3159d0333b8bdd5018f3c889bbc075ba549eafe1fed7fc912f3e72437e1074a856e542d4bafe4ba6f0d61677113dea74aea2d2d901c40f574dbb427259b4fae9169b01e64ba6ded30cc6f9954e24339cccc9f52bd91a0b725dfba7ee86936a54d41d558d5474cff0f2650400cabdc6a1614023364e61a752e29cf57153f63bdd199ca9f669010c937847db7e7fd1097562f66f1372f208b569e6aa3e6a64cc0e5d029d57efe24a428639f776dadb9e3dd1ca3ec593f00a2c4784c645c06c001a1cf4ee5482b5553fc37d7de800e0b0851cf8bc8c4f87644134a96dd97b36d1f02d8e6353330be2a194d09cb05222bdd6bfc6a874447bc65dd2d66afe61c1b9179b4e9e4b7427125d1c1dcfd1a4a705636a377642c3c3cec6c4359346a198e5519e4f12b5c2ad9a6f140fc9bf9f35070542b0947a0364a1c3485ddab8486f9a417b8c75c6fe6f6803eacc1e99aedfa1965a9f0c3723bb4db1c78449c6e01a5cbec91b7c6a6c1c369a4ca15530b2853edecc3e84f0b14f502096a2ca090bc04bbbde82e045358d3c05f59bf3e97bc3e3fcf7173006610db69c680c1db1896413f3200d2728936bd839aaab779a07b2858152ceba7c68540465f54ddfd7df8c216df556efea32287855000333fb9f87789a54332bd1d29533261fc7c4f53a0869a8ac5292f9651d9ef7ae014c6072070402cca56b721c5268c55dc0b73d1e9cbbddf1524077ae456aed858759959356cc837a2e045fd81df3c46c98bd98b7896d235abee8ef36a1b6727cabedd02dd6b2991a306a256c05a9aa12d0dc155a3b16f321ca27fd1179b6d66217132240da7c44ecc5144e7a87fc4a61f717cd16e9efa634b5cc0431e7e29c19905f7d47c5cfcd0db42cdca6d1b1455efcafc064ef0f19d7e5a164ae14f22209f8d3f44c80a64a26362a5f60a531f8daed6c80849677e6e82634d9e9e15ae709ec6262299bc0ae204ae0860f18b22b526a468c2665ec077ccfaf34b65a2075b8ae7f7edf21be663b1da29f2fff41bf930ee74ffea27ee864378ecb5e3c1dba3cd2c4c9d7d3a0e01aae17a43a3233a2da14717dcf6e307d19b3d4f14a2a85b4cb26632dad48f45cc13842268dd8fc7ca7fa07c6b717a076d0c086ee377fa9183a6280e3275e24178992d3eb2cb80613a993f43ae11db6c67a734a2181d1c37a361c7741545cc0fe4bce8f85fa3ef58df4d5bede4e90fc39dca438fe8312b32af5e668d31312d10003a0e556712a5ee977757436249c9bc55a92747aafc883d2cc3178b3f6169f3576aa2595f62888e5405be361b69b130666e5014d3eb6948699ce337892f40f0c15a4a786606696aef6b33c612bbd90d8fafb446bee15558dd400003cfe9b1cdec602b58260336c763178293c691d4c7bbc111e7b4105b3c47f0bd9b0f09adbed3ca26fa6f4916bc4529de4668f83e0e50870b62b3ee60d831cc3f0aee68dce1b5ca667c44e49b93ad489dc36f302ccac971540b9a8cb455a832454ec653fbcc955d2092b6ce0813cd3963b8fcf7180cef6d9eef4fb8428620c5a9a4ce3e5756e90889b05c961a44020e39c4e8d46168b1e77fbef7f9e8e831b0ae6cac6bfbe1b193dd5b17c1648c19a422f5172db79ecd2ce16054faff175cec337443128063df3a09fe3304d991e29349441f42615a629101fcbf3dfd163e2afd07dc3dc1008c0566d74b033ea39d7361d342ae8b00a91a1b5c6825ccae015770779883c5bf1684954d53103827f6107fe0b2a79319a2b7ec9174bef64d5354e160407e36a2f3e9ac6424e8ada12b4e47bef29fea1879a049691ee2f3aa4063d6a94f8a7955aa4193bc534d094335053be8b666013ea8d7eb7ccc28de6f28064e748658e4ba5bb4a8fc2cf5f9698e9342679e25f1da5d2a4001b8e653024a2de088c0e766ca9fe6aa43a9bccdb821f9a1b04b3e82586527a97112aee321538ce0b9694bd243653e5e89875c8e4549a69838ca52e1b0f75200fab00fa49a48244472d26d777eba18803659554821afd69a640e1e23892bcc325f01ea05416bf17d33b6c70377e2f4e7e1cf964c1d9069b8c94ce516e4b17395c13f1739abc10f1c98de79f876cfdd5cd53652a15e04bad36c41bbe15f413ec8333e4b392ea358c81d6fbede817bb2395aabbf762c9555dd2e16571598f0ad3803b351abc5dd81bda53b721046ecb6666a777256827e7ccd7e3d11bb482a48c82ba836365a16ed164d5140cc086c28c82479259055e66e357a5e4384cd26d7d3f277dbabe96851153cc2670fae639e8e4517c7173206560484648f4f6c162b0374fc043de1ea1141ce3123277f1becdc495be19c67856c288beb1279dfad9b270be8ea711f8f8de4328e282f6a08fdbee9977dcab378dab66f3bb8b0df57d2ccb670fcf6f0fff1f1dd38b4461d0689a9b355ee21bf6c4a10847855509601eae1ee44062bf3d6fa2e796ee16922df947ccd1c9be5c807b712ba8d227e9c4b41c295aef9d19c4fe1e760521b97826e964250cf4ef0c350a306c4f0ad107d7f4abd18e8cd6f3a39df14223be39f8af6461b64f2e036d93aebd3149614edda0692a06d89e7c8dab535fb84afaa4ee0adb041ad8b50189946ede9b8c91da5385d1ab59834fc81c1302aa9612cf520402fe33b4b397be97e377c8b9308dcc2f2d41879fcaccdaeedadd216dcd03b544472557dc970b12cde960881a059aab1f7b38f5bff036ce52037ea6b3c26ab172bc9cd18b5497688529d873235119e0d19f9050b32b50cda7d6f4c2c68bbe153835a86ff8eb60e6f267b394df6c36a980c7bda66306f96bd9980e916d1d1e2d0f60bf1c8d836c3f3dac4d5784aecee9de8f20bf0dfe7d47279e361ad19554f86431869e1dc207ded616c973e507c76c7cab746971e739e938d69f215d84d73856ca3c2eb5eea8b2fc42125861786be0ad96c1c94eecc5e7b742004a5b4ce19188789533a9fd48c204385f413eee875d8b24d8c3f6f8bfe3cce1b7a1614581ebbfce56798cd328b4aab1c4cfc5b0aae8b0300c70fe4de23129763659f6c82acdbeaaf2fb656fbd1987cbaa2b0bcdc5a46972f6ce74862ef06689b575775b1712206cefdee67d992357fb9d536efc747c21bf7a789d9df7d45b32655fcea1207cd6f431bad396dd41db608f77ceea81f623c542421c6e9f9c94b76b9b6d0cb601f39ec43ed7a9e2aa3602eb3722aec8409d113af2f0b5299c94e660163fcbd48052207ce125144f43a45398f9faec0fd75087e17f71ac7df5b1cf4d9ed23b0dc405c65d7a41a440c500dc75f2f613f5d53ea8871a9d78869be1784e9a6cf363c55725cea0de3309e202252fe15f5825c71c6240533e9598a45b73e90802bbb40f1a5bd283e8fd6e13388ec2bfa4f1b7ce96f23ae683c0bbfee5982c2ef70e4a8b2aa341d2629b3ea2c431eb4e7e663a35a5e6ca11fc48bee76d8bc7e7f12754a001c867d024928556449cc4f59628c44bbe271fa720d62a37fc02ec111ba17732da325924b4e5671854e3169c3f581830c6c264de542db4af2d57f9d23f8ab36d24ae895e9df04ff5ab5aa24b426724a1b40a37dfbc7050b5b2431929e4de5d27668288b316591e57e865955709e3c7f1de5796dca0eab9c9e6f543ca2c723cb0cb14c81d9acfe36d4e034a1d5a354def803ea549e92616118375b559ea14a71fca3399431e844654cfd934b38d3512bc693a8f2f4353e3ea8f2e771d28293934da9ff66539d2254fac8268b207e8c86e9fc770bdd1d5f6046b2421867c1ae3b4d133efe4f019247cf46ff4ef3f8ad2cb7d6486f7f11294c2d0086bcf0f3b14bcfb5697d62bfbc695789f6889123a7bcb512a7a805da9f986e74806996e3df8a0444998c93816a0e56eef91fd53022d95e584ba31702f5eeb491d99b0a139c354f1876ea04cda2687c4ef34bbc5910be8da35be0ca8117b759be151fea17fd42ac27b446957478d9b614e0bc92176164f517331f5e40a459f0e6828feeac7d2e17ad6dc32b05c1ffcab4d5aaae6cc91ee3c2544e5e304e061039f37b2021f5e4c3ca8e10f46daac99985c7f4cf0bacea87bbbdfce311399f01c6d450e82ced9f58646020e658ea9b228697fe2159eca4bb3162cd34dd0f5632db681f43f6126f3b2184ec61f050ce86f15c265493aad93e1a256149490081bf4c16c016701c2d9cfb72a079c545b449b3f21d3e16ca84fa661ea665a1a5a29ac75987c04ba1c6d29f015320a5d87193b217746c3fc2eaa04ab1fa0d16c39ece67cb61218436c3e9ecbb1be8ea10f6d2da9f56a085a6f75e889f80dd81e402b436d8dc1e866ae07fb5205eac7ce1785415c8fb063f1543458347794122e7d668530f688fdefc5691e85352fd1b8d7c1d18d9623eb8f6083f8fcb2f5067ed4ead63ae855f0080e9df13bf287dc6b1e8e78fae741b5878461bed3d186fd9831b253a2f60c8be36b24f5dce8bd3e9e9b62d1e3d6434c5268dd2416ea9406e282ba36fdd04450cbe8a0ba84a7ccc4e221eadedb4406ffea13c55ca5446c88a7c522867aefa901afc53cc448f8fdc7c81a23547f73ce1461b70f2cad1af38a495db63bb117e205f79bd5c438041e851c90fd2fd0ff6049859dbf6abc5f8fa6ce40a2c892165b926e18161b3f073f29e2ef6e253d8ce1e85547298eb663d75469630435f507533349c82500749fb14561c370c4c938201bdb086a4e7569003d3a746766f7ed5a60b158bcd8934e1ed9a8d22eadf15484cfe4fcaebfb938ac2a1c4011e6d1d998201d54fea12b21db251303fb609e2d6cd371bdda806679790e1054493c56e1cd48e0d5375d9ab80727eabe27d0af586eb200add8cd8570139218a1c3ca7f94a8929e0dda83107cfa103961c39fe270756abd2940a117f16b94a51fdc007818b6dab1a4e8b632e46ae76dd68f2dbb39cc36b74764cafe13b88317dcd303dc7125e1ccd958abb1e1e118b036efc7f0dec89c6dcdacad200eeeb69d47e97b74af7a49eb301fd2a50a26329db1989d53b7130f859c609d0693df07fb3d69c7a3846a243f109e03635367c4638babfb01ed06c6487aab17c3034aa5dd986a44af7fd81d02da8cba94ea28bb15c3a3bf351ed36a300195609cfcfe6ae41aba925ea8f2ad8ca4306d3d8c6c3fc65f18a8e2abf59041e5c5de12ee7973935a2393c2beba58e6f4c0e544a75a94a3b32eede13db4e64fa320fc342fd09874003b4ba69d740bbe57751f868d3bb4f07a0d44d95631e7667203c526ba3686bdb775adf4de5db723dcb8bd2aff06992bec1ead801d0dfab639f742bc0a4ee5547b765cd15df9dce06719dc67b2955e14e75655a592a845becff38dd7bc0b063b9ce189f630420417f220aac92aa7fb54f8919aed30bc3704206207b2204e04f317da31f482c5c5874c56e865d3a2f568801bc36039b9bdf64b1b5a7993d0ba8ce936298f96de3fd3431016abdcfafcb08d28279e658eafea18667bca08eb53c3598132cdbe5f8cbbf09444a08ac24454f03d59c92c8d2764e044d6d5e7fe0e7a385d86d0d1da2d1c275fa6d416081f38dcf87679951cb294ead51dde463751d755dc08e7511821b84381621b69eb3fe4b7b4f2320bb3fa2888b58d25b6e5786b970167ac92df64c2122069a840827a49cc88c4154aec2f2d7e684451c14fd5677ac68a66ca1b39b5e793cdcebddab28917be9485e9666219aaf49581bf4e850eab3f0db7f7f4ce3984638b619a6bc9ba19bca6b1ee8210e8de9ee2838b9c36d83f690e473a57529c4d64cbe5384e2c2dc96838556c063f31e18e13f5cc3d53141ff672f1b3bf7761cdc6b4709f3ad65911d89cc7658d92534c3f920df5b37a26886162e5ebe832cc9c64291bd9d68ffdce2a117bfdfe31dddc638ea9ae354761dacdb788b7feea258b8a6b63d58e9dbef108a5532b74e82d50ade694f1d98dc2dbddf6805f9f28a13ff0e280a458238e21b14cab2760f2ecae2713e1ce5477851c21d74be7d4e9dfffe621c3ea27387175b3cb2cf0b50977d4091d901a05ee7eb889b7eda1897736f89a82d5038fcb278d594d7e00d967dfd03ed232c26f5666ce6187a3117caefe94188bbfd1bcc1cbb0406130c8dcc2f90f068aeb2c5f6639ff4e2aa868e114490f0245df3fd35336852211e18ed3824bddd67318812dd8786d27b963b6182330fe40e0ba5b38f150ce936ee1532f7a97bc4b12b1dd2596081e651b4e0a66d533c7a38780b7ce16eb30f00669887f98b3afa1001b2a78732815139f0b4f4f663ec5daaa5b0009ec61913d6afb0e822d11940d3d336b67c88cc1b96254df9abbd4b52768b96a69f69aa845a6e21e92ea1eb0dcb9830f5f3090ba36eadb51c3d28c1af5bb1a3a2f0c6351d085ba06db6c4ec612343d90afb5684fbc163ddeed0448d43e0b5ebce8decae282c15419a88087e762a360fb60499e924ba42624a0f0610e27388844d69f5d977f12c46b86fe31dd7bcf2960741f110d200203ca780640c5a8bab34f9312f70c33dc335b90e769708a8777a88a13210e60ae2e4b309ef672fd523c8c69fad901bca1843e76bc2e26a2ff518e1632d4b0e919e9e745f0fc8f4031f5f3a4df633d7a83346c02da21865b4276d01dc6b8a884086bdee3f86ef3770787c9f36945de764950ddd8684d0a1e6300952ab370b9ee8690942c15d7220ea6efcb88e4e8812430e9e11b7ecc27ee58b3c1b1e7edd93f1b1fb0a46da32383b6df70a545866a376dfefc0f15a4be763d44b4f6fd6ad4fa818377ebed9063947fdcd0e125c526f1a32c2231753d64bbba00bd7086cad441b7c410c500f9b108c9490143b3a14c0bf6b3658c63d166702480bc13c6b7849b2bc37162e912dc9d7e42f76df596edb029321db24383394912a2b10088224ed51e872376b01c073fd457a550b9c84e059e137923eb0b689e25e4de6273ffe1f4c366070a2c60d73f69280ce3886f0f2e5c639a3eabdc5d814c4f17db87324126ee3d1603545bd4282dcd3c0db755bfb7566658be3bf4fa360de34e450871e36060d75f4c3b4142e48a9f5df695f1c54d7834c0c269927b8ffef1331bc723ed743f7000b71dcb7d92acf5960aab376cc60db1fc7660ca26214835d7ac7c53c71257eb7e3134dfe61e23ec3ffdb446bd06e12da3f55ab23c59961b8983af798a88109051cf179fb894d1a64493edb8f0290098d8e85163645cd17bef50414203f6e408222a2359c9b9ae5dc2ee3416f87394696e1967e6dca07b3ace800b1093dc3fc8cbf641f49a5b7509f23f6561a014b0c0b5f098579e5291ddd4632546678747e76fa56d2985092ea83d9cd7e0135af58567193ef9855bbe81d76431715075f0ddae6eab9359464d09ba062bba05b6a73353c6907b9dc4433db0a71403b3d5699cdeb708df871b33d1d1779cd39a773580b110f8d926cd5f09c23d301f1b308ee4733da44827d16711ec30c38a9fc37db9f78b6e824f40602fca16aca2ad778e50f35d182ec55bffa2c5b4c1ba8f751f5e118ea132f41758073f3be282c3dc60f432c1db14f1de4ac6595b4af749dd117d04bfe5a90f2b53699241af01eb5b84313ec1a8b27e8702f258510ec2dfac5af56ab011f75aa959dc0aa15355175edc8081d70fff760c8a5564aae055ed30ab3d42f95f11fddf47f204f3efd67dd3b0f0264d0fb9ab9b69077ab3948ce1f2a7b8b06c1b9e6bd4da6ae1741bfeb4e69d14fabd11326ff403c54280a9fd10dada6643e33f4ad78dd0d3bf6a4680879d57ec1d12b52ea0a26bd22bdafb64a2161ec4fc72e7eafa163d51b4193a0f6ee4912f4df7b395ffb84ec3253b444ab20024700f530905df4f6fcbc0ed4982a925f0d9290ca4a3530914d4e86621efd3ef2c8ddd73d92f299ada6534770d192205f1fb47b60676c7e445397ff664a28ac32e2259079187713d601ef07c0ec1aed01cf119a810f7ea5459993c109e562ff7233396810bd863d8a8ef435537ada7bfccbdc897459a5c1f50261dc9ddf90099f2f4d3dabcfda3bc95769df6f86afea72561db557822c0246c123d5bb953f0d66cecc820c05594bf345adbcae41b955ea9d2ca203932b8345b7e0b996575a480c6fff6e7ec4a1c1832aa908908bee472f64ed4ffb91fa1a895932bd5eca00dbae68e84a0981ae26833c7184e19af110142ce194678dc6405c83c55b13df1866f296ac412cb56c4a0a47a1739b6c778558632a7f3d70ac18057c37fdefda7029229305ec0e9d1fb02e1c8c3014a7bd4340abea29a964559f3c00ca352ea2391e13657b2936fa18578526020ee0b2a9e9f6a9837a5de1255977ba86ff75c75ddcc6fdf3f1ee7734e400fd5c4d470d87c29463962819f76b12d6ab5c709c4bfbb2452a5b0b468a35353fa91b20895ebda8c74d32b876e194abb8b266176967556f93ffb3c71d47486b9dc4e62563ee3f0b0cf7f059a0d1b6f77f77c73b580a90c3e908dd69cf37656fb06cbafc2869c9926bad214ea8ec68035bf2a43c68d3968ada51d14a95ff87236778bb38796e29ec11f81f71d9ba89dbd19f8c2266d3dcfc52e70b0057dc8bb8d6be338b4556db87815cef70614d64a332cae1a54aedf89a324fdf32975e2ec3cc8a8b5edb71da3a6385e6c99227046d0bdd39bbc759255c88fb0ea368b3f521dafc12789d452582e7b3063d5ef954cc39ba00f9a186217772384772df814332686049acc967b27e91322c3d1ae0406e046b1c9f79479dd082c5f64295cf1032d7cba702a99030aa4f21b47d81ad82303c27d8152d7feeecaf97d92e5b1127129c733717d3e650918d202d6b2e6287b75961dadb84d1b9b0f18ae5846f6c0484b3658b09dfc800a83983c10859f","excerpt":"","more":"<h3 id=\"基本函数和结构体\">基本函数和结构体</h3>\n<ol>\n<li>\n<p>创建socket<br>\n<code>int socket(int domain, int type, int protocol)</code><br>\n成功返回<code>0</code>；失败返回<code>-1</code>，同时设置错误代码<code>errno</code>。<br>\n单个进程能够创建<code>socket</code>连接的数量受系统参数<code>open files</code>的限制（使用<code>ulimit -a</code>查看）。因为<code>socket</code>在<code>Linux</code>中也是文件</p>\n<ul>\n<li><code>domain</code>:通信协议族\n<ul>\n<li><code>PF_INET</code>:<code>ipv4</code>协议族</li>\n<li><code>PF_INET6</code>:<code>ipv6</code>协议族</li>\n<li><code>PF_LOCAL</code>:本地通信的协议族</li>\n<li><code>PF_PACKET</code>:内核底层的协议族</li>\n<li><code>PF_IPX</code>:<code>IPX Novel</code>协议族</li>\n<li>其余协议族不常用</li>\n</ul>\n</li>\n<li><code>type</code>:数据传输的类型\n<ul>\n<li><code>SOCK_STREAM</code>:面向连接的<code>socket</code>，\n<ul>\n<li>数据不会丢失</li>\n<li>数据顺序不会错乱</li>\n<li>双向通道</li>\n</ul>\n</li>\n<li><code>SOCK_DGRAM</code>:无连接的<code>socket</code>，\n<ul>\n<li>传输效率更高</li>\n<li>数据可能丢失</li>\n<li>数据顺序可能错乱</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>protocal</code>:最终使用的协议\n<ul>\n<li>在<code>ipv4</code>协议族中，数据传输方式为<code>SOCK_STREAM</code>的协议只有<code>IPPROTO_TCP</code>，数据传输方式为<code>SOCK_DGRAM</code>的协议只有<code>IPPROTO_UDP</code>.</li>\n<li>该参数也可以为0</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>TCP</code>和<code>UDP</code>.[[TCP协议和UDP协议]]</p>\n</li>\n<li>\n<p>主机字节序和网络字节序</p>\n<ul>\n<li>主机字节序：分为<strong>大端序</strong>和<strong>小端序</strong>。<br>\n每个地址内放<code>1Byte</code>（<code>8bit</code>），大端序和小端序讨论多个字节(<code>Byte</code>)的地址高低问题\n<ul>\n<li>大端序：<mark>低高高低</mark>.<br>\n==低位==<code>Byte</code>存放在==高位==，==高位==<code>Byte</code>存放在==低位==.</li>\n<li>小端序：<mark>低低高高</mark>.<br>\n==低位==<code>Byte</code>存放在==低位==，==高位==<code>Byte</code>存放在==高位==.<br>\n<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"image/Pasted_image_20250610210518.png\"\n                         alt=\"image\" style=\"zoom:80%;\" \n                 ><br>\n总结：<strong>大端序按照原来顺序存储，小端序按字节颠倒顺序存储</strong>。</li>\n<li>造成的问题：同样的数据，大端序的计算机和小端序的计算机解析方式不同，那么得到的内容也不一样。在网络传输中，容易出现问题。</li>\n</ul>\n</li>\n<li><strong>网络字节序（大端序）</strong>：解决不同字节序的计算机之间传输数据的问题<br>\nC语言提供了四个函数用于网络字节序和主机字节序的转换：\n<ul>\n<li><code>uint16_t htons(uint16_t hostshort)</code>:将16位的整数从<em>主机字节序</em>转换为<em>网络字节序</em>。</li>\n<li><code>uint32_t htonl(uint32_t hostlong)</code>:将32位的整数从<em>主机字节序</em>转换为<em>网络字节序</em>。</li>\n<li><code>uint16_t stohs(uint16_t netshort)</code>:将16位的整数从<em>网络字节序</em>转换为<em>主机在字节序</em>。</li>\n<li><code>uint32_t stohl(uint32_t netlong)</code>:将32位的整数从<em>网络字节序</em>转换为<em>主机字节序</em>。<br>\n<code>h: host</code>主机<br>\n<code>n: net</code>网络<br>\n<code>s: short</code>2字节，16位的整数<br>\n<code>l: long</code>4字节，32位的整数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code> ip</code>地址和通讯端口<code>port</code>.<br>\n<code>ipv4</code>地址用4字节(<code>32bit</code>)的整数存放，<code>port</code>用2字节(<code>16bit</code>)的整数存放（0～65535）。<br>\n为什么不用字符串？<br>\n因为<code>192.168.190.134</code>用字符串存储需要15字节，而用整数存储只需要4个字节：3232284294。（<strong>思考<code>ipv4</code>地址最大只能到<code>255.255.255.255</code></strong>）</p>\n</li>\n<li>\n<p>万恶的结构体<br>\n因为平时用到的<code>ip</code>地址都是字符串类型的，而程序中存储的是<code>int</code>类型那么就需要将字符串类型的ip转换为int型ip。主要涉及三个结构体和一个函数</p>\n<ol>\n<li>\n<p><code>sockaddr</code>结构体<br>\n存储协议族、端口、地址信息。客户端的<code>connetc</code>函数和服务端的<code>bind</code>函数都要用到这个结构体。其定义类似下图：</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">sockaddr</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">short</span> <span class=\"type\">int</span> sa_family;   <span class=\"comment\">// 协议族</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> sa_data[<span class=\"number\">14</span>];  <span class=\"comment\">// 14字节的端口和地址</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>sockaddr_in</code>结构体<br>\n上方的<code>sockaddr</code>是为了统一地址结构的表示方法，统一接口函数。但是很难用，操作不方便。所以定义了等价的<code>sockaddr_in</code>结构体，其大小与<code>sockaddr</code>相同，可以强制转换。</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">sockaddr_in</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">short</span> <span class=\"type\">int</span> sa_family;   <span class=\"comment\">// 协议族</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">short</span> sin_port;  <span class=\"comment\">// 16bit端口号</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">in_addr</span> sin_addr;  <span class=\"comment\">// 32bit的地址(只能存储ipv4的地址，不能存储ipv6。sockaddr中14个字节的char数组就是预留了ip地址扩展的空间)</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> sin_zero[<span class=\"number\">8</span>];<span class=\"comment\">// 未使用，为了保持与sockaddr长度相同而添加。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">in_addr</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> s_addr; <span class=\"comment\">// 32bit的ip地址，大端序</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>gethostbyname()</code>函数<br>\n根据域名、主机名、字符串<code>ip</code>地址获取大端存储的<code>int32</code>类型<code>ip</code>.</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">hostent</span>* <span class=\"built_in\">gethostbyname</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* name);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>hostent</code>结构体</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">hostent</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span>* h_name; <span class=\"comment\">// 主机名</span></span><br><span class=\"line\">    <span class=\"type\">char</span>** h_aliases; <span class=\"comment\">// 主机所有别名构成的的字符串数组。（同一个ip可以绑定多个域名）</span></span><br><span class=\"line\">    <span class=\"type\">short</span> h_addrtype; <span class=\"comment\">// 主机ip地址的类型，如ipv4(AF_INET)还是ipv6</span></span><br><span class=\"line\">    <span class=\"type\">short</span> h_length; <span class=\"comment\">// 主机ip地址长度，ipv4为4(字节),ipv6为16(字节)</span></span><br><span class=\"line\">    <span class=\"type\">char</span>** h_addr_list; <span class=\"comment\">// 主机的ip地址，以网络字节序存储</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>获取<code>hostent</code>后，使用以下代码把大端序的地址复制到<code>sockaddr_in</code>结构体的<code>sin_addr</code>成员中</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sockaddr_in serveraddr;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">hostent</span>* h = <span class=\"built_in\">gethostbyname</span>(<span class=\"string\">&quot;192.168.1.2&quot;</span>); </span><br><span class=\"line\"><span class=\"built_in\">memcpy</span>(&amp;serveraddr.sin_addr, h-&gt;h_addr_list, h-&gt;h_length);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li>\n<p>字符串<code>ip</code>转大端序<code>ip</code>.<br>\nC语言提供了几个库函数，用于字符串<code>ip</code>和大端序<code>ip</code>的相互转换。通常用于网络通讯的服务端程序中。</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> uint32;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 把字符串格式的ip转换成大端序的ip，转换后的ip应该赋值给 sockaddr_in.in_addr.s_addr。不能传入域名</span></span><br><span class=\"line\"><span class=\"function\">uint_32 <span class=\"title\">inet_addr</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* cp)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将字符串格式的ip转换为大端序的ip，转换后的ip直接填充到sockaddr_in.in_addr成员（不需要手动填充）。不能传入域名 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">inet_aton</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* cp, <span class=\"keyword\">struct</span> int_addr * inp)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将大端序ip转换为字符串格式的ip。用于在服务器程序中解析客户端的ip地址  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">char</span>* <span class=\"title\">inet_ntoa</span><span class=\"params\">(<span class=\"keyword\">struct</span> in_addr in)</span></span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>bind</code>函数<br>\n绑定服务端的<code>ip</code>和端口，失败返回-1</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">sockaddr</span> server_addr;</span><br><span class=\"line\"><span class=\"built_in\">bind</span>(listenfd, (<span class=\"keyword\">struct</span> sockaddr *)&amp;server_addr, <span class=\"built_in\">sizeof</span>(server_addr))</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>lieten</code>函数<br>\n把socket设置为可连接(监听)的状态，失败返回-1<br>\n<code>listen(listenfd, 5)</code></p>\n</li>\n</ol>\n<h3 id=\"封装socket客户端\">封装socket客户端</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;netdb.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">tcpClient</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> client_sock;        <span class=\"comment\">// 客户端socket，-1表示未连接或者已断开。&gt;=0表示有效的socket</span></span><br><span class=\"line\">    string ip;              <span class=\"comment\">// 服务端的ip或域名</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">short</span> port;    <span class=\"comment\">// 通讯端口</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">tcpClient</span>() : <span class=\"built_in\">client_sock</span>(<span class=\"number\">-1</span>), <span class=\"built_in\">port</span>(<span class=\"number\">-1</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">tcpClient</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">close</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @param in_ip 客户端ip/域名</span></span><br><span class=\"line\"><span class=\"comment\">     * @param in_port 端口号</span></span><br><span class=\"line\"><span class=\"comment\">     * @return 成功返回true，失败返回false</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">connect_to</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;in_ip, <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">short</span> in_port)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: sock connect is already exist&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 保存服务端ip和端口号</span></span><br><span class=\"line\">        ip = in_ip;</span><br><span class=\"line\">        port = in_port;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建客户端Socket</span></span><br><span class=\"line\">        client_sock = <span class=\"built_in\">socket</span>(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;创建Socket失败&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 配置服务器地址</span></span><br><span class=\"line\">        sockaddr_in server_addr&#123;&#125;;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(&amp;server_addr, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(server_addr));</span><br><span class=\"line\">        server_addr.sin_family = AF_INET;</span><br><span class=\"line\">        server_addr.sin_port = <span class=\"built_in\">htons</span>(port);</span><br><span class=\"line\">        <span class=\"comment\">// server_addr.sin_addr.s_addr = inet_addr(in_ip.c_str());      // 该方法只能用ip，不能用域名</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">hostent</span> *h;          <span class=\"comment\">// 用于存放服务端的大端序ip的结构体的指针</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((h = <span class=\"built_in\">gethostbyname</span>(ip.<span class=\"built_in\">c_str</span>())) == <span class=\"literal\">nullptr</span>)      <span class=\"comment\">// 把域名、主机名、字符串格式的ip转换为结构体，存储在h中</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ::<span class=\"built_in\">close</span>(client_sock);     <span class=\"comment\">// 关闭sock连接</span></span><br><span class=\"line\">            client_sock = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(&amp;server_addr.sin_addr, h-&gt;h_addr, h-&gt;h_length);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 连接服务器</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">connect</span>(client_sock, (sockaddr *) &amp;server_addr, <span class=\"built_in\">sizeof</span>(server_addr)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;连接服务器失败&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            ::<span class=\"built_in\">close</span>(client_sock);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">send</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;msg)</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 参数使用string，不使用const char*，因为const char*</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: not connected&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 或者：if (send(client_sock, msg.c_str(), msg.length(), 0))      // 语义不准确：buffer可以是string，也可以是一块内存</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (::<span class=\"built_in\">send</span>(client_sock, msg.<span class=\"built_in\">data</span>(), msg.<span class=\"built_in\">size</span>(), <span class=\"number\">0</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: send failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @param msg 存放接收到的内容</span></span><br><span class=\"line\"><span class=\"comment\">     * @param maxLen 接收的最大长度</span></span><br><span class=\"line\"><span class=\"comment\">     * @return</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">receive</span><span class=\"params\">(string &amp;msg, <span class=\"type\">const</span> <span class=\"type\">size_t</span> maxLen)</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: not connected&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        msg.<span class=\"built_in\">clear</span>();        <span class=\"comment\">// 清空容器</span></span><br><span class=\"line\">        msg.<span class=\"built_in\">resize</span>(maxLen);     <span class=\"comment\">// 设置容器大小</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 如果直接操作string对象的内存，需要保证两点：</span></span><br><span class=\"line\"><span class=\"comment\">         *      1. 不能越界</span></span><br><span class=\"line\"><span class=\"comment\">         *      2. 操作后需要手动设置string的大小（resize函数）。(因为直接操作string对象的内存后，string对象自动管理内存的功能就会失效)</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         * 传地址除了使用msg[0]，还可以使用msg.c_str()，msg.data()。</span></span><br><span class=\"line\"><span class=\"comment\">         * 但是后两种获取到的都是const类型，无法修改，而recv函数需要将收到的数据写入msg中</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">int</span> read_byte_number = ::<span class=\"built_in\">recv</span>(client_sock, &amp;msg[<span class=\"number\">0</span>], msg.<span class=\"built_in\">size</span>(), <span class=\"number\">0</span>); <span class=\"comment\">// 返回接收数据的大小，-1表示失败，0表示sock已断开</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (read_byte_number &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: receive failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            msg.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        msg.<span class=\"built_in\">resize</span>(read_byte_number);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: not connected&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ::<span class=\"built_in\">close</span>(client_sock);</span><br><span class=\"line\"></span><br><span class=\"line\">        client_sock = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;------------------- client start -------------------&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    tcpClient tcp_client;</span><br><span class=\"line\">    string ip = <span class=\"string\">&quot;127.0.0.1&quot;</span>;</span><br><span class=\"line\">    string port = <span class=\"string\">&quot;5005&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tcp_client.<span class=\"built_in\">connect_to</span>(ip, <span class=\"built_in\">atoi</span>(port.<span class=\"built_in\">c_str</span>()))) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">perror</span>((<span class=\"string\">&quot;connect to &quot;</span> + ip + <span class=\"string\">&quot;:&quot;</span> + port + <span class=\"string\">&quot; failed&quot;</span>).<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">char</span> msg[<span class=\"number\">1024</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> iret;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(msg, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(msg));</span><br><span class=\"line\">        <span class=\"built_in\">sprintf</span>(msg, <span class=\"string\">&quot;test message %d&quot;</span>, i + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 向服务端发送请求报文</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tcp_client.<span class=\"built_in\">send</span>(msg)) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> errormsg[<span class=\"number\">32</span>];</span><br><span class=\"line\">            <span class=\"built_in\">sprintf</span>(errormsg, <span class=\"string\">&quot;message %d send failed&quot;</span>, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(errormsg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;send: &quot;</span> &lt;&lt; msg &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">        string received_message;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tcp_client.<span class=\"built_in\">receive</span>(received_message, <span class=\"number\">1024</span>)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;received failed&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;received: &quot;</span> &lt;&lt; received_message &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"built_in\">sleep</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"封装socket服务端\">封装socket服务端</h3>\n<h4 id=\"单进程单线程服务端\">单进程单线程服务端</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">tcpServer</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> listen_sock;            <span class=\"comment\">// 用于监听的socket。-1表示未初始化</span></span><br><span class=\"line\">    <span class=\"type\">int</span> client_sock;            <span class=\"comment\">// 客户端连上的的socket，用于和客户端通信。-1表示客户端未连接。</span></span><br><span class=\"line\">    string client_ip;           <span class=\"comment\">// 客户端的ip</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">short</span> port;        <span class=\"comment\">// 服务端用于通讯的端口</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">tcpServer</span>() : <span class=\"built_in\">listen_sock</span>(<span class=\"number\">-1</span>), <span class=\"built_in\">client_sock</span>(<span class=\"number\">-1</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">tcpServer</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (listen_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">closeListen</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">closeClient</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">initServer</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">short</span> &amp;in_port)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化服务端用于监听的socket</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((listen_sock = <span class=\"built_in\">socket</span>(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR socket init failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        port = in_port;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将服务端用于通信的ip和端口绑定到socket上</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">sockaddr_in</span> server_addr;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(&amp;server_addr, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(server_addr));</span><br><span class=\"line\">        server_addr.sin_family = AF_INET;                       <span class=\"comment\">// 协议</span></span><br><span class=\"line\">        server_addr.sin_port = <span class=\"built_in\">htons</span>(port);                     <span class=\"comment\">// 指定服务端的通信端口</span></span><br><span class=\"line\">        server_addr.sin_addr.s_addr = <span class=\"built_in\">htonl</span>(INADDR_ANY);        <span class=\"comment\">// 如果操作系统有多个ip，则多个ip都可以用于通信</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 为socket绑定ip和端口</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">bind</span>(listen_sock, (<span class=\"keyword\">struct</span> sockaddr *) &amp;server_addr, <span class=\"built_in\">sizeof</span>(server_addr)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR socket bind failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"built_in\">close</span>(listen_sock);</span><br><span class=\"line\">            listen_sock = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">listen</span>(listen_sock, <span class=\"number\">5</span>)) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR listening start failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">accept</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">sockaddr_in</span> client_addr;             <span class=\"comment\">// 客户端的地址信息</span></span><br><span class=\"line\">        <span class=\"type\">socklen_t</span> addrlen = <span class=\"built_in\">sizeof</span>(client_addr);    <span class=\"comment\">// struct sockaddr_in的大小</span></span><br><span class=\"line\">        <span class=\"comment\">// 注意accept函数的第三个参数是指针：因为accept函数需要将实际接收到的消息长度写回addrlen</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((client_sock = ::<span class=\"built_in\">accept</span>(listen_sock, (<span class=\"keyword\">struct</span> sockaddr *) &amp;client_addr, &amp;addrlen)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;accept failed&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        client_ip = <span class=\"built_in\">inet_ntoa</span>(client_addr.sin_addr);          <span class=\"comment\">// 将客户端的代码从大端序转换为字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">send</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;socket no connected&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((::<span class=\"built_in\">send</span>(client_sock, msg.<span class=\"built_in\">data</span>(), msg.<span class=\"built_in\">size</span>(), <span class=\"number\">0</span>) &lt;= <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;send message failed&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">recv</span><span class=\"params\">(string &amp;msg, <span class=\"type\">const</span> <span class=\"type\">size_t</span> maxLen)</span> </span>&#123;</span><br><span class=\"line\">        msg.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        msg.<span class=\"built_in\">resize</span>(maxLen);</span><br><span class=\"line\">        <span class=\"type\">int</span> read_byte_number = ::<span class=\"built_in\">recv</span>(client_sock, &amp;msg[<span class=\"number\">0</span>], msg.<span class=\"built_in\">size</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (read_byte_number &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            msg.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;receive failed&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        msg.<span class=\"built_in\">resize</span>(read_byte_number);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">closeListen</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (listen_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;not listening&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">close</span>(listen_sock);</span><br><span class=\"line\">        listen_sock = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">closeClient</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;not listening&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">close</span>(client_sock);</span><br><span class=\"line\">        client_sock = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取string格式的ip地址</span></span><br><span class=\"line\">    [[nodiscard]] <span class=\"function\"><span class=\"type\">const</span> string &amp;<span class=\"title\">clientip</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> client_ip;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    tcpServer tcp_server;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">initServer</span>(<span class=\"number\">5005</span>)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;initsServer() failed&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">accept</span>()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;accept failed&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;client connected&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    string msg;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 接收客户端发来的报文，如果客户端没有发来报文，recv将阻塞等待</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">recv</span>(msg, <span class=\"number\">1024</span>)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;receive failed&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;received: &quot;</span> &lt;&lt; msg &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">        msg = <span class=\"string\">&quot;OK&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 向客户端发送报文</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">send</span>(msg)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;send failed&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;send: &quot;</span> &lt;&lt; msg &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"built_in\">sleep</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"多进程服务端\">多进程服务端</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;csignal&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">tcpServer</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> listen_sock;            <span class=\"comment\">// 用于监听的socket。-1表示未初始化</span></span><br><span class=\"line\">    <span class=\"type\">int</span> client_sock;            <span class=\"comment\">// 客户端连上的的socket，用于和客户端通信。-1表示客户端未连接。</span></span><br><span class=\"line\">    string client_ip;           <span class=\"comment\">// 客户端的ip</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">short</span> port;        <span class=\"comment\">// 服务端用于通讯的端口</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">tcpServer</span>() : <span class=\"built_in\">listen_sock</span>(<span class=\"number\">-1</span>), <span class=\"built_in\">client_sock</span>(<span class=\"number\">-1</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">tcpServer</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (listen_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">closeListen</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">closeClient</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">initServer</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">short</span> &amp;in_port)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化服务端用于监听的socket</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((listen_sock = <span class=\"built_in\">socket</span>(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR socket init failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        port = in_port;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将服务端用于通信的ip和端口绑定到socket上</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">sockaddr_in</span> server_addr;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(&amp;server_addr, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(server_addr));</span><br><span class=\"line\">        server_addr.sin_family = AF_INET;                       <span class=\"comment\">// 协议</span></span><br><span class=\"line\">        server_addr.sin_port = <span class=\"built_in\">htons</span>(port);                     <span class=\"comment\">// 指定服务端的通信端口</span></span><br><span class=\"line\">        server_addr.sin_addr.s_addr = <span class=\"built_in\">htonl</span>(INADDR_ANY);        <span class=\"comment\">// 如果操作系统有多个ip，则多个ip都可以用于通信</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 为socket绑定ip和端口</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">bind</span>(listen_sock, (<span class=\"keyword\">struct</span> sockaddr *) &amp;server_addr, <span class=\"built_in\">sizeof</span>(server_addr)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR socket bind failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"built_in\">close</span>(listen_sock);</span><br><span class=\"line\">            listen_sock = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">listen</span>(listen_sock, <span class=\"number\">5</span>)) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR listening start failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">accept</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">sockaddr_in</span> client_addr;             <span class=\"comment\">// 客户端的地址信息</span></span><br><span class=\"line\">        <span class=\"type\">socklen_t</span> addrlen = <span class=\"built_in\">sizeof</span>(client_addr);    <span class=\"comment\">// struct sockaddr_in的大小</span></span><br><span class=\"line\">        <span class=\"comment\">// 注意accept函数的第三个参数是指针：因为accept函数需要将实际接收到的消息长度写回addrlen</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((client_sock = ::<span class=\"built_in\">accept</span>(listen_sock, (<span class=\"keyword\">struct</span> sockaddr *) &amp;client_addr, &amp;addrlen)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;accept failed&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        client_ip = <span class=\"built_in\">inet_ntoa</span>(client_addr.sin_addr);          <span class=\"comment\">// 将客户端的代码从大端序转换为字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">send</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;socket no connected&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((::<span class=\"built_in\">send</span>(client_sock, msg.<span class=\"built_in\">data</span>(), msg.<span class=\"built_in\">size</span>(), <span class=\"number\">0</span>) &lt;= <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;send message failed&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">recv</span><span class=\"params\">(string &amp;msg, <span class=\"type\">const</span> <span class=\"type\">size_t</span> maxLen)</span> </span>&#123;</span><br><span class=\"line\">        msg.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        msg.<span class=\"built_in\">resize</span>(maxLen);</span><br><span class=\"line\">        <span class=\"type\">int</span> read_byte_number = ::<span class=\"built_in\">recv</span>(client_sock, &amp;msg[<span class=\"number\">0</span>], msg.<span class=\"built_in\">size</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (read_byte_number &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            msg.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;receive failed&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        msg.<span class=\"built_in\">resize</span>(read_byte_number);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">closeListen</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (listen_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;not listening&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">close</span>(listen_sock);</span><br><span class=\"line\">        listen_sock = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">closeClient</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;not listening&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">close</span>(client_sock);</span><br><span class=\"line\">        client_sock = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取string格式的ip地址</span></span><br><span class=\"line\">    [[nodiscard]] <span class=\"function\"><span class=\"type\">const</span> string &amp;<span class=\"title\">clientip</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> client_ip;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">tcpServer tcp_server;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">fatherEXIT</span><span class=\"params\">(<span class=\"type\">int</span> sig)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 以下代码是为了防止信号处理函数在执行过程中再次被信号中断</span></span><br><span class=\"line\">    <span class=\"built_in\">signal</span>(SIGINT, SIG_IGN);</span><br><span class=\"line\">    <span class=\"built_in\">signal</span>(SIGTERM, SIG_IGN);</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;父进程退出： &quot;</span> &lt;&lt; sig &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">kill</span>(<span class=\"number\">0</span>, SIGTERM);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ---------------在这里增加释放资源的代码---------------</span></span><br><span class=\"line\">    tcp_server.<span class=\"built_in\">closeListen</span>();</span><br><span class=\"line\">    <span class=\"comment\">// --------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">childEXIT</span><span class=\"params\">(<span class=\"type\">int</span> sig)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">signal</span>(SIGINT, SIG_IGN);</span><br><span class=\"line\">    <span class=\"built_in\">signal</span>(SIGTERM, SIG_IGN);</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;子进程退出： &quot;</span> &lt;&lt; sig &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ------在这里增加释放资源的代码（只释放子进程的资源）------</span></span><br><span class=\"line\">    tcp_server.<span class=\"built_in\">closeClient</span>();       <span class=\"comment\">// 信号处理函数中只能访问全局对象，tcp_server必须定义为全局变量</span></span><br><span class=\"line\">    <span class=\"comment\">// --------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">initServer</span>(<span class=\"number\">5005</span>)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;initsServer() failed&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 忽略全部信号，不希望被打扰。顺便解决僵尸进程的问题</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">64</span>; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">signal</span>(i, SIG_IGN);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 设置信号，在shell下可以用 &#x27;kill 进程号&#x27; 和 &#x27;Ctrl+C&#x27; 正常终止这些线程</span></span><br><span class=\"line\">    <span class=\"comment\">// 但请不要用 &#x27;kill -9 进程号&#x27; 强行终止线程</span></span><br><span class=\"line\">    <span class=\"built_in\">signal</span>(SIGTERM, fatherEXIT);</span><br><span class=\"line\">    <span class=\"built_in\">signal</span>(SIGINT, fatherEXIT);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 受理(监听)客户端的连接，从已连接的客户端中取出一个客户端</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果没有已连接的客户端，accept函数将阻塞等待</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">accept</span>()) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;accept failed&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;client connected&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> pid = fork();</span><br><span class=\"line\">        <span class=\"comment\">// 系统资源不足</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pid == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;fork&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pid &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            tcp_server.<span class=\"built_in\">closeClient</span>();           <span class=\"comment\">// 多进程下，服务器父进程不需要客户端的socket，关闭</span></span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;           <span class=\"comment\">// 父进程返回循环开始位置，继续受理客户端连接</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        tcp_server.<span class=\"built_in\">closeListen</span>();           <span class=\"comment\">// 子进程不需要监听socket，关闭</span></span><br><span class=\"line\">        <span class=\"comment\">// 子进程需要重新设置信号</span></span><br><span class=\"line\">        <span class=\"built_in\">signal</span>(SIGTERM, childEXIT);         <span class=\"comment\">// 使用kill命令终止进程时，会产生SIGTERM信号，执行childEXIT函数</span></span><br><span class=\"line\">        <span class=\"built_in\">signal</span>(SIGINT, childEXIT);          <span class=\"comment\">// 按下ctrl+c会触发SIGINT信号，执行childEXIT函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 子进程负责与客户端进行通讯</span></span><br><span class=\"line\">        string msg;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 接收客户端发来的报文，如果客户端没有发来报文，recv将阻塞等待</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">recv</span>(msg, <span class=\"number\">1024</span>)) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;receive failed&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                cout &lt;&lt; <span class=\"string\">&quot;received: &quot;</span> &lt;&lt; msg &lt;&lt; <span class=\"string\">&quot;------thread id: &quot;</span> &lt;&lt; <span class=\"built_in\">getpid</span>() &lt;&lt; endl;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            msg = <span class=\"string\">&quot;OK&quot;</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 向客户端发送报文</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">send</span>(msg)) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;send failed&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                cout &lt;&lt; <span class=\"string\">&quot;send: &quot;</span> &lt;&lt; msg &lt;&lt; endl;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">sleep</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;           <span class=\"comment\">// 子进程通信完成后一定要退出，否则就会回到accept()函数的位置</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"文件传输\">文件传输</h4>\n<h5 id=\"客户端\">客户端</h5>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;netdb.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">tcpClient</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> client_sock;        <span class=\"comment\">// 客户端socket，-1表示未连接或者已断开。&gt;=0表示有效的socket</span></span><br><span class=\"line\">    string ip;              <span class=\"comment\">// 服务端的ip或域名</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">short</span> port;    <span class=\"comment\">// 通讯端口</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">tcpClient</span>() : <span class=\"built_in\">client_sock</span>(<span class=\"number\">-1</span>), <span class=\"built_in\">port</span>(<span class=\"number\">-1</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">tcpClient</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">close</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @param in_ip 客户端ip/域名</span></span><br><span class=\"line\"><span class=\"comment\">     * @param in_port 端口号</span></span><br><span class=\"line\"><span class=\"comment\">     * @return 成功返回true，失败返回false</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">connect_to</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;in_ip, <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">short</span> in_port)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: sock connect is already exist&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 保存服务端ip和端口号</span></span><br><span class=\"line\">        ip = in_ip;</span><br><span class=\"line\">        port = in_port;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建客户端Socket</span></span><br><span class=\"line\">        client_sock = <span class=\"built_in\">socket</span>(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;创建Socket失败&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 配置服务器地址</span></span><br><span class=\"line\">        sockaddr_in server_addr&#123;&#125;;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(&amp;server_addr, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(server_addr));</span><br><span class=\"line\">        server_addr.sin_family = AF_INET;</span><br><span class=\"line\">        server_addr.sin_port = <span class=\"built_in\">htons</span>(port);</span><br><span class=\"line\">        <span class=\"comment\">// server_addr.sin_addr.s_addr = inet_addr(in_ip.c_str());      // 该方法只能用ip，不能用域名</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">hostent</span> *h;          <span class=\"comment\">// 用于存放服务端的大端序ip的结构体的指针</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((h = <span class=\"built_in\">gethostbyname</span>(ip.<span class=\"built_in\">c_str</span>())) == <span class=\"literal\">nullptr</span>)      <span class=\"comment\">// 把域名、主机名、字符串格式的ip转换为结构体，存储在h中</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ::<span class=\"built_in\">close</span>(client_sock);     <span class=\"comment\">// 关闭sock连接</span></span><br><span class=\"line\">            client_sock = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(&amp;server_addr.sin_addr, h-&gt;h_addr, h-&gt;h_length);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 连接服务器</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">connect</span>(client_sock, (sockaddr *) &amp;server_addr, <span class=\"built_in\">sizeof</span>(server_addr)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;连接服务器失败&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            ::<span class=\"built_in\">close</span>(client_sock);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">send</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;msg)</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 参数使用string，不使用const char*，因为const char*</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: not connected&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 或者：if (send(client_sock, msg.c_str(), msg.length(), 0))      // 语义不准确：buffer可以是string，也可以是一块内存</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (::<span class=\"built_in\">send</span>(client_sock, msg.<span class=\"built_in\">data</span>(), msg.<span class=\"built_in\">size</span>(), <span class=\"number\">0</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: send failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用于传输二进制</span></span><br><span class=\"line\"><span class=\"comment\">     * @param msg 要传输的数据（可以是结构体）</span></span><br><span class=\"line\"><span class=\"comment\">     * @param size 数据大小</span></span><br><span class=\"line\"><span class=\"comment\">     * @return</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">send</span><span class=\"params\">(<span class=\"type\">void</span> *msg, <span class=\"type\">const</span> <span class=\"type\">size_t</span> size)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 参数使用string，不使用const char*，因为const char*</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: not connected&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 或者：if (send(client_sock, msg.c_str(), msg.length(), 0))      // 语义不准确：buffer可以是string，也可以是一块内存</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (::<span class=\"built_in\">send</span>(client_sock, msg, size, <span class=\"number\">0</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: send failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">sendFile</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;filePath, <span class=\"type\">const</span> <span class=\"type\">size_t</span> fileSize)</span> </span>&#123;</span><br><span class=\"line\">        ifstream fin;</span><br><span class=\"line\">        fin.<span class=\"built_in\">open</span>(filePath, ios::in | ios::binary);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!fin.<span class=\"built_in\">is_open</span>()) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;file open failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> onRead = <span class=\"number\">0</span>;         <span class=\"comment\">// 每次调用 fin.read() 打算读取的字节数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> totalByte = <span class=\"number\">0</span>;      <span class=\"comment\">// 从文件中已读取的总字节数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> bufferSize = <span class=\"number\">4096</span>;  <span class=\"comment\">// 缓冲区大小，单位byte</span></span><br><span class=\"line\">        <span class=\"type\">char</span> buffer[bufferSize];         <span class=\"comment\">// 存放读取数据的buffer。实际开发中，一般在1000～5000之间。</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">memset</span>(buffer, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(buffer));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fileSize - totalByte &gt; bufferSize) &#123;</span><br><span class=\"line\">                onRead = bufferSize;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                onRead = fileSize - totalByte;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            fin.<span class=\"built_in\">read</span>(buffer, onRead);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"built_in\">send</span>(buffer, onRead)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            totalByte += onRead;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (totalByte == fileSize) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        fin.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @param msg 存放接收到的内容</span></span><br><span class=\"line\"><span class=\"comment\">     * @param maxLen 接收的最大长度</span></span><br><span class=\"line\"><span class=\"comment\">     * @return</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">receive</span><span class=\"params\">(string &amp;msg, <span class=\"type\">const</span> <span class=\"type\">size_t</span> maxLen)</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: not connected&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        msg.<span class=\"built_in\">clear</span>();        <span class=\"comment\">// 清空容器</span></span><br><span class=\"line\">        msg.<span class=\"built_in\">resize</span>(maxLen);     <span class=\"comment\">// 设置容器大小</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 如果直接操作string对象的内存，需要保证亮点：</span></span><br><span class=\"line\"><span class=\"comment\">         *      1. 不能越界</span></span><br><span class=\"line\"><span class=\"comment\">         *      2. 操作后需要手动设置string的大小（resize函数）。(因为直接操作string对象的内存后，string对象自动管理内存的功能就会失效)</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         * 传地址除了使用msg[0]，还可以使用msg.c_str()，msg.data()。</span></span><br><span class=\"line\"><span class=\"comment\">         * 但是后两种获取到的都是const类型，无法修改，而recv函数需要将收到的数据写入msg中</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">int</span> read_byte_number = ::<span class=\"built_in\">recv</span>(client_sock, &amp;msg[<span class=\"number\">0</span>], msg.<span class=\"built_in\">size</span>(), <span class=\"number\">0</span>); <span class=\"comment\">// 返回接收数据的大小，-1表示失败，0表示sock已断开</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (read_byte_number &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: receive failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            msg.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        msg.<span class=\"built_in\">resize</span>(read_byte_number);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: not connected&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ::<span class=\"built_in\">close</span>(client_sock);</span><br><span class=\"line\"></span><br><span class=\"line\">        client_sock = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过stat结构体 获得文件大小，单位字节</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">getFileSize</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *fileName)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fileName == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这是一个存储文件(夹)信息的结构体，其中有文件大小和创建时间、访问时间、修改时间等</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">stat</span> statbuf;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 提供文件名字符串，获得文件属性结构体</span></span><br><span class=\"line\">    <span class=\"built_in\">stat</span>(fileName, &amp;statbuf);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取文件大小</span></span><br><span class=\"line\">    <span class=\"type\">size_t</span> filesize = statbuf.st_size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> filesize;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;------------------- client start -------------------&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    tcpClient tcp_client;</span><br><span class=\"line\">    string ip = <span class=\"string\">&quot;127.0.0.1&quot;</span>;</span><br><span class=\"line\">    string port = <span class=\"string\">&quot;5005&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tcp_client.<span class=\"built_in\">connect_to</span>(ip, <span class=\"built_in\">atoi</span>(port.<span class=\"built_in\">c_str</span>()))) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">perror</span>((<span class=\"string\">&quot;connect to &quot;</span> + ip + <span class=\"string\">&quot;:&quot;</span> + port + <span class=\"string\">&quot; failed&quot;</span>).<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 发送文件</span></span><br><span class=\"line\">    <span class=\"comment\">// 把待传文件名和文件大小发送给服务端</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">fileInfo</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> fileName[<span class=\"number\">256</span>];     <span class=\"comment\">// 文件目录和文件名。与程序运行位置(工作目录)联系紧密，工作目录不同，fileName对应的路径也不同</span></span><br><span class=\"line\">        <span class=\"type\">int</span> fileSize;           <span class=\"comment\">// 文件大小</span></span><br><span class=\"line\">    &#125; fileinfo;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;fileinfo, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(fileInfo));</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(fileinfo.fileName, <span class=\"string\">&quot;test.txt&quot;</span>);</span><br><span class=\"line\">    fileinfo.fileSize = (<span class=\"type\">int</span>) <span class=\"built_in\">getFileSize</span>(fileinfo.fileName);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tcp_client.<span class=\"built_in\">send</span>(&amp;fileinfo, <span class=\"built_in\">sizeof</span>(fileinfo))) &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> errormsg[<span class=\"number\">32</span>];</span><br><span class=\"line\">        <span class=\"built_in\">sprintf</span>(errormsg, <span class=\"string\">&quot;fileInfo send failed&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">perror</span>(errormsg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;发送文件信息: fileName: &quot;</span> &lt;&lt; fileinfo.fileName &lt;&lt; <span class=\"string\">&quot;  fileSize: &quot;</span> &lt;&lt; fileinfo.fileSize &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 等待服务端的确认</span></span><br><span class=\"line\">    string buffer;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tcp_client.<span class=\"built_in\">receive</span>(buffer, <span class=\"number\">2</span>)) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;receive error&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (buffer != <span class=\"string\">&quot;OK&quot;</span>) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;receive message error&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 发送文件给服务端</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tcp_client.<span class=\"built_in\">sendFile</span>(fileinfo.fileName, fileinfo.fileSize)) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;file send error&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 等待服务端的确认</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tcp_client.<span class=\"built_in\">receive</span>(buffer, <span class=\"number\">2</span>)) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;no &#x27;OK&#x27; received&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (buffer != <span class=\"string\">&quot;OK&quot;</span>) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;ERROR receive&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;received &#x27;OK&#x27;&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"服务端\">服务端</h5>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;csignal&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">tcpServer</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> listen_sock;            <span class=\"comment\">// 用于监听的socket。-1表示未初始化</span></span><br><span class=\"line\">    <span class=\"type\">int</span> client_sock;            <span class=\"comment\">// 客户端连上的的socket，用于和客户端通信。-1表示客户端未连接。</span></span><br><span class=\"line\">    string client_ip;           <span class=\"comment\">// 客户端的ip</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">short</span> port;        <span class=\"comment\">// 服务端用于通讯的端口</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">tcpServer</span>() : <span class=\"built_in\">listen_sock</span>(<span class=\"number\">-1</span>), <span class=\"built_in\">client_sock</span>(<span class=\"number\">-1</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">tcpServer</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (listen_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">closeListen</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">closeClient</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">initServer</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">short</span> &amp;in_port)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化服务端用于监听的socket</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((listen_sock = <span class=\"built_in\">socket</span>(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR socket init failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        port = in_port;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将服务端用于通信的ip和端口绑定到socket上</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">sockaddr_in</span> server_addr;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(&amp;server_addr, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(server_addr));</span><br><span class=\"line\">        server_addr.sin_family = AF_INET;                       <span class=\"comment\">// 协议</span></span><br><span class=\"line\">        server_addr.sin_port = <span class=\"built_in\">htons</span>(port);                     <span class=\"comment\">// 指定服务端的通信端口</span></span><br><span class=\"line\">        server_addr.sin_addr.s_addr = <span class=\"built_in\">htonl</span>(INADDR_ANY);        <span class=\"comment\">// 如果操作系统有多个ip，则多个ip都可以用于通信</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 为socket绑定ip和端口</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">bind</span>(listen_sock, (<span class=\"keyword\">struct</span> sockaddr *) &amp;server_addr, <span class=\"built_in\">sizeof</span>(server_addr)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR socket bind failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"built_in\">close</span>(listen_sock);</span><br><span class=\"line\">            listen_sock = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">listen</span>(listen_sock, <span class=\"number\">5</span>)) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR listening start failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">accept</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">sockaddr_in</span> client_addr;             <span class=\"comment\">// 客户端的地址信息</span></span><br><span class=\"line\">        <span class=\"type\">socklen_t</span> addrlen = <span class=\"built_in\">sizeof</span>(client_addr);    <span class=\"comment\">// struct sockaddr_in的大小</span></span><br><span class=\"line\">        <span class=\"comment\">// 注意accept函数的第三个参数是指针：因为accept函数需要将实际接收到的消息长度写回addrlen</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((client_sock = ::<span class=\"built_in\">accept</span>(listen_sock, (<span class=\"keyword\">struct</span> sockaddr *) &amp;client_addr, &amp;addrlen)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;accept failed&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        client_ip = <span class=\"built_in\">inet_ntoa</span>(client_addr.sin_addr);          <span class=\"comment\">// 将客户端的代码从大端序转换为字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">send</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;socket no connected&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((::<span class=\"built_in\">send</span>(client_sock, msg.<span class=\"built_in\">data</span>(), msg.<span class=\"built_in\">size</span>(), <span class=\"number\">0</span>) &lt;= <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;send message failed&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存放接收到的字符串数据</span></span><br><span class=\"line\"><span class=\"comment\">     * @param msg</span></span><br><span class=\"line\"><span class=\"comment\">     * @param maxLen</span></span><br><span class=\"line\"><span class=\"comment\">     * @return</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">recv</span><span class=\"params\">(string &amp;msg, <span class=\"type\">const</span> <span class=\"type\">size_t</span> maxLen)</span> </span>&#123;</span><br><span class=\"line\">        msg.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        msg.<span class=\"built_in\">resize</span>(maxLen);</span><br><span class=\"line\">        <span class=\"type\">int</span> read_byte_number = ::<span class=\"built_in\">recv</span>(client_sock, &amp;msg[<span class=\"number\">0</span>], msg.<span class=\"built_in\">size</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (read_byte_number &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            msg.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;receive failed&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        msg.<span class=\"built_in\">resize</span>(read_byte_number);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存放接收到的二进制数据</span></span><br><span class=\"line\"><span class=\"comment\">     * @param msg</span></span><br><span class=\"line\"><span class=\"comment\">     * @param maxLen</span></span><br><span class=\"line\"><span class=\"comment\">     * @return</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">recv</span><span class=\"params\">(<span class=\"type\">void</span> *msg, <span class=\"type\">const</span> <span class=\"type\">size_t</span> maxLen)</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: not connected&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> read_byte_number = ::<span class=\"built_in\">recv</span>(client_sock, msg, maxLen, <span class=\"number\">0</span>); <span class=\"comment\">// 返回接收数据的大小，-1表示失败，0表示sock已断开</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (read_byte_number &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ERROR: receive failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 接收文件</span></span><br><span class=\"line\"><span class=\"comment\">     * @param filePath 文件路径和文件名</span></span><br><span class=\"line\"><span class=\"comment\">     * @param fileSize 文件大小</span></span><br><span class=\"line\"><span class=\"comment\">     * @return</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">receiveFile</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;filePath, <span class=\"type\">const</span> <span class=\"type\">size_t</span> fileSize)</span> </span>&#123;</span><br><span class=\"line\">        ofstream fout;</span><br><span class=\"line\">        fout.<span class=\"built_in\">open</span>(filePath, ios::binary | ios::out);</span><br><span class=\"line\">        fout&lt;&lt;<span class=\"string\">&quot;iii&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!fout.<span class=\"built_in\">is_open</span>()) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;file open failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> totalByte = <span class=\"number\">0</span>;          <span class=\"comment\">// 已接收文件的总字节数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> onRead = <span class=\"number\">0</span>;             <span class=\"comment\">// 本次打算接收的字节数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> bufferSize = <span class=\"number\">4096</span>;  \t<span class=\"comment\">// 缓冲区大小，单位byte</span></span><br><span class=\"line\">        <span class=\"type\">char</span> buffer[bufferSize];             <span class=\"comment\">// 接收文件内容的缓冲区，实际开发中，一般在1000～5000之间。</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fileSize - totalByte &gt; bufferSize) &#123;</span><br><span class=\"line\">                onRead = bufferSize;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                onRead = fileSize - totalByte;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"built_in\">recv</span>(buffer, onRead)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            fout.<span class=\"built_in\">write</span>(buffer, onRead);</span><br><span class=\"line\"></span><br><span class=\"line\">            totalByte += onRead;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (totalByte == fileSize) &#123;</span><br><span class=\"line\">                fout.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">closeListen</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (listen_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;not listening&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">close</span>(listen_sock);</span><br><span class=\"line\">        listen_sock = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">closeClient</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (client_sock == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;not listening&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">close</span>(client_sock);</span><br><span class=\"line\">        client_sock = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取string格式的ip地址</span></span><br><span class=\"line\">    [[nodiscard]] <span class=\"function\"><span class=\"type\">const</span> string &amp;<span class=\"title\">clientip</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> client_ip;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">tcpServer tcp_server;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">fatherEXIT</span><span class=\"params\">(<span class=\"type\">int</span> sig)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 以下代码是为了防止信号处理函数在执行过程中再次被信号中断</span></span><br><span class=\"line\">    <span class=\"built_in\">signal</span>(SIGINT, SIG_IGN);</span><br><span class=\"line\">    <span class=\"built_in\">signal</span>(SIGTERM, SIG_IGN);</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;父进程退出： &quot;</span> &lt;&lt; sig &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">kill</span>(<span class=\"number\">0</span>, SIGTERM);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ---------------在这里增加释放资源的代码---------------</span></span><br><span class=\"line\">    tcp_server.<span class=\"built_in\">closeListen</span>();</span><br><span class=\"line\">    <span class=\"comment\">// --------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">childEXIT</span><span class=\"params\">(<span class=\"type\">int</span> sig)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">signal</span>(SIGINT, SIG_IGN);</span><br><span class=\"line\">    <span class=\"built_in\">signal</span>(SIGTERM, SIG_IGN);</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;子进程退出： &quot;</span> &lt;&lt; sig &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ------在这里增加释放资源的代码（只释放子进程的资源）------</span></span><br><span class=\"line\">    tcp_server.<span class=\"built_in\">closeClient</span>();       <span class=\"comment\">// 信号处理函数中只能访问全局对象，tcp_server必须定义为全局变量</span></span><br><span class=\"line\">    <span class=\"comment\">// --------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">initServer</span>(<span class=\"number\">5005</span>)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;initsServer() failed&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 忽略全部信号，不希望被打扰。顺便解决僵尸进程的问题</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">64</span>; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">signal</span>(i, SIG_IGN);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 设置信号，在shell下可以用 &#x27;kill 进程号&#x27; 和 &#x27;Ctrl+C&#x27; 正常终止这些线程</span></span><br><span class=\"line\">    <span class=\"comment\">// 但请不要用 &#x27;kill -9 进程号&#x27; 强行终止线程</span></span><br><span class=\"line\">    <span class=\"built_in\">signal</span>(SIGTERM, fatherEXIT);</span><br><span class=\"line\">    <span class=\"built_in\">signal</span>(SIGINT, fatherEXIT);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 受理(监听)客户端的连接，从已连接的客户端中取出一个客户端</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果没有已连接的客户端，accept函数将阻塞等待</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">accept</span>()) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;accept failed&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;client connected&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> pid = fork();</span><br><span class=\"line\">        <span class=\"comment\">// 系统资源不足</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pid == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;fork&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pid &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            tcp_server.<span class=\"built_in\">closeClient</span>();           <span class=\"comment\">// 多进程下，服务器父进程不需要客户端的socket，关闭</span></span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;           <span class=\"comment\">// 父进程返回循环开始位置，继续受理客户端连接</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        tcp_server.<span class=\"built_in\">closeListen</span>();           <span class=\"comment\">// 子进程不需要监听socket，关闭</span></span><br><span class=\"line\">        <span class=\"comment\">// 子进程需要重新设置信号</span></span><br><span class=\"line\">        <span class=\"built_in\">signal</span>(SIGTERM, childEXIT);         <span class=\"comment\">// 使用kill命令终止进程时，会产生SIGTERM信号，执行childEXIT函数</span></span><br><span class=\"line\">        <span class=\"built_in\">signal</span>(SIGINT, childEXIT);          <span class=\"comment\">// 按下ctrl+c会触发SIGINT信号，执行childEXIT函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 接收文件</span></span><br><span class=\"line\">        <span class=\"comment\">// 接收客户端发来的文件信息</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">fileInfo</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> fileName[<span class=\"number\">256</span>];     <span class=\"comment\">// 文件名</span></span><br><span class=\"line\">            <span class=\"type\">int</span> fileSize;           <span class=\"comment\">// 文件大小</span></span><br><span class=\"line\">        &#125; fileinfo;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(&amp;fileinfo, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(fileinfo));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">recv</span>(&amp;fileinfo, <span class=\"built_in\">sizeof</span>(fileinfo))) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;fileInfo receive failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">strcpy</span>(fileinfo.fileName, <span class=\"string\">&quot;test(1).txt&quot;</span>);</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;received: fileName: &quot;</span> &lt;&lt; fileinfo.fileName &lt;&lt; <span class=\"string\">&quot;  fileSize: &quot;</span> &lt;&lt; fileinfo.fileSize &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 给客户端发送确认报文</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">send</span>(<span class=\"string\">&quot;OK&quot;</span>)) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;send error&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 接收文件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">receiveFile</span>(fileinfo.fileName, fileinfo.fileSize)) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;received file error&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;file receive success&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 给客户端发送确认报文</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tcp_server.<span class=\"built_in\">send</span>(<span class=\"string\">&quot;OK&quot;</span>)) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;send &#x27;OK&#x27; failed&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;           <span class=\"comment\">// 子进程通信完成后一定要退出，否则就会回到accept()函数的位置</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Linux多进程编程","date":"2025-07-05T16:00:00.000Z","_content":"\n## Linux多进程\n\n### 基本函数\n\n#### fork()函数\n\n用于创建一个进程，所创建的进程复制父进程的**代码段/数据段/BSS段/堆/栈等所有用户空间信息**；在内核中操作系统重新为其申请了一个PCB，并使用父进程的PCB进行初始化。\n\n```cpp\npid_t fork();\t\t// pid_t实际上时int类型\n```\n\n> `fork`时可以看作==父进程在fork执行的位置进行了一次分裂，分裂出一个子进程==。父进程从`fork`的返回值得到子进程的`pid`，子进程在`fork`位置得到返回值0,并且从fork的下一句开始执行。\n\n- 使用实例：\n\n```cpp\nint main()\n{\n\tpid_t fpid; //fpid表示fork函数返回的值\n    int count = 0;\n    fpid = fork();\n    if (fpid < 0)\n        cout << \"error in fork!\" << endl;\n    else if (fpid == 0) {\n        cout << \"i am the child process, my process id is \" << getpid() << endl;\n        cout << \"我子进程\" << endl;\n        count++;\n    } else {\n        cout << \"i am the parent process, my process id is \" << getpid() << endl;\n        cout << \"我是父进程\" << endl;\n        count++;\n    }\n    cout << \"统计结果是: \" << count << endl;\n\treturn 0;\n}\n```\n\n#### `getpid()`和`gitppid()`\n\n- `gitpid()`: 获取当前进程的`pid`值\n- `gitppid()`: 获取当前进程的父进程的`pid`值\n\n### 进程间通信\n\n","source":"_posts/系统编程/多进程.md","raw":"---\ntitle: Linux多进程编程\ndate: 2025-07-06\ntags: [Linux, 并发, C++]\ncategories: 系统编程\n---\n\n## Linux多进程\n\n### 基本函数\n\n#### fork()函数\n\n用于创建一个进程，所创建的进程复制父进程的**代码段/数据段/BSS段/堆/栈等所有用户空间信息**；在内核中操作系统重新为其申请了一个PCB，并使用父进程的PCB进行初始化。\n\n```cpp\npid_t fork();\t\t// pid_t实际上时int类型\n```\n\n> `fork`时可以看作==父进程在fork执行的位置进行了一次分裂，分裂出一个子进程==。父进程从`fork`的返回值得到子进程的`pid`，子进程在`fork`位置得到返回值0,并且从fork的下一句开始执行。\n\n- 使用实例：\n\n```cpp\nint main()\n{\n\tpid_t fpid; //fpid表示fork函数返回的值\n    int count = 0;\n    fpid = fork();\n    if (fpid < 0)\n        cout << \"error in fork!\" << endl;\n    else if (fpid == 0) {\n        cout << \"i am the child process, my process id is \" << getpid() << endl;\n        cout << \"我子进程\" << endl;\n        count++;\n    } else {\n        cout << \"i am the parent process, my process id is \" << getpid() << endl;\n        cout << \"我是父进程\" << endl;\n        count++;\n    }\n    cout << \"统计结果是: \" << count << endl;\n\treturn 0;\n}\n```\n\n#### `getpid()`和`gitppid()`\n\n- `gitpid()`: 获取当前进程的`pid`值\n- `gitppid()`: 获取当前进程的父进程的`pid`值\n\n### 进程间通信\n\n","slug":"系统编程/多进程","published":1,"updated":"2025-09-14T02:36:11.049Z","comments":1,"layout":"post","photos":[],"_id":"cmfktk7es0011c04p8bl4br3l","content":"<h2 id=\"Linux多进程\">Linux多进程</h2>\n<h3 id=\"基本函数\">基本函数</h3>\n<h4 id=\"fork-函数\">fork()函数</h4>\n<p>用于创建一个进程，所创建的进程复制父进程的<strong>代码段/数据段/BSS段/堆/栈等所有用户空间信息</strong>；在内核中操作系统重新为其申请了一个PCB，并使用父进程的PCB进行初始化。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">pid_t</span> <span class=\"title\">fork</span><span class=\"params\">()</span></span>;\t\t<span class=\"comment\">// pid_t实际上时int类型</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>fork</code>时可以看作==父进程在fork执行的位置进行了一次分裂，分裂出一个子进程==。父进程从<code>fork</code>的返回值得到子进程的<code>pid</code>，子进程在<code>fork</code>位置得到返回值0,并且从fork的下一句开始执行。</p>\n</blockquote>\n<ul>\n<li>使用实例：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">pid_t</span> fpid; <span class=\"comment\">//fpid表示fork函数返回的值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    fpid = fork();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fpid &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;error in fork!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fpid == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;i am the child process, my process id is &quot;</span> &lt;&lt; <span class=\"built_in\">getpid</span>() &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;我子进程&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;i am the parent process, my process id is &quot;</span> &lt;&lt; <span class=\"built_in\">getpid</span>() &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;我是父进程&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;统计结果是: &quot;</span> &lt;&lt; count &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"getpid-和gitppid\"><code>getpid()</code>和<code>gitppid()</code></h4>\n<ul>\n<li><code>gitpid()</code>: 获取当前进程的<code>pid</code>值</li>\n<li><code>gitppid()</code>: 获取当前进程的父进程的<code>pid</code>值</li>\n</ul>\n<h3 id=\"进程间通信\">进程间通信</h3>\n","secretKey":"b368b38364dfdcd5770ff2a4a82085d5e2a5ee410b9a72da9fc9e4262d38dd7e","iv":"0457d66582dc26cc7bb3ced40421aa34","encryptedPassword":"3c0d93769f7e8ec0592e5420c56458d2","encryptedContent":"","excerpt":"","more":"<h2 id=\"Linux多进程\">Linux多进程</h2>\n<h3 id=\"基本函数\">基本函数</h3>\n<h4 id=\"fork-函数\">fork()函数</h4>\n<p>用于创建一个进程，所创建的进程复制父进程的<strong>代码段/数据段/BSS段/堆/栈等所有用户空间信息</strong>；在内核中操作系统重新为其申请了一个PCB，并使用父进程的PCB进行初始化。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">pid_t</span> <span class=\"title\">fork</span><span class=\"params\">()</span></span>;\t\t<span class=\"comment\">// pid_t实际上时int类型</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>fork</code>时可以看作==父进程在fork执行的位置进行了一次分裂，分裂出一个子进程==。父进程从<code>fork</code>的返回值得到子进程的<code>pid</code>，子进程在<code>fork</code>位置得到返回值0,并且从fork的下一句开始执行。</p>\n</blockquote>\n<ul>\n<li>使用实例：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">pid_t</span> fpid; <span class=\"comment\">//fpid表示fork函数返回的值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    fpid = fork();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fpid &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;error in fork!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fpid == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;i am the child process, my process id is &quot;</span> &lt;&lt; <span class=\"built_in\">getpid</span>() &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;我子进程&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;i am the parent process, my process id is &quot;</span> &lt;&lt; <span class=\"built_in\">getpid</span>() &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;我是父进程&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;统计结果是: &quot;</span> &lt;&lt; count &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"getpid-和gitppid\"><code>getpid()</code>和<code>gitppid()</code></h4>\n<ul>\n<li><code>gitpid()</code>: 获取当前进程的<code>pid</code>值</li>\n<li><code>gitppid()</code>: 获取当前进程的父进程的<code>pid</code>值</li>\n</ul>\n<h3 id=\"进程间通信\">进程间通信</h3>\n"},{"title":"标准IO","date":"2025-07-05T16:00:00.000Z","_content":"\n> 详细信息请参考man手册\n\n- `fopen(...)`\n    - 具体参数参考`man fopen`\n    - 返回 `FILE*` 类型，FILE是文件流\n    - 在不更改默认的设置的情况下，一个进程中能打开的文件个数最多是1024个（每个文件都是一个流），因为存在`stdin,stdout,stderr`三个流。所以实际能打开1021个。\n        - 可以使用`ulimit -a`查看进程对资源的限制\n    - 如果用`fopen()`创建新文件，则新文件的访问权限由`0666 & ~umask`(8进制位运算)(`umask`的值默认为`0002`)决定，所以一般得到的文件权限为：`rw-rw-r--`(八进制`0664`的后三位)\n- `fclose(FILE *)`\n    - 关闭传入的文件流，释放`FILE *`指向的内存\n    - 成功返回0，不成功返回`EOF`，（多数系统中`EOF`为-1）\n- `fputc()`\n    - \n- `fgetc()`\n    - \n- ","source":"_posts/系统编程/标准IO.md","raw":"---\ntitle: 标准IO\ndate: 2025-07-06\ntags: [Linux, C]\ncategories: 系统编程\n---\n\n> 详细信息请参考man手册\n\n- `fopen(...)`\n    - 具体参数参考`man fopen`\n    - 返回 `FILE*` 类型，FILE是文件流\n    - 在不更改默认的设置的情况下，一个进程中能打开的文件个数最多是1024个（每个文件都是一个流），因为存在`stdin,stdout,stderr`三个流。所以实际能打开1021个。\n        - 可以使用`ulimit -a`查看进程对资源的限制\n    - 如果用`fopen()`创建新文件，则新文件的访问权限由`0666 & ~umask`(8进制位运算)(`umask`的值默认为`0002`)决定，所以一般得到的文件权限为：`rw-rw-r--`(八进制`0664`的后三位)\n- `fclose(FILE *)`\n    - 关闭传入的文件流，释放`FILE *`指向的内存\n    - 成功返回0，不成功返回`EOF`，（多数系统中`EOF`为-1）\n- `fputc()`\n    - \n- `fgetc()`\n    - \n- ","slug":"系统编程/标准IO","published":1,"updated":"2025-09-14T02:36:11.049Z","comments":1,"layout":"post","photos":[],"_id":"cmfktk7es0013c04p5fq4888k","content":"<blockquote>\n<p>详细信息请参考man手册</p>\n</blockquote>\n<ul>\n<li><code>fopen(...)</code>\n<ul>\n<li>具体参数参考<code>man fopen</code></li>\n<li>返回 <code>FILE*</code> 类型，FILE是文件流</li>\n<li>在不更改默认的设置的情况下，一个进程中能打开的文件个数最多是1024个（每个文件都是一个流），因为存在<code>stdin,stdout,stderr</code>三个流。所以实际能打开1021个。\n<ul>\n<li>可以使用<code>ulimit -a</code>查看进程对资源的限制</li>\n</ul>\n</li>\n<li>如果用<code>fopen()</code>创建新文件，则新文件的访问权限由<code>0666 &amp; ~umask</code>(8进制位运算)(<code>umask</code>的值默认为<code>0002</code>)决定，所以一般得到的文件权限为：<code>rw-rw-r--</code>(八进制<code>0664</code>的后三位)</li>\n</ul>\n</li>\n<li><code>fclose(FILE *)</code>\n<ul>\n<li>关闭传入的文件流，释放<code>FILE *</code>指向的内存</li>\n<li>成功返回0，不成功返回<code>EOF</code>，（多数系统中<code>EOF</code>为-1）</li>\n</ul>\n</li>\n<li>\n<h2 id=\"fputc\"><code>fputc()</code></h2>\n</li>\n<li>\n<h2 id=\"fgetc\"><code>fgetc()</code></h2>\n</li>\n<li></li>\n</ul>\n","secretKey":"361a7b237efaea8ec5ec093f0052a6b4d4b596068e6f9851c1f6db863a3a2c34","iv":"bc71f288681281fc3230450a80379ba1","encryptedPassword":"63e9711700d071041ce269e74d59fad1","encryptedContent":"e0016d7c01b179496dc9a4f582d97527366630100f6ef70536c01e353dd4c1bd335193b4862d3f749be1f2b938a68298be546f4d0e04cbcfed549cab076d032c3d1e577f3dac178381f7a22925be4eff0f254f70b30642b52efd2a6bddbff5ba9a929eba7e70611b879773ca65fc23c166ef1d1b50f7ca686a1535144f9dd67c866f9b6aed1b86bbe296d1296a87d07375d08babfca1bdfda29b9ef7dd824602bcc7f5e5acf89be87fda2eb87d2816204de61ac2560f16a6b3c67691dce91bad8f4a1a5121821407aaee4349544f876f77b9dba958c6d9ca1ef68a0ef1c3d8a0c219e6ef1ff273327ea5f53550d645af9aa5624974d05526a9f0b28b0c3f7f377c0a3b609b096b5d43787f615769512305a3dfa82bf1c2d44f38492ee5452bf941545f10976ea690711463ca9c115f8f0b79a6f212192d6a9a7502a8bab16265065dc32c9b907579ca3e34ead3c3ad669a15c6f4fa9613715adb3856fe43e52585ea67410fb115555215d92a1df99fb9e7ec2bd725fb93d37a092cb374804e17a573dcd79df66076f1acd1cfcd2d64f077a1b682255c4babd0bf0af7cdc9d507ea274d9909abe7fa5150565748fdb935781063f83bc16a022f4ae0e2d5285bfd8e875c0024a2a481ab75fa18201ab959da2f108aa38397ae119392a51529e797e239790d03d10dd6ab6632d032eeca05e65ad6b55e5ca587ee4ff789f13a53c9411d079166bea643e9729933faa9df167ccb2d5ea1923ee7af186383b90994734e744a420d5856730566c9f9e89f2ecc8a44292be8b0a67c606411c478d8da68f4d28524a85a9d9a4c0daede88ba8c234355b57edba9a7a3c8f9749b6f6c95be514a33914644fb373b524de1e960e718e3339246b93f31f5c38c1754ae3b3884deb5b6ad0014ad32faf8dd45c548440837d3905a3b4aa49e585bf150ff057d95f0fbf17938b6f0377be8a857c41526dfaa41724d90f6202dc2a8d9418884e26a045588e25aecff2f5cc0fb7706d1da2e8a7b592601de936264cdf24ab22ab7fae160cbf8b15187f64874f8bc9c427494a369b74e0cc23cb2dc6a3f194deb732f9c7962e0abf8a952fca00c60057923a5f5a3f9b6059b7d349428a69c44d029d83abf4653628b4c7485d5bb149b94c40e0fc53ac18c5e552b0766d324d2243c5b15318cbb0cd0338305b65f3eee15a4133c9dbe3d939a072ef21e7e7bf298f291c636be5e2d0efea2745082834385f38e162d7db4bb7fe649eefd3a705df53c8bd0adf35f806ea568bd22b5572dd6c2b332e1a5e8c998ab653aa8fd2e549501b0d3b12f005daddbc5fe53b1534cec1af085746e94adc9d895cf1603ee470443b391dc4f2bb9828a3b12acf1cae7bfbbf2156ee234b3751443aba3d13b56826f39fe091ea04dfd7b99ff37da547f947cbaff29fb5ee28653c53e1fc45dfc722615ee9eed4fb8ba6f76aaa6a14fdce06c9bdd3eda0f8f02043ef441a7ddaaa7ac8e8004bd1bc28c155ece71fa3c93a6abec6903b4f312bcc0e90f16d1264ae85e308418edaa52b8e5ef35932efc7b6424ae203538fe3999936135e3a01947f924178088b07859be986c21dcf6edcb124a207fbd6ff433bbb6741257ecfbc3ff8a09b9fe8553e7a4860e98c4c0e9e8ad3a62019216df80429247a93cdaea9d7b25dab3231c95b3d54aad53f1562b4687ff6f","excerpt":"","more":"<blockquote>\n<p>详细信息请参考man手册</p>\n</blockquote>\n<ul>\n<li><code>fopen(...)</code>\n<ul>\n<li>具体参数参考<code>man fopen</code></li>\n<li>返回 <code>FILE*</code> 类型，FILE是文件流</li>\n<li>在不更改默认的设置的情况下，一个进程中能打开的文件个数最多是1024个（每个文件都是一个流），因为存在<code>stdin,stdout,stderr</code>三个流。所以实际能打开1021个。\n<ul>\n<li>可以使用<code>ulimit -a</code>查看进程对资源的限制</li>\n</ul>\n</li>\n<li>如果用<code>fopen()</code>创建新文件，则新文件的访问权限由<code>0666 &amp; ~umask</code>(8进制位运算)(<code>umask</code>的值默认为<code>0002</code>)决定，所以一般得到的文件权限为：<code>rw-rw-r--</code>(八进制<code>0664</code>的后三位)</li>\n</ul>\n</li>\n<li><code>fclose(FILE *)</code>\n<ul>\n<li>关闭传入的文件流，释放<code>FILE *</code>指向的内存</li>\n<li>成功返回0，不成功返回<code>EOF</code>，（多数系统中<code>EOF</code>为-1）</li>\n</ul>\n</li>\n<li>\n<h2 id=\"fputc\"><code>fputc()</code></h2>\n</li>\n<li>\n<h2 id=\"fgetc\"><code>fgetc()</code></h2>\n</li>\n<li></li>\n</ul>\n"},{"title":"C++ Linux 系统调用","date":"2025-07-05T16:00:00.000Z","_content":"\n> 前置知识：[./标准IO](标准IO)\n> 详细系统调用请查阅man手册\n## open()\n打开文件\n```cpp\n# include <unistd.h> // close函数\n# include <fcntl.> // open函数\n# include <stdio.h>\n\nint main(int argc, char* argv[])\n{\n\tint fd = open(\"./dict.txt\",O_RDONLY);  // 以只读模式打开dict.txt，参数里面是字母O，不是数字0\n\t// int fd = open(\"./dict.txt\",O_RDONLY|O_CREAT, 0644); // 创建并打开文件dict.txt，设置权限为：rw-r--r--\n    if(fd==-1)\n\t{\n\t\tprintf(\"file open error!\");\n\t}\n\tclose(fd);  // 关闭文件描述符\n\treturn 0;\n}\n```\n\n## close()\n关闭文件\n见上述代码\n\n## \n","source":"_posts/系统编程/系统调用.md","raw":"---\ntitle: C++ Linux 系统调用\ndate: 2025-07-06\ncategories: 系统编程\ntags: [Linux, C++]\n---\n\n> 前置知识：[./标准IO](标准IO)\n> 详细系统调用请查阅man手册\n## open()\n打开文件\n```cpp\n# include <unistd.h> // close函数\n# include <fcntl.> // open函数\n# include <stdio.h>\n\nint main(int argc, char* argv[])\n{\n\tint fd = open(\"./dict.txt\",O_RDONLY);  // 以只读模式打开dict.txt，参数里面是字母O，不是数字0\n\t// int fd = open(\"./dict.txt\",O_RDONLY|O_CREAT, 0644); // 创建并打开文件dict.txt，设置权限为：rw-r--r--\n    if(fd==-1)\n\t{\n\t\tprintf(\"file open error!\");\n\t}\n\tclose(fd);  // 关闭文件描述符\n\treturn 0;\n}\n```\n\n## close()\n关闭文件\n见上述代码\n\n## \n","slug":"系统编程/系统调用","published":1,"updated":"2025-09-14T02:36:11.049Z","comments":1,"layout":"post","photos":[],"_id":"cmfktk7et0018c04pglume5ci","content":"<blockquote>\n<p>前置知识：<a href=\"%E6%A0%87%E5%87%86IO\">./标准IO</a><br>\n详细系统调用请查阅man手册</p>\n</blockquote>\n<h2 id=\"open\">open()</h2>\n<p>打开文件</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span> <span class=\"comment\">// close函数</span></span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.&gt;</span> <span class=\"comment\">// open函数</span></span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> fd = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;./dict.txt&quot;</span>,O_RDONLY);  <span class=\"comment\">// 以只读模式打开dict.txt，参数里面是字母O，不是数字0</span></span><br><span class=\"line\">\t<span class=\"comment\">// int fd = open(&quot;./dict.txt&quot;,O_RDONLY|O_CREAT, 0644); // 创建并打开文件dict.txt，设置权限为：rw-r--r--</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fd==<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;file open error!&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">close</span>(fd);  <span class=\"comment\">// 关闭文件描述符</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"close\">close()</h2>\n<p>关闭文件<br>\n见上述代码</p>\n<h2 id=\"\"></h2>\n","secretKey":"60a2e6d53e4fdcc178779bfad97fa86855eaca1fa270ec30661263f8aaf02490","iv":"7864b3569ff980e5a31ca9954ef181d8","encryptedPassword":"319612bef16b12f8f8ae0ae14e800361","encryptedContent":"a9b6606fb13d8e9d8be0c0f2ccd84973972ede48bd34d43284f135c20a1031c092f909f5436a6056d7365a77eba132457b67ab9b347d6b2d2f49d2b5843558673041534305115d3b47a705d3d5fdadf460c1d85526a9a60003575e7a85e452face3b8228b569ad1e5afcea3871602add5087f74317524baf92fdd9585bd0db6e4bdc0830d4d6f19baa1f6e4c24e8f1ed9cdd974a682b16895a8e263ced3dd54689d1df4a2b62abb626fa70882453a9b50de2a2ce168f2f46d32a3d8bd25f1b8c61a42be2cb1dea37950f9beb33f84b9c5fef29407dae4d40d28e9ec39eee1ed41f245e46d9ca0fc21425de7f5e401f7b6902899bbe11985a6dd7624f5bdc4fcafb33a21dfa6bb6e880236dda93b965ac373c407dcbdabe8736f9dd3117dde66c0a3bed2023a2064972d5fc40625ccd9c2a31ba6ea1a9e1486a177bac6da6c0ea99ca3a5c11ca597ed6c1473bebd3db97535a82ba5b17c104a634c6e6ed609914d70534287720a54ad33da15c5536162c21a6241f8f87ed95818f007132163d056b34bc18ad2035ebefed6420216fd660944c87bab9fac94b8644ac0493760625474acc04f33606f6c61703bec077ea0e24b0b8ce7adf4c0b31e723566f214e103c0902c5cb5d7c76df44a75d98d34d777f1db68d565896eb7aa34a8bc16f6edbba64ceb895a24d06dbf7abd04ebb5fa8fe95ce34dfa701f84042052ed91529645de31fc0ba84ee952a74453b07624f69b7f620457e7cb42cf6d0f120e4d51dc34ec13de07cbe5b7592230952823251095b69cdf682f1a8854a340ad6fc7d269ef9b5bff1f53e77903dcd292c21211be51dfb05ab89bde386139ae2621aa4dcccad53b9e1b1fd49f327e46a52fac3394dee7eae7dceb821125355bad24a7d0d323118cd8653026196978ff3dbbe84e0d717968764b1baf80843223e67526d1b388a71539e02c8a3ac0f4d63979c7be71ba0d3f69c042ca027a4241e5483be0a44e4206a8f84917a350765c970dc3c392bb11aef3693a9a8fccfa310002078c0cea3124b27443a92656feb95b1d32132ca179f89f4ca9d5ebebed29c5e32e757f28e99b097080f9ffff7245a4d8324d0170e8bec065a7ea577a311250ae4be515180448476a71e8104c292538947eed93fbb493c24a6e5a78875850c2bb870386e7e6663da120edeb579af8999a9f2cb5e5f093f2847fa1cd4eaa8a7e0d89d0ca1ea83f7f32fcfb786ba2e432a41737802738c96b4706d141431bb51b6c47db4406553ad2ba406b7becdf8d97d07a7db44b099486eb495f198814c5744a77555559ed82b98721ae681f17734df58362a42fa22c3af569e9dfff9aa1251b09e2fa00a981a6a0ed9f8b490eec8f40ca20af5744b0befe3be5087de4ffa911ad235cc11d5012447b84c2285051c1ff6f0f6ca1166517d692c9742fbfe0e2b03e5b64e033cdb5f6af60548f9eb8ee7623b9e2cc462c5cf99977c9d02fda41e3b593f8cc31c4307f7afa8ecb21b267281afb8b28854d0ca6c18a41ac0b96872f7a3f0b4ba61995c9957a08c735dc5d059fc06f8f9431c97f3a815d9b44943bc90f2144a2927b9b4be261a68d7a6967aacddb00d71fb84d5aa181f45a43f8703513e02a8718a8861528cd0eb32a050bde90514fc0b2515f4f53e7571a19762a875f401d21af93d968e5fb6aaccde73f4a2c3cd56fd12622c659991405c9fd1e7de930c7e12abd33e7d01b8555ce0509a4ba3bfde054a422acbc87827594a0c682feca6b4f767a355861ceabb4234e37bb07560961e1e2a309058aad17d0fba0d4cf5c274a405ac298394a12efd278ed305ec7c4751f50176e559409fd2f13fc7cd9116fb43a44b9223f123fea3eb62bc18b36092a21756faae0d870a66868534e0aa9f55e67fccbb006a0a0e397eacb40f2cae0c9abf9db26ba640db616d3e56161d5872cd4c9d3d988c63c38cb7f325acd2c8fb16d3bc8a818b7a39c81312d1dc7d70b7ddc85d6afe30c4d89b4b0de3d1336a788c6c8fefb4d6f0d5208ff9a9c2ff32d2f52eea7cbd62ace3b2b807a1621a938a116e50c5d2c2542b9c0089a457b77eaa3271edfda46df4903cf4debfd581f67403de7bc78c24c453aebd8c98fdd83370c705bce1825d8b2ae066601d0e8f23170c4c46c1326033745079fc302df97938607b5e9a200342bbe9642cd1d6ab02005fd919c1a8d065142a55b2300614149565cbd56dd73c2cddd86253ced1e127958d6d946e5e0b404696e8c69e427264563b9bbf836b103fd64029562ee0c51341eade195537ab2546ad45d490c847579712775459cb64469ec744f6bd129b25aa0226fd98e5c3f9b424a1d78428fc570060ae152646f2ac32e6afa218b9ac71eb857bccc50cc6c1511cb7b9f01f22401efccb5595aba2c5d81e8103f2b2b1e60bba2911878a46567f9a85fb37253a1f4751ad02a52b74854242dbc2b74ca4b13e0d9c21ca5fed2c779de77bf349ceba73e8450801601490bae7fa17a9ef6a85c4c1db157958e379c0566a3655e7761776380211cf54c27e575f24c3a18e54d48642276ed89a8a01d23ebe0d3b8dfc980fa764b6b76cdc2a0c3ce35f34c9211e7f1d227ecc1807241f8cef27ab2df587912eb1db72e756ef1adcfd60984b92ec060eb0fcb094c48d1df3636b10be0eae936c6ee3760f4520ce12545c3025a2e41f07eda4bbc3145fe9a14552f1fe8777d2a0d7d6014acdf6bff934fbd60bff18e4ba77d5c272fc85ea131b36a73a4e5d83674e76dd6cd690944e403c5112e5c4646242687d7b936b9196fd3ae791710855e016cf3bb0e8fe9dce03e20e174a6d3b5601dd2a5fda3b52da23685bd10e6cf7a46df23fcf0ef1365d2d533b666dea20df62bf6fe2e01a73410a7e243fa7ee4cf75a7e6cf070f0a9285662f730b23e880218491853edc5241bb74a2e5d6a5308109cdbec2030d3e970e61c4ed4a72d3832e9972822c22d6ca4095dc3470d243a2a497144ba77fb9630300f701af7b162b30b15020f54fafb7aca2eddef04b9295165f98aea374df38e5f3e093c7b34c46eca3129db67ee51dc3927fac2dcfac0405927cd74b2fe8163c4d207ddbd98e6040436af245b32cab39ceccc5ea6f44bc8abb2220496eeb45c4ec817b4efb4a95ac514d4a0cb936ca519bb91fb8534755e64ee87bd27cb81d6cce3bed90fd7bb53b94623fe55224539f95d2ea05313ddc33138881270cbf69cca33d34ceff31f87475ba1f6a2c2d86dfd30ffa074d925d5a94bdd94beab9b022793c732d388c2bb4856b59b8ffdd5b7e487ca9a35bc1138ce6f2c2591231bcf5330586adeaf7d80f4edbadae4a3ae377996d2fded93d0e3b5b77caf6d7f941525655d03d15e3af6185271113128534ca224d95380184fc8867c9f1a080384b3ed9ab4e397063a8e85cb576045ff85d91d960065b9a4e0635833b48dfc5c2ff5e821c7fa7eb403763bbd17699e583c22a28bbf7d255a648c0fea4a1e60c01233cfcc325fb58da589c86e934a61d56c5ba476e3ab10ba8a8cbeabd2e5633d8cd956c45a6089dc2f8518639123d69dc9776fe5f375327018f4a19d35ab8439955015fb35e4f7dcd123f1edd2e21ff19ce54dac667e0edfb5f4dbf9a935b3e1fdbab234867e124016b4fe38f9965cdfabdf3f5ad75bb189428911d072e71c410bfd5e24e410df7d5efcb01474b7a33b806d0b5cd5112435e0ffefae60b034364eea34906f63a9f72d50061acb93ca5bb6884743f5a22ec3d2e912eb26d0b2a3ef10cb391200a481e1f0c413c8dfcdb65a4ee27f50db8a69fff31a440b14c62815bf202395e8de745cbaf2f0d1a2179e5c33e45384183b0b69","excerpt":"","more":"<blockquote>\n<p>前置知识：<a href=\"%E6%A0%87%E5%87%86IO\">./标准IO</a><br>\n详细系统调用请查阅man手册</p>\n</blockquote>\n<h2 id=\"open\">open()</h2>\n<p>打开文件</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span> <span class=\"comment\">// close函数</span></span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.&gt;</span> <span class=\"comment\">// open函数</span></span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> fd = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;./dict.txt&quot;</span>,O_RDONLY);  <span class=\"comment\">// 以只读模式打开dict.txt，参数里面是字母O，不是数字0</span></span><br><span class=\"line\">\t<span class=\"comment\">// int fd = open(&quot;./dict.txt&quot;,O_RDONLY|O_CREAT, 0644); // 创建并打开文件dict.txt，设置权限为：rw-r--r--</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fd==<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;file open error!&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">close</span>(fd);  <span class=\"comment\">// 关闭文件描述符</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"close\">close()</h2>\n<p>关闭文件<br>\n见上述代码</p>\n<h2 id=\"\"></h2>\n"},{"title":"STL-map","date":"2025-07-05T16:00:00.000Z","description":"C++ 四种map","_content":"\n#### map\n\n> 存储 `key-value`，==key唯一==\n>\n> 底层：红黑树。红黑树参考：[RBTree](../../数据结构/RBTree)\n>\n> 是否有序：有序（key升序）\n\n#### unordered_map\n\n> 存储`key-value`，==key唯一==\n>\n> 底层：**哈希表**。\n>\n> 是否有序：无序\n\n#### multimap\n\n> 存储`key-value`，==key不唯一==（一个key对应多个value）\n>\n> 底层：红黑树。\n>\n> 是否有序：有序（key升序）\n\n#### unordered_multimap\n\n> 存储`key-vlaue`，==key不唯一==（一个key对应多个value）\n>\n> 底层：**哈希表**。\n\n#### 总结：\n\n- 带有`unordered`就是哈希表，没有`unordered`就是红黑树\n- 带有`multi`就是可重复key\n\n#### 横向对比\n\n> **有序用树，高速用哈希，重复用multi，唯一用map**\n\n|        **特性**         |        **`map`**         |   **`multimap`**   |    **`unordered_map`**     |  **`unordered_multimap`**  |\n| :---------------------: | :----------------------: | :----------------: | :------------------------: | :------------------------: |\n|      **底层结构**       | 红黑树（平衡二叉搜索树） |       红黑树       |    哈希表（Hash Table）    |           哈希表           |\n|      **元素顺序**       |     有序（默认升序）     |        有序        |            无序            |            无序            |\n|      **键唯一性**       |           唯一           |       可重复       |            唯一            |           可重复           |\n| **插入/查找时间复杂度** |         O(log n)         |      O(log n)      | O(1)（平均），O(n)（最坏） | O(1)（平均），O(n)（最坏） |\n|      **内存占用**       |  较高（树节点额外信息）  |        较高        | 较低（但需预留哈希桶空间） |            较低            |\n|  **`operator[]`支持**   |            ✅             |         ❌          |             ✅              |             ❌              |\n|      **适用场景**       |   需有序遍历或范围查询   | 需有序且允许键重复 |     高频查找且无需顺序     | 高频插入/删除且允许键重复  |","source":"_posts/C-Plus-Plus/STL/map.md","raw":"---\ntitle: STL-map\ndate: 2025-07-06\ndescription: C++ 四种map\n---\n\n#### map\n\n> 存储 `key-value`，==key唯一==\n>\n> 底层：红黑树。红黑树参考：[RBTree](../../数据结构/RBTree)\n>\n> 是否有序：有序（key升序）\n\n#### unordered_map\n\n> 存储`key-value`，==key唯一==\n>\n> 底层：**哈希表**。\n>\n> 是否有序：无序\n\n#### multimap\n\n> 存储`key-value`，==key不唯一==（一个key对应多个value）\n>\n> 底层：红黑树。\n>\n> 是否有序：有序（key升序）\n\n#### unordered_multimap\n\n> 存储`key-vlaue`，==key不唯一==（一个key对应多个value）\n>\n> 底层：**哈希表**。\n\n#### 总结：\n\n- 带有`unordered`就是哈希表，没有`unordered`就是红黑树\n- 带有`multi`就是可重复key\n\n#### 横向对比\n\n> **有序用树，高速用哈希，重复用multi，唯一用map**\n\n|        **特性**         |        **`map`**         |   **`multimap`**   |    **`unordered_map`**     |  **`unordered_multimap`**  |\n| :---------------------: | :----------------------: | :----------------: | :------------------------: | :------------------------: |\n|      **底层结构**       | 红黑树（平衡二叉搜索树） |       红黑树       |    哈希表（Hash Table）    |           哈希表           |\n|      **元素顺序**       |     有序（默认升序）     |        有序        |            无序            |            无序            |\n|      **键唯一性**       |           唯一           |       可重复       |            唯一            |           可重复           |\n| **插入/查找时间复杂度** |         O(log n)         |      O(log n)      | O(1)（平均），O(n)（最坏） | O(1)（平均），O(n)（最坏） |\n|      **内存占用**       |  较高（树节点额外信息）  |        较高        | 较低（但需预留哈希桶空间） |            较低            |\n|  **`operator[]`支持**   |            ✅             |         ❌          |             ✅              |             ❌              |\n|      **适用场景**       |   需有序遍历或范围查询   | 需有序且允许键重复 |     高频查找且无需顺序     | 高频插入/删除且允许键重复  |","slug":"C-Plus-Plus/STL/map","published":1,"updated":"2025-09-14T02:36:11.008Z","comments":1,"layout":"post","photos":[],"_id":"cmfktk7et001ac04pf2yqeg4h","content":"<h4 id=\"map\">map</h4>\n<blockquote>\n<p>存储 <code>key-value</code>，==key唯一==</p>\n<p>底层：红黑树。红黑树参考：<a href=\"../../%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/RBTree\">RBTree</a></p>\n<p>是否有序：有序（key升序）</p>\n</blockquote>\n<h4 id=\"unordered-map\">unordered_map</h4>\n<blockquote>\n<p>存储<code>key-value</code>，==key唯一==</p>\n<p>底层：<strong>哈希表</strong>。</p>\n<p>是否有序：无序</p>\n</blockquote>\n<h4 id=\"multimap\">multimap</h4>\n<blockquote>\n<p>存储<code>key-value</code>，==key不唯一==（一个key对应多个value）</p>\n<p>底层：红黑树。</p>\n<p>是否有序：有序（key升序）</p>\n</blockquote>\n<h4 id=\"unordered-multimap\">unordered_multimap</h4>\n<blockquote>\n<p>存储<code>key-vlaue</code>，==key不唯一==（一个key对应多个value）</p>\n<p>底层：<strong>哈希表</strong>。</p>\n</blockquote>\n<h4 id=\"总结：\">总结：</h4>\n<ul>\n<li>带有<code>unordered</code>就是哈希表，没有<code>unordered</code>就是红黑树</li>\n<li>带有<code>multi</code>就是可重复key</li>\n</ul>\n<h4 id=\"横向对比\">横向对比</h4>\n<blockquote>\n<p><strong>有序用树，高速用哈希，重复用multi，唯一用map</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>特性</strong></th>\n<th style=\"text-align:center\"><strong><code>map</code></strong></th>\n<th style=\"text-align:center\"><strong><code>multimap</code></strong></th>\n<th style=\"text-align:center\"><strong><code>unordered_map</code></strong></th>\n<th style=\"text-align:center\"><strong><code>unordered_multimap</code></strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>底层结构</strong></td>\n<td style=\"text-align:center\">红黑树（平衡二叉搜索树）</td>\n<td style=\"text-align:center\">红黑树</td>\n<td style=\"text-align:center\">哈希表（Hash Table）</td>\n<td style=\"text-align:center\">哈希表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>元素顺序</strong></td>\n<td style=\"text-align:center\">有序（默认升序）</td>\n<td style=\"text-align:center\">有序</td>\n<td style=\"text-align:center\">无序</td>\n<td style=\"text-align:center\">无序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>键唯一性</strong></td>\n<td style=\"text-align:center\">唯一</td>\n<td style=\"text-align:center\">可重复</td>\n<td style=\"text-align:center\">唯一</td>\n<td style=\"text-align:center\">可重复</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>插入/查找时间复杂度</strong></td>\n<td style=\"text-align:center\">O(log n)</td>\n<td style=\"text-align:center\">O(log n)</td>\n<td style=\"text-align:center\">O(1)（平均），O(n)（最坏）</td>\n<td style=\"text-align:center\">O(1)（平均），O(n)（最坏）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>内存占用</strong></td>\n<td style=\"text-align:center\">较高（树节点额外信息）</td>\n<td style=\"text-align:center\">较高</td>\n<td style=\"text-align:center\">较低（但需预留哈希桶空间）</td>\n<td style=\"text-align:center\">较低</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong><code>operator[]</code>支持</strong></td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">❌</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">❌</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>适用场景</strong></td>\n<td style=\"text-align:center\">需有序遍历或范围查询</td>\n<td style=\"text-align:center\">需有序且允许键重复</td>\n<td style=\"text-align:center\">高频查找且无需顺序</td>\n<td style=\"text-align:center\">高频插入/删除且允许键重复</td>\n</tr>\n</tbody>\n</table>\n","secretKey":"2862d7286aea61a60843760cdc138e5de94cd2bb4575fc9ee5e2fcffd0ba739a","iv":"7cdac691245ea54ca099cdefcf100538","encryptedPassword":"fbd87a784ed26586a7a7c770cfa8436f","encryptedContent":"92edb88ab479d9b04eb920b86722ad52286a3a714bc5f8a0b8bb04960d0036bca44007783ab3504364202960837bbb5abdf37713c71b6f70f0b843c3d76a3e1b4ff4f1297b0b8366d908b0d185d3babbb003915b587528397cfa232277fd246a23e17e3ebdc75cc480d02f38a0ac9deec1e9061e8e9fc468c1e4040b88b001eb3b5739d6ecbe3db31c80b863fb3814d2a4f24b50c530037561209950905b265151c4c33c292d146a7ff729953aa9ab4be8c202962164fbc75bfec1664224f0101b4f5205c9f537cff5cfb677fd796eded4ad743c3d75f50120ad57d24b94b015da734af77fe988021fb3f8be050f7ece6555de90182c636915ed213f65569eaaf49e760698411a461a5549fdab13827e30a957cd97179f4ab666be2aba104cdd2a0b2287eb83b709c2863e217a91d32e282daae4532106446e0df2048d35f72c4174a374eb92b6cd2a1b622548716266c94b9b7a67243b696ca09e13ec77f8e55a1f6e2b1222184700edec9223e9b6c70471b09aba40ee257e2fd70c3d70e09cb11528fcd64a1b9a76d3324b75c5ea281314dc8174550d6aaee5925e45d654598834ebc3c6c916fe71f7fa6d11cc43b8bfd4218b8e417a417cfd823cb4083994268be2c41c7798f4a958e38b12b0396f5406f6e392cfff61cab7ac83d4f36a07af82bfedb11d9b12ea2d6e55cda0a001e1f54a59e829a2761291e2bc492526862bfcbd719b1ab7f679b50c414d00c7030a1df00f555c986b91b9a32f0db6c8babc603f4434ccbea21855761359fff6ff9303ec4ca9804d4f5ad09821b367d9b9822cfa8ca76a0923eb5c3e67d94a304821e86046a85c29d0d893e4274798ddd91c1c2820c1ce4fecb957a1f3a4a6d1c99e9e5be410261de145c335761b323056f1ab82e8b157d1731edf47934bd710d08fb06e82d2bb3a619f17bfe568429b1a54dc647504e7bf9d0f8ca01892b41753c18bfbf2d7a3f42c5d107e292b3c2baf47ef60c10f972c89fffab175381125f97c190b1416ed778b01847d686abf9d129a6397108d30811561e15df1be74ac21d74fb2142837ea3fcd49dc4acd53a5e6755cd1584d9e3a64f7211fbf5ae7e2307e8f79172d4828292b9a981d004c5d9d47247eb8120e2935b9218096c2543e6f1de7079490389f9f14706be413e90b1c84d921eebc4f448d7fdef2563dc00da4160be1cdee9706a69ef7f1de8a26fb8d0a9308fb3c268b396d4dbec744cb6988f6ab35630a049501c7b6d44668c2124073bc4d203b3d73aea26994af79ded942db69671ccbe670179fe9fa9383de2328739b61e4150a449c82567ba0b75936507e3ad39b417ae68ee3b1e343783a15611cf4c67ba5845a7154afe42eecb47b7f49a87ebd69ee6b8acac4b669f81acacc1e479ddf236693ca9878080222f3a158b34dee218f0dec114c211a6254856ff0f8201bc4662f8cf25c33118c2914d5e5e47389a8b79a490cd4ba42c84462288e3e46e1b963f91698f6fa5d318a3c7eab4f2a910756f1fb836037af2f3d4d66e8a7e919190e9294220bfbb6dd903f1e71adb2f697e54a0e152b0344504e72b839280ed1b67abb9aeacba9a985fc0ea2fa852a08867d0186058103970a843873256a9099e308f9cc8cf53a052a87ba6b8194ec53d2d9a45b5c470bf4924914220629a34ffcf965234cb3da8d7c6c8723c1f7ceb04e141066c3101b3143384355c82c508942a2ac6cf87c2fa609347229c8614fee99399d697a96de4c5fd36c97f66bfdb1a11b93a6b3ebd75e13dabb307390b082d1df195ad80df42b80603317862176b98427ae1731c079f78c655474ff3d203276c7fb2ea3e98d723ead767c633ad727de91edaf2b5a21ee835330256c9562be8fc8f06551bc09de34c2a258960f45ac534eb472378747ca85f9683286924d3f19fc5df4b2f422b21fba57c26fd65a2ff75791b2a099754aa4eead8412d62e467f04afeab991040af29611e7d684508329a2c24114671eb1ab74bdf79cc85d7163e9a68f495d2ac792bbf98e41bbfb51cccd247d7606fa2e1116829e396e8fd56eb933faf935dc19bb928244d0c23d48afba9e6c13dfcd36d8de7bfbcc0a42e31a79659a942986e54ee8c8cc6b567144d140cc8aaa68e0b9ee92a9bda11431ced126ca82791e7c3df3f59285e39e80a3837a6f1d351c65dcbab58707d006fb12b39725d7bc4d0e04651a0e9611f7f701f326196b67b0ad0cab2e41afee205d0484b98b7ddead7a8f8eaabba392dda7307a3715740820f8609379d29f94f1aba1090d35a66f83b904fbc92b48a226334ae515e5e9dc4e686cf58b092ce772d7b53888167ba2766449717ca1d72383d0154ace54933439311ed8612b074ed4e03ccf6f4661533e0f333401ee046cbf17f8e9b059d5040929fb0d6e056381ee1ed2bda5b2a246efc7ee69a99affba353a016e0f2ea36adcc2df2c1c1232263a2d3952ed6e98e9c87cfecbdb21ec2a9d61e4bfa0694c7aa4c1e4911cfe601ccc602d772d85a1d728b71d370764831ae28bf4ee79e560c2723233b3ec9fb7f832bfb444aa432e17dc27b72a0b740640df741417711aee9d5787caf74e6e7bdf374b57d1bfcc5451e2ba4fafb8fed4b5db4547cf13677a894a0c005db2897c85d7279f6bcedb89e63e573b7535c3faff105699f20f06524a06b897f62064759c808c51d07b76e02d44fe17b8c8b623ce3156f8bb982051070e285750e982e9bab1a9b97a452143448b3b14f606d06638f9e0dd0434a7992618a114a98fffe91158b67ae1864e30b28d93c0a36503f2432faa863d29990f1bed5ec319cc23a59b91dee6c1369e78a9aa3ef698c4b19d6fe077378904966758346ed544516a4f5361fc288b31dcd201754cede7acefa8489b7c1eaa4e9c38af955b7bd5a11a9cec4cf0d6d3960407ff8f74d41441542890d9431399882aa516868bae37d0ba44b56e013b573630a517198a47612236d6344d6799556afc88739a1ea0b2e44196cbc8379d24b48ef581474cbd0ba681e3527ea9e241223fdb3e2e7d59e09c15e3474a142bca24c19b8465c99fb7cd1bef6f00e456fb697f2b1aba7c676ebf1308c7450c70c4dc226e4ca9b96c6f5f1d3e22a92996864a0b6681c1295500e1c6af37864d1c2844ddd232a94b035abbbb123c217514e21dc0cb422c49f5a8059a14cf2ad9430934502e9950a1da01ccd615da06cc2ef796db3c6eb2d713d889b3d87d1545841476c4987ab6e082071855286b007825d6fe76600c0fdc0f4246078500ee9aaad2a22a2c6e3c73c4d0af0ce2b5dcfde47af87a87a7ba72969f0e0714022dd6f40ee16402e64f8d45a672079399b72d1f294792895d926e9d6d3a4f85842e235565e4465772bb0cd6a5f2d42b504db52ea0699a39cdfc6eafdfbffd2e5e3137275bd1c8799eb41265a2ede5942c5c9768fa31cbe392253aee5477180f575626afab354746ac75abefa98b7b87dd3db7c6ca9ed8bdccffa63249ed00e56e70c429d45351f210f4a7efe44000d994ed8bcc3b83e6fe8e9ae7aac163c5090fe45000288369e5d0e4067c6c354b903cbcb65f3bfb60043aba0373ba4dce0d70f5047eda552123484947c349e8c0cf046021e4e41abb64531b1e81cbfaa5207d78fdb4c9566189c2f48f9ea6834a429a0428e7d8d05e61eedde8704231689ca00404802acfeae5a5dd43783752f7f6a60fc156f3be74a98cabf4b7fdbe6d67ac6a2759b434f2960e281540423cedc6c53c56e69cf8420bfa2db2587afc0a04214c48382cc397d8e46b3b7cf734e007bf04a9adfacb1beb520b452641825c949b0c4b1db88c590d4a55b25c226adb388896e7c63ba88c3660a7af7698ac7441e90e9b9bfb0e0636766c728e8ef1510d3d62587484099899fd489050fc2e4245937a95f1295353cb14498c7495db89ce3f8e052a6eea7bc31cf625338c80ec15710541881f219b44b2be09d958ea274bbd85efaf73435fb30009394857a6609fa6dc7d4a057556009b68213b0980041a3a93891b8c26d04d86d8f0e14daf0af1c2e50a145d7d96fd1514065f87eaa0a93065578060a20677b2fa5e1a4930a3bb051a180a6cda2e1c3647c9299dff7d25243513b722e753675d714636f9d67dc82de193b595721b40745d58f30e9626d532506e764b6e47c54551e4cbac752972b84ab7a98b4747fbb069f9895abd5d3625c47ff5f0c208f190a01ae62e40688167207a46303b3a799831e2dc1700a37a076f3ab33413fbae9ffe6edf6b22d9d56416f8d5d25b62dffce9376bef75cfa51b2ed6ec505a9bc0abcd9b381a43698f0de5fbec362497c862396f912ef42ea8d47fbb9d422ed643ca717e3cc5606647b61fcde15e536e0d5985ae7f10df9cf5064e13cba9368432035384daa7caa02221cd4a54c0f5def4828fbe8166d2cf1cf62392513f4023f8dfb268ec9e6f2ff51d06fd5f83ca3b6ee2638c2638ada56e0666b5b711b2edfca041e842bfb22023219907e7953d7ceb50c9610a7d4136042f2c6efbfc5be3e6ea62d7e592a88323ffe28bbae1c6cac4b00cb243185ab33acd995476a4de34ef95448c4497a7a75a5e3db9757fe2621555aaab559405b4572439f93519200691972d13a035d1e84f55e99cb4038d73850f4d0b15a4d520659a4250521e4a838ca02505f2d53b99d068ecdde75e16f445de78f753a858bbbc71e4ac397d7f9086175b671399f3efcb09e918c8235aa8314387bef89b3b6c3d22cf908e9d5f1c6e204abaaf35ec98c62d2240e8dbf704df674ea128690b1052a42a25901a62dd9f3e63cdcc3bffb265fb99515e2e1885122ce6fbb3d44e031eb40cbd933c4eb9cda16b20a99aa61a443073d8df74adca468d5f1484bb36c3461c74926a7788d5dada439f8de0707d0c200c6c9477af7f0630ecb2348098b1859ca98f24f4cab0f60c3c24e226b9be43a183f4af13642e6332d332d20e51f6d0f6d2eba64d87ff4b2feb238456c543fd8dec720f421c39a4d5d8623c50c3e5a63d33000a0893cef4f5ce1a796183abeeba3b331ec6af0fc0eed3ce99af405a87213805fd4a769b3d2a3e18c72bc4b18d627850ba33d30bbebd12585a3ff54062b7335856936f2d9115f54fc32da800bccac5194d6eba8d82c16c7f473179078af0071eecca336c29972b8ea0ee587ea3a02a88f154bf75c73f30af32e4c2cf0afb5686e33d4c64e96ab5a6b3c698d44caf","excerpt":"","more":"<h4 id=\"map\">map</h4>\n<blockquote>\n<p>存储 <code>key-value</code>，==key唯一==</p>\n<p>底层：红黑树。红黑树参考：<a href=\"../../%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/RBTree\">RBTree</a></p>\n<p>是否有序：有序（key升序）</p>\n</blockquote>\n<h4 id=\"unordered-map\">unordered_map</h4>\n<blockquote>\n<p>存储<code>key-value</code>，==key唯一==</p>\n<p>底层：<strong>哈希表</strong>。</p>\n<p>是否有序：无序</p>\n</blockquote>\n<h4 id=\"multimap\">multimap</h4>\n<blockquote>\n<p>存储<code>key-value</code>，==key不唯一==（一个key对应多个value）</p>\n<p>底层：红黑树。</p>\n<p>是否有序：有序（key升序）</p>\n</blockquote>\n<h4 id=\"unordered-multimap\">unordered_multimap</h4>\n<blockquote>\n<p>存储<code>key-vlaue</code>，==key不唯一==（一个key对应多个value）</p>\n<p>底层：<strong>哈希表</strong>。</p>\n</blockquote>\n<h4 id=\"总结：\">总结：</h4>\n<ul>\n<li>带有<code>unordered</code>就是哈希表，没有<code>unordered</code>就是红黑树</li>\n<li>带有<code>multi</code>就是可重复key</li>\n</ul>\n<h4 id=\"横向对比\">横向对比</h4>\n<blockquote>\n<p><strong>有序用树，高速用哈希，重复用multi，唯一用map</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>特性</strong></th>\n<th style=\"text-align:center\"><strong><code>map</code></strong></th>\n<th style=\"text-align:center\"><strong><code>multimap</code></strong></th>\n<th style=\"text-align:center\"><strong><code>unordered_map</code></strong></th>\n<th style=\"text-align:center\"><strong><code>unordered_multimap</code></strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>底层结构</strong></td>\n<td style=\"text-align:center\">红黑树（平衡二叉搜索树）</td>\n<td style=\"text-align:center\">红黑树</td>\n<td style=\"text-align:center\">哈希表（Hash Table）</td>\n<td style=\"text-align:center\">哈希表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>元素顺序</strong></td>\n<td style=\"text-align:center\">有序（默认升序）</td>\n<td style=\"text-align:center\">有序</td>\n<td style=\"text-align:center\">无序</td>\n<td style=\"text-align:center\">无序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>键唯一性</strong></td>\n<td style=\"text-align:center\">唯一</td>\n<td style=\"text-align:center\">可重复</td>\n<td style=\"text-align:center\">唯一</td>\n<td style=\"text-align:center\">可重复</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>插入/查找时间复杂度</strong></td>\n<td style=\"text-align:center\">O(log n)</td>\n<td style=\"text-align:center\">O(log n)</td>\n<td style=\"text-align:center\">O(1)（平均），O(n)（最坏）</td>\n<td style=\"text-align:center\">O(1)（平均），O(n)（最坏）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>内存占用</strong></td>\n<td style=\"text-align:center\">较高（树节点额外信息）</td>\n<td style=\"text-align:center\">较高</td>\n<td style=\"text-align:center\">较低（但需预留哈希桶空间）</td>\n<td style=\"text-align:center\">较低</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong><code>operator[]</code>支持</strong></td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">❌</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">❌</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>适用场景</strong></td>\n<td style=\"text-align:center\">需有序遍历或范围查询</td>\n<td style=\"text-align:center\">需有序且允许键重复</td>\n<td style=\"text-align:center\">高频查找且无需顺序</td>\n<td style=\"text-align:center\">高频插入/删除且允许键重复</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"STL-set","date":"2025-07-05T16:00:00.000Z","description":"C++ 四种set","_content":"\n#### set\n\n> 集合。存储指定的类型：`std::set<int> mySet;`.\n\n#### 横向对比\n\n\n|        **特性**         |        **`set`**         |  **`multiset`**  |    **`unordered_set`**     |  **`unordered_multiset`**  |\n| :---------------------: | :----------------------: | :--------------: | :------------------------: | :------------------------: |\n|      **底层结构**       | 红黑树（平衡二叉搜索树） |      红黑树      |    哈希表（Hash Table）    |           哈希表           |\n|      **元素顺序**       |     有序（默认升序）     |       有序       |            无序            |            无序            |\n|     **元素唯一性**      |           唯一           |      可重复      |            唯一            |           可重复           |\n| **插入/查找时间复杂度** |         O(log n)         |     O(log n)     | O(1)（平均），O(n)（最坏） | O(1)（平均），O(n)（最坏） |\n|    **迭代器稳定性**     |   稳定（除删除元素外）   |       稳定       |   不稳定（rehash时失效）   |           不稳定           |\n|      **内存占用**       |    较低（树结构紧凑）    |       较低       |   较高（需预分配哈希桶）   |            较高            |\n|      **适用场景**       |   需有序遍历或范围查询   | 需有序且允许重复 |     高频查找且无需顺序     |  高频插入/删除且允许重复   |","source":"_posts/C-Plus-Plus/STL/set.md","raw":"---\ntitle: STL-set\ndate: 2025-07-06\ndescription: C++ 四种set\n---\n\n#### set\n\n> 集合。存储指定的类型：`std::set<int> mySet;`.\n\n#### 横向对比\n\n\n|        **特性**         |        **`set`**         |  **`multiset`**  |    **`unordered_set`**     |  **`unordered_multiset`**  |\n| :---------------------: | :----------------------: | :--------------: | :------------------------: | :------------------------: |\n|      **底层结构**       | 红黑树（平衡二叉搜索树） |      红黑树      |    哈希表（Hash Table）    |           哈希表           |\n|      **元素顺序**       |     有序（默认升序）     |       有序       |            无序            |            无序            |\n|     **元素唯一性**      |           唯一           |      可重复      |            唯一            |           可重复           |\n| **插入/查找时间复杂度** |         O(log n)         |     O(log n)     | O(1)（平均），O(n)（最坏） | O(1)（平均），O(n)（最坏） |\n|    **迭代器稳定性**     |   稳定（除删除元素外）   |       稳定       |   不稳定（rehash时失效）   |           不稳定           |\n|      **内存占用**       |    较低（树结构紧凑）    |       较低       |   较高（需预分配哈希桶）   |            较高            |\n|      **适用场景**       |   需有序遍历或范围查询   | 需有序且允许重复 |     高频查找且无需顺序     |  高频插入/删除且允许重复   |","slug":"C-Plus-Plus/STL/set","published":1,"updated":"2025-09-14T02:36:11.008Z","comments":1,"layout":"post","photos":[],"_id":"cmfktk7eu001ec04p4na77jr7","content":"<h4 id=\"set\">set</h4>\n<blockquote>\n<p>集合。存储指定的类型：<code>std::set&lt;int&gt; mySet;</code>.</p>\n</blockquote>\n<h4 id=\"横向对比\">横向对比</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>特性</strong></th>\n<th style=\"text-align:center\"><strong><code>set</code></strong></th>\n<th style=\"text-align:center\"><strong><code>multiset</code></strong></th>\n<th style=\"text-align:center\"><strong><code>unordered_set</code></strong></th>\n<th style=\"text-align:center\"><strong><code>unordered_multiset</code></strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>底层结构</strong></td>\n<td style=\"text-align:center\">红黑树（平衡二叉搜索树）</td>\n<td style=\"text-align:center\">红黑树</td>\n<td style=\"text-align:center\">哈希表（Hash Table）</td>\n<td style=\"text-align:center\">哈希表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>元素顺序</strong></td>\n<td style=\"text-align:center\">有序（默认升序）</td>\n<td style=\"text-align:center\">有序</td>\n<td style=\"text-align:center\">无序</td>\n<td style=\"text-align:center\">无序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>元素唯一性</strong></td>\n<td style=\"text-align:center\">唯一</td>\n<td style=\"text-align:center\">可重复</td>\n<td style=\"text-align:center\">唯一</td>\n<td style=\"text-align:center\">可重复</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>插入/查找时间复杂度</strong></td>\n<td style=\"text-align:center\">O(log n)</td>\n<td style=\"text-align:center\">O(log n)</td>\n<td style=\"text-align:center\">O(1)（平均），O(n)（最坏）</td>\n<td style=\"text-align:center\">O(1)（平均），O(n)（最坏）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>迭代器稳定性</strong></td>\n<td style=\"text-align:center\">稳定（除删除元素外）</td>\n<td style=\"text-align:center\">稳定</td>\n<td style=\"text-align:center\">不稳定（rehash时失效）</td>\n<td style=\"text-align:center\">不稳定</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>内存占用</strong></td>\n<td style=\"text-align:center\">较低（树结构紧凑）</td>\n<td style=\"text-align:center\">较低</td>\n<td style=\"text-align:center\">较高（需预分配哈希桶）</td>\n<td style=\"text-align:center\">较高</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>适用场景</strong></td>\n<td style=\"text-align:center\">需有序遍历或范围查询</td>\n<td style=\"text-align:center\">需有序且允许重复</td>\n<td style=\"text-align:center\">高频查找且无需顺序</td>\n<td style=\"text-align:center\">高频插入/删除且允许重复</td>\n</tr>\n</tbody>\n</table>\n","secretKey":"2034a939d9fc7642b5d2bd6b158cf875bab08f1c29cf1bbd8e149cbaf189e7c1","iv":"1840ec726363085c918b31102d6e116c","encryptedPassword":"3e6fbc32c5edb59fc4642ad08784568a","encryptedContent":"7eab20f893f5387f293a6a0da9892e4334c16fdf4c90598a7af9371ab97a3b4ab9b10b1f248f1b05b575cf771f32c5403de5d5259d3494132dc3308a7f188c482cae1843c4d5bfd755d59fb070a645172da6e5aac3753a170d3acd024563f712da33e2faa8569dda675155b81b43c312e30d424035feac23c402b7ee9ce3f0de3a61f83be4114f9e263d887066812800aa2824fa2c872cb4d90e0ef0e47955d2aeb875cbceae2afea412c7d4b960bf56157a25f62ec4338c86c220b79e408d526e0ffaa4fde775f99e5ad8a69c148688406b453a44be265e8d6cc9ffff3721bacc36d4111e7140439e3d5c79a868a1c9cefd51440a5a47072f7dda6a4ef585db594037b63ced94bdc02ff21b67c6c16fe861aa0bd98ad195b2b16d239babb4ac181f281782cd5e03ec39b01e174dd58934441c5d04636ef0b7f1defbc654f2948cdf2e9bbff42677c62f4ab673feab8a20816412707f3a99699d658e944531fb7a2013858397420a37c2e668f5df38e4e9f70d256ec768da5af06b42a9fbc8f8e60f6db7d34e52fd71bc5e2dc7dfe8d9b5797d2535732e2ff586b1a4aa7d9c28a784b214fc90697376b9042b4203dfe28fc4dd271fa71d258b8e38f2de948f0f1a391faaf3ac483bbe01f3f7ae2e4b286b012937949b681fbcf6ac831015717d6d8a84b977165c3a095ae1cafc84e02f598be1b7b02f12d969ede2fc30e44a46d4292db63ff86d79b14c7d874a6eeec5df4663c0fd22b67fda353e498c68d5fba8f36e9ca73a414cea41fac4bed11f505ea5140493049e8477d8886f97c61e3aa8ad1d0108edb7ee82b97a647d87da6e306ba0188bd2c8f0e4e951ef7ef662502d2cde1b778d6adecfb23440f593cc90d5850933974c7e848904607288f9b82476e7cb943310fcb6972e63529720d2a243ebbfc894a4efe815dbbf32902810ea571304870fe79be53834370cb842868746cd9958277a24c227609bddd76a080aaa777470fa84f23584a8b341efe5c2578fd32860063514d2026aaae691a9f07bd878ffeed62dd7019bbfda5d8e6d007ca87388bfbcb6885331afada01cd81e77f8a653c013a5f0c437a025ad14b4ccd12ecdb62b89548a3768b924339c8278db74f2e9ce7f84a4ae008fd4df65e38592a609b1922f23b665f5ca64a3343477788185f8cf0ddf156c8bf240ce6cc4a8ceab162555167816b0a6a43671bbf19acc98fd65c2a889e3949248a83ad8f555d74b2a0117c51dc956010a0dfb307148b646172f94fde83d0a7c0d14711cae241d49d848a74cbbdc8c288f082cce308a24c60bad53e2964ecdb9e7dfaa59c296aecd648a13eec1f72672d9d200f7c39a5ba0d8fa4b51c404aab2b211dfac6be2d47bfafb3e918d967c88fd558491166f082a271b8731bd506275bc655ba05671b1d8960c99da0299f057a246e67c816767e00d056bc6bcfdbfba74f3b9cd17a52830088107316df83a1b48d1440c4f1f365e678b55549697c2b3e8b135bfd5f6ef00ca45d43e768ecb6331f475cf68efa01c211db4a39b93864e7f86b6789fb961935151920c1486384eef829209e31efd95efc00239041b98b3f3f79ce37838e342ee5bb966899dc5bba5dbf9ec6b5877aaf01578439a1c4621f84c6775f19b198a42e7b9a16b70aa8df75f1363fd17f324c3a059651fe986e4e460e9918820b4d53225c99b34f089888021e9874e5ff8e35f01a860700cba23c1116a37dd57a19e6e3d8928a1b0c910453960bc26325f5e5a4b977996ac13efbd6ab2c021f92d5851762297e4f917f184aca779e20780a3508e26ae4b46d53d916bd901d0e01dee77eb5d74ff62b1775cd73dcad11e9f9d885e23c1c81891c6535b836af441e0ac2f42c0acce1f5aefb76a3b629154a02965d159eb8cf93e8e05809781b7086e6cb13f9cb760778e3116dc7a5654ff5f6af9dd4436fce0886b67ebe4549ece591f5a364884f362e03887d91d4edcf26b8d1262d515dcd70ca8e17843da13056b73eb66c51396cf5d447a4e4ab91f15ec16e83cc6204bd51e95b740f1d3c219b9c071349e842badcb2c059900d8bab94517343c1fe8e126baccd532a08ff81cbc880f899f2aed1e15e9c3ea8085521444eaeec68e4137071a5d32a8c17034792c3e03875eaf2b179ebe02f1cd6f542299ffb56ea9269b8e74434c62027f6c67133b8c1ef7f9da68bb1f1c6aa82687fd3c1b6ab1f8683694e23539bd31175ca676cfea39300b4a42748f601991b24b35b9343ac9a55f1d00d738c31706dc8f404a94e385853ea65695158819bc25c26b14c60017a984104270a3d5cf596dde9cc70a097c4d419418802259c4c1afb368f574d1c08daa77eec63dd7c41ba3cbcbaba9367330dd815aa20c38375eefc25f14140eb586ed4581b57592c0bf54fc567ed74b16b8b47fc4a52756d58330fc29064554df412b352fd9706dc8d1f4a2506c9bd3bf8b3cd7739f655a27a6cfad9ced104e821acb5b40a27ab02fd412abcdd241f3e82d2f4db740dfc9cb248250b6cb2bfa716361d8a8aee1080d06cb10b578cdebcf22b06b67c012661c59b8c88fc935140aaf0753a420578a211b0e72dcf0297b8c4a28928a70232722f7ec639e766e67a462033af74fb99781590565ccd0869d17a16247ec3a1426bed34f700fdc8b09721e310ddb920c6ba6d44727eb82e371ba9f816a7afe3e90564fb1638d92cc6c83962c3806116c3831d01f4e786b26e366e47a5941b1841096bc7f7eeb99ff5d247875983f1c1ea9ec5d41c1034b9c2b9335a14c3d3f09811b98c73c3defcb144f81261edc6a3d59af6d0963631a149d9095c057620b02ef80bef7bbe73f8e9cf307602294d5ef730f7721db68f6f69ee930bae89d6b8c2fad7abe2b74d65fdff6b49da6985d62a087108cb17a7a6ae40f9fe8e939bc7bb53155d953fd8b901bbabcd4af3ba5b8254008e2417e4cb7dff71d323f22fc6337d3d93fe8402801c50def868c788c09045d2894afb2ef73c47db032120443653268c0d67c92bcf56f787dfeba513869d4189675c88c0ab3d1e338c623d980f67280cd330b894bc23cfe9c522208d9467075810ce48d19a09622ce4e37000cbbf87b9bd563225362b000dc612c5e9ab0b5d3f0e8b8ac3dd599181b426ff6235395437085f8db9dcb33e30a956a7f9c09f65bae624c4972821c775d680e77010d16f8eea8309076c3f5849120a4b082c57dfd619d652fbb55da99a05f780a0fa2914d02c3ec803bdb35df19969cdaf766b0c1f153075d926adfb5b0cd4092aabf6e17e88e80e3c9d284e67ad97645297dfc2ebebb2981838e196aa1684e90cbd38010a0e148a853874948ee81b798bb43780ed3474e50d2a8f99933aa24f0fae2405b991d772d76dbe2f76f58d9c67da11f1941e23abd68bfac9ccee899dd48d806f0bc87a2d21919620a8527387ea7fcd3f742f1e82b629f9b87c976c5c97b8e3d57d7d9b31538a76797a57944763349095abf65e13bc040d2e524c3e8c0a522cefb40ebedd2324b1efde5d210d115b8b94b778ec0e665a5ea4273c5b79f04ad389232816d36a77966bd35bc45818dc33b2f0e3372abe113237f43bcd94383fd2daf89c97ef8b7063a6de23fb6f21e4545911c51b4ffe9d1db68fb64f7a46275da4a88b88fb51aedef4e4c3e7b2caede9bf149fc671cb54b645f4d5f3fa6592acfe5d3985b534e195726a3bcca784ee6810cd8a83e43a21fca98e318a8359266d47c61dcf519b0b303345ae538569d934426f17c598bbc","excerpt":"","more":"<h4 id=\"set\">set</h4>\n<blockquote>\n<p>集合。存储指定的类型：<code>std::set&lt;int&gt; mySet;</code>.</p>\n</blockquote>\n<h4 id=\"横向对比\">横向对比</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>特性</strong></th>\n<th style=\"text-align:center\"><strong><code>set</code></strong></th>\n<th style=\"text-align:center\"><strong><code>multiset</code></strong></th>\n<th style=\"text-align:center\"><strong><code>unordered_set</code></strong></th>\n<th style=\"text-align:center\"><strong><code>unordered_multiset</code></strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>底层结构</strong></td>\n<td style=\"text-align:center\">红黑树（平衡二叉搜索树）</td>\n<td style=\"text-align:center\">红黑树</td>\n<td style=\"text-align:center\">哈希表（Hash Table）</td>\n<td style=\"text-align:center\">哈希表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>元素顺序</strong></td>\n<td style=\"text-align:center\">有序（默认升序）</td>\n<td style=\"text-align:center\">有序</td>\n<td style=\"text-align:center\">无序</td>\n<td style=\"text-align:center\">无序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>元素唯一性</strong></td>\n<td style=\"text-align:center\">唯一</td>\n<td style=\"text-align:center\">可重复</td>\n<td style=\"text-align:center\">唯一</td>\n<td style=\"text-align:center\">可重复</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>插入/查找时间复杂度</strong></td>\n<td style=\"text-align:center\">O(log n)</td>\n<td style=\"text-align:center\">O(log n)</td>\n<td style=\"text-align:center\">O(1)（平均），O(n)（最坏）</td>\n<td style=\"text-align:center\">O(1)（平均），O(n)（最坏）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>迭代器稳定性</strong></td>\n<td style=\"text-align:center\">稳定（除删除元素外）</td>\n<td style=\"text-align:center\">稳定</td>\n<td style=\"text-align:center\">不稳定（rehash时失效）</td>\n<td style=\"text-align:center\">不稳定</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>内存占用</strong></td>\n<td style=\"text-align:center\">较低（树结构紧凑）</td>\n<td style=\"text-align:center\">较低</td>\n<td style=\"text-align:center\">较高（需预分配哈希桶）</td>\n<td style=\"text-align:center\">较高</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>适用场景</strong></td>\n<td style=\"text-align:center\">需有序遍历或范围查询</td>\n<td style=\"text-align:center\">需有序且允许重复</td>\n<td style=\"text-align:center\">高频查找且无需顺序</td>\n<td style=\"text-align:center\">高频插入/删除且允许重复</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"shared_lock","date":"2025-07-05T16:00:00.000Z","_content":"\n### shared_lock\n\n专门用于管理 `std::shared_timed_mutex` 或 `std::shared_mutex` 的共享锁。它简化了获取和释放共享锁的操作，并提供了一些附加功能，比如延迟锁定、超时锁定等。\n\n成员函数：\n\n- `shared_lock()`: 创建一个未锁定的`shared_lock`。\n\n- `shared_lock(mutex_type& m)`: \n\n  创建一个`shared_lock` 并尝试锁定给定的`mutex_type`（`std::shared_timed_mutex` 或 `std::shared_mutex`）。如果锁定失败，则抛出异常。\n\n- `shared_lock(mutex_type& m, std::defer_lock_t t)`: \n\n  创建一个未锁定的 shared_lock，但关联到给定的`mutex_type`。\n\n- `shared_lock(mutex_type& m, std::try_to_lock_t t)`: \n\n  尝试锁定给定的 mutex_type，如果成功则锁定，否则创建一个未锁定的`shared_lock`。\n\n- `shared_lock(mutex_type& m, const std::chrono::time_point<Clock, Duration>& abs_time)`:\n\n  尝试在给定的绝对时间点之前锁定给定的`mutex_type`。如果成功则锁定，否则创建一个未锁定的`shared_lock`。\n\n- `shared_lock(mutex_type& m, const std::chrono::duration<Rep, Period>& rel_time)`: \n\n  尝试在给定的相对时间段内锁定给定的 mutex_type。如果成功则锁定，否则创建一个未锁定的`shared_lock`。\n\n- `lock()`: 锁定关联的互斥量（如果尚未锁定）。\n\n- `try_lock()`: 尝试锁定关联的互斥量，如果成功则返回`true`，否则返回`false`。\n\n- `try_lock_for(duration)`: 尝试在指定的时间段内锁定关联的互斥量，如果成功则返回`true`，否则返回`false`。\n\n- `try_lock_until(time_point)`: 尝试在给定的时间点之前锁定关联的互斥量，如果成功则返回`true`，否则返回`false`。\n\n- `unlock()`: 释放锁（如果持有）。\n\n- `owns_lock()`: 检查 shared_lock 是否持有锁。\n\n- `operator bool()`: 检查 shared_lock 是否持有锁（返回 owns_lock() 的结果）。","source":"_posts/C-Plus-Plus/c-plus-plus-14/shared_lock.md","raw":"---\ntitle: shared_lock\ndate: 2025-07-06\n---\n\n### shared_lock\n\n专门用于管理 `std::shared_timed_mutex` 或 `std::shared_mutex` 的共享锁。它简化了获取和释放共享锁的操作，并提供了一些附加功能，比如延迟锁定、超时锁定等。\n\n成员函数：\n\n- `shared_lock()`: 创建一个未锁定的`shared_lock`。\n\n- `shared_lock(mutex_type& m)`: \n\n  创建一个`shared_lock` 并尝试锁定给定的`mutex_type`（`std::shared_timed_mutex` 或 `std::shared_mutex`）。如果锁定失败，则抛出异常。\n\n- `shared_lock(mutex_type& m, std::defer_lock_t t)`: \n\n  创建一个未锁定的 shared_lock，但关联到给定的`mutex_type`。\n\n- `shared_lock(mutex_type& m, std::try_to_lock_t t)`: \n\n  尝试锁定给定的 mutex_type，如果成功则锁定，否则创建一个未锁定的`shared_lock`。\n\n- `shared_lock(mutex_type& m, const std::chrono::time_point<Clock, Duration>& abs_time)`:\n\n  尝试在给定的绝对时间点之前锁定给定的`mutex_type`。如果成功则锁定，否则创建一个未锁定的`shared_lock`。\n\n- `shared_lock(mutex_type& m, const std::chrono::duration<Rep, Period>& rel_time)`: \n\n  尝试在给定的相对时间段内锁定给定的 mutex_type。如果成功则锁定，否则创建一个未锁定的`shared_lock`。\n\n- `lock()`: 锁定关联的互斥量（如果尚未锁定）。\n\n- `try_lock()`: 尝试锁定关联的互斥量，如果成功则返回`true`，否则返回`false`。\n\n- `try_lock_for(duration)`: 尝试在指定的时间段内锁定关联的互斥量，如果成功则返回`true`，否则返回`false`。\n\n- `try_lock_until(time_point)`: 尝试在给定的时间点之前锁定关联的互斥量，如果成功则返回`true`，否则返回`false`。\n\n- `unlock()`: 释放锁（如果持有）。\n\n- `owns_lock()`: 检查 shared_lock 是否持有锁。\n\n- `operator bool()`: 检查 shared_lock 是否持有锁（返回 owns_lock() 的结果）。","slug":"C-Plus-Plus/c-plus-plus-14/shared_lock","published":1,"updated":"2025-09-14T02:36:11.008Z","comments":1,"layout":"post","photos":[],"_id":"cmfktk7eu001gc04p6cdffokx","content":"<h3 id=\"shared-lock\">shared_lock</h3>\n<p>专门用于管理 <code>std::shared_timed_mutex</code> 或 <code>std::shared_mutex</code> 的共享锁。它简化了获取和释放共享锁的操作，并提供了一些附加功能，比如延迟锁定、超时锁定等。</p>\n<p>成员函数：</p>\n<ul>\n<li>\n<p><code>shared_lock()</code>: 创建一个未锁定的<code>shared_lock</code>。</p>\n</li>\n<li>\n<p><code>shared_lock(mutex_type&amp; m)</code>:</p>\n<p>创建一个<code>shared_lock</code> 并尝试锁定给定的<code>mutex_type</code>（<code>std::shared_timed_mutex</code> 或 <code>std::shared_mutex</code>）。如果锁定失败，则抛出异常。</p>\n</li>\n<li>\n<p><code>shared_lock(mutex_type&amp; m, std::defer_lock_t t)</code>:</p>\n<p>创建一个未锁定的 shared_lock，但关联到给定的<code>mutex_type</code>。</p>\n</li>\n<li>\n<p><code>shared_lock(mutex_type&amp; m, std::try_to_lock_t t)</code>:</p>\n<p>尝试锁定给定的 mutex_type，如果成功则锁定，否则创建一个未锁定的<code>shared_lock</code>。</p>\n</li>\n<li>\n<p><code>shared_lock(mutex_type&amp; m, const std::chrono::time_point&lt;Clock, Duration&gt;&amp; abs_time)</code>:</p>\n<p>尝试在给定的绝对时间点之前锁定给定的<code>mutex_type</code>。如果成功则锁定，否则创建一个未锁定的<code>shared_lock</code>。</p>\n</li>\n<li>\n<p><code>shared_lock(mutex_type&amp; m, const std::chrono::duration&lt;Rep, Period&gt;&amp; rel_time)</code>:</p>\n<p>尝试在给定的相对时间段内锁定给定的 mutex_type。如果成功则锁定，否则创建一个未锁定的<code>shared_lock</code>。</p>\n</li>\n<li>\n<p><code>lock()</code>: 锁定关联的互斥量（如果尚未锁定）。</p>\n</li>\n<li>\n<p><code>try_lock()</code>: 尝试锁定关联的互斥量，如果成功则返回<code>true</code>，否则返回<code>false</code>。</p>\n</li>\n<li>\n<p><code>try_lock_for(duration)</code>: 尝试在指定的时间段内锁定关联的互斥量，如果成功则返回<code>true</code>，否则返回<code>false</code>。</p>\n</li>\n<li>\n<p><code>try_lock_until(time_point)</code>: 尝试在给定的时间点之前锁定关联的互斥量，如果成功则返回<code>true</code>，否则返回<code>false</code>。</p>\n</li>\n<li>\n<p><code>unlock()</code>: 释放锁（如果持有）。</p>\n</li>\n<li>\n<p><code>owns_lock()</code>: 检查 shared_lock 是否持有锁。</p>\n</li>\n<li>\n<p><code>operator bool()</code>: 检查 shared_lock 是否持有锁（返回 owns_lock() 的结果）。</p>\n</li>\n</ul>\n","secretKey":"7c80f0868181d3d361d3f22a555dd9231ed1d8f6bf18341ec171aa259a5512e2","iv":"b81804716f72a1541465f8e469fe340c","encryptedPassword":"bca6c139f76993e8584db857f552db09","encryptedContent":"c3f7c2c61163e4d4fa3df875d1754c1df0eb5cfdf6595638ab3c603639b2e4e9db97084d81dc5d55b76f995bede30950e06a09c1a29262d2b94b8e322ce358e3e609f9859befb410533bf9f520c7cb43fda9cf517b9418a30f79baa4b5729d5332c6a180176e2a7734fa7548a8ef5957db55ffbdd7b0e669dfe0f8713e0a8e393376b8c78dc64ffe0fa1e22d653eec91063de51347999e9f9d57ac04763c0b6e3e9e3b3711672d2c185c182f1e2fa68ca35bbb197c213258afb4f859c24577e61b8b182261eb8a4e58e800983f56194e9228c5eb6261075e040828dc0d3e81f3b24c7da7bb4d911f7d7f6530570c2ae9d94858ea7e79e6f0511ca642cef510e811ca2a0ecadfff7faec6054d251f0580720bb156920847fe72ef7810ef5b0ce1e3a8fd9077b59cb27f94b1e705daffd9800cb91a3b51222db4290b5f0d2a47cdb0c04edc828d9c86d62a03a5846c0cd0ed8ed9024446547ec0d003a632af37d4371041316af685d8db95a93acfb42a4df297ac474f35f077ce07366f20075a9d88f603f1a6dba4763f2e75a090db7c54346c22d802bcce451e21b1bea5dbdb9d57f638f561972400d5df79aeb6a521009ee2f3321fddaff6bbf14235edfc92aeec0d67bf4abb5aa227b3eae4ffc2627c749f0f1fa4ddbb3a471885c98810d057d58c91f74bf3db965b70600ea39bdde0323dd314fd9f525851cf3b50d8e0b0ac2ad9f2b8678a2de2cf4b37da97c00fc317fb8760f295f4596042f6170e8a4f2def7e2c011360182212c0cfb90a6ee7a6a08ddf7947693d6f4fdf263d386cc7e1640c7de1a8827adb19b2cfda77238b7eec42aeb7f079a8e7d806374b3281394af6f70d14dc85be07353cde51996143dfe7341ee41570824e69994228938780613fcc97ce883557b981956717f4f0a4866fd9739bb9e9804e9bda482ed8a67f6a16a3d2f774bfe6f85e2c1ea70c4c9d718364df71b289fe543364f138d2a4b73fc5d1d5eaf5da28948d178feac92cfcc851938d2fdb98a2de81e974ab2494c1f5dafce4e7019fa6b7996e0ef5a7de4f6743ffaf1342d324e1564fa15b662d02e0aae3776c2ae5eeb4a96cc112b5db6673e0a3ef2e179c9698c5fe58427e7921c7d6932fbb448a21f67a4f89d4bad6d2cfc73b22b5f05601b844760cec9b9dd915b16a20c6ab09471da724f6320f98372c0e42509b26fd3e45ae8202aa7fbca309ae2be9e919827f23b4d103e8a92338d84e5ae9f5abc11a23f08e193a5ec7ea89e258c709baaa962173eb45acde0f61816ecccd11d4f55fd8e06778f87b46c816e2533cd689dec8014737e1e98dce944729a7d5dabeed44e7d8be50e8afee2aaed0fc3152229615aab38c00af5da6ec1645382a5da5d2b87366db8008b3bf9b5cc0a3786a33a09aea180bbf67954a976b3bcb9a5b26fbe51e669ef2c3480fc881e40c1415973d0da15a347b5ac216b7c5a6a49a57e0cf0e9431b17df1719ae53f2b5bb3d4192700f8e68e95ac8206407cfd09dc29e7b67d825cb1e9b78bb1f53f62d51509eb9d371a2f290b0032f915cf4b1b4acd2fd0eb26d9f93e39c771daa7a2a0fbc5e7d51460021cc466496672dc24e7d9c22628bd4b6dfa6a1ce17dc6b1ca821414d64a61694c7b55c1d5820e23c63ef82078a734d94b0d599448b19cd264ccce91841abfe11f5ea520f71d6ee25e2abdc69bd693f03b59b8f95670c55d9513526caf8b65711914d3e34901e1440dc365d7a80690ec1356cf47916bf1b184575cf46ed6b95e35849160061bbab231838e091bcbd9b8372fc17ca332642ec64e40b203fbb9032b4be859b755a8d2dff536171346727c9ae4992f10c52f47712ebd97e9c72dca275e7263c97d79471e50fb34862190a35313ea21dd019453868a0db1ac22d0b07092bf518388a01c2d6ee4ab5f0b6aa294fae65c4ca274df513360876fa888f2a92e22cd598597240d519aaeeab617749c8019dde8f8a4194c9966ca5e07bd167fc89e0b0601dabcf1cb96831b969a3cb8519bee97061671b36f1e5322440399568d6bf7fa8bbf5867fc9caf62c9a572e2dc970be2e101cfcdcb389d5f21b9a4ade9a5621f4745bd2c96fb7be7b5b9dbbd6bc0628d6d2f59aaa4518727011b27f76da46ba286209c49a5debbb939f0d988339ea1c9ec9c36ef6a39333a4e02d5872cc1e77b110eddb3df6c74ba1b69620b171271eb0bf00b26c3697a3a9a090ba1e2cd680045931767a99765d503ddf939cd6827ede422a3ef18c94dd3effdeb3bc64a2aaa66d77516a73dfef4e72538c79e7c58d2ba5f0b3beb91c242ee4c772766d0e259001edd92ae6d7f09d174c41474216cfb62b0c438d62151f52499969f0e9a179c8ecbfce7fed19e35cad9f3ead04fbdedf65d82203ffd26b67f20009f9356da516c9aa4507dd7a6af410e179161d0e387c1aec8e09fc36d719a1b5182530f018179719057bfa2865a3cf28cbf21ee89a653ffdcbf01453201af3b2869ccc316c00a7c1c50fff60fdf8ca0d9f7b9bc688d687610dbef57564961c59b73512e79c478b4c68476d660c93cbe09f230e158635b2a486a09c55f7fdb814cae2e276c4cde62fd436fa09a13b479a1f876ef0f2f8f30e75a0e616d1adae48860bb09beec6eb8f661f2f5c83810b5a8595864d85a11d5edc0e09d050b5b335b3e1f71aadca52241dbb222bb8b5d36ada9ae110a2cac0bda551643dd7ac883136f40bedd2d9cf6950b876ffcafbb6cf5ad80e65b44af2afc3b027a9b3c4f5f78ba91b9723adb50ceecc6dc6e12ac0541c36462bca3f272c2435f03af69820fbc56f1b3023450ed20242a1527195b242d260ffb32992189aed0756da9fca2a8c80818031912a817ede1e9b1e679ab60f1694bd919dc0fc3fef9aaff636dd4fb82e2c05d88aeebe4cd2eb4c9b478cc7eff3ec7932183c89877b354c2ac5318bb2694029207edc98f820a44feda8d0a2284b5b0b70f64fb985757a2ac54e325335967698cd32388fb2b7690a3cc62f4a451d7eca122ddc6aec1cab39a56f4b86d4313a52a3b49008d78ba91359e353bd4efafd7d628a3d46596a565f21d278f1ae5228b7d211ae8cf71e65cc1da7bc92e66522f5f847e07ff331e2c04a48269d31a5edc9622ab2639a2593643a210000bf5f8ea80c13ca058733d6368c0fa946e575a80e2fbbc763591458af952a505bdf33895423068ae7e7f9064bc359271723b23d1d0f5cbcf8c6d7419cd0fde9a2850a0ad67c367b82f411af4054db97f603a9575cb44ce2d8acf45dd626796c0bce3594dbc5a41c902634f251564883886c5cd322a15ee6dc0ed8d225f2cd97704a7c7f8f67beae632e134ef5193a42ef95ac9eadad6fc6667e423a7535ac5c60c9bce0a7f7aa0246f42016de5f7f9cec9759189f924cb7f4603891059ecc5cf4597c278feb8424ad0a1905847052711e7894d833a9deb3d5223d2377e985193a011ec4ed37a363e78b5d99d6e673fdde6bb9a244c22021754de92d3c9f9772c2980dea03bb9c4ed4cddc7597810ac6079ef49565216320d3cf3aec06ce10d55c529cfbbe274bea320d531d9b044f6e210861ed71c6d39d78376","excerpt":"","more":"<h3 id=\"shared-lock\">shared_lock</h3>\n<p>专门用于管理 <code>std::shared_timed_mutex</code> 或 <code>std::shared_mutex</code> 的共享锁。它简化了获取和释放共享锁的操作，并提供了一些附加功能，比如延迟锁定、超时锁定等。</p>\n<p>成员函数：</p>\n<ul>\n<li>\n<p><code>shared_lock()</code>: 创建一个未锁定的<code>shared_lock</code>。</p>\n</li>\n<li>\n<p><code>shared_lock(mutex_type&amp; m)</code>:</p>\n<p>创建一个<code>shared_lock</code> 并尝试锁定给定的<code>mutex_type</code>（<code>std::shared_timed_mutex</code> 或 <code>std::shared_mutex</code>）。如果锁定失败，则抛出异常。</p>\n</li>\n<li>\n<p><code>shared_lock(mutex_type&amp; m, std::defer_lock_t t)</code>:</p>\n<p>创建一个未锁定的 shared_lock，但关联到给定的<code>mutex_type</code>。</p>\n</li>\n<li>\n<p><code>shared_lock(mutex_type&amp; m, std::try_to_lock_t t)</code>:</p>\n<p>尝试锁定给定的 mutex_type，如果成功则锁定，否则创建一个未锁定的<code>shared_lock</code>。</p>\n</li>\n<li>\n<p><code>shared_lock(mutex_type&amp; m, const std::chrono::time_point&lt;Clock, Duration&gt;&amp; abs_time)</code>:</p>\n<p>尝试在给定的绝对时间点之前锁定给定的<code>mutex_type</code>。如果成功则锁定，否则创建一个未锁定的<code>shared_lock</code>。</p>\n</li>\n<li>\n<p><code>shared_lock(mutex_type&amp; m, const std::chrono::duration&lt;Rep, Period&gt;&amp; rel_time)</code>:</p>\n<p>尝试在给定的相对时间段内锁定给定的 mutex_type。如果成功则锁定，否则创建一个未锁定的<code>shared_lock</code>。</p>\n</li>\n<li>\n<p><code>lock()</code>: 锁定关联的互斥量（如果尚未锁定）。</p>\n</li>\n<li>\n<p><code>try_lock()</code>: 尝试锁定关联的互斥量，如果成功则返回<code>true</code>，否则返回<code>false</code>。</p>\n</li>\n<li>\n<p><code>try_lock_for(duration)</code>: 尝试在指定的时间段内锁定关联的互斥量，如果成功则返回<code>true</code>，否则返回<code>false</code>。</p>\n</li>\n<li>\n<p><code>try_lock_until(time_point)</code>: 尝试在给定的时间点之前锁定关联的互斥量，如果成功则返回<code>true</code>，否则返回<code>false</code>。</p>\n</li>\n<li>\n<p><code>unlock()</code>: 释放锁（如果持有）。</p>\n</li>\n<li>\n<p><code>owns_lock()</code>: 检查 shared_lock 是否持有锁。</p>\n</li>\n<li>\n<p><code>operator bool()</code>: 检查 shared_lock 是否持有锁（返回 owns_lock() 的结果）。</p>\n</li>\n</ul>\n"},{"title":"shared_timed_mutex","date":"2025-07-05T16:00:00.000Z","_content":"\n### shared_timed_mutex\n\n共享超时互斥锁（具备超时功能的读写锁）\n\n成员函数：\n\n- `lock_shared()`: 获取==共享锁==，如果当前有独占锁，则阻塞。\n- `try_lock_shared()`: 尝试获取共享锁，如果成功则返回`true`，否则返回`false`，不阻塞。\n- `try_lock_shared_for(duration)`: 尝试在指定的时间段内获取共享锁，如果成功则返回`true`，否则返回`false`。\n- `lock()`: 获取==独占锁==，如果当前有共享锁或独占锁，则阻塞。\n- `try_lock()`: 尝试获取独占锁，如果成功则返回`true`，否则返回`false`，不阻塞。\n- `try_lock_for(duration)`: 尝试在指定的时间段内获取独占锁，如果成功则返回`true`，否则返回`false`。\n- `unlock()`: 释放当前持有的锁（无论是共享锁还是独占锁）。","source":"_posts/C-Plus-Plus/c-plus-plus-14/shared_timed_mutex.md","raw":"---\ntitle: shared_timed_mutex\ndate: 2025-07-06\n---\n\n### shared_timed_mutex\n\n共享超时互斥锁（具备超时功能的读写锁）\n\n成员函数：\n\n- `lock_shared()`: 获取==共享锁==，如果当前有独占锁，则阻塞。\n- `try_lock_shared()`: 尝试获取共享锁，如果成功则返回`true`，否则返回`false`，不阻塞。\n- `try_lock_shared_for(duration)`: 尝试在指定的时间段内获取共享锁，如果成功则返回`true`，否则返回`false`。\n- `lock()`: 获取==独占锁==，如果当前有共享锁或独占锁，则阻塞。\n- `try_lock()`: 尝试获取独占锁，如果成功则返回`true`，否则返回`false`，不阻塞。\n- `try_lock_for(duration)`: 尝试在指定的时间段内获取独占锁，如果成功则返回`true`，否则返回`false`。\n- `unlock()`: 释放当前持有的锁（无论是共享锁还是独占锁）。","slug":"C-Plus-Plus/c-plus-plus-14/shared_timed_mutex","published":1,"updated":"2025-09-14T02:36:11.008Z","comments":1,"layout":"post","photos":[],"_id":"cmfktk7ev001lc04p8swwbxf6","content":"<h3 id=\"shared-timed-mutex\">shared_timed_mutex</h3>\n<p>共享超时互斥锁（具备超时功能的读写锁）</p>\n<p>成员函数：</p>\n<ul>\n<li><code>lock_shared()</code>: 获取==共享锁==，如果当前有独占锁，则阻塞。</li>\n<li><code>try_lock_shared()</code>: 尝试获取共享锁，如果成功则返回<code>true</code>，否则返回<code>false</code>，不阻塞。</li>\n<li><code>try_lock_shared_for(duration)</code>: 尝试在指定的时间段内获取共享锁，如果成功则返回<code>true</code>，否则返回<code>false</code>。</li>\n<li><code>lock()</code>: 获取==独占锁==，如果当前有共享锁或独占锁，则阻塞。</li>\n<li><code>try_lock()</code>: 尝试获取独占锁，如果成功则返回<code>true</code>，否则返回<code>false</code>，不阻塞。</li>\n<li><code>try_lock_for(duration)</code>: 尝试在指定的时间段内获取独占锁，如果成功则返回<code>true</code>，否则返回<code>false</code>。</li>\n<li><code>unlock()</code>: 释放当前持有的锁（无论是共享锁还是独占锁）。</li>\n</ul>\n","secretKey":"6704172a68a894ed7ffb153d20d5e8e51010906cd4d3da5ec8453ae2ddbd16e6","iv":"e7c25b208fad2a903a6ca67c7f06fa20","encryptedPassword":"c7626264e754d77e6e657b059e2fc94e","encryptedContent":"def963717de070cfb636419a407ec5bc82604bc54fcf3a2ee9f092498b1b360b3e24486b340d4adfa08612bc0d7bcccfb8bc031a27fc6ac861e6c2bda355b3bbbf8d7ebc4058a1336df417e86511894a5b11e8b486bdaf2c7a1a7e3c1fe5efca05dccb5fb3611f530597cd6c7f45252c5d18ba8997296b7ad27a1a338719c80b222540abfb307128bcb53c8602f4c8878e93c8e7695ba6c6f4e6880b2e2f8ccc63851a9ac65adb24b93c895363687d492667e6a8be5c392d883137594f9c7786c672bdeb7ef397f11c696f8434d8b0d3a0d01854b6cc7ecff5c09ffb975ee6d8af88a59cbb92c1ae35e98a6cce38400659132671db24281a64992d38f672fa589b1856422fe4c7fc9a9d7f46667810c47baa8289cf2390d700ad8d3fa33d59da34761efc12572bb9560a5ad8ee9580fcc7e9221dadb02234ccb172857edd63c2ffc64e9e29b80432959b27b07083689b3245123c1e532edf0479ab80a56b509a094815445da6014a7aed7abbdc31cbebce7f7afa2ecd4b26603c4d7225110efed6910f027947815370e226db8b60275c5d3778c1e8a023198cb4cc49cf47384e1b866afd7dc631a3600ef7514227ea3359d4314789277b7cf388a9a679dba3d25bdc8441b84b05e713d5edfc1bb4456b2e42ed27a51589477328e5ebc261fb41bf4b0e660b470b2505ae67f08114af1b25772393403afd885b7757dc70d9dd4998643eeaf84d0a67728603aabfbc4bf7fec697f9d5cc26b5e523537198edb124e246d504a75e0912510e456458090e1885feeb8dbf9439e76f6e8485d8fc63f2a67dd2be838f7d0ec169060e8d3ce505d73b94aab2365d95c8d5d61f3bb30daa1f9fa6a1304fe86263378f48ec93e33c744ebce0917069728dbcd91402365e85bd614ffbd95693a5d3e03c1767665af7ecad9898483ad1e60a87c09d40dfe1be882ed05c394312b0bf5a75f7945c6fd4304157c3200963fbb302ca35c62aecf34f5d3d4226ccbc6832f5cd736571d393b20ed48094570a6147b897e9c3245ea4cd2dd6976f8a7ef4442f26fd0e1e6ea93f9bb7bf62d493e477ea5e222ead9f59d71598fbf47fd01d7004aef9c3fca707e7abd007d920e6733f89b40c8099a353b9e33cb6d3274a4abed2f9cd0200427e62806927dff0ece0f12cdbe179a33549e42af13efa8e93a503da9f09f1e92bda1698c699957b2abad75d225096d2392b2d75f8d458dc061006d8a65e4f35eca56603a55739765b8b29e8218cc081fa7f9e2636a04b4692199ef3681e1c23db4360ee27cc1b807d17ae607aea81eb64082b4db8d999944b98ea868e0f568e8df5985913ec933ec92874cfaa053c2baff0b32c754a13e39f8ffb510840d221f6135b7a56142af6105c92e042cc631835471f7ae52ea7f3df1252ce30523adcb71286a7a54e4ae9ede57cfa0495db97a1ef6a81c848368ac7850fdf60bb123bc8db48dc571bede670350677866b17967744b43cd531e9fe7a0372f1208312ded00b331f9d99302eef69f61212fc105f2efa3122d267a2ea44035f7be878b7cda121","excerpt":"","more":"<h3 id=\"shared-timed-mutex\">shared_timed_mutex</h3>\n<p>共享超时互斥锁（具备超时功能的读写锁）</p>\n<p>成员函数：</p>\n<ul>\n<li><code>lock_shared()</code>: 获取==共享锁==，如果当前有独占锁，则阻塞。</li>\n<li><code>try_lock_shared()</code>: 尝试获取共享锁，如果成功则返回<code>true</code>，否则返回<code>false</code>，不阻塞。</li>\n<li><code>try_lock_shared_for(duration)</code>: 尝试在指定的时间段内获取共享锁，如果成功则返回<code>true</code>，否则返回<code>false</code>。</li>\n<li><code>lock()</code>: 获取==独占锁==，如果当前有共享锁或独占锁，则阻塞。</li>\n<li><code>try_lock()</code>: 尝试获取独占锁，如果成功则返回<code>true</code>，否则返回<code>false</code>，不阻塞。</li>\n<li><code>try_lock_for(duration)</code>: 尝试在指定的时间段内获取独占锁，如果成功则返回<code>true</code>，否则返回<code>false</code>。</li>\n<li><code>unlock()</code>: 释放当前持有的锁（无论是共享锁还是独占锁）。</li>\n</ul>\n"},{"title":"C++ nodiscard","date":"2025-07-05T16:00:00.000Z","_content":"\n## nodiscard\n\n#### 用于标记函数的返回值：\n\n`[[nodiscard]] int Compute();`\n\n当调用该函数却不赋值返回结果时，将收到警告：\n\n``````cpp\nvoid Foo() {\n    Compute();\n}\n``````\n\n````cpp\nwarning: ignoring return value of 'int Compute()', declared with attribute nodiscard\n````\n\n#### 标记整个类型\n\n```cpp\n[[nodiscard]]\nstruct ImportantType {};\n\nImportantType CalcSuperImportant();\n```\n\n每当调用任何返回`ImportantType`的函数时，都会收到警告。\n\n#### 使用注意\n\n过多使用该关键字可能导致编译器编译时出现大量`warning`。","source":"_posts/C-Plus-Plus/c-plus-plus-17/nodiscard.md","raw":"---\ntitle: C++ nodiscard\ndate: 2025-07-06\n---\n\n## nodiscard\n\n#### 用于标记函数的返回值：\n\n`[[nodiscard]] int Compute();`\n\n当调用该函数却不赋值返回结果时，将收到警告：\n\n``````cpp\nvoid Foo() {\n    Compute();\n}\n``````\n\n````cpp\nwarning: ignoring return value of 'int Compute()', declared with attribute nodiscard\n````\n\n#### 标记整个类型\n\n```cpp\n[[nodiscard]]\nstruct ImportantType {};\n\nImportantType CalcSuperImportant();\n```\n\n每当调用任何返回`ImportantType`的函数时，都会收到警告。\n\n#### 使用注意\n\n过多使用该关键字可能导致编译器编译时出现大量`warning`。","slug":"C-Plus-Plus/c-plus-plus-17/nodiscard","published":1,"updated":"2025-09-14T02:36:11.008Z","comments":1,"layout":"post","photos":[],"_id":"cmfktk7ew001nc04p1ta7h7ny","content":"<h2 id=\"nodiscard\">nodiscard</h2>\n<h4 id=\"用于标记函数的返回值：\">用于标记函数的返回值：</h4>\n<p><code>[[nodiscard]] int Compute();</code></p>\n<p>当调用该函数却不赋值返回结果时，将收到警告：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Compute</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">warning: ignoring <span class=\"keyword\">return</span> value of <span class=\"string\">&#x27;int Compute()&#x27;</span>, declared with attribute nodiscard</span><br></pre></td></tr></table></figure>\n<h4 id=\"标记整个类型\">标记整个类型</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[nodiscard]]</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ImportantType</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ImportantType <span class=\"title\">CalcSuperImportant</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p>每当调用任何返回<code>ImportantType</code>的函数时，都会收到警告。</p>\n<h4 id=\"使用注意\">使用注意</h4>\n<p>过多使用该关键字可能导致编译器编译时出现大量<code>warning</code>。</p>\n","secretKey":"18ecb9384569b84b2a9d586abbe5d0ca0cb720a4a94d44954443c811320982c4","iv":"d1bcfba1d5e34b8574f80286d5152a85","encryptedPassword":"b971929abd52a654a3890752fecf0003","encryptedContent":"f12fbf5bcc47a37b3a4138b3afa8ee7a1e8a086e6f8248ad7731fbe812283af0cdd8aa1420ccd064d943205ca0f9ed78cad82a19073b57ddea6c16c41e3886a1dfe69d2c7828b36680e8e44023af6b217624940e5716f228b73a8b50a563e78785beddff2ec4ad01317890cc70e27dc470eae02b6f3676e046d9660f97e4024721b1b9ae63a9356723d83cf82b7cffa9c90553ce3091e505f5c27464fd1f57233f625d3e17a7253f9b53a9030b6bbc60668a4fb374044e6358408fe1a770f5d256a70bf8436e021aa105fca05eef3dc5ff26d6422f3e43721890aa897af1e9ed4685425d431ff2395f6be2c286d8196e9d9de6bf753f11ac7db0fe89fceac817a77b93bcb4ab28a99c0c097366108ff835b46c5aa45dd0ee0dbf5f4ea1b8821a22104f613ea233ad4606cd22afad2e72ff2baae153ba1e3cc1d8f5f2126623a0131767c7fec1852f8f8caa2c2ce76f1657a5d4f60241249ffb4e4b7153e6a1290d8874b3711a2fb8c29a967d18c17c304bd9348d3393126b9eb58c176086feaa8bb11b905f1fadc59f5811e6c7d72dc4f69267843e88e8e07fb84a3b85b96108efca15f88fe8eacf01f569ef708eeae562d1fd720526938959697002d2ee4803d1b609a2b351c6e64008637baac2c15d9e9a4c97b7380ce29dd09e7d5e3bde2d5ffe21aa36467876528ddd1212055322fed5ef1e98088a1e6f977f3a438f6b8666799c8d7d2473e3d069308471ad47b949d9761ba619904c3832adbdd05d573c4b148939e1742ff4a7553cc434304ee6575f4e7618f814d52571039141ff57b36279b7ae75aa839396261a65f876441059ecb657e0fa90a5d0ef17dd6edd8ca78368a629dce8ace17ab2d2e491038ef953e1859f380096dc0a7974565c9f484339cc383c2d58d778213bd276a4b8881b8c87dc94131585a569cddc0e8b3e8b7e1842f02980eb1b8b6c5fedaada373006f63dce1126c855bf81e2581ca9945f677b11364d98dd881393b07e7e7c80c67c900a32b87c63ab4af5690c61405725ee8f7b96f30d1fc1b09cabc95950fd72731a31ba4cf194918091d1d107f92f09d3f813f24d2213c782f5da527362389ce5e86b4c73119639447883a52c525bdc858d8921b5fb41c6fa6b14133d60541cdbf467ab45554de9ecedde3bb7bf8e673b7e39626d064f9dbe343340788ea2cceeae8d76d3e3302af8c83e880b01fb7b8c99ebed24911a45113340a5f3c780035b71dc8d542647bd021a9679effff620cc22c0b04baabb5d1b2c9d3a747a4385ed1402100fe4022976476145e87a1c919c3cb5949fd1029a00920cb0bc1ac44646c2996135a48238c38d5986923ec7cbb69f00b763e815a73c88a004ac17ac4151ea6e85e757f223b46b8ccfcd75736cdf18103a5bda1ad8d91482c8002fa8dbbbd18c8c12db226cfa1c1959ffc42f330c39dfc56c79c866544a79971d70b45deedb890dac19c30bca0e4ba07acd4011eb81ed38b8cb604ddbe3cb861dbbb6826a1e98b01de2d6350563dd15bf7bc19aa0aafa062d785fd2cae322d26039a1de04f327dc3f236cc15e6a778a1ea31c6990126da00362ed09aa7d6a99ab4d8944373b28826a91c90e03d400d3483522a4de63a011584c740f4b62c9afcc5204da4d3af37d3ba8d2820ef6379a09750bcabbbfb245aff952a60295abc255aa526d60e5e25495926f6c2deb47d523377bbb89b39b99ff7133ff681bd48705249e7886caa6b5b41b377cd40d7543af417d1afd82adf0cf1b74393ac180a2fb6b600912b28b0e57510cc1253b549995d53e2bc1694ddaa8aa39e334b540b4ba2d6a4e302611a5918fafedf8d43da25fe638dc97aa8c24e48b1378d36bfd68629e8616210bd8f579a776f3bbe2b814a9316eafb2699062a5250879730731b0f73fe60b684d4cb0a9df0a45d3ebcabda571f9e5c7e104322e61884b12aa66983689c8ba3797bdc37d322a715040c45fec8978fbfaf23ab6733c79e2fd7bf94634eaa82a99886a2526755c8fe3c271d9da3ecd0f410142623b7228c7e96391082eea96a352bcc6b88f4a911220494ac39d0c7728fb938a568dd20e6d31d6e2409427b8d8cdd0d8cc7f339af3f979210a127b856ba5e31caf685c00e3852cdc7b93416796392f209b3ad01e333cc7753dbf7cfb5bb502a9999736e1098d8c8ea5d1081b6cb3a078a8bb54c1a0113253eee469c67ee0b7bdb2f19c44e74b3a091a8184c00a3fd74294f7e0832cee0354981b0189cf7a3b132ff9eeaff130ad930dd0c686173f8f422e44cfe6d0e3a08d1822850a93162baa029b494ef2754906507aff89035088b831ebd55750fec03dd55e3892bcf61d1606685bf609a132b9e3ce40ba71844dc606384361a8d5c707f255d44606ef63f28fd50ded5768ecf4a69d1d84f1d6d11aa6f7ab7a2fa51a5a9ed204c03ab8c9722b0beaecc4e745f971aef05e1a257d285c58fe00dd3d32c29555919f5dab9958d73e7a498a071bd403f7432c08b4ed8834061c77a838a690f2b4092b4992024af3ee75cf274eb026bb7722f7aa2e41534cd9f6b47986aca25efe46db956339cf0b0575c11a476c9e967057e188d0be8ce70efb1a3c08397c20aa2135bdbb11a14f302a679cda3c78fb4bcdec771bdf62a6e0b3b9fb6715ec33ff3ee5a7f557fb59b64915370419fc59fcede9bf2c682bd9248ddd90aecb808cbc11ccff43973c88b4654019c75da181f3685a895a8b47735e50ec4c6a3bedbc004db8c3c4aab1a45634d6afa917412423279470ab","excerpt":"","more":"<h2 id=\"nodiscard\">nodiscard</h2>\n<h4 id=\"用于标记函数的返回值：\">用于标记函数的返回值：</h4>\n<p><code>[[nodiscard]] int Compute();</code></p>\n<p>当调用该函数却不赋值返回结果时，将收到警告：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Compute</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">warning: ignoring <span class=\"keyword\">return</span> value of <span class=\"string\">&#x27;int Compute()&#x27;</span>, declared with attribute nodiscard</span><br></pre></td></tr></table></figure>\n<h4 id=\"标记整个类型\">标记整个类型</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[nodiscard]]</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ImportantType</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ImportantType <span class=\"title\">CalcSuperImportant</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p>每当调用任何返回<code>ImportantType</code>的函数时，都会收到警告。</p>\n<h4 id=\"使用注意\">使用注意</h4>\n<p>过多使用该关键字可能导致编译器编译时出现大量<code>warning</code>。</p>\n"},{"title":"C++ 内存对齐","date":"2025-07-05T16:00:00.000Z","_content":"\n### C++ 内存对齐\n\n","source":"_posts/C-Plus-Plus/对象模型/内存对齐.md","raw":"---\ntitle: C++ 内存对齐\ndate: 2025-07-06\ntags: [C++, 对象模型]\ncategories: C++\n---\n\n### C++ 内存对齐\n\n","slug":"C-Plus-Plus/对象模型/内存对齐","published":1,"updated":"2025-09-14T02:36:11.008Z","comments":1,"layout":"post","photos":[],"_id":"cmfktk7ew001qc04pgpg4gdfx","content":"<h3 id=\"C-内存对齐\">C++ 内存对齐</h3>\n","secretKey":"d902299076d33508a81751f8e106691fd71595b2d43954e66e7dd8b6cc7803d6","iv":"3f49c253b8f30fb8f5c75ee213d3abaa","encryptedPassword":"ed8d1c57be573bc5ef72ba202e27b521","encryptedContent":"b27af141eb8551e0e9327ddf8fd6d3f6f18bf945b08c2dbe26f2f5964a946004df7f2cf5e4f07ac663cc171b4265d07e","excerpt":"","more":"<h3 id=\"C-内存对齐\">C++ 内存对齐</h3>\n"},{"title":"内存序","date":"2025-07-05T16:00:00.000Z","description":"C++ 内存序","_content":"\n### 什么是内存序\n\n内存顺序是指在并发编程中, 对内存读写操作的执行顺序。这个顺序可以被编译器和处理器进行优化, 可能会与代码中的顺序不同, 这被称为指令重排.","source":"_posts/C-Plus-Plus/并发/内存序.md","raw":"---\ntitle: 内存序\ndate: 2025-07-06\ndescription: C++ 内存序\n---\n\n### 什么是内存序\n\n内存顺序是指在并发编程中, 对内存读写操作的执行顺序。这个顺序可以被编译器和处理器进行优化, 可能会与代码中的顺序不同, 这被称为指令重排.","slug":"C-Plus-Plus/并发/内存序","published":1,"updated":"2025-09-14T02:36:11.008Z","comments":1,"layout":"post","photos":[],"_id":"cmfktk7ex001tc04p0jol62gg","content":"<h3 id=\"什么是内存序\">什么是内存序</h3>\n<p>内存顺序是指在并发编程中, 对内存读写操作的执行顺序。这个顺序可以被编译器和处理器进行优化, 可能会与代码中的顺序不同, 这被称为指令重排.</p>\n","secretKey":"bdf900ad7067e7d3fa48996ecb96495f1cf03dc90ddd63ef4c6c5ab59835073b","iv":"6875f6c5f323175fe79142ca111f13d6","encryptedPassword":"2a60bb88be6320b3de1c63df5309435f","encryptedContent":"851a81409b664823b72ee188285d71482abf54d4f071226f8db285bc4886793fbabac885bf166b08fb63ecfd8d10d059ae91cbe22002c9d0d6d588eda822053d37d12f7370306eb287caea670d9f80a8338cde49e069c378c2285336b600fce093deaee53487aaf6c0a49cb0c88ecc6c00a658fc16ead070f7ea388d757c2ae8bad21f356851505aa11970b67daca4c6fbe36856b40c464dda21e20e714663718ee399c12d7463220ef320c05253cc2590d589fc5df96589fdde55e519c3ebefd51ae3489fdd621d276525b615edf5ae18aef051c61b694b4d65e151ef9b282b00aced71c3f861c9c4141e870751a6629b660be4c93ab78616c9f4edb1ee63079776f6c29f8006ef6210d58f380f83e2","excerpt":"","more":"<h3 id=\"什么是内存序\">什么是内存序</h3>\n<p>内存顺序是指在并发编程中, 对内存读写操作的执行顺序。这个顺序可以被编译器和处理器进行优化, 可能会与代码中的顺序不同, 这被称为指令重排.</p>\n"},{"title":"原子操作","date":"2025-07-05T16:00:00.000Z","description":"原子操作","_content":"\n### 原子操作","source":"_posts/C-Plus-Plus/并发/原子操作.md","raw":"---\ntitle: 原子操作\ndate: 2025-07-06\ndescription: 原子操作\n---\n\n### 原子操作","slug":"C-Plus-Plus/并发/原子操作","published":1,"updated":"2025-09-14T02:36:11.009Z","comments":1,"layout":"post","photos":[],"_id":"cmfktk7ex001xc04peql86if1","content":"<h3 id=\"原子操作\">原子操作</h3>\n","secretKey":"de4504dd0cc7c6b2c1fdc26163963f6097028505996e0b0edebadcec72a753e9","iv":"387ff12be4b9dd91f3357b92ee99f45f","encryptedPassword":"08a8413ce69e09971fa5f7e11da608cf","encryptedContent":"97c64dea209f5ea763b00f6a8a90e8f6f642ee3e4ffff3e97b11b2283f22e5602662927b107d4919a053f5d99c97e562","excerpt":"","more":"<h3 id=\"原子操作\">原子操作</h3>\n"},{"title":"大顶堆/小顶堆","date":"2025-07-19T16:00:00.000Z","updated":"2025-07-20T16:00:00.000Z","_content":"\n### 堆\n\n","source":"_posts/数据结构/堆/大顶堆.md","raw":"---\ntitle: 大顶堆/小顶堆\ndate: 2025-07-20\nupdated: 2025-07-21\ntags: [数据结构, 堆, 优先级队列, C++]\ncategories: 数据结构\n---\n\n### 堆\n\n","slug":"数据结构/堆/大顶堆","published":1,"comments":1,"layout":"post","photos":[],"_id":"cmfktk7ey0020c04ph7xr536p","content":"<h3 id=\"堆\">堆</h3>\n","secretKey":"7d75eb9e565da70643dd01397120296fe8bf5447e8d131747d1cef2093869356","iv":"1a8dde80692a88325ec0beb180c4b2ca","encryptedPassword":"e726eb1cdd0bd91775bc02ac518019f2","encryptedContent":"da9bb84d303cff2b653d4eeabc83311985d9228c0de1bab3b4d0ce0d69f114d9","excerpt":"","more":"<h3 id=\"堆\">堆</h3>\n"},{"title":"二叉搜索树","date":"2025-07-09T16:00:00.000Z","updated":"2025-07-10T16:00:00.000Z","_content":"\n### 特点\n\n1. 非空左子树的所有结点的值小于其根结点的值。\n2. 非空右子树的所有结点的值大于其根结点的值。\n3. 左、右子树都是二叉搜索树。\n\n### 实现\n\n#### 主要操作\n\n##### 查询：\n\n实现思路：\n\n- 递归：调用递归方法，传入要查询的树的根节点和要查询的值，判断根节点值大小，然后递归查询。\n- 非递归：通过while循环，判断当前指针指向的节点值是否满足条件或者当前指针是否为空。然后根据情况令指针指向当前节点的左子节点或者右子节点。如果当前节点变为空，说明没有找到目标值。\n\n##### 插入：\n\n- 递归：调用递归方法，传入要插入的值和树的根节点。如果当前根节点值小于插入的值，递归调用插入方法，传入右子树的根节点。如果当前根节点值大于插入的值，递归调用插入方法，传入左子树的根节点。<mark>如果相等，报错（二叉搜索树不允许存在重复的值）</mark>。\n- 非递归：通过while循环，通过判断插入值的大小，不断改变遍历的指针指向的节点，同时用另一个指针记录上一个遍历过的节点（方便查找到叶子节点时向前看一个节点，便于操作）。\n\n##### 删除：\n\n首先找到要删除的节点，然后判断情况。主要分为三种情况：\n\n- 左子树为空，只有右子树：直接将右子树向上提升一级（用右子树替换要删除的节点，然乎释放要删除的节点的空间(`new`出来的当然要`delete`)）。\n- 右子树为空，只有左子树：直接将左子树向上提升一级（思路同上）。\n- **左右子树都不为空**：将右子树中值最小的节点和要删除的节点交换，然后删除目标节点（此时目标节点已经在原右子树最小元素的位置上，但该位置可能是一个分叉节点，所以应该递归调用删除方法进行删除）。\n\nC++实现：\n\n```cpp\n#include <iostream>\n#include <queue>\n\nstruct Node {\n    int data;\n    Node *left;\n    Node *right;\n    Node(int data) {\n        this->data = data;\n        left = nullptr;\n        right = nullptr;\n    }\n    Node(int data, Node *left, Node *right) {\n        this->data = data;\n        this->left = left;\n        this->right = right;\n    }\n};\n\n// 二叉搜索树\nclass BST {\nprivate:\n    Node *root;\n\npublic:\n    BST() {\n        root = nullptr;\n    }\n    BST(int root_data) {\n        root = new Node(root_data);\n    }\n\n    Node *get_root() {\n        return root;\n    }\n\n    // 递归方式插入\n    void insert_recursion(int data) {\n        if (root == nullptr) {\n            root = new Node(data);\n            return;\n        }\n        recursion_insert(root, data); // 调用递归函数\n    }\n\n    // 非递归方式插入\n    void insert_unrecursion(int data) {\n        if (root == nullptr) {\n            root = new Node(data);\n            return;\n        }\n        Node *current = root;\n        Node *parent; // 记录上一个遍历过的节点\n        while (current != nullptr) {\n            parent = current;\n            if (current->data > data) {\n                current = current->left;\n            } else if (current->data < data) {\n                current = current->right;\n            } else {\n                std::cout << \"insert error: data is already exist\" << std::endl;\n                return;\n            }\n        }\n        if (parent->data > data) {\n            parent->left = new Node(data);\n        } else { // while循环中已经判断过元素相等的情况，这里不用再判断\n            parent->right = new Node(data);\n        }\n    }\n\n    Node *search(int data) {\n        if (root == nullptr) {\n            return nullptr;\n        }\n        Node *parent = nullptr;\n        Node *current = root;\n        while (current != nullptr) {\n            parent = current;\n            if (current->data == data) {\n                return current;\n            } else if (current->data > data) {\n                current = current->left;\n            } else {\n                current = current->right;\n            }\n        }\n        return nullptr;\n    }\n\n    void delete_node(int data) {\n        if (root == nullptr) {\n            printf(\"delete failed: tree has zero node\");\n            return;\n        }\n        delNode(root, data);\n    }\n\n    ~BST() {\n        destroyTree(root);\n    }\n\nprivate:\n    void recursion_insert(Node *&node, int data) {\n        if (node == nullptr) {\n            node = new Node(data);\n            return;\n        }\n        if (data > node->data) {\n            recursion_insert(node->right, data);\n        } else if (data < node->data) {\n            recursion_insert(node->left, data);\n        } else {\n            std::cout << \"insert error: data is already exist\" << std::endl;\n        }\n    }\n\n    void delNode(Node *&root, int data) {\n        if (root == nullptr) {\n            return;\n        } else if (root->data < data) {\n            delNode(root->right, data);\n        } else if (root->data > data) {\n            delNode(root->left, data);\n        } else {\n            // root节点就是要删除的节点\n            if (root->left == nullptr) {\n                Node *temp = root;\n                root = root->right;\n                printf(\"deleted node: %d\\n\", temp->data);\n                delete temp;\n                return;\n            }\n            if (root->right == nullptr) {\n                Node *temp = root;\n                root = root->left;\n                printf(\"deleted node: %d\\n\", temp->data);\n                delete temp;\n                return;\n            }\n            /**\n             * 左右子树都不为空：\n             *      将右子树中的最小节点与要删除的节点交换，然后删除交换后的节点。\n             *      删除时，考虑原右子树的最小节点可能是分支节点，所以应该递归调用删除方法进行删除。\n             */\n            Node *current = root->right;\n            while (current != nullptr && current->left != nullptr) {\n                // 找到符合条件的右子树最小节点\n                current = current->left;\n            }\n            /**\n             * 此处不必实现两数交换，如果只是实现删除，可以直接拿current->data覆盖root->data\n             * 但是考虑到某些时候需要deleteNode方法返回被删除的元素的值，此处进行了交换处理，便于更改。\n             */\n            int temp = current->data;\n            current->data = root->data;\n            root->data = temp;\n            delNode(root->right, current->data); // 删除右子树中被交换后的节点\n        }\n    }\n\n    void destroyTree(Node *root) {\n        if (root == nullptr) {\n            return;\n        }\n        if (root->left != nullptr) {\n            destroyTree(root->left);\n        }\n        if (root->right != nullptr) {\n            destroyTree(root->right);\n        }\n        std::cout << \"destroyed node: \" << root->data << std::endl;\n        delete root;\n    }\n};\n\nvoid inorderPrintTree(Node *root) {\n    if (root == nullptr) {\n        return;\n    }\n    inorderPrintTree(root->left);\n    std::cout << root->data << \" \";\n    inorderPrintTree(root->right);\n}\n\nint main() {\n    int arr[] = {5, 3, 2, 4, 7, 6, 8};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    BST bst = BST();\n\n    for (int i = 0; i < size; ++i) {\n        bst.insert_unrecursion(arr[i]);\n    }\n    inorderPrintTree(bst.get_root());\n    printf(\"\\n\");\n    for (int i = 0; i < size; ++i) {\n        if (bst.search(arr[i])) {\n            printf(\"find %d\\n\", arr[i]);\n        } else {\n            printf(\"not found %d\\n\", arr[i]);\n        }\n    }\n\n    for (int i = 0; i < size; ++i) {\n        bst.delete_node(arr[i]);\n    }\n\n    return 0;\n}\n```\n\n正确输出：\n\n```cpp\n2 3 4 5 6 7 8 \nfind 5\nfind 3\nfind 2\nfind 4\nfind 7\nfind 6\nfind 8\ndeleted node: 5\ndeleted node: 3\ndeleted node: 2\ndeleted node: 4\ndeleted node: 7\ndeleted node: 6\ndeleted node: 8\n```\n\n","source":"_posts/数据结构/树/BinarySearchTree.md","raw":"---\ntitle: 二叉搜索树\ndate: 2025-07-10\nupdated: 2025-07-11\ntags: [数据结构, 二叉树, C++, 树]\ncategories: 数据结构\n---\n\n### 特点\n\n1. 非空左子树的所有结点的值小于其根结点的值。\n2. 非空右子树的所有结点的值大于其根结点的值。\n3. 左、右子树都是二叉搜索树。\n\n### 实现\n\n#### 主要操作\n\n##### 查询：\n\n实现思路：\n\n- 递归：调用递归方法，传入要查询的树的根节点和要查询的值，判断根节点值大小，然后递归查询。\n- 非递归：通过while循环，判断当前指针指向的节点值是否满足条件或者当前指针是否为空。然后根据情况令指针指向当前节点的左子节点或者右子节点。如果当前节点变为空，说明没有找到目标值。\n\n##### 插入：\n\n- 递归：调用递归方法，传入要插入的值和树的根节点。如果当前根节点值小于插入的值，递归调用插入方法，传入右子树的根节点。如果当前根节点值大于插入的值，递归调用插入方法，传入左子树的根节点。<mark>如果相等，报错（二叉搜索树不允许存在重复的值）</mark>。\n- 非递归：通过while循环，通过判断插入值的大小，不断改变遍历的指针指向的节点，同时用另一个指针记录上一个遍历过的节点（方便查找到叶子节点时向前看一个节点，便于操作）。\n\n##### 删除：\n\n首先找到要删除的节点，然后判断情况。主要分为三种情况：\n\n- 左子树为空，只有右子树：直接将右子树向上提升一级（用右子树替换要删除的节点，然乎释放要删除的节点的空间(`new`出来的当然要`delete`)）。\n- 右子树为空，只有左子树：直接将左子树向上提升一级（思路同上）。\n- **左右子树都不为空**：将右子树中值最小的节点和要删除的节点交换，然后删除目标节点（此时目标节点已经在原右子树最小元素的位置上，但该位置可能是一个分叉节点，所以应该递归调用删除方法进行删除）。\n\nC++实现：\n\n```cpp\n#include <iostream>\n#include <queue>\n\nstruct Node {\n    int data;\n    Node *left;\n    Node *right;\n    Node(int data) {\n        this->data = data;\n        left = nullptr;\n        right = nullptr;\n    }\n    Node(int data, Node *left, Node *right) {\n        this->data = data;\n        this->left = left;\n        this->right = right;\n    }\n};\n\n// 二叉搜索树\nclass BST {\nprivate:\n    Node *root;\n\npublic:\n    BST() {\n        root = nullptr;\n    }\n    BST(int root_data) {\n        root = new Node(root_data);\n    }\n\n    Node *get_root() {\n        return root;\n    }\n\n    // 递归方式插入\n    void insert_recursion(int data) {\n        if (root == nullptr) {\n            root = new Node(data);\n            return;\n        }\n        recursion_insert(root, data); // 调用递归函数\n    }\n\n    // 非递归方式插入\n    void insert_unrecursion(int data) {\n        if (root == nullptr) {\n            root = new Node(data);\n            return;\n        }\n        Node *current = root;\n        Node *parent; // 记录上一个遍历过的节点\n        while (current != nullptr) {\n            parent = current;\n            if (current->data > data) {\n                current = current->left;\n            } else if (current->data < data) {\n                current = current->right;\n            } else {\n                std::cout << \"insert error: data is already exist\" << std::endl;\n                return;\n            }\n        }\n        if (parent->data > data) {\n            parent->left = new Node(data);\n        } else { // while循环中已经判断过元素相等的情况，这里不用再判断\n            parent->right = new Node(data);\n        }\n    }\n\n    Node *search(int data) {\n        if (root == nullptr) {\n            return nullptr;\n        }\n        Node *parent = nullptr;\n        Node *current = root;\n        while (current != nullptr) {\n            parent = current;\n            if (current->data == data) {\n                return current;\n            } else if (current->data > data) {\n                current = current->left;\n            } else {\n                current = current->right;\n            }\n        }\n        return nullptr;\n    }\n\n    void delete_node(int data) {\n        if (root == nullptr) {\n            printf(\"delete failed: tree has zero node\");\n            return;\n        }\n        delNode(root, data);\n    }\n\n    ~BST() {\n        destroyTree(root);\n    }\n\nprivate:\n    void recursion_insert(Node *&node, int data) {\n        if (node == nullptr) {\n            node = new Node(data);\n            return;\n        }\n        if (data > node->data) {\n            recursion_insert(node->right, data);\n        } else if (data < node->data) {\n            recursion_insert(node->left, data);\n        } else {\n            std::cout << \"insert error: data is already exist\" << std::endl;\n        }\n    }\n\n    void delNode(Node *&root, int data) {\n        if (root == nullptr) {\n            return;\n        } else if (root->data < data) {\n            delNode(root->right, data);\n        } else if (root->data > data) {\n            delNode(root->left, data);\n        } else {\n            // root节点就是要删除的节点\n            if (root->left == nullptr) {\n                Node *temp = root;\n                root = root->right;\n                printf(\"deleted node: %d\\n\", temp->data);\n                delete temp;\n                return;\n            }\n            if (root->right == nullptr) {\n                Node *temp = root;\n                root = root->left;\n                printf(\"deleted node: %d\\n\", temp->data);\n                delete temp;\n                return;\n            }\n            /**\n             * 左右子树都不为空：\n             *      将右子树中的最小节点与要删除的节点交换，然后删除交换后的节点。\n             *      删除时，考虑原右子树的最小节点可能是分支节点，所以应该递归调用删除方法进行删除。\n             */\n            Node *current = root->right;\n            while (current != nullptr && current->left != nullptr) {\n                // 找到符合条件的右子树最小节点\n                current = current->left;\n            }\n            /**\n             * 此处不必实现两数交换，如果只是实现删除，可以直接拿current->data覆盖root->data\n             * 但是考虑到某些时候需要deleteNode方法返回被删除的元素的值，此处进行了交换处理，便于更改。\n             */\n            int temp = current->data;\n            current->data = root->data;\n            root->data = temp;\n            delNode(root->right, current->data); // 删除右子树中被交换后的节点\n        }\n    }\n\n    void destroyTree(Node *root) {\n        if (root == nullptr) {\n            return;\n        }\n        if (root->left != nullptr) {\n            destroyTree(root->left);\n        }\n        if (root->right != nullptr) {\n            destroyTree(root->right);\n        }\n        std::cout << \"destroyed node: \" << root->data << std::endl;\n        delete root;\n    }\n};\n\nvoid inorderPrintTree(Node *root) {\n    if (root == nullptr) {\n        return;\n    }\n    inorderPrintTree(root->left);\n    std::cout << root->data << \" \";\n    inorderPrintTree(root->right);\n}\n\nint main() {\n    int arr[] = {5, 3, 2, 4, 7, 6, 8};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    BST bst = BST();\n\n    for (int i = 0; i < size; ++i) {\n        bst.insert_unrecursion(arr[i]);\n    }\n    inorderPrintTree(bst.get_root());\n    printf(\"\\n\");\n    for (int i = 0; i < size; ++i) {\n        if (bst.search(arr[i])) {\n            printf(\"find %d\\n\", arr[i]);\n        } else {\n            printf(\"not found %d\\n\", arr[i]);\n        }\n    }\n\n    for (int i = 0; i < size; ++i) {\n        bst.delete_node(arr[i]);\n    }\n\n    return 0;\n}\n```\n\n正确输出：\n\n```cpp\n2 3 4 5 6 7 8 \nfind 5\nfind 3\nfind 2\nfind 4\nfind 7\nfind 6\nfind 8\ndeleted node: 5\ndeleted node: 3\ndeleted node: 2\ndeleted node: 4\ndeleted node: 7\ndeleted node: 6\ndeleted node: 8\n```\n\n","slug":"数据结构/树/BinarySearchTree","published":1,"comments":1,"layout":"post","photos":[],"_id":"cmfktk7ey0023c04pcgwahehw","content":"<h3 id=\"特点\">特点</h3>\n<ol>\n<li>非空左子树的所有结点的值小于其根结点的值。</li>\n<li>非空右子树的所有结点的值大于其根结点的值。</li>\n<li>左、右子树都是二叉搜索树。</li>\n</ol>\n<h3 id=\"实现\">实现</h3>\n<h4 id=\"主要操作\">主要操作</h4>\n<h5 id=\"查询：\">查询：</h5>\n<p>实现思路：</p>\n<ul>\n<li>递归：调用递归方法，传入要查询的树的根节点和要查询的值，判断根节点值大小，然后递归查询。</li>\n<li>非递归：通过while循环，判断当前指针指向的节点值是否满足条件或者当前指针是否为空。然后根据情况令指针指向当前节点的左子节点或者右子节点。如果当前节点变为空，说明没有找到目标值。</li>\n</ul>\n<h5 id=\"插入：\">插入：</h5>\n<ul>\n<li>递归：调用递归方法，传入要插入的值和树的根节点。如果当前根节点值小于插入的值，递归调用插入方法，传入右子树的根节点。如果当前根节点值大于插入的值，递归调用插入方法，传入左子树的根节点。<mark>如果相等，报错（二叉搜索树不允许存在重复的值）</mark>。</li>\n<li>非递归：通过while循环，通过判断插入值的大小，不断改变遍历的指针指向的节点，同时用另一个指针记录上一个遍历过的节点（方便查找到叶子节点时向前看一个节点，便于操作）。</li>\n</ul>\n<h5 id=\"删除：\">删除：</h5>\n<p>首先找到要删除的节点，然后判断情况。主要分为三种情况：</p>\n<ul>\n<li>左子树为空，只有右子树：直接将右子树向上提升一级（用右子树替换要删除的节点，然乎释放要删除的节点的空间(<code>new</code>出来的当然要<code>delete</code>)）。</li>\n<li>右子树为空，只有左子树：直接将左子树向上提升一级（思路同上）。</li>\n<li><strong>左右子树都不为空</strong>：将右子树中值最小的节点和要删除的节点交换，然后删除目标节点（此时目标节点已经在原右子树最小元素的位置上，但该位置可能是一个分叉节点，所以应该递归调用删除方法进行删除）。</li>\n</ul>\n<p>C++实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    Node *left;</span><br><span class=\"line\">    Node *right;</span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> data) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;data = data;</span><br><span class=\"line\">        left = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        right = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> data, Node *left, Node *right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;data = data;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;left = left;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;right = right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 二叉搜索树</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BST</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    Node *root;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">BST</span>() &#123;</span><br><span class=\"line\">        root = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">BST</span>(<span class=\"type\">int</span> root_data) &#123;</span><br><span class=\"line\">        root = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(root_data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Node *<span class=\"title\">get_root</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 递归方式插入</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert_recursion</span><span class=\"params\">(<span class=\"type\">int</span> data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            root = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(data);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">recursion_insert</span>(root, data); <span class=\"comment\">// 调用递归函数</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 非递归方式插入</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert_unrecursion</span><span class=\"params\">(<span class=\"type\">int</span> data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            root = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(data);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node *current = root;</span><br><span class=\"line\">        Node *parent; <span class=\"comment\">// 记录上一个遍历过的节点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (current != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            parent = current;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (current-&gt;data &gt; data) &#123;</span><br><span class=\"line\">                current = current-&gt;left;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current-&gt;data &lt; data) &#123;</span><br><span class=\"line\">                current = current-&gt;right;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                std::cout &lt;&lt; <span class=\"string\">&quot;insert error: data is already exist&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (parent-&gt;data &gt; data) &#123;</span><br><span class=\"line\">            parent-&gt;left = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(data);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// while循环中已经判断过元素相等的情况，这里不用再判断</span></span><br><span class=\"line\">            parent-&gt;right = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Node *<span class=\"title\">search</span><span class=\"params\">(<span class=\"type\">int</span> data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node *parent = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        Node *current = root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (current != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            parent = current;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (current-&gt;data == data) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current-&gt;data &gt; data) &#123;</span><br><span class=\"line\">                current = current-&gt;left;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                current = current-&gt;right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">delete_node</span><span class=\"params\">(<span class=\"type\">int</span> data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;delete failed: tree has zero node&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">delNode</span>(root, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">BST</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">destroyTree</span>(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">recursion_insert</span><span class=\"params\">(Node *&amp;node, <span class=\"type\">int</span> data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            node = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(data);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data &gt; node-&gt;data) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">recursion_insert</span>(node-&gt;right, data);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data &lt; node-&gt;data) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">recursion_insert</span>(node-&gt;left, data);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            std::cout &lt;&lt; <span class=\"string\">&quot;insert error: data is already exist&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">delNode</span><span class=\"params\">(Node *&amp;root, <span class=\"type\">int</span> data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root-&gt;data &lt; data) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">delNode</span>(root-&gt;right, data);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root-&gt;data &gt; data) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">delNode</span>(root-&gt;left, data);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// root节点就是要删除的节点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root-&gt;left == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">                Node *temp = root;</span><br><span class=\"line\">                root = root-&gt;right;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;deleted node: %d\\n&quot;</span>, temp-&gt;data);</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> temp;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root-&gt;right == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">                Node *temp = root;</span><br><span class=\"line\">                root = root-&gt;left;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;deleted node: %d\\n&quot;</span>, temp-&gt;data);</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> temp;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 左右子树都不为空：</span></span><br><span class=\"line\"><span class=\"comment\">             *      将右子树中的最小节点与要删除的节点交换，然后删除交换后的节点。</span></span><br><span class=\"line\"><span class=\"comment\">             *      删除时，考虑原右子树的最小节点可能是分支节点，所以应该递归调用删除方法进行删除。</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            Node *current = root-&gt;right;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (current != <span class=\"literal\">nullptr</span> &amp;&amp; current-&gt;left != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 找到符合条件的右子树最小节点</span></span><br><span class=\"line\">                current = current-&gt;left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 此处不必实现两数交换，如果只是实现删除，可以直接拿current-&gt;data覆盖root-&gt;data</span></span><br><span class=\"line\"><span class=\"comment\">             * 但是考虑到某些时候需要deleteNode方法返回被删除的元素的值，此处进行了交换处理，便于更改。</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"type\">int</span> temp = current-&gt;data;</span><br><span class=\"line\">            current-&gt;data = root-&gt;data;</span><br><span class=\"line\">            root-&gt;data = temp;</span><br><span class=\"line\">            <span class=\"built_in\">delNode</span>(root-&gt;right, current-&gt;data); <span class=\"comment\">// 删除右子树中被交换后的节点</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">destroyTree</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root-&gt;left != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">destroyTree</span>(root-&gt;left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root-&gt;right != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">destroyTree</span>(root-&gt;right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;destroyed node: &quot;</span> &lt;&lt; root-&gt;data &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">inorderPrintTree</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">inorderPrintTree</span>(root-&gt;left);</span><br><span class=\"line\">    std::cout &lt;&lt; root-&gt;data &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">inorderPrintTree</span>(root-&gt;right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> arr[] = &#123;<span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> size = <span class=\"built_in\">sizeof</span>(arr) / <span class=\"built_in\">sizeof</span>(arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    BST bst = <span class=\"built_in\">BST</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i) &#123;</span><br><span class=\"line\">        bst.<span class=\"built_in\">insert_unrecursion</span>(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">inorderPrintTree</span>(bst.<span class=\"built_in\">get_root</span>());</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bst.<span class=\"built_in\">search</span>(arr[i])) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;find %d\\n&quot;</span>, arr[i]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;not found %d\\n&quot;</span>, arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i) &#123;</span><br><span class=\"line\">        bst.<span class=\"built_in\">delete_node</span>(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正确输出：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">8</span> </span><br><span class=\"line\">find <span class=\"number\">5</span></span><br><span class=\"line\">find <span class=\"number\">3</span></span><br><span class=\"line\">find <span class=\"number\">2</span></span><br><span class=\"line\">find <span class=\"number\">4</span></span><br><span class=\"line\">find <span class=\"number\">7</span></span><br><span class=\"line\">find <span class=\"number\">6</span></span><br><span class=\"line\">find <span class=\"number\">8</span></span><br><span class=\"line\">deleted node: <span class=\"number\">5</span></span><br><span class=\"line\">deleted node: <span class=\"number\">3</span></span><br><span class=\"line\">deleted node: <span class=\"number\">2</span></span><br><span class=\"line\">deleted node: <span class=\"number\">4</span></span><br><span class=\"line\">deleted node: <span class=\"number\">7</span></span><br><span class=\"line\">deleted node: <span class=\"number\">6</span></span><br><span class=\"line\">deleted node: <span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n","secretKey":"3220b8f15bf0b9b7bd0e1f9d420ca07b8c1d57fff9557df4d897025c785abff5","iv":"7877c5fcd9287f55fcb990b50473b817","encryptedPassword":"1ce8f102b73d2712cb6d71a55143e4e0","encryptedContent":"","excerpt":"","more":"<h3 id=\"特点\">特点</h3>\n<ol>\n<li>非空左子树的所有结点的值小于其根结点的值。</li>\n<li>非空右子树的所有结点的值大于其根结点的值。</li>\n<li>左、右子树都是二叉搜索树。</li>\n</ol>\n<h3 id=\"实现\">实现</h3>\n<h4 id=\"主要操作\">主要操作</h4>\n<h5 id=\"查询：\">查询：</h5>\n<p>实现思路：</p>\n<ul>\n<li>递归：调用递归方法，传入要查询的树的根节点和要查询的值，判断根节点值大小，然后递归查询。</li>\n<li>非递归：通过while循环，判断当前指针指向的节点值是否满足条件或者当前指针是否为空。然后根据情况令指针指向当前节点的左子节点或者右子节点。如果当前节点变为空，说明没有找到目标值。</li>\n</ul>\n<h5 id=\"插入：\">插入：</h5>\n<ul>\n<li>递归：调用递归方法，传入要插入的值和树的根节点。如果当前根节点值小于插入的值，递归调用插入方法，传入右子树的根节点。如果当前根节点值大于插入的值，递归调用插入方法，传入左子树的根节点。<mark>如果相等，报错（二叉搜索树不允许存在重复的值）</mark>。</li>\n<li>非递归：通过while循环，通过判断插入值的大小，不断改变遍历的指针指向的节点，同时用另一个指针记录上一个遍历过的节点（方便查找到叶子节点时向前看一个节点，便于操作）。</li>\n</ul>\n<h5 id=\"删除：\">删除：</h5>\n<p>首先找到要删除的节点，然后判断情况。主要分为三种情况：</p>\n<ul>\n<li>左子树为空，只有右子树：直接将右子树向上提升一级（用右子树替换要删除的节点，然乎释放要删除的节点的空间(<code>new</code>出来的当然要<code>delete</code>)）。</li>\n<li>右子树为空，只有左子树：直接将左子树向上提升一级（思路同上）。</li>\n<li><strong>左右子树都不为空</strong>：将右子树中值最小的节点和要删除的节点交换，然后删除目标节点（此时目标节点已经在原右子树最小元素的位置上，但该位置可能是一个分叉节点，所以应该递归调用删除方法进行删除）。</li>\n</ul>\n<p>C++实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    Node *left;</span><br><span class=\"line\">    Node *right;</span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> data) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;data = data;</span><br><span class=\"line\">        left = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        right = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> data, Node *left, Node *right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;data = data;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;left = left;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;right = right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 二叉搜索树</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BST</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    Node *root;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">BST</span>() &#123;</span><br><span class=\"line\">        root = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">BST</span>(<span class=\"type\">int</span> root_data) &#123;</span><br><span class=\"line\">        root = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(root_data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Node *<span class=\"title\">get_root</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 递归方式插入</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert_recursion</span><span class=\"params\">(<span class=\"type\">int</span> data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            root = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(data);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">recursion_insert</span>(root, data); <span class=\"comment\">// 调用递归函数</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 非递归方式插入</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert_unrecursion</span><span class=\"params\">(<span class=\"type\">int</span> data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            root = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(data);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node *current = root;</span><br><span class=\"line\">        Node *parent; <span class=\"comment\">// 记录上一个遍历过的节点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (current != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            parent = current;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (current-&gt;data &gt; data) &#123;</span><br><span class=\"line\">                current = current-&gt;left;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current-&gt;data &lt; data) &#123;</span><br><span class=\"line\">                current = current-&gt;right;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                std::cout &lt;&lt; <span class=\"string\">&quot;insert error: data is already exist&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (parent-&gt;data &gt; data) &#123;</span><br><span class=\"line\">            parent-&gt;left = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(data);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// while循环中已经判断过元素相等的情况，这里不用再判断</span></span><br><span class=\"line\">            parent-&gt;right = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Node *<span class=\"title\">search</span><span class=\"params\">(<span class=\"type\">int</span> data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node *parent = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        Node *current = root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (current != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            parent = current;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (current-&gt;data == data) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current-&gt;data &gt; data) &#123;</span><br><span class=\"line\">                current = current-&gt;left;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                current = current-&gt;right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">delete_node</span><span class=\"params\">(<span class=\"type\">int</span> data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;delete failed: tree has zero node&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">delNode</span>(root, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">BST</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">destroyTree</span>(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">recursion_insert</span><span class=\"params\">(Node *&amp;node, <span class=\"type\">int</span> data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            node = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(data);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data &gt; node-&gt;data) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">recursion_insert</span>(node-&gt;right, data);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data &lt; node-&gt;data) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">recursion_insert</span>(node-&gt;left, data);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            std::cout &lt;&lt; <span class=\"string\">&quot;insert error: data is already exist&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">delNode</span><span class=\"params\">(Node *&amp;root, <span class=\"type\">int</span> data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root-&gt;data &lt; data) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">delNode</span>(root-&gt;right, data);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root-&gt;data &gt; data) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">delNode</span>(root-&gt;left, data);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// root节点就是要删除的节点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root-&gt;left == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">                Node *temp = root;</span><br><span class=\"line\">                root = root-&gt;right;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;deleted node: %d\\n&quot;</span>, temp-&gt;data);</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> temp;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root-&gt;right == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">                Node *temp = root;</span><br><span class=\"line\">                root = root-&gt;left;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;deleted node: %d\\n&quot;</span>, temp-&gt;data);</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> temp;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 左右子树都不为空：</span></span><br><span class=\"line\"><span class=\"comment\">             *      将右子树中的最小节点与要删除的节点交换，然后删除交换后的节点。</span></span><br><span class=\"line\"><span class=\"comment\">             *      删除时，考虑原右子树的最小节点可能是分支节点，所以应该递归调用删除方法进行删除。</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            Node *current = root-&gt;right;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (current != <span class=\"literal\">nullptr</span> &amp;&amp; current-&gt;left != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 找到符合条件的右子树最小节点</span></span><br><span class=\"line\">                current = current-&gt;left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 此处不必实现两数交换，如果只是实现删除，可以直接拿current-&gt;data覆盖root-&gt;data</span></span><br><span class=\"line\"><span class=\"comment\">             * 但是考虑到某些时候需要deleteNode方法返回被删除的元素的值，此处进行了交换处理，便于更改。</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"type\">int</span> temp = current-&gt;data;</span><br><span class=\"line\">            current-&gt;data = root-&gt;data;</span><br><span class=\"line\">            root-&gt;data = temp;</span><br><span class=\"line\">            <span class=\"built_in\">delNode</span>(root-&gt;right, current-&gt;data); <span class=\"comment\">// 删除右子树中被交换后的节点</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">destroyTree</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root-&gt;left != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">destroyTree</span>(root-&gt;left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root-&gt;right != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">destroyTree</span>(root-&gt;right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;destroyed node: &quot;</span> &lt;&lt; root-&gt;data &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">inorderPrintTree</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">inorderPrintTree</span>(root-&gt;left);</span><br><span class=\"line\">    std::cout &lt;&lt; root-&gt;data &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">inorderPrintTree</span>(root-&gt;right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> arr[] = &#123;<span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> size = <span class=\"built_in\">sizeof</span>(arr) / <span class=\"built_in\">sizeof</span>(arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    BST bst = <span class=\"built_in\">BST</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i) &#123;</span><br><span class=\"line\">        bst.<span class=\"built_in\">insert_unrecursion</span>(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">inorderPrintTree</span>(bst.<span class=\"built_in\">get_root</span>());</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bst.<span class=\"built_in\">search</span>(arr[i])) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;find %d\\n&quot;</span>, arr[i]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;not found %d\\n&quot;</span>, arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i) &#123;</span><br><span class=\"line\">        bst.<span class=\"built_in\">delete_node</span>(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正确输出：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">8</span> </span><br><span class=\"line\">find <span class=\"number\">5</span></span><br><span class=\"line\">find <span class=\"number\">3</span></span><br><span class=\"line\">find <span class=\"number\">2</span></span><br><span class=\"line\">find <span class=\"number\">4</span></span><br><span class=\"line\">find <span class=\"number\">7</span></span><br><span class=\"line\">find <span class=\"number\">6</span></span><br><span class=\"line\">find <span class=\"number\">8</span></span><br><span class=\"line\">deleted node: <span class=\"number\">5</span></span><br><span class=\"line\">deleted node: <span class=\"number\">3</span></span><br><span class=\"line\">deleted node: <span class=\"number\">2</span></span><br><span class=\"line\">deleted node: <span class=\"number\">4</span></span><br><span class=\"line\">deleted node: <span class=\"number\">7</span></span><br><span class=\"line\">deleted node: <span class=\"number\">6</span></span><br><span class=\"line\">deleted node: <span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n"},{"title":"平衡二叉树(AVL)","date":"2025-07-11T16:00:00.000Z","updated":"2025-07-15T16:00:00.000Z","_content":"\n\n如果插入二叉搜索树的元素在插入之前就已经有序，那么插入后的二叉搜索树会退化为链表。在这种情况下，所有操作的时间复杂度将从 $O(log_2n)$ 劣化为 $O(n)$ 。因此产生了平衡二叉树，能够实现在插入、删除时保持树的平衡，避免树退化为链表。平衡二叉树全称为：平衡二叉搜索树(`Balanced Binary Search Tree`).\n\n### 特点：\n\n1. **自平衡**：在插入或删除节点时，`AVL`树会通过旋转操作（如左旋、右旋、左右旋、右左旋）来保持树的平衡。\n2. 如果一个树是`AVL`树，那么它的左右子树都是`AVL`树。\n3. 树中任意一个节点的平衡因子绝对值不超过1。\n\n   平衡因子：默认每个节点的平衡因子=`左子树高度-右子树高度`。（或者`右子树高度-左子树高度`）\n\n### 实现\n\n基本节点：\n\n```cpp\ntypedef struct AVLNode {\n    int data;\n    int height{1}; // 节点高度：表示从当前节点到距离他最远的叶子节点的距离+1（叶子节点高度为1，空节点高度为0）\n    AVLNode *left;\n    AVLNode *right;\n    AVLNode *parent; // 当前节点的双亲节点\n    AVLNode(int data) : data(data), left(nullptr), right(nullptr) {}\n    AVLNode(int data, AVLNode *left, AVLNode *right, AVLNode *parent) : AVLNode(data) {\n        this->parent = parent;\n        height = 1;\n    };\n} Node;\n```\n\n#### 插入\n\n##### 递归插入\n\n###### 逻辑\n\n- 调用递归函数，传入**要插入的树的根节点`root`**和**要插入的值`data`**。因为此处`AVLNode`还用到了`parent`指针，所以还需要传入`parent`指针，方便新建节点时指定其`parent`指针的值。\n\n- 如果`root==nullptr`说明是叶子节点。在该位置新建节点。存储要插入的值`data`,指定`height`为`1`(叶子节点高度为1)，同时指定`parent`指针为传入的`parent`参数。<mark>递归结束</mark>。\n\n  > 因为此处新增了叶子节点，叶子节点高度指定为1，所以可以直接结束递归，不需要更新`root`(叶子节点)的高度。至于`root->parent`的高度，会在上层递归中更新。\n\n- 判断要插入的值`data`和当前树的根节点`root->data`的大小关系。\n\n  - `data < root->data`：递归插入到左子树`root->left`。插入到`root->left`后，需要判断`root`是否失衡。此处因为知晓插入到了`root->left`子树，所以只存在两种失衡情况：\n    - 新增节点插入到了`root->left->left`子树上，符合`LL`情况，执行**右旋**。\n    - 新增节点插入到了`root->left->right`子树上，符合`LR`情况，执行**左右双旋**。\n  - `data > root->data`：递归插入到右子树`root->right`。插入到`root->right`后，需要判断`root`是否失衡。此处因为知晓插入到了`root->right`子树，所以只存在两种失衡情况：\n    - 新增节点插入到了`root->right->right`子树上，符合`RR`情况，执行**左旋**。\n    - 新增节点插入到了`root->right->left`子树上，符合`RL`情况，执行**右左双旋**。\n  - `data == root->data`：提示要插入的值已经存在。**插入失败**。\n\n- 插入并且旋转完成后，更新`root`节点的高度。（因为新增节点肯定插入了`root->left`或者`root->right`子树，可能导致`root`的高度发生变化）。<mark>递归结束</mark>。\n\n###### 代码实现\n\n```cpp\n// 插入(递归实现)\nNode *insert_recursion(Node *root, Node *parent, int data) {\n    if (root == nullptr) {\n        // 新插入一个节点。新插入的节点一定是叶子节点，所以该节点的高度为1（类内初始化）\n        return new Node(data, nullptr, nullptr, parent);\n    } else if (root->data > data) {\n        root->left = insert_recursion(root->left, root, data);\n        // 插入后判断root是否失衡。因为插入的是root->left，所以只需要考虑root左边过高的情况\n        if (abs(get_balance(root)) == 2) { // root节点失衡\n            if (root->left != nullptr && data < root->left->data) {\n                // 执行右单旋操作。\n                root = right_rotate(root);\n            } else {\n                // 执行左右旋操作。\n                root = left_right_rotate(root);\n            }\n        }\n    } else if (root->data < data) {\n        root->right = insert_recursion(root->right, root, data);\n        // 判断root是否失衡\n        if (abs(get_balance(root)) == 2) {\n            if (root->right != nullptr && data > root->right->data) {\n                // 执行左单旋。\n                root = left_rotate(root);\n            } else {\n                // 执行右左旋。\n                root = right_left_rotate(root);\n            }\n        }\n    } else {\n        printf(\"ERROR! data already exist.\\n\");\n    }\n    // 无论插入情况如何，都要在插入后更新root节点的节点高度\n    update_height(root);\n    return root;\n}\n```\n\n\n\n##### 非递归插入\n\n> 待补充\n\n#### 删除\n\n##### 递归删除\n\n###### 逻辑\n\n- 调用**删除函数**。传入根节点指针`root`和要删除的值`data`。\n\n- 如果`root==nullptr`，说明没有找到`data`，删除失败。<mark>递归结束</mark>。\n\n- 如果`root!=nullptr`，比较`root->data`和`data`的大小关系。\n\n  - `root->data == data`，找到了要删除的节点。判断节点情况：\n\n    - `root`是叶子节点：将root节点从树中删除。然后`delete root`.\n\n    - `root`只有左子树，没有右子树：\n\n      - 判断`root`是否是整个`AVL`树的根节点(`root->parent==nullptr`)：如果不是，则在执行下面一段。否则跳过下面一段。\n\n        - 判断`root`是`root->parent`的左子树还是右子树：\n        - 左子树：执行`root->parent->left = root->left`从树中删除`root`节点，然后<mark>更新`root->parent`节点的高度</mark>。\n        - 右子树：执行`root->parent->right = root->left`从树中删除`root`节点，然后<mark>更新`root->parent`节点的高度</mark>。\n\n      - 更新`root->left`的父节点指针`parent`。然后`delete root`.\n\n        > 此处删除了`root`，但对`root->left`的平衡性没有影响。只是将`root->left`整体向上提高一层，取代`root`的位置。（因为`root->right==nullptr`）.\n        >\n        > 反倒是`root->parent`的平衡性可能受到影响，但是**`root->parent`的平衡性会在递归返回时被调整**。\n\n    - `root`只有右子树，没有左子树：\n\n      与上方逻辑类似\n\n    - `root`的左右子树都存在：\n\n      找到右子树中最小的值，覆盖`root->data`，然后再将右子树中最小的值(`minData`)删去：递归调用删除函数，传入`root->right`和`minData`。\n  \n  - `data < root->data`：\n  \n    - 要删除的`data`在`root`的左子树上。**递归调用删除函数**，传入左子树指针`root->left`和`data`。\n    - 递归删除完成后，更新`root`的高度，\n    - 然后平衡`root`节点（因为`root`的左子树删除了一个节点，高度可能发生变化，可能会影响`root`所在子树的平衡性）\n  \n  - `root->data < data`，要删除的`data`在`root`的右子树上。\n  \n    - **递归调用删除函数**，传入右子树指针`root->right`和`data`。\n    - 递归删除完成后，更新`root`的高度，\n    - 然后平衡`root`节点（因为`root`的右子树删除了一个节点，高度可能发生变化，可能会影响`root`所在子树的平衡性）\n\n###### 代码实现\n\n```cpp\n// 删除(递归实现)\nNode *delete_recursion(Node *root, int data) {\n    if (root != nullptr) {\n        if (root->data == data) { // 找到要删除的节点\n            printf(\"delete: %d\\n\", data);\n            if (root->right == nullptr && root->left != nullptr) { // root只有左孩子，没有右孩子\n                if (root->parent != nullptr) { // 考虑root是否是整个树的根节点\n                    if (root->data > root->parent->data) { // root是root->parent的右孩子\n                        root->parent->right = root->left;\n                    } else { // root是root->parent的左孩子\n                        root->parent->left = root->left;\n                    }\n                    update_height(root->parent); // 因为删除了root节点，所以要更新root->parent节点的高度\n                }\n                root->left->parent = root->parent; // 更新父节点指针\n                // 执行平衡操作? 似乎多余? root->left本来就是平衡的，只是取代了root，对root->left的平衡性没有影响。\n                // root->left = balance(root->left);\n                Node *temp = root->left;\n                delete root;\n                root = temp; // root节点从树中删除，root->left取代root\n            } else if (root->left == nullptr && root->right != nullptr) { // root只有右孩子，没有左孩子\n                if (root->parent != nullptr) {\n                    if (root->data > root->parent->data) {\n                        root->parent->right = root->right;\n                    } else {\n                        root->parent->left = root->right;\n                    }\n                    update_height(root->parent);\n                }\n                root->right->parent = root->parent;\n                // root->right = balance(root->right);\n                Node *temp = root->right;\n                delete root;\n                root = temp;\n            } else if (root->left != nullptr && root->right != nullptr) { // 左右孩子都有\n                Node *temp = root->right;\n                while (temp->left != nullptr) { // 找到root的右子树中的最小节点\n                    temp = temp->left;\n                }\n                int val = temp->data;\n                root->right = delete_recursion(root->right, val);\n                root->data = val;\n                update_height(root); // root的右子树发生了变动，更新root的高度\n                root = balance(root);\n            } else { // root是叶子节点\n                if (root->parent != nullptr) { // root存在父节点\n                    if (root->parent->data < root->data) { // root是其父亲节点的右孩子\n                        root->parent->right = nullptr; // 删去root节点\n                    } else { // root是其父亲节点的左孩子\n                        root->parent->left = nullptr;\n                    }\n                    update_height(root->parent);\n                }\n                delete root;\n                root = nullptr;\n            }\n\n        } else if (data < root->data) {\n            root->left = delete_recursion(root->left, data);\n            update_height(root);\n            root = balance(root);\n        } else {\n            root->right = delete_recursion(root->right, data);\n            update_height(root);\n            root = balance(root);\n        }\n    } else {\n        printf(\"Key to be deleted could not be found.\\n\");\n    }\n\n    return root;\n}\n\n// 平衡root节点\nNode *balance(Node *root) {\n    int balance_factor = get_balance(root);\n    if (abs(balance_factor) == 2) {\n        if (balance_factor < 0) { // root节点的右子树高度 > 左子树高度\n            if (get_balance(root->right) == 1) { // root->right的左子树高度 > 右子树高度，root节点符合RL失衡，执行左右双旋\n                root = right_left_rotate(root);\n            } else { // root->right的右子树高度 > 左子树高度，root节点符合RR失衡，执行左单旋\n                root = left_rotate(root);\n            }\n        } else { // root节点的右子树高度 < 左子树高度\n            if (get_balance(root->left) == 1) { // root->left的左子树高度 > 右子树高度，root节点符合LL失衡，执行右单旋\n                root = right_rotate(root);\n            } else { // root->right的右子树高度 > 左子树高度，root节点符合LR失衡，执行右左双旋\n                root = left_right_rotate(root);\n            }\n        }\n    }\n    return root;\n}\n```\n\n\n\n##### 非递归删除\n\n> 待补充\n\n#### 查询\n\n##### 递归查询\n\n###### 逻辑\n\n- 调用递归查询函数，传入树的根节点`root`和要查询的值`data`。\n- 如果`root==nullptr`，说明递归到了叶子节点下的空节点，或者整个树为空，即：没有找到目标值。返回`false`，递归结束。\n  - 如果`root->data==data`，找到目标值，返回`true`，递归结束。\n  - 如果`root->data > data`，递归左子树。返回左子树的递归结果。\n  - 如果`root->data < data`，递归右子树。返回右子树的递归结果。\n\n###### 代码实现：\n\n```cpp\n// 查询(递归实现)\nbool search(const Node *root, const int &data) {\n    if (root == nullptr) {\n        return false;\n    }\n    if (root->data == data) {\n        return true;\n    } else if (data < root->data) {\n        return search(root->left, data);\n    } else {\n        return search(root->right, data);\n    }\n}\n```\n\n\n\n##### 非递归查询\n\n待补充\n\n#### 核心算法：旋转操作\n\n##### 左旋\n\n![左旋](https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250721222714402.png)\n\nC++实现：\n\n```cpp\n/**\n * @brief root节点失衡，对root和root->right进行左旋操作。\n * @param root 失衡节点\n */\nNode *left_rotate(Node *root) {\n    Node *childR = root->right;\n    Node *childRL = childR->left;\n\n    root->right = childRL;\n    childR->left = root;\n\n    if (childRL != nullptr) {\n        childRL->parent = root;\n    }\n    childR->parent = root->parent;\n    root->parent = childR;\n    if (childR->parent != nullptr) {\n        if (childR->data < childR->parent->data) {\n            childR->parent->left = childR;\n        } else {\n            childR->parent->right = childR;\n        }\n    }\n\n    root = childR;\n    update_height(root->left);\n    update_height(root->right);\n    update_height(root);\n    update_height(root->parent);\n\n    return root;\n}\n```\n\n\n\n##### 右旋\n\n![右旋](https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250721222747055.png)\n\nC++实现：\n\n```cpp\n/**\n * @brief root节点失衡，对root和root->left执行右旋操作。\n * @param root 失衡节点\n */\nNode *right_rotate(Node *root) {\n    Node *childL = root->left;\n    Node *childLR = childL->right;\n\n    /**\n     * 如果只使用了height属性，没有使用parent属性，则只需要 下面两行语句 和 root=Lchild 以及 四个update_height()即可完成旋转。\n     * 如果使用了parent则需要加入剩余的代码。\n     */\n    root->left = childLR;\n    childL->right = root;\n\n    if (childLR != nullptr) {\n        // 说明原root->left->right非空，需要更新它的父节点指针。\n        childLR->parent = root;\n    }\n    childL->parent = root->parent;\n    root->parent = childL;\n    if (childL->parent != nullptr) {\n        if (root->data < childL->parent->data) {\n            // 原root节点挂载在root->parent的左边，旋转后将新树也挂载在左边\n            childL->parent->left = childL;\n        } else {\n            // 否则挂载到右边\n            childL->parent->right = childL;\n        }\n    }\n\n    root = childL;\n    update_height(root->left);\n    update_height(root->right);\n    update_height(root);\n    update_height(root->parent); // 注意此处需要更新root->parent的高度，因为root->parent的其中一个子树(也就是root)高度改变，所以会影响root->parent的高度\n\n    return root;\n}\n```\n\n\n\n##### 左右双旋\n\n先左旋，再右旋\n\n![左右双旋](https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250721223004318.png)\n\nC++实现：\n\n```cpp\n/**\n * @brief 左右旋\n */\nNode *left_right_rotate(Node *root) {\n    // 先对root->left和root->left->right进行左单旋\n    root->left = left_rotate(root->left);\n    // 在对root和root->left进行右单旋\n    return right_rotate(root);\n}\n```\n\n\n\n##### 右左双旋\n\n先右旋，再左旋\n\n![右左双旋](https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250721222927312.png)\n\nC++实现：\n\n```cpp\n/**\n * @brief 右左旋\n */\nNode *right_left_rotate(Node *root) {\n    // 先对root->right和root->right->left进行右单旋\n    root->right = right_rotate(root->right);\n    // 再对root和root->right进行左单旋\n    return left_rotate(root);\n}\n```\n\n#### 完整代码实现：\n\n```cpp\n#include <iostream>\n#include <queue>\n#include <iomanip>\n#include <cstring>\nusing namespace std;\n\nclass AVLTree {\npublic:\n    typedef struct AVLNode {\n        int data;\n        int height{1}; // 节点高度：表示从当前节点到距离他最远的叶子节点的距离+1（叶子节点高度为1，空节点高度为0）\n        AVLNode *left;\n        AVLNode *right;\n        AVLNode *parent; // 当前节点的双亲节点\n        AVLNode(int data) : data(data), left(nullptr), right(nullptr) {}\n        AVLNode(int data, AVLNode *left, AVLNode *right, AVLNode *parent) : AVLNode(data) {\n            this->parent = parent;\n            height = 1;\n        };\n    } Node;\n\n    AVLTree() : root(nullptr) {}\n\n    AVLTree(int data) {\n        root = new Node(data);\n    }\n\n    ~AVLTree() {\n        delete_tree(root);\n    }\n\n    void insert_node(int data) {\n        root = insert_recursion(root, nullptr, data); // 直接调用递归函数进行插入\n\n        /**\n         * 待补充: 非递归的插入方法\n         */\n    }\n\n    void delete_node(int data) {\n        root = delete_recursion(root, data); // 调用递归的删除方法\n\n        /**\n         * 待补充: 非递归的删除方法\n         */\n    }\n\n    bool search(int data) {\n        return search(root, data); // 调用递归的查询方法\n\n        /**\n         * 待补充: 非递归的查询方法\n         */\n    }\n\n    Node *get_root() {\n        return this->root;\n    }\n\nprivate:\n    Node *root;\n\n    // 插入(递归实现)\n    Node *insert_recursion(Node *root, Node *parent, int data) {\n        if (root == nullptr) {\n            // 新插入一个节点。新插入的节点一定是叶子节点，所以该节点的高度为1（类内初始化）\n            return new Node(data, nullptr, nullptr, parent);\n        } else if (root->data > data) {\n            root->left = insert_recursion(root->left, root, data);\n            // 插入后判断root是否失衡。因为插入的是root->left，所以只需要考虑root左边过高的情况\n            if (abs(get_balance(root)) == 2) { // root节点失衡\n                if (root->left != nullptr && data < root->left->data) {\n                    // 执行右单旋操作。\n                    root = right_rotate(root);\n                } else {\n                    // 执行左右旋操作。\n                    root = left_right_rotate(root);\n                }\n            }\n        } else if (root->data < data) {\n            root->right = insert_recursion(root->right, root, data);\n            // 判断root是否失衡\n            if (abs(get_balance(root)) == 2) {\n                if (root->right != nullptr && data > root->right->data) {\n                    // 执行左单旋。\n                    root = left_rotate(root);\n                } else {\n                    // 执行右左旋。\n                    root = right_left_rotate(root);\n                }\n            }\n        } else {\n            printf(\"ERROR! data already exist.\\n\");\n        }\n        // 无论插入情况如何，都要在插入后更新root节点的节点高度\n        update_height(root);\n        return root;\n    }\n\n    // 删除(递归实现)\n    Node *delete_recursion(Node *root, int data) {\n        if (root != nullptr) {\n            if (root->data == data) { // 找到要删除的节点\n                printf(\"delete: %d\\n\", data);\n                if (root->right == nullptr && root->left != nullptr) { // root只有左孩子，没有右孩子\n                    if (root->parent != nullptr) { // 考虑root是否是整个树的根节点\n                        if (root->data > root->parent->data) { // root是root->parent的右孩子\n                            root->parent->right = root->left;\n                        } else { // root是root->parent的左孩子\n                            root->parent->left = root->left;\n                        }\n                        update_height(root->parent); // 因为删除了root节点，所以要更新root->parent节点的高度\n                    }\n                    root->left->parent = root->parent; // 更新父节点指针\n                    // 执行平衡操作? 似乎多余? root->left本来就是平衡的，只是取代了root，对root->left的平衡性没有影响。\n                    // root->left = balance(root->left);\n                    Node *temp = root->left;\n                    delete root;\n                    root = temp; // root节点从树中删除，root->left取代root\n                } else if (root->left == nullptr && root->right != nullptr) { // root只有右孩子，没有左孩子\n                    if (root->parent != nullptr) {\n                        if (root->data > root->parent->data) {\n                            root->parent->right = root->right;\n                        } else {\n                            root->parent->left = root->right;\n                        }\n                        update_height(root->parent);\n                    }\n                    root->right->parent = root->parent;\n                    // root->right = balance(root->right);\n                    Node *temp = root->right;\n                    delete root;\n                    root = temp;\n                } else if (root->left != nullptr && root->right != nullptr) { // 左右孩子都有\n                    Node *temp = root->right;\n                    while (temp->left != nullptr) { // 找到root的右子树中的最小节点\n                        temp = temp->left;\n                    }\n                    int val = temp->data;\n                    root->right = delete_recursion(root->right, val);\n                    root->data = val;\n                    update_height(root); // root的右子树发生了变动，更新root的高度\n                    root = balance(root);\n                } else { // root是叶子节点\n                    if (root->parent != nullptr) { // root存在父节点\n                        if (root->parent->data < root->data) { // root是其父亲节点的右孩子\n                            root->parent->right = nullptr; // 删去root节点\n                        } else { // root是其父亲节点的左孩子\n                            root->parent->left = nullptr;\n                        }\n                        update_height(root->parent);\n                    }\n                    delete root;\n                    root = nullptr;\n                }\n\n            } else if (data < root->data) {\n                root->left = delete_recursion(root->left, data);\n                update_height(root);\n                root = balance(root);\n            } else {\n                root->right = delete_recursion(root->right, data);\n                update_height(root);\n                root = balance(root);\n            }\n        } else {\n            printf(\"Key to be deleted could not be found.\\n\");\n        }\n\n        return root;\n    }\n\n    // 查询(递归实现)\n    bool search(const Node *root, const int &data) {\n        if (root == nullptr) {\n            return false;\n        }\n        if (root->data == data) {\n            return true;\n        } else if (data < root->data) {\n            return search(root->left, data);\n        } else {\n            return search(root->right, data);\n        }\n    }\n\n    // 获取节点高度\n    int node_height(Node *node) {\n        if (node == nullptr) {\n            return 0;\n        }\n        return node->height;\n    }\n\n    // 更新节点高度\n    void update_height(Node *root) {\n        if (root != nullptr) {\n            // update height\n            root->height = std::max(node_height(root->left), node_height(root->right)) + 1;\n        }\n    }\n\n    /**\n     * @brief 获取node节点的平衡因子。\n     * @param node 要获取平衡因子的节点\n     * @return  - 如果node是非叶子节点，平衡因子 = 左子树高度 - 右子树高度;\n     *\n     *          - 如果node是叶子节点，平衡因子 = 1\n     *\n     *          - 如果node是空节点，平衡因子 = 0\n     */\n    int get_balance(Node *node) {\n        if (node == nullptr) {\n            return 0;\n        }\n        return node_height(node->left) - node_height(node->right);\n    }\n\n    /**\n     * @brief root节点失衡，对root和root->left执行右旋操作。\n     * @param root 失衡节点\n     */\n    Node *right_rotate(Node *root) {\n        Node *childL = root->left;\n        Node *childLR = childL->right;\n\n        /**\n         * 如果只使用了height属性，没有使用parent属性，则只需要 下面两行语句 和 root=Lchild 以及 四个update_height()即可完成旋转。\n         * 如果使用了parent则需要加入剩余的代码。\n         */\n        root->left = childLR;\n        childL->right = root;\n\n        if (childLR != nullptr) {\n            // 说明原root->left->right非空，需要更新它的父节点指针。\n            childLR->parent = root;\n        }\n        childL->parent = root->parent;\n        root->parent = childL;\n        if (childL->parent != nullptr) {\n            if (root->data < childL->parent->data) {\n                // 原root节点挂载在root->parent的左边，旋转后将新树也挂载在左边\n                childL->parent->left = childL;\n            } else {\n                // 否则挂载到右边\n                childL->parent->right = childL;\n            }\n        }\n\n        root = childL;\n        update_height(root->left);\n        update_height(root->right);\n        update_height(root);\n        update_height(root->parent); // 注意此处需要更新root->parent的高度，因为root->parent的其中一个子树(也就是root)高度改变，所以会影响root->parent的高度\n\n        return root;\n    }\n\n    /**\n     * @brief root节点失衡，对root和root->right进行左旋操作。\n     * @param root 失衡节点\n     */\n    Node *left_rotate(Node *root) {\n        Node *childR = root->right;\n        Node *childRL = childR->left;\n\n        root->right = childRL;\n        childR->left = root;\n\n        if (childRL != nullptr) {\n            childRL->parent = root;\n        }\n        childR->parent = root->parent;\n        root->parent = childR;\n        if (childR->parent != nullptr) {\n            if (childR->data < childR->parent->data) {\n                childR->parent->left = childR;\n            } else {\n                childR->parent->right = childR;\n            }\n        }\n\n        root = childR;\n        update_height(root->left);\n        update_height(root->right);\n        update_height(root);\n        update_height(root->parent);\n\n        return root;\n    }\n\n    /**\n     * @brief 左右旋\n     */\n    Node *left_right_rotate(Node *root) {\n        // 先对root->left和root->left->right进行左单旋\n        root->left = left_rotate(root->left);\n        // 在对root和root->left进行右单旋\n        return right_rotate(root);\n    }\n\n    /**\n     * @brief 右左旋\n     */\n    Node *right_left_rotate(Node *root) {\n        // 先对root->right和root->right->left进行右单旋\n        root->right = right_rotate(root->right);\n        // 再对root和root->right进行左单旋\n        return left_rotate(root);\n    }\n\n    // 平衡root节点\n    Node *balance(Node *root) {\n        int balance_factor = get_balance(root);\n        if (abs(balance_factor) == 2) {\n            if (balance_factor < 0) { // root节点的右子树高度 > 左子树高度\n                if (get_balance(root->right) == 1) { // root->right的左子树高度 > 右子树高度，root节点符合RL失衡，执行左右双旋\n                    root = right_left_rotate(root);\n                } else { // root->right的右子树高度 > 左子树高度，root节点符合RR失衡，执行左单旋\n                    root = left_rotate(root);\n                }\n            } else { // root节点的右子树高度 < 左子树高度\n                if (get_balance(root->left) == 1) { // root->left的左子树高度 > 右子树高度，root节点符合LL失衡，执行右单旋\n                    root = right_rotate(root);\n                } else { // root->right的右子树高度 > 左子树高度，root节点符合LR失衡，执行右左双旋\n                    root = left_right_rotate(root);\n                }\n            }\n        }\n        return root;\n    }\n\n    void delete_tree(AVLTree::Node *root) {\n        if (root == nullptr) {\n            return;\n        }\n        delete_tree(root->left);\n        delete_tree(root->right);\n        printf(\"released node: %d\\n\", root->data);\n        delete root;\n    }\n};\n\nvoid printInOrder(AVLTree::Node *root) {\n    if (root == nullptr) {\n        return;\n    }\n    printInOrder(root->left);\n    printf(\"%d \", root->data);\n    printInOrder(root->right);\n}\n\nint main() {\n    AVLTree avl;\n\n    int *arr = new int[12]{10, 20, 45, 30, 12, 40, 50, 25, 14, 52, 75, 19};\n\n    for (int i = 0; i < 12; ++i) {\n        avl.insert_node(arr[i]);\n    }\n\n    for (int i = 0; i < 12; ++i) {\n        if (avl.search(arr[i])) {\n            printf(\"find: %d\\n\", arr[i]);\n            avl.delete_node(arr[i]);\n        }\n    }\n\n    delete[] arr;\n\n    return 0;\n}\n```\n\n","source":"_posts/数据结构/树/BalancedBinarySearchTree(AVL).md","raw":"---\ntitle: 平衡二叉树(AVL)\ndate: 2025-07-12\nupdated: 2025-07-16\ntags: [数据结构, 二叉树, C++, 树]\ncategories: 数据结构\n---\n\n\n如果插入二叉搜索树的元素在插入之前就已经有序，那么插入后的二叉搜索树会退化为链表。在这种情况下，所有操作的时间复杂度将从 $O(log_2n)$ 劣化为 $O(n)$ 。因此产生了平衡二叉树，能够实现在插入、删除时保持树的平衡，避免树退化为链表。平衡二叉树全称为：平衡二叉搜索树(`Balanced Binary Search Tree`).\n\n### 特点：\n\n1. **自平衡**：在插入或删除节点时，`AVL`树会通过旋转操作（如左旋、右旋、左右旋、右左旋）来保持树的平衡。\n2. 如果一个树是`AVL`树，那么它的左右子树都是`AVL`树。\n3. 树中任意一个节点的平衡因子绝对值不超过1。\n\n   平衡因子：默认每个节点的平衡因子=`左子树高度-右子树高度`。（或者`右子树高度-左子树高度`）\n\n### 实现\n\n基本节点：\n\n```cpp\ntypedef struct AVLNode {\n    int data;\n    int height{1}; // 节点高度：表示从当前节点到距离他最远的叶子节点的距离+1（叶子节点高度为1，空节点高度为0）\n    AVLNode *left;\n    AVLNode *right;\n    AVLNode *parent; // 当前节点的双亲节点\n    AVLNode(int data) : data(data), left(nullptr), right(nullptr) {}\n    AVLNode(int data, AVLNode *left, AVLNode *right, AVLNode *parent) : AVLNode(data) {\n        this->parent = parent;\n        height = 1;\n    };\n} Node;\n```\n\n#### 插入\n\n##### 递归插入\n\n###### 逻辑\n\n- 调用递归函数，传入**要插入的树的根节点`root`**和**要插入的值`data`**。因为此处`AVLNode`还用到了`parent`指针，所以还需要传入`parent`指针，方便新建节点时指定其`parent`指针的值。\n\n- 如果`root==nullptr`说明是叶子节点。在该位置新建节点。存储要插入的值`data`,指定`height`为`1`(叶子节点高度为1)，同时指定`parent`指针为传入的`parent`参数。<mark>递归结束</mark>。\n\n  > 因为此处新增了叶子节点，叶子节点高度指定为1，所以可以直接结束递归，不需要更新`root`(叶子节点)的高度。至于`root->parent`的高度，会在上层递归中更新。\n\n- 判断要插入的值`data`和当前树的根节点`root->data`的大小关系。\n\n  - `data < root->data`：递归插入到左子树`root->left`。插入到`root->left`后，需要判断`root`是否失衡。此处因为知晓插入到了`root->left`子树，所以只存在两种失衡情况：\n    - 新增节点插入到了`root->left->left`子树上，符合`LL`情况，执行**右旋**。\n    - 新增节点插入到了`root->left->right`子树上，符合`LR`情况，执行**左右双旋**。\n  - `data > root->data`：递归插入到右子树`root->right`。插入到`root->right`后，需要判断`root`是否失衡。此处因为知晓插入到了`root->right`子树，所以只存在两种失衡情况：\n    - 新增节点插入到了`root->right->right`子树上，符合`RR`情况，执行**左旋**。\n    - 新增节点插入到了`root->right->left`子树上，符合`RL`情况，执行**右左双旋**。\n  - `data == root->data`：提示要插入的值已经存在。**插入失败**。\n\n- 插入并且旋转完成后，更新`root`节点的高度。（因为新增节点肯定插入了`root->left`或者`root->right`子树，可能导致`root`的高度发生变化）。<mark>递归结束</mark>。\n\n###### 代码实现\n\n```cpp\n// 插入(递归实现)\nNode *insert_recursion(Node *root, Node *parent, int data) {\n    if (root == nullptr) {\n        // 新插入一个节点。新插入的节点一定是叶子节点，所以该节点的高度为1（类内初始化）\n        return new Node(data, nullptr, nullptr, parent);\n    } else if (root->data > data) {\n        root->left = insert_recursion(root->left, root, data);\n        // 插入后判断root是否失衡。因为插入的是root->left，所以只需要考虑root左边过高的情况\n        if (abs(get_balance(root)) == 2) { // root节点失衡\n            if (root->left != nullptr && data < root->left->data) {\n                // 执行右单旋操作。\n                root = right_rotate(root);\n            } else {\n                // 执行左右旋操作。\n                root = left_right_rotate(root);\n            }\n        }\n    } else if (root->data < data) {\n        root->right = insert_recursion(root->right, root, data);\n        // 判断root是否失衡\n        if (abs(get_balance(root)) == 2) {\n            if (root->right != nullptr && data > root->right->data) {\n                // 执行左单旋。\n                root = left_rotate(root);\n            } else {\n                // 执行右左旋。\n                root = right_left_rotate(root);\n            }\n        }\n    } else {\n        printf(\"ERROR! data already exist.\\n\");\n    }\n    // 无论插入情况如何，都要在插入后更新root节点的节点高度\n    update_height(root);\n    return root;\n}\n```\n\n\n\n##### 非递归插入\n\n> 待补充\n\n#### 删除\n\n##### 递归删除\n\n###### 逻辑\n\n- 调用**删除函数**。传入根节点指针`root`和要删除的值`data`。\n\n- 如果`root==nullptr`，说明没有找到`data`，删除失败。<mark>递归结束</mark>。\n\n- 如果`root!=nullptr`，比较`root->data`和`data`的大小关系。\n\n  - `root->data == data`，找到了要删除的节点。判断节点情况：\n\n    - `root`是叶子节点：将root节点从树中删除。然后`delete root`.\n\n    - `root`只有左子树，没有右子树：\n\n      - 判断`root`是否是整个`AVL`树的根节点(`root->parent==nullptr`)：如果不是，则在执行下面一段。否则跳过下面一段。\n\n        - 判断`root`是`root->parent`的左子树还是右子树：\n        - 左子树：执行`root->parent->left = root->left`从树中删除`root`节点，然后<mark>更新`root->parent`节点的高度</mark>。\n        - 右子树：执行`root->parent->right = root->left`从树中删除`root`节点，然后<mark>更新`root->parent`节点的高度</mark>。\n\n      - 更新`root->left`的父节点指针`parent`。然后`delete root`.\n\n        > 此处删除了`root`，但对`root->left`的平衡性没有影响。只是将`root->left`整体向上提高一层，取代`root`的位置。（因为`root->right==nullptr`）.\n        >\n        > 反倒是`root->parent`的平衡性可能受到影响，但是**`root->parent`的平衡性会在递归返回时被调整**。\n\n    - `root`只有右子树，没有左子树：\n\n      与上方逻辑类似\n\n    - `root`的左右子树都存在：\n\n      找到右子树中最小的值，覆盖`root->data`，然后再将右子树中最小的值(`minData`)删去：递归调用删除函数，传入`root->right`和`minData`。\n  \n  - `data < root->data`：\n  \n    - 要删除的`data`在`root`的左子树上。**递归调用删除函数**，传入左子树指针`root->left`和`data`。\n    - 递归删除完成后，更新`root`的高度，\n    - 然后平衡`root`节点（因为`root`的左子树删除了一个节点，高度可能发生变化，可能会影响`root`所在子树的平衡性）\n  \n  - `root->data < data`，要删除的`data`在`root`的右子树上。\n  \n    - **递归调用删除函数**，传入右子树指针`root->right`和`data`。\n    - 递归删除完成后，更新`root`的高度，\n    - 然后平衡`root`节点（因为`root`的右子树删除了一个节点，高度可能发生变化，可能会影响`root`所在子树的平衡性）\n\n###### 代码实现\n\n```cpp\n// 删除(递归实现)\nNode *delete_recursion(Node *root, int data) {\n    if (root != nullptr) {\n        if (root->data == data) { // 找到要删除的节点\n            printf(\"delete: %d\\n\", data);\n            if (root->right == nullptr && root->left != nullptr) { // root只有左孩子，没有右孩子\n                if (root->parent != nullptr) { // 考虑root是否是整个树的根节点\n                    if (root->data > root->parent->data) { // root是root->parent的右孩子\n                        root->parent->right = root->left;\n                    } else { // root是root->parent的左孩子\n                        root->parent->left = root->left;\n                    }\n                    update_height(root->parent); // 因为删除了root节点，所以要更新root->parent节点的高度\n                }\n                root->left->parent = root->parent; // 更新父节点指针\n                // 执行平衡操作? 似乎多余? root->left本来就是平衡的，只是取代了root，对root->left的平衡性没有影响。\n                // root->left = balance(root->left);\n                Node *temp = root->left;\n                delete root;\n                root = temp; // root节点从树中删除，root->left取代root\n            } else if (root->left == nullptr && root->right != nullptr) { // root只有右孩子，没有左孩子\n                if (root->parent != nullptr) {\n                    if (root->data > root->parent->data) {\n                        root->parent->right = root->right;\n                    } else {\n                        root->parent->left = root->right;\n                    }\n                    update_height(root->parent);\n                }\n                root->right->parent = root->parent;\n                // root->right = balance(root->right);\n                Node *temp = root->right;\n                delete root;\n                root = temp;\n            } else if (root->left != nullptr && root->right != nullptr) { // 左右孩子都有\n                Node *temp = root->right;\n                while (temp->left != nullptr) { // 找到root的右子树中的最小节点\n                    temp = temp->left;\n                }\n                int val = temp->data;\n                root->right = delete_recursion(root->right, val);\n                root->data = val;\n                update_height(root); // root的右子树发生了变动，更新root的高度\n                root = balance(root);\n            } else { // root是叶子节点\n                if (root->parent != nullptr) { // root存在父节点\n                    if (root->parent->data < root->data) { // root是其父亲节点的右孩子\n                        root->parent->right = nullptr; // 删去root节点\n                    } else { // root是其父亲节点的左孩子\n                        root->parent->left = nullptr;\n                    }\n                    update_height(root->parent);\n                }\n                delete root;\n                root = nullptr;\n            }\n\n        } else if (data < root->data) {\n            root->left = delete_recursion(root->left, data);\n            update_height(root);\n            root = balance(root);\n        } else {\n            root->right = delete_recursion(root->right, data);\n            update_height(root);\n            root = balance(root);\n        }\n    } else {\n        printf(\"Key to be deleted could not be found.\\n\");\n    }\n\n    return root;\n}\n\n// 平衡root节点\nNode *balance(Node *root) {\n    int balance_factor = get_balance(root);\n    if (abs(balance_factor) == 2) {\n        if (balance_factor < 0) { // root节点的右子树高度 > 左子树高度\n            if (get_balance(root->right) == 1) { // root->right的左子树高度 > 右子树高度，root节点符合RL失衡，执行左右双旋\n                root = right_left_rotate(root);\n            } else { // root->right的右子树高度 > 左子树高度，root节点符合RR失衡，执行左单旋\n                root = left_rotate(root);\n            }\n        } else { // root节点的右子树高度 < 左子树高度\n            if (get_balance(root->left) == 1) { // root->left的左子树高度 > 右子树高度，root节点符合LL失衡，执行右单旋\n                root = right_rotate(root);\n            } else { // root->right的右子树高度 > 左子树高度，root节点符合LR失衡，执行右左双旋\n                root = left_right_rotate(root);\n            }\n        }\n    }\n    return root;\n}\n```\n\n\n\n##### 非递归删除\n\n> 待补充\n\n#### 查询\n\n##### 递归查询\n\n###### 逻辑\n\n- 调用递归查询函数，传入树的根节点`root`和要查询的值`data`。\n- 如果`root==nullptr`，说明递归到了叶子节点下的空节点，或者整个树为空，即：没有找到目标值。返回`false`，递归结束。\n  - 如果`root->data==data`，找到目标值，返回`true`，递归结束。\n  - 如果`root->data > data`，递归左子树。返回左子树的递归结果。\n  - 如果`root->data < data`，递归右子树。返回右子树的递归结果。\n\n###### 代码实现：\n\n```cpp\n// 查询(递归实现)\nbool search(const Node *root, const int &data) {\n    if (root == nullptr) {\n        return false;\n    }\n    if (root->data == data) {\n        return true;\n    } else if (data < root->data) {\n        return search(root->left, data);\n    } else {\n        return search(root->right, data);\n    }\n}\n```\n\n\n\n##### 非递归查询\n\n待补充\n\n#### 核心算法：旋转操作\n\n##### 左旋\n\n![左旋](https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250721222714402.png)\n\nC++实现：\n\n```cpp\n/**\n * @brief root节点失衡，对root和root->right进行左旋操作。\n * @param root 失衡节点\n */\nNode *left_rotate(Node *root) {\n    Node *childR = root->right;\n    Node *childRL = childR->left;\n\n    root->right = childRL;\n    childR->left = root;\n\n    if (childRL != nullptr) {\n        childRL->parent = root;\n    }\n    childR->parent = root->parent;\n    root->parent = childR;\n    if (childR->parent != nullptr) {\n        if (childR->data < childR->parent->data) {\n            childR->parent->left = childR;\n        } else {\n            childR->parent->right = childR;\n        }\n    }\n\n    root = childR;\n    update_height(root->left);\n    update_height(root->right);\n    update_height(root);\n    update_height(root->parent);\n\n    return root;\n}\n```\n\n\n\n##### 右旋\n\n![右旋](https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250721222747055.png)\n\nC++实现：\n\n```cpp\n/**\n * @brief root节点失衡，对root和root->left执行右旋操作。\n * @param root 失衡节点\n */\nNode *right_rotate(Node *root) {\n    Node *childL = root->left;\n    Node *childLR = childL->right;\n\n    /**\n     * 如果只使用了height属性，没有使用parent属性，则只需要 下面两行语句 和 root=Lchild 以及 四个update_height()即可完成旋转。\n     * 如果使用了parent则需要加入剩余的代码。\n     */\n    root->left = childLR;\n    childL->right = root;\n\n    if (childLR != nullptr) {\n        // 说明原root->left->right非空，需要更新它的父节点指针。\n        childLR->parent = root;\n    }\n    childL->parent = root->parent;\n    root->parent = childL;\n    if (childL->parent != nullptr) {\n        if (root->data < childL->parent->data) {\n            // 原root节点挂载在root->parent的左边，旋转后将新树也挂载在左边\n            childL->parent->left = childL;\n        } else {\n            // 否则挂载到右边\n            childL->parent->right = childL;\n        }\n    }\n\n    root = childL;\n    update_height(root->left);\n    update_height(root->right);\n    update_height(root);\n    update_height(root->parent); // 注意此处需要更新root->parent的高度，因为root->parent的其中一个子树(也就是root)高度改变，所以会影响root->parent的高度\n\n    return root;\n}\n```\n\n\n\n##### 左右双旋\n\n先左旋，再右旋\n\n![左右双旋](https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250721223004318.png)\n\nC++实现：\n\n```cpp\n/**\n * @brief 左右旋\n */\nNode *left_right_rotate(Node *root) {\n    // 先对root->left和root->left->right进行左单旋\n    root->left = left_rotate(root->left);\n    // 在对root和root->left进行右单旋\n    return right_rotate(root);\n}\n```\n\n\n\n##### 右左双旋\n\n先右旋，再左旋\n\n![右左双旋](https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250721222927312.png)\n\nC++实现：\n\n```cpp\n/**\n * @brief 右左旋\n */\nNode *right_left_rotate(Node *root) {\n    // 先对root->right和root->right->left进行右单旋\n    root->right = right_rotate(root->right);\n    // 再对root和root->right进行左单旋\n    return left_rotate(root);\n}\n```\n\n#### 完整代码实现：\n\n```cpp\n#include <iostream>\n#include <queue>\n#include <iomanip>\n#include <cstring>\nusing namespace std;\n\nclass AVLTree {\npublic:\n    typedef struct AVLNode {\n        int data;\n        int height{1}; // 节点高度：表示从当前节点到距离他最远的叶子节点的距离+1（叶子节点高度为1，空节点高度为0）\n        AVLNode *left;\n        AVLNode *right;\n        AVLNode *parent; // 当前节点的双亲节点\n        AVLNode(int data) : data(data), left(nullptr), right(nullptr) {}\n        AVLNode(int data, AVLNode *left, AVLNode *right, AVLNode *parent) : AVLNode(data) {\n            this->parent = parent;\n            height = 1;\n        };\n    } Node;\n\n    AVLTree() : root(nullptr) {}\n\n    AVLTree(int data) {\n        root = new Node(data);\n    }\n\n    ~AVLTree() {\n        delete_tree(root);\n    }\n\n    void insert_node(int data) {\n        root = insert_recursion(root, nullptr, data); // 直接调用递归函数进行插入\n\n        /**\n         * 待补充: 非递归的插入方法\n         */\n    }\n\n    void delete_node(int data) {\n        root = delete_recursion(root, data); // 调用递归的删除方法\n\n        /**\n         * 待补充: 非递归的删除方法\n         */\n    }\n\n    bool search(int data) {\n        return search(root, data); // 调用递归的查询方法\n\n        /**\n         * 待补充: 非递归的查询方法\n         */\n    }\n\n    Node *get_root() {\n        return this->root;\n    }\n\nprivate:\n    Node *root;\n\n    // 插入(递归实现)\n    Node *insert_recursion(Node *root, Node *parent, int data) {\n        if (root == nullptr) {\n            // 新插入一个节点。新插入的节点一定是叶子节点，所以该节点的高度为1（类内初始化）\n            return new Node(data, nullptr, nullptr, parent);\n        } else if (root->data > data) {\n            root->left = insert_recursion(root->left, root, data);\n            // 插入后判断root是否失衡。因为插入的是root->left，所以只需要考虑root左边过高的情况\n            if (abs(get_balance(root)) == 2) { // root节点失衡\n                if (root->left != nullptr && data < root->left->data) {\n                    // 执行右单旋操作。\n                    root = right_rotate(root);\n                } else {\n                    // 执行左右旋操作。\n                    root = left_right_rotate(root);\n                }\n            }\n        } else if (root->data < data) {\n            root->right = insert_recursion(root->right, root, data);\n            // 判断root是否失衡\n            if (abs(get_balance(root)) == 2) {\n                if (root->right != nullptr && data > root->right->data) {\n                    // 执行左单旋。\n                    root = left_rotate(root);\n                } else {\n                    // 执行右左旋。\n                    root = right_left_rotate(root);\n                }\n            }\n        } else {\n            printf(\"ERROR! data already exist.\\n\");\n        }\n        // 无论插入情况如何，都要在插入后更新root节点的节点高度\n        update_height(root);\n        return root;\n    }\n\n    // 删除(递归实现)\n    Node *delete_recursion(Node *root, int data) {\n        if (root != nullptr) {\n            if (root->data == data) { // 找到要删除的节点\n                printf(\"delete: %d\\n\", data);\n                if (root->right == nullptr && root->left != nullptr) { // root只有左孩子，没有右孩子\n                    if (root->parent != nullptr) { // 考虑root是否是整个树的根节点\n                        if (root->data > root->parent->data) { // root是root->parent的右孩子\n                            root->parent->right = root->left;\n                        } else { // root是root->parent的左孩子\n                            root->parent->left = root->left;\n                        }\n                        update_height(root->parent); // 因为删除了root节点，所以要更新root->parent节点的高度\n                    }\n                    root->left->parent = root->parent; // 更新父节点指针\n                    // 执行平衡操作? 似乎多余? root->left本来就是平衡的，只是取代了root，对root->left的平衡性没有影响。\n                    // root->left = balance(root->left);\n                    Node *temp = root->left;\n                    delete root;\n                    root = temp; // root节点从树中删除，root->left取代root\n                } else if (root->left == nullptr && root->right != nullptr) { // root只有右孩子，没有左孩子\n                    if (root->parent != nullptr) {\n                        if (root->data > root->parent->data) {\n                            root->parent->right = root->right;\n                        } else {\n                            root->parent->left = root->right;\n                        }\n                        update_height(root->parent);\n                    }\n                    root->right->parent = root->parent;\n                    // root->right = balance(root->right);\n                    Node *temp = root->right;\n                    delete root;\n                    root = temp;\n                } else if (root->left != nullptr && root->right != nullptr) { // 左右孩子都有\n                    Node *temp = root->right;\n                    while (temp->left != nullptr) { // 找到root的右子树中的最小节点\n                        temp = temp->left;\n                    }\n                    int val = temp->data;\n                    root->right = delete_recursion(root->right, val);\n                    root->data = val;\n                    update_height(root); // root的右子树发生了变动，更新root的高度\n                    root = balance(root);\n                } else { // root是叶子节点\n                    if (root->parent != nullptr) { // root存在父节点\n                        if (root->parent->data < root->data) { // root是其父亲节点的右孩子\n                            root->parent->right = nullptr; // 删去root节点\n                        } else { // root是其父亲节点的左孩子\n                            root->parent->left = nullptr;\n                        }\n                        update_height(root->parent);\n                    }\n                    delete root;\n                    root = nullptr;\n                }\n\n            } else if (data < root->data) {\n                root->left = delete_recursion(root->left, data);\n                update_height(root);\n                root = balance(root);\n            } else {\n                root->right = delete_recursion(root->right, data);\n                update_height(root);\n                root = balance(root);\n            }\n        } else {\n            printf(\"Key to be deleted could not be found.\\n\");\n        }\n\n        return root;\n    }\n\n    // 查询(递归实现)\n    bool search(const Node *root, const int &data) {\n        if (root == nullptr) {\n            return false;\n        }\n        if (root->data == data) {\n            return true;\n        } else if (data < root->data) {\n            return search(root->left, data);\n        } else {\n            return search(root->right, data);\n        }\n    }\n\n    // 获取节点高度\n    int node_height(Node *node) {\n        if (node == nullptr) {\n            return 0;\n        }\n        return node->height;\n    }\n\n    // 更新节点高度\n    void update_height(Node *root) {\n        if (root != nullptr) {\n            // update height\n            root->height = std::max(node_height(root->left), node_height(root->right)) + 1;\n        }\n    }\n\n    /**\n     * @brief 获取node节点的平衡因子。\n     * @param node 要获取平衡因子的节点\n     * @return  - 如果node是非叶子节点，平衡因子 = 左子树高度 - 右子树高度;\n     *\n     *          - 如果node是叶子节点，平衡因子 = 1\n     *\n     *          - 如果node是空节点，平衡因子 = 0\n     */\n    int get_balance(Node *node) {\n        if (node == nullptr) {\n            return 0;\n        }\n        return node_height(node->left) - node_height(node->right);\n    }\n\n    /**\n     * @brief root节点失衡，对root和root->left执行右旋操作。\n     * @param root 失衡节点\n     */\n    Node *right_rotate(Node *root) {\n        Node *childL = root->left;\n        Node *childLR = childL->right;\n\n        /**\n         * 如果只使用了height属性，没有使用parent属性，则只需要 下面两行语句 和 root=Lchild 以及 四个update_height()即可完成旋转。\n         * 如果使用了parent则需要加入剩余的代码。\n         */\n        root->left = childLR;\n        childL->right = root;\n\n        if (childLR != nullptr) {\n            // 说明原root->left->right非空，需要更新它的父节点指针。\n            childLR->parent = root;\n        }\n        childL->parent = root->parent;\n        root->parent = childL;\n        if (childL->parent != nullptr) {\n            if (root->data < childL->parent->data) {\n                // 原root节点挂载在root->parent的左边，旋转后将新树也挂载在左边\n                childL->parent->left = childL;\n            } else {\n                // 否则挂载到右边\n                childL->parent->right = childL;\n            }\n        }\n\n        root = childL;\n        update_height(root->left);\n        update_height(root->right);\n        update_height(root);\n        update_height(root->parent); // 注意此处需要更新root->parent的高度，因为root->parent的其中一个子树(也就是root)高度改变，所以会影响root->parent的高度\n\n        return root;\n    }\n\n    /**\n     * @brief root节点失衡，对root和root->right进行左旋操作。\n     * @param root 失衡节点\n     */\n    Node *left_rotate(Node *root) {\n        Node *childR = root->right;\n        Node *childRL = childR->left;\n\n        root->right = childRL;\n        childR->left = root;\n\n        if (childRL != nullptr) {\n            childRL->parent = root;\n        }\n        childR->parent = root->parent;\n        root->parent = childR;\n        if (childR->parent != nullptr) {\n            if (childR->data < childR->parent->data) {\n                childR->parent->left = childR;\n            } else {\n                childR->parent->right = childR;\n            }\n        }\n\n        root = childR;\n        update_height(root->left);\n        update_height(root->right);\n        update_height(root);\n        update_height(root->parent);\n\n        return root;\n    }\n\n    /**\n     * @brief 左右旋\n     */\n    Node *left_right_rotate(Node *root) {\n        // 先对root->left和root->left->right进行左单旋\n        root->left = left_rotate(root->left);\n        // 在对root和root->left进行右单旋\n        return right_rotate(root);\n    }\n\n    /**\n     * @brief 右左旋\n     */\n    Node *right_left_rotate(Node *root) {\n        // 先对root->right和root->right->left进行右单旋\n        root->right = right_rotate(root->right);\n        // 再对root和root->right进行左单旋\n        return left_rotate(root);\n    }\n\n    // 平衡root节点\n    Node *balance(Node *root) {\n        int balance_factor = get_balance(root);\n        if (abs(balance_factor) == 2) {\n            if (balance_factor < 0) { // root节点的右子树高度 > 左子树高度\n                if (get_balance(root->right) == 1) { // root->right的左子树高度 > 右子树高度，root节点符合RL失衡，执行左右双旋\n                    root = right_left_rotate(root);\n                } else { // root->right的右子树高度 > 左子树高度，root节点符合RR失衡，执行左单旋\n                    root = left_rotate(root);\n                }\n            } else { // root节点的右子树高度 < 左子树高度\n                if (get_balance(root->left) == 1) { // root->left的左子树高度 > 右子树高度，root节点符合LL失衡，执行右单旋\n                    root = right_rotate(root);\n                } else { // root->right的右子树高度 > 左子树高度，root节点符合LR失衡，执行右左双旋\n                    root = left_right_rotate(root);\n                }\n            }\n        }\n        return root;\n    }\n\n    void delete_tree(AVLTree::Node *root) {\n        if (root == nullptr) {\n            return;\n        }\n        delete_tree(root->left);\n        delete_tree(root->right);\n        printf(\"released node: %d\\n\", root->data);\n        delete root;\n    }\n};\n\nvoid printInOrder(AVLTree::Node *root) {\n    if (root == nullptr) {\n        return;\n    }\n    printInOrder(root->left);\n    printf(\"%d \", root->data);\n    printInOrder(root->right);\n}\n\nint main() {\n    AVLTree avl;\n\n    int *arr = new int[12]{10, 20, 45, 30, 12, 40, 50, 25, 14, 52, 75, 19};\n\n    for (int i = 0; i < 12; ++i) {\n        avl.insert_node(arr[i]);\n    }\n\n    for (int i = 0; i < 12; ++i) {\n        if (avl.search(arr[i])) {\n            printf(\"find: %d\\n\", arr[i]);\n            avl.delete_node(arr[i]);\n        }\n    }\n\n    delete[] arr;\n\n    return 0;\n}\n```\n\n","slug":"数据结构/树/BalancedBinarySearchTree(AVL)","published":1,"comments":1,"layout":"post","photos":[],"_id":"cmfktk7ez0026c04p8gsvbdad","content":"<p>如果插入二叉搜索树的元素在插入之前就已经有序，那么插入后的二叉搜索树会退化为链表。在这种情况下，所有操作的时间复杂度将从 <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=O%28log_2n%29\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 > 劣化为 <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=O%28n%29\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 > 。因此产生了平衡二叉树，能够实现在插入、删除时保持树的平衡，避免树退化为链表。平衡二叉树全称为：平衡二叉搜索树(<code>Balanced Binary Search Tree</code>).</p>\n<h3 id=\"特点：\">特点：</h3>\n<ol>\n<li>\n<p><strong>自平衡</strong>：在插入或删除节点时，<code>AVL</code>树会通过旋转操作（如左旋、右旋、左右旋、右左旋）来保持树的平衡。</p>\n</li>\n<li>\n<p>如果一个树是<code>AVL</code>树，那么它的左右子树都是<code>AVL</code>树。</p>\n</li>\n<li>\n<p>树中任意一个节点的平衡因子绝对值不超过1。</p>\n<p>平衡因子：默认每个节点的平衡因子=<code>左子树高度-右子树高度</code>。（或者<code>右子树高度-左子树高度</code>）</p>\n</li>\n</ol>\n<h3 id=\"实现\">实现</h3>\n<p>基本节点：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">AVLNode</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"type\">int</span> height&#123;<span class=\"number\">1</span>&#125;; <span class=\"comment\">// 节点高度：表示从当前节点到距离他最远的叶子节点的距离+1（叶子节点高度为1，空节点高度为0）</span></span><br><span class=\"line\">    AVLNode *left;</span><br><span class=\"line\">    AVLNode *right;</span><br><span class=\"line\">    AVLNode *parent; <span class=\"comment\">// 当前节点的双亲节点</span></span><br><span class=\"line\">    <span class=\"built_in\">AVLNode</span>(<span class=\"type\">int</span> data) : <span class=\"built_in\">data</span>(data), <span class=\"built_in\">left</span>(<span class=\"literal\">nullptr</span>), <span class=\"built_in\">right</span>(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">AVLNode</span>(<span class=\"type\">int</span> data, AVLNode *left, AVLNode *right, AVLNode *parent) : <span class=\"built_in\">AVLNode</span>(data) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;parent = parent;</span><br><span class=\"line\">        height = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125; Node;</span><br></pre></td></tr></table></figure>\n<h4 id=\"插入\">插入</h4>\n<h5 id=\"递归插入\">递归插入</h5>\n<h6 id=\"逻辑\">逻辑</h6>\n<ul>\n<li>\n<p>调用递归函数，传入<strong>要插入的树的根节点<code>root</code><strong>和</strong>要插入的值<code>data</code></strong>。因为此处<code>AVLNode</code>还用到了<code>parent</code>指针，所以还需要传入<code>parent</code>指针，方便新建节点时指定其<code>parent</code>指针的值。</p>\n</li>\n<li>\n<p>如果<code>root==nullptr</code>说明是叶子节点。在该位置新建节点。存储要插入的值<code>data</code>,指定<code>height</code>为<code>1</code>(叶子节点高度为1)，同时指定<code>parent</code>指针为传入的<code>parent</code>参数。<mark>递归结束</mark>。</p>\n<blockquote>\n<p>因为此处新增了叶子节点，叶子节点高度指定为1，所以可以直接结束递归，不需要更新<code>root</code>(叶子节点)的高度。至于<code>root-&gt;parent</code>的高度，会在上层递归中更新。</p>\n</blockquote>\n</li>\n<li>\n<p>判断要插入的值<code>data</code>和当前树的根节点<code>root-&gt;data</code>的大小关系。</p>\n<ul>\n<li><code>data &lt; root-&gt;data</code>：递归插入到左子树<code>root-&gt;left</code>。插入到<code>root-&gt;left</code>后，需要判断<code>root</code>是否失衡。此处因为知晓插入到了<code>root-&gt;left</code>子树，所以只存在两种失衡情况：\n<ul>\n<li>新增节点插入到了<code>root-&gt;left-&gt;left</code>子树上，符合<code>LL</code>情况，执行<strong>右旋</strong>。</li>\n<li>新增节点插入到了<code>root-&gt;left-&gt;right</code>子树上，符合<code>LR</code>情况，执行<strong>左右双旋</strong>。</li>\n</ul>\n</li>\n<li><code>data &gt; root-&gt;data</code>：递归插入到右子树<code>root-&gt;right</code>。插入到<code>root-&gt;right</code>后，需要判断<code>root</code>是否失衡。此处因为知晓插入到了<code>root-&gt;right</code>子树，所以只存在两种失衡情况：\n<ul>\n<li>新增节点插入到了<code>root-&gt;right-&gt;right</code>子树上，符合<code>RR</code>情况，执行<strong>左旋</strong>。</li>\n<li>新增节点插入到了<code>root-&gt;right-&gt;left</code>子树上，符合<code>RL</code>情况，执行<strong>右左双旋</strong>。</li>\n</ul>\n</li>\n<li><code>data == root-&gt;data</code>：提示要插入的值已经存在。<strong>插入失败</strong>。</li>\n</ul>\n</li>\n<li>\n<p>插入并且旋转完成后，更新<code>root</code>节点的高度。（因为新增节点肯定插入了<code>root-&gt;left</code>或者<code>root-&gt;right</code>子树，可能导致<code>root</code>的高度发生变化）。<mark>递归结束</mark>。</p>\n</li>\n</ul>\n<h6 id=\"代码实现\">代码实现</h6>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 插入(递归实现)</span></span><br><span class=\"line\"><span class=\"function\">Node *<span class=\"title\">insert_recursion</span><span class=\"params\">(Node *root, Node *parent, <span class=\"type\">int</span> data)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 新插入一个节点。新插入的节点一定是叶子节点，所以该节点的高度为1（类内初始化）</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(data, <span class=\"literal\">nullptr</span>, <span class=\"literal\">nullptr</span>, parent);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root-&gt;data &gt; data) &#123;</span><br><span class=\"line\">        root-&gt;left = <span class=\"built_in\">insert_recursion</span>(root-&gt;left, root, data);</span><br><span class=\"line\">        <span class=\"comment\">// 插入后判断root是否失衡。因为插入的是root-&gt;left，所以只需要考虑root左边过高的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">abs</span>(<span class=\"built_in\">get_balance</span>(root)) == <span class=\"number\">2</span>) &#123; <span class=\"comment\">// root节点失衡</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root-&gt;left != <span class=\"literal\">nullptr</span> &amp;&amp; data &lt; root-&gt;left-&gt;data) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 执行右单旋操作。</span></span><br><span class=\"line\">                root = <span class=\"built_in\">right_rotate</span>(root);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 执行左右旋操作。</span></span><br><span class=\"line\">                root = <span class=\"built_in\">left_right_rotate</span>(root);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root-&gt;data &lt; data) &#123;</span><br><span class=\"line\">        root-&gt;right = <span class=\"built_in\">insert_recursion</span>(root-&gt;right, root, data);</span><br><span class=\"line\">        <span class=\"comment\">// 判断root是否失衡</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">abs</span>(<span class=\"built_in\">get_balance</span>(root)) == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root-&gt;right != <span class=\"literal\">nullptr</span> &amp;&amp; data &gt; root-&gt;right-&gt;data) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 执行左单旋。</span></span><br><span class=\"line\">                root = <span class=\"built_in\">left_rotate</span>(root);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 执行右左旋。</span></span><br><span class=\"line\">                root = <span class=\"built_in\">right_left_rotate</span>(root);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ERROR! data already exist.\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 无论插入情况如何，都要在插入后更新root节点的节点高度</span></span><br><span class=\"line\">    <span class=\"built_in\">update_height</span>(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"非递归插入\">非递归插入</h5>\n<blockquote>\n<p>待补充</p>\n</blockquote>\n<h4 id=\"删除\">删除</h4>\n<h5 id=\"递归删除\">递归删除</h5>\n<h6 id=\"逻辑-2\">逻辑</h6>\n<ul>\n<li>\n<p>调用<strong>删除函数</strong>。传入根节点指针<code>root</code>和要删除的值<code>data</code>。</p>\n</li>\n<li>\n<p>如果<code>root==nullptr</code>，说明没有找到<code>data</code>，删除失败。<mark>递归结束</mark>。</p>\n</li>\n<li>\n<p>如果<code>root!=nullptr</code>，比较<code>root-&gt;data</code>和<code>data</code>的大小关系。</p>\n<ul>\n<li>\n<p><code>root-&gt;data == data</code>，找到了要删除的节点。判断节点情况：</p>\n<ul>\n<li>\n<p><code>root</code>是叶子节点：将root节点从树中删除。然后<code>delete root</code>.</p>\n</li>\n<li>\n<p><code>root</code>只有左子树，没有右子树：</p>\n<ul>\n<li>\n<p>判断<code>root</code>是否是整个<code>AVL</code>树的根节点(<code>root-&gt;parent==nullptr</code>)：如果不是，则在执行下面一段。否则跳过下面一段。</p>\n<ul>\n<li>判断<code>root</code>是<code>root-&gt;parent</code>的左子树还是右子树：</li>\n<li>左子树：执行<code>root-&gt;parent-&gt;left = root-&gt;left</code>从树中删除<code>root</code>节点，然后<mark>更新<code>root-&gt;parent</code>节点的高度</mark>。</li>\n<li>右子树：执行<code>root-&gt;parent-&gt;right = root-&gt;left</code>从树中删除<code>root</code>节点，然后<mark>更新<code>root-&gt;parent</code>节点的高度</mark>。</li>\n</ul>\n</li>\n<li>\n<p>更新<code>root-&gt;left</code>的父节点指针<code>parent</code>。然后<code>delete root</code>.</p>\n<blockquote>\n<p>此处删除了<code>root</code>，但对<code>root-&gt;left</code>的平衡性没有影响。只是将<code>root-&gt;left</code>整体向上提高一层，取代<code>root</code>的位置。（因为<code>root-&gt;right==nullptr</code>）.</p>\n<p>反倒是<code>root-&gt;parent</code>的平衡性可能受到影响，但是**<code>root-&gt;parent</code>的平衡性会在递归返回时被调整**。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>root</code>只有右子树，没有左子树：</p>\n<p>与上方逻辑类似</p>\n</li>\n<li>\n<p><code>root</code>的左右子树都存在：</p>\n<p>找到右子树中最小的值，覆盖<code>root-&gt;data</code>，然后再将右子树中最小的值(<code>minData</code>)删去：递归调用删除函数，传入<code>root-&gt;right</code>和<code>minData</code>。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>data &lt; root-&gt;data</code>：</p>\n<ul>\n<li>要删除的<code>data</code>在<code>root</code>的左子树上。<strong>递归调用删除函数</strong>，传入左子树指针<code>root-&gt;left</code>和<code>data</code>。</li>\n<li>递归删除完成后，更新<code>root</code>的高度，</li>\n<li>然后平衡<code>root</code>节点（因为<code>root</code>的左子树删除了一个节点，高度可能发生变化，可能会影响<code>root</code>所在子树的平衡性）</li>\n</ul>\n</li>\n<li>\n<p><code>root-&gt;data &lt; data</code>，要删除的<code>data</code>在<code>root</code>的右子树上。</p>\n<ul>\n<li><strong>递归调用删除函数</strong>，传入右子树指针<code>root-&gt;right</code>和<code>data</code>。</li>\n<li>递归删除完成后，更新<code>root</code>的高度，</li>\n<li>然后平衡<code>root</code>节点（因为<code>root</code>的右子树删除了一个节点，高度可能发生变化，可能会影响<code>root</code>所在子树的平衡性）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"代码实现-2\">代码实现</h6>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除(递归实现)</span></span><br><span class=\"line\"><span class=\"function\">Node *<span class=\"title\">delete_recursion</span><span class=\"params\">(Node *root, <span class=\"type\">int</span> data)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root-&gt;data == data) &#123; <span class=\"comment\">// 找到要删除的节点</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;delete: %d\\n&quot;</span>, data);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root-&gt;right == <span class=\"literal\">nullptr</span> &amp;&amp; root-&gt;left != <span class=\"literal\">nullptr</span>) &#123; <span class=\"comment\">// root只有左孩子，没有右孩子</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root-&gt;parent != <span class=\"literal\">nullptr</span>) &#123; <span class=\"comment\">// 考虑root是否是整个树的根节点</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root-&gt;data &gt; root-&gt;parent-&gt;data) &#123; <span class=\"comment\">// root是root-&gt;parent的右孩子</span></span><br><span class=\"line\">                        root-&gt;parent-&gt;right = root-&gt;left;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// root是root-&gt;parent的左孩子</span></span><br><span class=\"line\">                        root-&gt;parent-&gt;left = root-&gt;left;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"built_in\">update_height</span>(root-&gt;parent); <span class=\"comment\">// 因为删除了root节点，所以要更新root-&gt;parent节点的高度</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                root-&gt;left-&gt;parent = root-&gt;parent; <span class=\"comment\">// 更新父节点指针</span></span><br><span class=\"line\">                <span class=\"comment\">// 执行平衡操作? 似乎多余? root-&gt;left本来就是平衡的，只是取代了root，对root-&gt;left的平衡性没有影响。</span></span><br><span class=\"line\">                <span class=\"comment\">// root-&gt;left = balance(root-&gt;left);</span></span><br><span class=\"line\">                Node *temp = root-&gt;left;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">                root = temp; <span class=\"comment\">// root节点从树中删除，root-&gt;left取代root</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root-&gt;left == <span class=\"literal\">nullptr</span> &amp;&amp; root-&gt;right != <span class=\"literal\">nullptr</span>) &#123; <span class=\"comment\">// root只有右孩子，没有左孩子</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root-&gt;parent != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root-&gt;data &gt; root-&gt;parent-&gt;data) &#123;</span><br><span class=\"line\">                        root-&gt;parent-&gt;right = root-&gt;right;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        root-&gt;parent-&gt;left = root-&gt;right;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"built_in\">update_height</span>(root-&gt;parent);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                root-&gt;right-&gt;parent = root-&gt;parent;</span><br><span class=\"line\">                <span class=\"comment\">// root-&gt;right = balance(root-&gt;right);</span></span><br><span class=\"line\">                Node *temp = root-&gt;right;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">                root = temp;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root-&gt;left != <span class=\"literal\">nullptr</span> &amp;&amp; root-&gt;right != <span class=\"literal\">nullptr</span>) &#123; <span class=\"comment\">// 左右孩子都有</span></span><br><span class=\"line\">                Node *temp = root-&gt;right;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (temp-&gt;left != <span class=\"literal\">nullptr</span>) &#123; <span class=\"comment\">// 找到root的右子树中的最小节点</span></span><br><span class=\"line\">                    temp = temp-&gt;left;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"type\">int</span> val = temp-&gt;data;</span><br><span class=\"line\">                root-&gt;right = <span class=\"built_in\">delete_recursion</span>(root-&gt;right, val);</span><br><span class=\"line\">                root-&gt;data = val;</span><br><span class=\"line\">                <span class=\"built_in\">update_height</span>(root); <span class=\"comment\">// root的右子树发生了变动，更新root的高度</span></span><br><span class=\"line\">                root = <span class=\"built_in\">balance</span>(root);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// root是叶子节点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root-&gt;parent != <span class=\"literal\">nullptr</span>) &#123; <span class=\"comment\">// root存在父节点</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root-&gt;parent-&gt;data &lt; root-&gt;data) &#123; <span class=\"comment\">// root是其父亲节点的右孩子</span></span><br><span class=\"line\">                        root-&gt;parent-&gt;right = <span class=\"literal\">nullptr</span>; <span class=\"comment\">// 删去root节点</span></span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// root是其父亲节点的左孩子</span></span><br><span class=\"line\">                        root-&gt;parent-&gt;left = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"built_in\">update_height</span>(root-&gt;parent);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">                root = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data &lt; root-&gt;data) &#123;</span><br><span class=\"line\">            root-&gt;left = <span class=\"built_in\">delete_recursion</span>(root-&gt;left, data);</span><br><span class=\"line\">            <span class=\"built_in\">update_height</span>(root);</span><br><span class=\"line\">            root = <span class=\"built_in\">balance</span>(root);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            root-&gt;right = <span class=\"built_in\">delete_recursion</span>(root-&gt;right, data);</span><br><span class=\"line\">            <span class=\"built_in\">update_height</span>(root);</span><br><span class=\"line\">            root = <span class=\"built_in\">balance</span>(root);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Key to be deleted could not be found.\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 平衡root节点</span></span><br><span class=\"line\"><span class=\"function\">Node *<span class=\"title\">balance</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> balance_factor = <span class=\"built_in\">get_balance</span>(root);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">abs</span>(balance_factor) == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (balance_factor &lt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">// root节点的右子树高度 &gt; 左子树高度</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">get_balance</span>(root-&gt;right) == <span class=\"number\">1</span>) &#123; <span class=\"comment\">// root-&gt;right的左子树高度 &gt; 右子树高度，root节点符合RL失衡，执行左右双旋</span></span><br><span class=\"line\">                root = <span class=\"built_in\">right_left_rotate</span>(root);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// root-&gt;right的右子树高度 &gt; 左子树高度，root节点符合RR失衡，执行左单旋</span></span><br><span class=\"line\">                root = <span class=\"built_in\">left_rotate</span>(root);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// root节点的右子树高度 &lt; 左子树高度</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">get_balance</span>(root-&gt;left) == <span class=\"number\">1</span>) &#123; <span class=\"comment\">// root-&gt;left的左子树高度 &gt; 右子树高度，root节点符合LL失衡，执行右单旋</span></span><br><span class=\"line\">                root = <span class=\"built_in\">right_rotate</span>(root);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// root-&gt;right的右子树高度 &gt; 左子树高度，root节点符合LR失衡，执行右左双旋</span></span><br><span class=\"line\">                root = <span class=\"built_in\">left_right_rotate</span>(root);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"非递归删除\">非递归删除</h5>\n<blockquote>\n<p>待补充</p>\n</blockquote>\n<h4 id=\"查询\">查询</h4>\n<h5 id=\"递归查询\">递归查询</h5>\n<h6 id=\"逻辑-3\">逻辑</h6>\n<ul>\n<li>调用递归查询函数，传入树的根节点<code>root</code>和要查询的值<code>data</code>。</li>\n<li>如果<code>root==nullptr</code>，说明递归到了叶子节点下的空节点，或者整个树为空，即：没有找到目标值。返回<code>false</code>，递归结束。\n<ul>\n<li>如果<code>root-&gt;data==data</code>，找到目标值，返回<code>true</code>，递归结束。</li>\n<li>如果<code>root-&gt;data &gt; data</code>，递归左子树。返回左子树的递归结果。</li>\n<li>如果<code>root-&gt;data &lt; data</code>，递归右子树。返回右子树的递归结果。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"代码实现：\">代码实现：</h6>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询(递归实现)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"type\">const</span> Node *root, <span class=\"type\">const</span> <span class=\"type\">int</span> &amp;data)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;data == data) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data &lt; root-&gt;data) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">search</span>(root-&gt;left, data);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">search</span>(root-&gt;right, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"非递归查询\">非递归查询</h5>\n<p>待补充</p>\n<h4 id=\"核心算法：旋转操作\">核心算法：旋转操作</h4>\n<h5 id=\"左旋\">左旋</h5>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250721222714402.png\"\n                        alt=\"左旋\"\n                 ></p>\n<p>C++实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief root节点失衡，对root和root-&gt;right进行左旋操作。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param root 失衡节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">Node *<span class=\"title\">left_rotate</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">    Node *childR = root-&gt;right;</span><br><span class=\"line\">    Node *childRL = childR-&gt;left;</span><br><span class=\"line\"></span><br><span class=\"line\">    root-&gt;right = childRL;</span><br><span class=\"line\">    childR-&gt;left = root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (childRL != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        childRL-&gt;parent = root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    childR-&gt;parent = root-&gt;parent;</span><br><span class=\"line\">    root-&gt;parent = childR;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (childR-&gt;parent != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childR-&gt;data &lt; childR-&gt;parent-&gt;data) &#123;</span><br><span class=\"line\">            childR-&gt;parent-&gt;left = childR;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            childR-&gt;parent-&gt;right = childR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    root = childR;</span><br><span class=\"line\">    <span class=\"built_in\">update_height</span>(root-&gt;left);</span><br><span class=\"line\">    <span class=\"built_in\">update_height</span>(root-&gt;right);</span><br><span class=\"line\">    <span class=\"built_in\">update_height</span>(root);</span><br><span class=\"line\">    <span class=\"built_in\">update_height</span>(root-&gt;parent);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"右旋\">右旋</h5>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250721222747055.png\"\n                        alt=\"右旋\"\n                 ></p>\n<p>C++实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief root节点失衡，对root和root-&gt;left执行右旋操作。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param root 失衡节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">Node *<span class=\"title\">right_rotate</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">    Node *childL = root-&gt;left;</span><br><span class=\"line\">    Node *childLR = childL-&gt;right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果只使用了height属性，没有使用parent属性，则只需要 下面两行语句 和 root=Lchild 以及 四个update_height()即可完成旋转。</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果使用了parent则需要加入剩余的代码。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    root-&gt;left = childLR;</span><br><span class=\"line\">    childL-&gt;right = root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (childLR != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 说明原root-&gt;left-&gt;right非空，需要更新它的父节点指针。</span></span><br><span class=\"line\">        childLR-&gt;parent = root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    childL-&gt;parent = root-&gt;parent;</span><br><span class=\"line\">    root-&gt;parent = childL;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (childL-&gt;parent != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root-&gt;data &lt; childL-&gt;parent-&gt;data) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 原root节点挂载在root-&gt;parent的左边，旋转后将新树也挂载在左边</span></span><br><span class=\"line\">            childL-&gt;parent-&gt;left = childL;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 否则挂载到右边</span></span><br><span class=\"line\">            childL-&gt;parent-&gt;right = childL;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    root = childL;</span><br><span class=\"line\">    <span class=\"built_in\">update_height</span>(root-&gt;left);</span><br><span class=\"line\">    <span class=\"built_in\">update_height</span>(root-&gt;right);</span><br><span class=\"line\">    <span class=\"built_in\">update_height</span>(root);</span><br><span class=\"line\">    <span class=\"built_in\">update_height</span>(root-&gt;parent); <span class=\"comment\">// 注意此处需要更新root-&gt;parent的高度，因为root-&gt;parent的其中一个子树(也就是root)高度改变，所以会影响root-&gt;parent的高度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"左右双旋\">左右双旋</h5>\n<p>先左旋，再右旋</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250721223004318.png\"\n                        alt=\"左右双旋\"\n                 ></p>\n<p>C++实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief 左右旋</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">Node *<span class=\"title\">left_right_rotate</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先对root-&gt;left和root-&gt;left-&gt;right进行左单旋</span></span><br><span class=\"line\">    root-&gt;left = <span class=\"built_in\">left_rotate</span>(root-&gt;left);</span><br><span class=\"line\">    <span class=\"comment\">// 在对root和root-&gt;left进行右单旋</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">right_rotate</span>(root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"右左双旋\">右左双旋</h5>\n<p>先右旋，再左旋</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250721222927312.png\"\n                        alt=\"右左双旋\"\n                 ></p>\n<p>C++实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief 右左旋</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">Node *<span class=\"title\">right_left_rotate</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先对root-&gt;right和root-&gt;right-&gt;left进行右单旋</span></span><br><span class=\"line\">    root-&gt;right = <span class=\"built_in\">right_rotate</span>(root-&gt;right);</span><br><span class=\"line\">    <span class=\"comment\">// 再对root和root-&gt;right进行左单旋</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">left_rotate</span>(root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"完整代码实现：\">完整代码实现：</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AVLTree</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">AVLNode</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> data;</span><br><span class=\"line\">        <span class=\"type\">int</span> height&#123;<span class=\"number\">1</span>&#125;; <span class=\"comment\">// 节点高度：表示从当前节点到距离他最远的叶子节点的距离+1（叶子节点高度为1，空节点高度为0）</span></span><br><span class=\"line\">        AVLNode *left;</span><br><span class=\"line\">        AVLNode *right;</span><br><span class=\"line\">        AVLNode *parent; <span class=\"comment\">// 当前节点的双亲节点</span></span><br><span class=\"line\">        <span class=\"built_in\">AVLNode</span>(<span class=\"type\">int</span> data) : <span class=\"built_in\">data</span>(data), <span class=\"built_in\">left</span>(<span class=\"literal\">nullptr</span>), <span class=\"built_in\">right</span>(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\">        <span class=\"built_in\">AVLNode</span>(<span class=\"type\">int</span> data, AVLNode *left, AVLNode *right, AVLNode *parent) : <span class=\"built_in\">AVLNode</span>(data) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;parent = parent;</span><br><span class=\"line\">            height = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125; Node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">AVLTree</span>() : <span class=\"built_in\">root</span>(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">AVLTree</span>(<span class=\"type\">int</span> data) &#123;</span><br><span class=\"line\">        root = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">AVLTree</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">delete_tree</span>(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert_node</span><span class=\"params\">(<span class=\"type\">int</span> data)</span> </span>&#123;</span><br><span class=\"line\">        root = <span class=\"built_in\">insert_recursion</span>(root, <span class=\"literal\">nullptr</span>, data); <span class=\"comment\">// 直接调用递归函数进行插入</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 待补充: 非递归的插入方法</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">delete_node</span><span class=\"params\">(<span class=\"type\">int</span> data)</span> </span>&#123;</span><br><span class=\"line\">        root = <span class=\"built_in\">delete_recursion</span>(root, data); <span class=\"comment\">// 调用递归的删除方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 待补充: 非递归的删除方法</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"type\">int</span> data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">search</span>(root, data); <span class=\"comment\">// 调用递归的查询方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 待补充: 非递归的查询方法</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Node *<span class=\"title\">get_root</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    Node *root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 插入(递归实现)</span></span><br><span class=\"line\">    <span class=\"function\">Node *<span class=\"title\">insert_recursion</span><span class=\"params\">(Node *root, Node *parent, <span class=\"type\">int</span> data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新插入一个节点。新插入的节点一定是叶子节点，所以该节点的高度为1（类内初始化）</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(data, <span class=\"literal\">nullptr</span>, <span class=\"literal\">nullptr</span>, parent);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root-&gt;data &gt; data) &#123;</span><br><span class=\"line\">            root-&gt;left = <span class=\"built_in\">insert_recursion</span>(root-&gt;left, root, data);</span><br><span class=\"line\">            <span class=\"comment\">// 插入后判断root是否失衡。因为插入的是root-&gt;left，所以只需要考虑root左边过高的情况</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">abs</span>(<span class=\"built_in\">get_balance</span>(root)) == <span class=\"number\">2</span>) &#123; <span class=\"comment\">// root节点失衡</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root-&gt;left != <span class=\"literal\">nullptr</span> &amp;&amp; data &lt; root-&gt;left-&gt;data) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 执行右单旋操作。</span></span><br><span class=\"line\">                    root = <span class=\"built_in\">right_rotate</span>(root);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 执行左右旋操作。</span></span><br><span class=\"line\">                    root = <span class=\"built_in\">left_right_rotate</span>(root);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root-&gt;data &lt; data) &#123;</span><br><span class=\"line\">            root-&gt;right = <span class=\"built_in\">insert_recursion</span>(root-&gt;right, root, data);</span><br><span class=\"line\">            <span class=\"comment\">// 判断root是否失衡</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">abs</span>(<span class=\"built_in\">get_balance</span>(root)) == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root-&gt;right != <span class=\"literal\">nullptr</span> &amp;&amp; data &gt; root-&gt;right-&gt;data) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 执行左单旋。</span></span><br><span class=\"line\">                    root = <span class=\"built_in\">left_rotate</span>(root);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 执行右左旋。</span></span><br><span class=\"line\">                    root = <span class=\"built_in\">right_left_rotate</span>(root);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ERROR! data already exist.\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 无论插入情况如何，都要在插入后更新root节点的节点高度</span></span><br><span class=\"line\">        <span class=\"built_in\">update_height</span>(root);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除(递归实现)</span></span><br><span class=\"line\">    <span class=\"function\">Node *<span class=\"title\">delete_recursion</span><span class=\"params\">(Node *root, <span class=\"type\">int</span> data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root-&gt;data == data) &#123; <span class=\"comment\">// 找到要删除的节点</span></span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;delete: %d\\n&quot;</span>, data);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root-&gt;right == <span class=\"literal\">nullptr</span> &amp;&amp; root-&gt;left != <span class=\"literal\">nullptr</span>) &#123; <span class=\"comment\">// root只有左孩子，没有右孩子</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root-&gt;parent != <span class=\"literal\">nullptr</span>) &#123; <span class=\"comment\">// 考虑root是否是整个树的根节点</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (root-&gt;data &gt; root-&gt;parent-&gt;data) &#123; <span class=\"comment\">// root是root-&gt;parent的右孩子</span></span><br><span class=\"line\">                            root-&gt;parent-&gt;right = root-&gt;left;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// root是root-&gt;parent的左孩子</span></span><br><span class=\"line\">                            root-&gt;parent-&gt;left = root-&gt;left;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"built_in\">update_height</span>(root-&gt;parent); <span class=\"comment\">// 因为删除了root节点，所以要更新root-&gt;parent节点的高度</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    root-&gt;left-&gt;parent = root-&gt;parent; <span class=\"comment\">// 更新父节点指针</span></span><br><span class=\"line\">                    <span class=\"comment\">// 执行平衡操作? 似乎多余? root-&gt;left本来就是平衡的，只是取代了root，对root-&gt;left的平衡性没有影响。</span></span><br><span class=\"line\">                    <span class=\"comment\">// root-&gt;left = balance(root-&gt;left);</span></span><br><span class=\"line\">                    Node *temp = root-&gt;left;</span><br><span class=\"line\">                    <span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">                    root = temp; <span class=\"comment\">// root节点从树中删除，root-&gt;left取代root</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root-&gt;left == <span class=\"literal\">nullptr</span> &amp;&amp; root-&gt;right != <span class=\"literal\">nullptr</span>) &#123; <span class=\"comment\">// root只有右孩子，没有左孩子</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root-&gt;parent != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (root-&gt;data &gt; root-&gt;parent-&gt;data) &#123;</span><br><span class=\"line\">                            root-&gt;parent-&gt;right = root-&gt;right;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            root-&gt;parent-&gt;left = root-&gt;right;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"built_in\">update_height</span>(root-&gt;parent);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    root-&gt;right-&gt;parent = root-&gt;parent;</span><br><span class=\"line\">                    <span class=\"comment\">// root-&gt;right = balance(root-&gt;right);</span></span><br><span class=\"line\">                    Node *temp = root-&gt;right;</span><br><span class=\"line\">                    <span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">                    root = temp;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root-&gt;left != <span class=\"literal\">nullptr</span> &amp;&amp; root-&gt;right != <span class=\"literal\">nullptr</span>) &#123; <span class=\"comment\">// 左右孩子都有</span></span><br><span class=\"line\">                    Node *temp = root-&gt;right;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (temp-&gt;left != <span class=\"literal\">nullptr</span>) &#123; <span class=\"comment\">// 找到root的右子树中的最小节点</span></span><br><span class=\"line\">                        temp = temp-&gt;left;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"type\">int</span> val = temp-&gt;data;</span><br><span class=\"line\">                    root-&gt;right = <span class=\"built_in\">delete_recursion</span>(root-&gt;right, val);</span><br><span class=\"line\">                    root-&gt;data = val;</span><br><span class=\"line\">                    <span class=\"built_in\">update_height</span>(root); <span class=\"comment\">// root的右子树发生了变动，更新root的高度</span></span><br><span class=\"line\">                    root = <span class=\"built_in\">balance</span>(root);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// root是叶子节点</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root-&gt;parent != <span class=\"literal\">nullptr</span>) &#123; <span class=\"comment\">// root存在父节点</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (root-&gt;parent-&gt;data &lt; root-&gt;data) &#123; <span class=\"comment\">// root是其父亲节点的右孩子</span></span><br><span class=\"line\">                            root-&gt;parent-&gt;right = <span class=\"literal\">nullptr</span>; <span class=\"comment\">// 删去root节点</span></span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// root是其父亲节点的左孩子</span></span><br><span class=\"line\">                            root-&gt;parent-&gt;left = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"built_in\">update_height</span>(root-&gt;parent);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">                    root = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data &lt; root-&gt;data) &#123;</span><br><span class=\"line\">                root-&gt;left = <span class=\"built_in\">delete_recursion</span>(root-&gt;left, data);</span><br><span class=\"line\">                <span class=\"built_in\">update_height</span>(root);</span><br><span class=\"line\">                root = <span class=\"built_in\">balance</span>(root);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                root-&gt;right = <span class=\"built_in\">delete_recursion</span>(root-&gt;right, data);</span><br><span class=\"line\">                <span class=\"built_in\">update_height</span>(root);</span><br><span class=\"line\">                root = <span class=\"built_in\">balance</span>(root);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Key to be deleted could not be found.\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查询(递归实现)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"type\">const</span> Node *root, <span class=\"type\">const</span> <span class=\"type\">int</span> &amp;data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root-&gt;data == data) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data &lt; root-&gt;data) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">search</span>(root-&gt;left, data);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">search</span>(root-&gt;right, data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取节点高度</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">node_height</span><span class=\"params\">(Node *node)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node-&gt;height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新节点高度</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update_height</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// update height</span></span><br><span class=\"line\">            root-&gt;height = std::<span class=\"built_in\">max</span>(<span class=\"built_in\">node_height</span>(root-&gt;left), <span class=\"built_in\">node_height</span>(root-&gt;right)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @brief 获取node节点的平衡因子。</span></span><br><span class=\"line\"><span class=\"comment\">     * @param node 要获取平衡因子的节点</span></span><br><span class=\"line\"><span class=\"comment\">     * @return  - 如果node是非叶子节点，平衡因子 = 左子树高度 - 右子树高度;</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *          - 如果node是叶子节点，平衡因子 = 1</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *          - 如果node是空节点，平衡因子 = 0</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get_balance</span><span class=\"params\">(Node *node)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">node_height</span>(node-&gt;left) - <span class=\"built_in\">node_height</span>(node-&gt;right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @brief root节点失衡，对root和root-&gt;left执行右旋操作。</span></span><br><span class=\"line\"><span class=\"comment\">     * @param root 失衡节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Node *<span class=\"title\">right_rotate</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">        Node *childL = root-&gt;left;</span><br><span class=\"line\">        Node *childLR = childL-&gt;right;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 如果只使用了height属性，没有使用parent属性，则只需要 下面两行语句 和 root=Lchild 以及 四个update_height()即可完成旋转。</span></span><br><span class=\"line\"><span class=\"comment\">         * 如果使用了parent则需要加入剩余的代码。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        root-&gt;left = childLR;</span><br><span class=\"line\">        childL-&gt;right = root;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childLR != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 说明原root-&gt;left-&gt;right非空，需要更新它的父节点指针。</span></span><br><span class=\"line\">            childLR-&gt;parent = root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        childL-&gt;parent = root-&gt;parent;</span><br><span class=\"line\">        root-&gt;parent = childL;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childL-&gt;parent != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root-&gt;data &lt; childL-&gt;parent-&gt;data) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 原root节点挂载在root-&gt;parent的左边，旋转后将新树也挂载在左边</span></span><br><span class=\"line\">                childL-&gt;parent-&gt;left = childL;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 否则挂载到右边</span></span><br><span class=\"line\">                childL-&gt;parent-&gt;right = childL;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        root = childL;</span><br><span class=\"line\">        <span class=\"built_in\">update_height</span>(root-&gt;left);</span><br><span class=\"line\">        <span class=\"built_in\">update_height</span>(root-&gt;right);</span><br><span class=\"line\">        <span class=\"built_in\">update_height</span>(root);</span><br><span class=\"line\">        <span class=\"built_in\">update_height</span>(root-&gt;parent); <span class=\"comment\">// 注意此处需要更新root-&gt;parent的高度，因为root-&gt;parent的其中一个子树(也就是root)高度改变，所以会影响root-&gt;parent的高度</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @brief root节点失衡，对root和root-&gt;right进行左旋操作。</span></span><br><span class=\"line\"><span class=\"comment\">     * @param root 失衡节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Node *<span class=\"title\">left_rotate</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">        Node *childR = root-&gt;right;</span><br><span class=\"line\">        Node *childRL = childR-&gt;left;</span><br><span class=\"line\"></span><br><span class=\"line\">        root-&gt;right = childRL;</span><br><span class=\"line\">        childR-&gt;left = root;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childRL != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            childRL-&gt;parent = root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        childR-&gt;parent = root-&gt;parent;</span><br><span class=\"line\">        root-&gt;parent = childR;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childR-&gt;parent != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (childR-&gt;data &lt; childR-&gt;parent-&gt;data) &#123;</span><br><span class=\"line\">                childR-&gt;parent-&gt;left = childR;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                childR-&gt;parent-&gt;right = childR;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        root = childR;</span><br><span class=\"line\">        <span class=\"built_in\">update_height</span>(root-&gt;left);</span><br><span class=\"line\">        <span class=\"built_in\">update_height</span>(root-&gt;right);</span><br><span class=\"line\">        <span class=\"built_in\">update_height</span>(root);</span><br><span class=\"line\">        <span class=\"built_in\">update_height</span>(root-&gt;parent);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @brief 左右旋</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Node *<span class=\"title\">left_right_rotate</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先对root-&gt;left和root-&gt;left-&gt;right进行左单旋</span></span><br><span class=\"line\">        root-&gt;left = <span class=\"built_in\">left_rotate</span>(root-&gt;left);</span><br><span class=\"line\">        <span class=\"comment\">// 在对root和root-&gt;left进行右单旋</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">right_rotate</span>(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @brief 右左旋</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Node *<span class=\"title\">right_left_rotate</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先对root-&gt;right和root-&gt;right-&gt;left进行右单旋</span></span><br><span class=\"line\">        root-&gt;right = <span class=\"built_in\">right_rotate</span>(root-&gt;right);</span><br><span class=\"line\">        <span class=\"comment\">// 再对root和root-&gt;right进行左单旋</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">left_rotate</span>(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 平衡root节点</span></span><br><span class=\"line\">    <span class=\"function\">Node *<span class=\"title\">balance</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> balance_factor = <span class=\"built_in\">get_balance</span>(root);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">abs</span>(balance_factor) == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (balance_factor &lt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">// root节点的右子树高度 &gt; 左子树高度</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">get_balance</span>(root-&gt;right) == <span class=\"number\">1</span>) &#123; <span class=\"comment\">// root-&gt;right的左子树高度 &gt; 右子树高度，root节点符合RL失衡，执行左右双旋</span></span><br><span class=\"line\">                    root = <span class=\"built_in\">right_left_rotate</span>(root);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// root-&gt;right的右子树高度 &gt; 左子树高度，root节点符合RR失衡，执行左单旋</span></span><br><span class=\"line\">                    root = <span class=\"built_in\">left_rotate</span>(root);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// root节点的右子树高度 &lt; 左子树高度</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">get_balance</span>(root-&gt;left) == <span class=\"number\">1</span>) &#123; <span class=\"comment\">// root-&gt;left的左子树高度 &gt; 右子树高度，root节点符合LL失衡，执行右单旋</span></span><br><span class=\"line\">                    root = <span class=\"built_in\">right_rotate</span>(root);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// root-&gt;right的右子树高度 &gt; 左子树高度，root节点符合LR失衡，执行右左双旋</span></span><br><span class=\"line\">                    root = <span class=\"built_in\">left_right_rotate</span>(root);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">delete_tree</span><span class=\"params\">(AVLTree::Node *root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">delete_tree</span>(root-&gt;left);</span><br><span class=\"line\">        <span class=\"built_in\">delete_tree</span>(root-&gt;right);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;released node: %d\\n&quot;</span>, root-&gt;data);</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printInOrder</span><span class=\"params\">(AVLTree::Node *root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printInOrder</span>(root-&gt;left);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, root-&gt;data);</span><br><span class=\"line\">    <span class=\"built_in\">printInOrder</span>(root-&gt;right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    AVLTree avl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> *arr = <span class=\"keyword\">new</span> <span class=\"type\">int</span>[<span class=\"number\">12</span>]&#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">45</span>, <span class=\"number\">30</span>, <span class=\"number\">12</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>, <span class=\"number\">25</span>, <span class=\"number\">14</span>, <span class=\"number\">52</span>, <span class=\"number\">75</span>, <span class=\"number\">19</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">12</span>; ++i) &#123;</span><br><span class=\"line\">        avl.<span class=\"built_in\">insert_node</span>(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">12</span>; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (avl.<span class=\"built_in\">search</span>(arr[i])) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;find: %d\\n&quot;</span>, arr[i]);</span><br><span class=\"line\">            avl.<span class=\"built_in\">delete_node</span>(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">delete</span>[] arr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","secretKey":"198ffce3eea8a481b3417ff8c7e2b54481f1d667f3290b2e92a3a47d535d5798","iv":"97263ea79f19dc6f5a87400083149afe","encryptedPassword":"a9ea3a131d894b75524f2bf0e4ef1516","encryptedContent":"","excerpt":"","more":"<p>如果插入二叉搜索树的元素在插入之前就已经有序，那么插入后的二叉搜索树会退化为链表。在这种情况下，所有操作的时间复杂度将从 <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=O%28log_2n%29\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 > 劣化为 <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=O%28n%29\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 > 。因此产生了平衡二叉树，能够实现在插入、删除时保持树的平衡，避免树退化为链表。平衡二叉树全称为：平衡二叉搜索树(<code>Balanced Binary Search Tree</code>).</p>\n<h3 id=\"特点：\">特点：</h3>\n<ol>\n<li>\n<p><strong>自平衡</strong>：在插入或删除节点时，<code>AVL</code>树会通过旋转操作（如左旋、右旋、左右旋、右左旋）来保持树的平衡。</p>\n</li>\n<li>\n<p>如果一个树是<code>AVL</code>树，那么它的左右子树都是<code>AVL</code>树。</p>\n</li>\n<li>\n<p>树中任意一个节点的平衡因子绝对值不超过1。</p>\n<p>平衡因子：默认每个节点的平衡因子=<code>左子树高度-右子树高度</code>。（或者<code>右子树高度-左子树高度</code>）</p>\n</li>\n</ol>\n<h3 id=\"实现\">实现</h3>\n<p>基本节点：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">AVLNode</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"type\">int</span> height&#123;<span class=\"number\">1</span>&#125;; <span class=\"comment\">// 节点高度：表示从当前节点到距离他最远的叶子节点的距离+1（叶子节点高度为1，空节点高度为0）</span></span><br><span class=\"line\">    AVLNode *left;</span><br><span class=\"line\">    AVLNode *right;</span><br><span class=\"line\">    AVLNode *parent; <span class=\"comment\">// 当前节点的双亲节点</span></span><br><span class=\"line\">    <span class=\"built_in\">AVLNode</span>(<span class=\"type\">int</span> data) : <span class=\"built_in\">data</span>(data), <span class=\"built_in\">left</span>(<span class=\"literal\">nullptr</span>), <span class=\"built_in\">right</span>(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">AVLNode</span>(<span class=\"type\">int</span> data, AVLNode *left, AVLNode *right, AVLNode *parent) : <span class=\"built_in\">AVLNode</span>(data) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;parent = parent;</span><br><span class=\"line\">        height = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125; Node;</span><br></pre></td></tr></table></figure>\n<h4 id=\"插入\">插入</h4>\n<h5 id=\"递归插入\">递归插入</h5>\n<h6 id=\"逻辑\">逻辑</h6>\n<ul>\n<li>\n<p>调用递归函数，传入<strong>要插入的树的根节点<code>root</code><strong>和</strong>要插入的值<code>data</code></strong>。因为此处<code>AVLNode</code>还用到了<code>parent</code>指针，所以还需要传入<code>parent</code>指针，方便新建节点时指定其<code>parent</code>指针的值。</p>\n</li>\n<li>\n<p>如果<code>root==nullptr</code>说明是叶子节点。在该位置新建节点。存储要插入的值<code>data</code>,指定<code>height</code>为<code>1</code>(叶子节点高度为1)，同时指定<code>parent</code>指针为传入的<code>parent</code>参数。<mark>递归结束</mark>。</p>\n<blockquote>\n<p>因为此处新增了叶子节点，叶子节点高度指定为1，所以可以直接结束递归，不需要更新<code>root</code>(叶子节点)的高度。至于<code>root-&gt;parent</code>的高度，会在上层递归中更新。</p>\n</blockquote>\n</li>\n<li>\n<p>判断要插入的值<code>data</code>和当前树的根节点<code>root-&gt;data</code>的大小关系。</p>\n<ul>\n<li><code>data &lt; root-&gt;data</code>：递归插入到左子树<code>root-&gt;left</code>。插入到<code>root-&gt;left</code>后，需要判断<code>root</code>是否失衡。此处因为知晓插入到了<code>root-&gt;left</code>子树，所以只存在两种失衡情况：\n<ul>\n<li>新增节点插入到了<code>root-&gt;left-&gt;left</code>子树上，符合<code>LL</code>情况，执行<strong>右旋</strong>。</li>\n<li>新增节点插入到了<code>root-&gt;left-&gt;right</code>子树上，符合<code>LR</code>情况，执行<strong>左右双旋</strong>。</li>\n</ul>\n</li>\n<li><code>data &gt; root-&gt;data</code>：递归插入到右子树<code>root-&gt;right</code>。插入到<code>root-&gt;right</code>后，需要判断<code>root</code>是否失衡。此处因为知晓插入到了<code>root-&gt;right</code>子树，所以只存在两种失衡情况：\n<ul>\n<li>新增节点插入到了<code>root-&gt;right-&gt;right</code>子树上，符合<code>RR</code>情况，执行<strong>左旋</strong>。</li>\n<li>新增节点插入到了<code>root-&gt;right-&gt;left</code>子树上，符合<code>RL</code>情况，执行<strong>右左双旋</strong>。</li>\n</ul>\n</li>\n<li><code>data == root-&gt;data</code>：提示要插入的值已经存在。<strong>插入失败</strong>。</li>\n</ul>\n</li>\n<li>\n<p>插入并且旋转完成后，更新<code>root</code>节点的高度。（因为新增节点肯定插入了<code>root-&gt;left</code>或者<code>root-&gt;right</code>子树，可能导致<code>root</code>的高度发生变化）。<mark>递归结束</mark>。</p>\n</li>\n</ul>\n<h6 id=\"代码实现\">代码实现</h6>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 插入(递归实现)</span></span><br><span class=\"line\"><span class=\"function\">Node *<span class=\"title\">insert_recursion</span><span class=\"params\">(Node *root, Node *parent, <span class=\"type\">int</span> data)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 新插入一个节点。新插入的节点一定是叶子节点，所以该节点的高度为1（类内初始化）</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(data, <span class=\"literal\">nullptr</span>, <span class=\"literal\">nullptr</span>, parent);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root-&gt;data &gt; data) &#123;</span><br><span class=\"line\">        root-&gt;left = <span class=\"built_in\">insert_recursion</span>(root-&gt;left, root, data);</span><br><span class=\"line\">        <span class=\"comment\">// 插入后判断root是否失衡。因为插入的是root-&gt;left，所以只需要考虑root左边过高的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">abs</span>(<span class=\"built_in\">get_balance</span>(root)) == <span class=\"number\">2</span>) &#123; <span class=\"comment\">// root节点失衡</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root-&gt;left != <span class=\"literal\">nullptr</span> &amp;&amp; data &lt; root-&gt;left-&gt;data) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 执行右单旋操作。</span></span><br><span class=\"line\">                root = <span class=\"built_in\">right_rotate</span>(root);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 执行左右旋操作。</span></span><br><span class=\"line\">                root = <span class=\"built_in\">left_right_rotate</span>(root);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root-&gt;data &lt; data) &#123;</span><br><span class=\"line\">        root-&gt;right = <span class=\"built_in\">insert_recursion</span>(root-&gt;right, root, data);</span><br><span class=\"line\">        <span class=\"comment\">// 判断root是否失衡</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">abs</span>(<span class=\"built_in\">get_balance</span>(root)) == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root-&gt;right != <span class=\"literal\">nullptr</span> &amp;&amp; data &gt; root-&gt;right-&gt;data) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 执行左单旋。</span></span><br><span class=\"line\">                root = <span class=\"built_in\">left_rotate</span>(root);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 执行右左旋。</span></span><br><span class=\"line\">                root = <span class=\"built_in\">right_left_rotate</span>(root);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ERROR! data already exist.\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 无论插入情况如何，都要在插入后更新root节点的节点高度</span></span><br><span class=\"line\">    <span class=\"built_in\">update_height</span>(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"非递归插入\">非递归插入</h5>\n<blockquote>\n<p>待补充</p>\n</blockquote>\n<h4 id=\"删除\">删除</h4>\n<h5 id=\"递归删除\">递归删除</h5>\n<h6 id=\"逻辑-2\">逻辑</h6>\n<ul>\n<li>\n<p>调用<strong>删除函数</strong>。传入根节点指针<code>root</code>和要删除的值<code>data</code>。</p>\n</li>\n<li>\n<p>如果<code>root==nullptr</code>，说明没有找到<code>data</code>，删除失败。<mark>递归结束</mark>。</p>\n</li>\n<li>\n<p>如果<code>root!=nullptr</code>，比较<code>root-&gt;data</code>和<code>data</code>的大小关系。</p>\n<ul>\n<li>\n<p><code>root-&gt;data == data</code>，找到了要删除的节点。判断节点情况：</p>\n<ul>\n<li>\n<p><code>root</code>是叶子节点：将root节点从树中删除。然后<code>delete root</code>.</p>\n</li>\n<li>\n<p><code>root</code>只有左子树，没有右子树：</p>\n<ul>\n<li>\n<p>判断<code>root</code>是否是整个<code>AVL</code>树的根节点(<code>root-&gt;parent==nullptr</code>)：如果不是，则在执行下面一段。否则跳过下面一段。</p>\n<ul>\n<li>判断<code>root</code>是<code>root-&gt;parent</code>的左子树还是右子树：</li>\n<li>左子树：执行<code>root-&gt;parent-&gt;left = root-&gt;left</code>从树中删除<code>root</code>节点，然后<mark>更新<code>root-&gt;parent</code>节点的高度</mark>。</li>\n<li>右子树：执行<code>root-&gt;parent-&gt;right = root-&gt;left</code>从树中删除<code>root</code>节点，然后<mark>更新<code>root-&gt;parent</code>节点的高度</mark>。</li>\n</ul>\n</li>\n<li>\n<p>更新<code>root-&gt;left</code>的父节点指针<code>parent</code>。然后<code>delete root</code>.</p>\n<blockquote>\n<p>此处删除了<code>root</code>，但对<code>root-&gt;left</code>的平衡性没有影响。只是将<code>root-&gt;left</code>整体向上提高一层，取代<code>root</code>的位置。（因为<code>root-&gt;right==nullptr</code>）.</p>\n<p>反倒是<code>root-&gt;parent</code>的平衡性可能受到影响，但是**<code>root-&gt;parent</code>的平衡性会在递归返回时被调整**。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>root</code>只有右子树，没有左子树：</p>\n<p>与上方逻辑类似</p>\n</li>\n<li>\n<p><code>root</code>的左右子树都存在：</p>\n<p>找到右子树中最小的值，覆盖<code>root-&gt;data</code>，然后再将右子树中最小的值(<code>minData</code>)删去：递归调用删除函数，传入<code>root-&gt;right</code>和<code>minData</code>。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>data &lt; root-&gt;data</code>：</p>\n<ul>\n<li>要删除的<code>data</code>在<code>root</code>的左子树上。<strong>递归调用删除函数</strong>，传入左子树指针<code>root-&gt;left</code>和<code>data</code>。</li>\n<li>递归删除完成后，更新<code>root</code>的高度，</li>\n<li>然后平衡<code>root</code>节点（因为<code>root</code>的左子树删除了一个节点，高度可能发生变化，可能会影响<code>root</code>所在子树的平衡性）</li>\n</ul>\n</li>\n<li>\n<p><code>root-&gt;data &lt; data</code>，要删除的<code>data</code>在<code>root</code>的右子树上。</p>\n<ul>\n<li><strong>递归调用删除函数</strong>，传入右子树指针<code>root-&gt;right</code>和<code>data</code>。</li>\n<li>递归删除完成后，更新<code>root</code>的高度，</li>\n<li>然后平衡<code>root</code>节点（因为<code>root</code>的右子树删除了一个节点，高度可能发生变化，可能会影响<code>root</code>所在子树的平衡性）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"代码实现-2\">代码实现</h6>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除(递归实现)</span></span><br><span class=\"line\"><span class=\"function\">Node *<span class=\"title\">delete_recursion</span><span class=\"params\">(Node *root, <span class=\"type\">int</span> data)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root-&gt;data == data) &#123; <span class=\"comment\">// 找到要删除的节点</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;delete: %d\\n&quot;</span>, data);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root-&gt;right == <span class=\"literal\">nullptr</span> &amp;&amp; root-&gt;left != <span class=\"literal\">nullptr</span>) &#123; <span class=\"comment\">// root只有左孩子，没有右孩子</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root-&gt;parent != <span class=\"literal\">nullptr</span>) &#123; <span class=\"comment\">// 考虑root是否是整个树的根节点</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root-&gt;data &gt; root-&gt;parent-&gt;data) &#123; <span class=\"comment\">// root是root-&gt;parent的右孩子</span></span><br><span class=\"line\">                        root-&gt;parent-&gt;right = root-&gt;left;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// root是root-&gt;parent的左孩子</span></span><br><span class=\"line\">                        root-&gt;parent-&gt;left = root-&gt;left;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"built_in\">update_height</span>(root-&gt;parent); <span class=\"comment\">// 因为删除了root节点，所以要更新root-&gt;parent节点的高度</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                root-&gt;left-&gt;parent = root-&gt;parent; <span class=\"comment\">// 更新父节点指针</span></span><br><span class=\"line\">                <span class=\"comment\">// 执行平衡操作? 似乎多余? root-&gt;left本来就是平衡的，只是取代了root，对root-&gt;left的平衡性没有影响。</span></span><br><span class=\"line\">                <span class=\"comment\">// root-&gt;left = balance(root-&gt;left);</span></span><br><span class=\"line\">                Node *temp = root-&gt;left;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">                root = temp; <span class=\"comment\">// root节点从树中删除，root-&gt;left取代root</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root-&gt;left == <span class=\"literal\">nullptr</span> &amp;&amp; root-&gt;right != <span class=\"literal\">nullptr</span>) &#123; <span class=\"comment\">// root只有右孩子，没有左孩子</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root-&gt;parent != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root-&gt;data &gt; root-&gt;parent-&gt;data) &#123;</span><br><span class=\"line\">                        root-&gt;parent-&gt;right = root-&gt;right;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        root-&gt;parent-&gt;left = root-&gt;right;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"built_in\">update_height</span>(root-&gt;parent);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                root-&gt;right-&gt;parent = root-&gt;parent;</span><br><span class=\"line\">                <span class=\"comment\">// root-&gt;right = balance(root-&gt;right);</span></span><br><span class=\"line\">                Node *temp = root-&gt;right;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">                root = temp;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root-&gt;left != <span class=\"literal\">nullptr</span> &amp;&amp; root-&gt;right != <span class=\"literal\">nullptr</span>) &#123; <span class=\"comment\">// 左右孩子都有</span></span><br><span class=\"line\">                Node *temp = root-&gt;right;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (temp-&gt;left != <span class=\"literal\">nullptr</span>) &#123; <span class=\"comment\">// 找到root的右子树中的最小节点</span></span><br><span class=\"line\">                    temp = temp-&gt;left;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"type\">int</span> val = temp-&gt;data;</span><br><span class=\"line\">                root-&gt;right = <span class=\"built_in\">delete_recursion</span>(root-&gt;right, val);</span><br><span class=\"line\">                root-&gt;data = val;</span><br><span class=\"line\">                <span class=\"built_in\">update_height</span>(root); <span class=\"comment\">// root的右子树发生了变动，更新root的高度</span></span><br><span class=\"line\">                root = <span class=\"built_in\">balance</span>(root);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// root是叶子节点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root-&gt;parent != <span class=\"literal\">nullptr</span>) &#123; <span class=\"comment\">// root存在父节点</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root-&gt;parent-&gt;data &lt; root-&gt;data) &#123; <span class=\"comment\">// root是其父亲节点的右孩子</span></span><br><span class=\"line\">                        root-&gt;parent-&gt;right = <span class=\"literal\">nullptr</span>; <span class=\"comment\">// 删去root节点</span></span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// root是其父亲节点的左孩子</span></span><br><span class=\"line\">                        root-&gt;parent-&gt;left = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"built_in\">update_height</span>(root-&gt;parent);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">                root = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data &lt; root-&gt;data) &#123;</span><br><span class=\"line\">            root-&gt;left = <span class=\"built_in\">delete_recursion</span>(root-&gt;left, data);</span><br><span class=\"line\">            <span class=\"built_in\">update_height</span>(root);</span><br><span class=\"line\">            root = <span class=\"built_in\">balance</span>(root);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            root-&gt;right = <span class=\"built_in\">delete_recursion</span>(root-&gt;right, data);</span><br><span class=\"line\">            <span class=\"built_in\">update_height</span>(root);</span><br><span class=\"line\">            root = <span class=\"built_in\">balance</span>(root);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Key to be deleted could not be found.\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 平衡root节点</span></span><br><span class=\"line\"><span class=\"function\">Node *<span class=\"title\">balance</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> balance_factor = <span class=\"built_in\">get_balance</span>(root);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">abs</span>(balance_factor) == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (balance_factor &lt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">// root节点的右子树高度 &gt; 左子树高度</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">get_balance</span>(root-&gt;right) == <span class=\"number\">1</span>) &#123; <span class=\"comment\">// root-&gt;right的左子树高度 &gt; 右子树高度，root节点符合RL失衡，执行左右双旋</span></span><br><span class=\"line\">                root = <span class=\"built_in\">right_left_rotate</span>(root);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// root-&gt;right的右子树高度 &gt; 左子树高度，root节点符合RR失衡，执行左单旋</span></span><br><span class=\"line\">                root = <span class=\"built_in\">left_rotate</span>(root);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// root节点的右子树高度 &lt; 左子树高度</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">get_balance</span>(root-&gt;left) == <span class=\"number\">1</span>) &#123; <span class=\"comment\">// root-&gt;left的左子树高度 &gt; 右子树高度，root节点符合LL失衡，执行右单旋</span></span><br><span class=\"line\">                root = <span class=\"built_in\">right_rotate</span>(root);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// root-&gt;right的右子树高度 &gt; 左子树高度，root节点符合LR失衡，执行右左双旋</span></span><br><span class=\"line\">                root = <span class=\"built_in\">left_right_rotate</span>(root);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"非递归删除\">非递归删除</h5>\n<blockquote>\n<p>待补充</p>\n</blockquote>\n<h4 id=\"查询\">查询</h4>\n<h5 id=\"递归查询\">递归查询</h5>\n<h6 id=\"逻辑-3\">逻辑</h6>\n<ul>\n<li>调用递归查询函数，传入树的根节点<code>root</code>和要查询的值<code>data</code>。</li>\n<li>如果<code>root==nullptr</code>，说明递归到了叶子节点下的空节点，或者整个树为空，即：没有找到目标值。返回<code>false</code>，递归结束。\n<ul>\n<li>如果<code>root-&gt;data==data</code>，找到目标值，返回<code>true</code>，递归结束。</li>\n<li>如果<code>root-&gt;data &gt; data</code>，递归左子树。返回左子树的递归结果。</li>\n<li>如果<code>root-&gt;data &lt; data</code>，递归右子树。返回右子树的递归结果。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"代码实现：\">代码实现：</h6>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询(递归实现)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"type\">const</span> Node *root, <span class=\"type\">const</span> <span class=\"type\">int</span> &amp;data)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;data == data) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data &lt; root-&gt;data) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">search</span>(root-&gt;left, data);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">search</span>(root-&gt;right, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"非递归查询\">非递归查询</h5>\n<p>待补充</p>\n<h4 id=\"核心算法：旋转操作\">核心算法：旋转操作</h4>\n<h5 id=\"左旋\">左旋</h5>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250721222714402.png\"\n                        alt=\"左旋\"\n                 ></p>\n<p>C++实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief root节点失衡，对root和root-&gt;right进行左旋操作。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param root 失衡节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">Node *<span class=\"title\">left_rotate</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">    Node *childR = root-&gt;right;</span><br><span class=\"line\">    Node *childRL = childR-&gt;left;</span><br><span class=\"line\"></span><br><span class=\"line\">    root-&gt;right = childRL;</span><br><span class=\"line\">    childR-&gt;left = root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (childRL != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        childRL-&gt;parent = root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    childR-&gt;parent = root-&gt;parent;</span><br><span class=\"line\">    root-&gt;parent = childR;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (childR-&gt;parent != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childR-&gt;data &lt; childR-&gt;parent-&gt;data) &#123;</span><br><span class=\"line\">            childR-&gt;parent-&gt;left = childR;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            childR-&gt;parent-&gt;right = childR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    root = childR;</span><br><span class=\"line\">    <span class=\"built_in\">update_height</span>(root-&gt;left);</span><br><span class=\"line\">    <span class=\"built_in\">update_height</span>(root-&gt;right);</span><br><span class=\"line\">    <span class=\"built_in\">update_height</span>(root);</span><br><span class=\"line\">    <span class=\"built_in\">update_height</span>(root-&gt;parent);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"右旋\">右旋</h5>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250721222747055.png\"\n                        alt=\"右旋\"\n                 ></p>\n<p>C++实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief root节点失衡，对root和root-&gt;left执行右旋操作。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param root 失衡节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">Node *<span class=\"title\">right_rotate</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">    Node *childL = root-&gt;left;</span><br><span class=\"line\">    Node *childLR = childL-&gt;right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果只使用了height属性，没有使用parent属性，则只需要 下面两行语句 和 root=Lchild 以及 四个update_height()即可完成旋转。</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果使用了parent则需要加入剩余的代码。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    root-&gt;left = childLR;</span><br><span class=\"line\">    childL-&gt;right = root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (childLR != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 说明原root-&gt;left-&gt;right非空，需要更新它的父节点指针。</span></span><br><span class=\"line\">        childLR-&gt;parent = root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    childL-&gt;parent = root-&gt;parent;</span><br><span class=\"line\">    root-&gt;parent = childL;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (childL-&gt;parent != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root-&gt;data &lt; childL-&gt;parent-&gt;data) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 原root节点挂载在root-&gt;parent的左边，旋转后将新树也挂载在左边</span></span><br><span class=\"line\">            childL-&gt;parent-&gt;left = childL;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 否则挂载到右边</span></span><br><span class=\"line\">            childL-&gt;parent-&gt;right = childL;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    root = childL;</span><br><span class=\"line\">    <span class=\"built_in\">update_height</span>(root-&gt;left);</span><br><span class=\"line\">    <span class=\"built_in\">update_height</span>(root-&gt;right);</span><br><span class=\"line\">    <span class=\"built_in\">update_height</span>(root);</span><br><span class=\"line\">    <span class=\"built_in\">update_height</span>(root-&gt;parent); <span class=\"comment\">// 注意此处需要更新root-&gt;parent的高度，因为root-&gt;parent的其中一个子树(也就是root)高度改变，所以会影响root-&gt;parent的高度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"左右双旋\">左右双旋</h5>\n<p>先左旋，再右旋</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250721223004318.png\"\n                        alt=\"左右双旋\"\n                 ></p>\n<p>C++实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief 左右旋</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">Node *<span class=\"title\">left_right_rotate</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先对root-&gt;left和root-&gt;left-&gt;right进行左单旋</span></span><br><span class=\"line\">    root-&gt;left = <span class=\"built_in\">left_rotate</span>(root-&gt;left);</span><br><span class=\"line\">    <span class=\"comment\">// 在对root和root-&gt;left进行右单旋</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">right_rotate</span>(root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"右左双旋\">右左双旋</h5>\n<p>先右旋，再左旋</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250721222927312.png\"\n                        alt=\"右左双旋\"\n                 ></p>\n<p>C++实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief 右左旋</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">Node *<span class=\"title\">right_left_rotate</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先对root-&gt;right和root-&gt;right-&gt;left进行右单旋</span></span><br><span class=\"line\">    root-&gt;right = <span class=\"built_in\">right_rotate</span>(root-&gt;right);</span><br><span class=\"line\">    <span class=\"comment\">// 再对root和root-&gt;right进行左单旋</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">left_rotate</span>(root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"完整代码实现：\">完整代码实现：</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AVLTree</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">AVLNode</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> data;</span><br><span class=\"line\">        <span class=\"type\">int</span> height&#123;<span class=\"number\">1</span>&#125;; <span class=\"comment\">// 节点高度：表示从当前节点到距离他最远的叶子节点的距离+1（叶子节点高度为1，空节点高度为0）</span></span><br><span class=\"line\">        AVLNode *left;</span><br><span class=\"line\">        AVLNode *right;</span><br><span class=\"line\">        AVLNode *parent; <span class=\"comment\">// 当前节点的双亲节点</span></span><br><span class=\"line\">        <span class=\"built_in\">AVLNode</span>(<span class=\"type\">int</span> data) : <span class=\"built_in\">data</span>(data), <span class=\"built_in\">left</span>(<span class=\"literal\">nullptr</span>), <span class=\"built_in\">right</span>(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\">        <span class=\"built_in\">AVLNode</span>(<span class=\"type\">int</span> data, AVLNode *left, AVLNode *right, AVLNode *parent) : <span class=\"built_in\">AVLNode</span>(data) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;parent = parent;</span><br><span class=\"line\">            height = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125; Node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">AVLTree</span>() : <span class=\"built_in\">root</span>(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">AVLTree</span>(<span class=\"type\">int</span> data) &#123;</span><br><span class=\"line\">        root = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">AVLTree</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">delete_tree</span>(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert_node</span><span class=\"params\">(<span class=\"type\">int</span> data)</span> </span>&#123;</span><br><span class=\"line\">        root = <span class=\"built_in\">insert_recursion</span>(root, <span class=\"literal\">nullptr</span>, data); <span class=\"comment\">// 直接调用递归函数进行插入</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 待补充: 非递归的插入方法</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">delete_node</span><span class=\"params\">(<span class=\"type\">int</span> data)</span> </span>&#123;</span><br><span class=\"line\">        root = <span class=\"built_in\">delete_recursion</span>(root, data); <span class=\"comment\">// 调用递归的删除方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 待补充: 非递归的删除方法</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"type\">int</span> data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">search</span>(root, data); <span class=\"comment\">// 调用递归的查询方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 待补充: 非递归的查询方法</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Node *<span class=\"title\">get_root</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    Node *root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 插入(递归实现)</span></span><br><span class=\"line\">    <span class=\"function\">Node *<span class=\"title\">insert_recursion</span><span class=\"params\">(Node *root, Node *parent, <span class=\"type\">int</span> data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新插入一个节点。新插入的节点一定是叶子节点，所以该节点的高度为1（类内初始化）</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(data, <span class=\"literal\">nullptr</span>, <span class=\"literal\">nullptr</span>, parent);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root-&gt;data &gt; data) &#123;</span><br><span class=\"line\">            root-&gt;left = <span class=\"built_in\">insert_recursion</span>(root-&gt;left, root, data);</span><br><span class=\"line\">            <span class=\"comment\">// 插入后判断root是否失衡。因为插入的是root-&gt;left，所以只需要考虑root左边过高的情况</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">abs</span>(<span class=\"built_in\">get_balance</span>(root)) == <span class=\"number\">2</span>) &#123; <span class=\"comment\">// root节点失衡</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root-&gt;left != <span class=\"literal\">nullptr</span> &amp;&amp; data &lt; root-&gt;left-&gt;data) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 执行右单旋操作。</span></span><br><span class=\"line\">                    root = <span class=\"built_in\">right_rotate</span>(root);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 执行左右旋操作。</span></span><br><span class=\"line\">                    root = <span class=\"built_in\">left_right_rotate</span>(root);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root-&gt;data &lt; data) &#123;</span><br><span class=\"line\">            root-&gt;right = <span class=\"built_in\">insert_recursion</span>(root-&gt;right, root, data);</span><br><span class=\"line\">            <span class=\"comment\">// 判断root是否失衡</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">abs</span>(<span class=\"built_in\">get_balance</span>(root)) == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root-&gt;right != <span class=\"literal\">nullptr</span> &amp;&amp; data &gt; root-&gt;right-&gt;data) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 执行左单旋。</span></span><br><span class=\"line\">                    root = <span class=\"built_in\">left_rotate</span>(root);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 执行右左旋。</span></span><br><span class=\"line\">                    root = <span class=\"built_in\">right_left_rotate</span>(root);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ERROR! data already exist.\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 无论插入情况如何，都要在插入后更新root节点的节点高度</span></span><br><span class=\"line\">        <span class=\"built_in\">update_height</span>(root);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除(递归实现)</span></span><br><span class=\"line\">    <span class=\"function\">Node *<span class=\"title\">delete_recursion</span><span class=\"params\">(Node *root, <span class=\"type\">int</span> data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root-&gt;data == data) &#123; <span class=\"comment\">// 找到要删除的节点</span></span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;delete: %d\\n&quot;</span>, data);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root-&gt;right == <span class=\"literal\">nullptr</span> &amp;&amp; root-&gt;left != <span class=\"literal\">nullptr</span>) &#123; <span class=\"comment\">// root只有左孩子，没有右孩子</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root-&gt;parent != <span class=\"literal\">nullptr</span>) &#123; <span class=\"comment\">// 考虑root是否是整个树的根节点</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (root-&gt;data &gt; root-&gt;parent-&gt;data) &#123; <span class=\"comment\">// root是root-&gt;parent的右孩子</span></span><br><span class=\"line\">                            root-&gt;parent-&gt;right = root-&gt;left;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// root是root-&gt;parent的左孩子</span></span><br><span class=\"line\">                            root-&gt;parent-&gt;left = root-&gt;left;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"built_in\">update_height</span>(root-&gt;parent); <span class=\"comment\">// 因为删除了root节点，所以要更新root-&gt;parent节点的高度</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    root-&gt;left-&gt;parent = root-&gt;parent; <span class=\"comment\">// 更新父节点指针</span></span><br><span class=\"line\">                    <span class=\"comment\">// 执行平衡操作? 似乎多余? root-&gt;left本来就是平衡的，只是取代了root，对root-&gt;left的平衡性没有影响。</span></span><br><span class=\"line\">                    <span class=\"comment\">// root-&gt;left = balance(root-&gt;left);</span></span><br><span class=\"line\">                    Node *temp = root-&gt;left;</span><br><span class=\"line\">                    <span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">                    root = temp; <span class=\"comment\">// root节点从树中删除，root-&gt;left取代root</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root-&gt;left == <span class=\"literal\">nullptr</span> &amp;&amp; root-&gt;right != <span class=\"literal\">nullptr</span>) &#123; <span class=\"comment\">// root只有右孩子，没有左孩子</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root-&gt;parent != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (root-&gt;data &gt; root-&gt;parent-&gt;data) &#123;</span><br><span class=\"line\">                            root-&gt;parent-&gt;right = root-&gt;right;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            root-&gt;parent-&gt;left = root-&gt;right;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"built_in\">update_height</span>(root-&gt;parent);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    root-&gt;right-&gt;parent = root-&gt;parent;</span><br><span class=\"line\">                    <span class=\"comment\">// root-&gt;right = balance(root-&gt;right);</span></span><br><span class=\"line\">                    Node *temp = root-&gt;right;</span><br><span class=\"line\">                    <span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">                    root = temp;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root-&gt;left != <span class=\"literal\">nullptr</span> &amp;&amp; root-&gt;right != <span class=\"literal\">nullptr</span>) &#123; <span class=\"comment\">// 左右孩子都有</span></span><br><span class=\"line\">                    Node *temp = root-&gt;right;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (temp-&gt;left != <span class=\"literal\">nullptr</span>) &#123; <span class=\"comment\">// 找到root的右子树中的最小节点</span></span><br><span class=\"line\">                        temp = temp-&gt;left;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"type\">int</span> val = temp-&gt;data;</span><br><span class=\"line\">                    root-&gt;right = <span class=\"built_in\">delete_recursion</span>(root-&gt;right, val);</span><br><span class=\"line\">                    root-&gt;data = val;</span><br><span class=\"line\">                    <span class=\"built_in\">update_height</span>(root); <span class=\"comment\">// root的右子树发生了变动，更新root的高度</span></span><br><span class=\"line\">                    root = <span class=\"built_in\">balance</span>(root);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// root是叶子节点</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root-&gt;parent != <span class=\"literal\">nullptr</span>) &#123; <span class=\"comment\">// root存在父节点</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (root-&gt;parent-&gt;data &lt; root-&gt;data) &#123; <span class=\"comment\">// root是其父亲节点的右孩子</span></span><br><span class=\"line\">                            root-&gt;parent-&gt;right = <span class=\"literal\">nullptr</span>; <span class=\"comment\">// 删去root节点</span></span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// root是其父亲节点的左孩子</span></span><br><span class=\"line\">                            root-&gt;parent-&gt;left = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"built_in\">update_height</span>(root-&gt;parent);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">                    root = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data &lt; root-&gt;data) &#123;</span><br><span class=\"line\">                root-&gt;left = <span class=\"built_in\">delete_recursion</span>(root-&gt;left, data);</span><br><span class=\"line\">                <span class=\"built_in\">update_height</span>(root);</span><br><span class=\"line\">                root = <span class=\"built_in\">balance</span>(root);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                root-&gt;right = <span class=\"built_in\">delete_recursion</span>(root-&gt;right, data);</span><br><span class=\"line\">                <span class=\"built_in\">update_height</span>(root);</span><br><span class=\"line\">                root = <span class=\"built_in\">balance</span>(root);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Key to be deleted could not be found.\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查询(递归实现)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"type\">const</span> Node *root, <span class=\"type\">const</span> <span class=\"type\">int</span> &amp;data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root-&gt;data == data) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data &lt; root-&gt;data) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">search</span>(root-&gt;left, data);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">search</span>(root-&gt;right, data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取节点高度</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">node_height</span><span class=\"params\">(Node *node)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node-&gt;height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新节点高度</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update_height</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// update height</span></span><br><span class=\"line\">            root-&gt;height = std::<span class=\"built_in\">max</span>(<span class=\"built_in\">node_height</span>(root-&gt;left), <span class=\"built_in\">node_height</span>(root-&gt;right)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @brief 获取node节点的平衡因子。</span></span><br><span class=\"line\"><span class=\"comment\">     * @param node 要获取平衡因子的节点</span></span><br><span class=\"line\"><span class=\"comment\">     * @return  - 如果node是非叶子节点，平衡因子 = 左子树高度 - 右子树高度;</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *          - 如果node是叶子节点，平衡因子 = 1</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *          - 如果node是空节点，平衡因子 = 0</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get_balance</span><span class=\"params\">(Node *node)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">node_height</span>(node-&gt;left) - <span class=\"built_in\">node_height</span>(node-&gt;right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @brief root节点失衡，对root和root-&gt;left执行右旋操作。</span></span><br><span class=\"line\"><span class=\"comment\">     * @param root 失衡节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Node *<span class=\"title\">right_rotate</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">        Node *childL = root-&gt;left;</span><br><span class=\"line\">        Node *childLR = childL-&gt;right;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 如果只使用了height属性，没有使用parent属性，则只需要 下面两行语句 和 root=Lchild 以及 四个update_height()即可完成旋转。</span></span><br><span class=\"line\"><span class=\"comment\">         * 如果使用了parent则需要加入剩余的代码。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        root-&gt;left = childLR;</span><br><span class=\"line\">        childL-&gt;right = root;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childLR != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 说明原root-&gt;left-&gt;right非空，需要更新它的父节点指针。</span></span><br><span class=\"line\">            childLR-&gt;parent = root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        childL-&gt;parent = root-&gt;parent;</span><br><span class=\"line\">        root-&gt;parent = childL;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childL-&gt;parent != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root-&gt;data &lt; childL-&gt;parent-&gt;data) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 原root节点挂载在root-&gt;parent的左边，旋转后将新树也挂载在左边</span></span><br><span class=\"line\">                childL-&gt;parent-&gt;left = childL;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 否则挂载到右边</span></span><br><span class=\"line\">                childL-&gt;parent-&gt;right = childL;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        root = childL;</span><br><span class=\"line\">        <span class=\"built_in\">update_height</span>(root-&gt;left);</span><br><span class=\"line\">        <span class=\"built_in\">update_height</span>(root-&gt;right);</span><br><span class=\"line\">        <span class=\"built_in\">update_height</span>(root);</span><br><span class=\"line\">        <span class=\"built_in\">update_height</span>(root-&gt;parent); <span class=\"comment\">// 注意此处需要更新root-&gt;parent的高度，因为root-&gt;parent的其中一个子树(也就是root)高度改变，所以会影响root-&gt;parent的高度</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @brief root节点失衡，对root和root-&gt;right进行左旋操作。</span></span><br><span class=\"line\"><span class=\"comment\">     * @param root 失衡节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Node *<span class=\"title\">left_rotate</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">        Node *childR = root-&gt;right;</span><br><span class=\"line\">        Node *childRL = childR-&gt;left;</span><br><span class=\"line\"></span><br><span class=\"line\">        root-&gt;right = childRL;</span><br><span class=\"line\">        childR-&gt;left = root;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childRL != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            childRL-&gt;parent = root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        childR-&gt;parent = root-&gt;parent;</span><br><span class=\"line\">        root-&gt;parent = childR;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childR-&gt;parent != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (childR-&gt;data &lt; childR-&gt;parent-&gt;data) &#123;</span><br><span class=\"line\">                childR-&gt;parent-&gt;left = childR;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                childR-&gt;parent-&gt;right = childR;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        root = childR;</span><br><span class=\"line\">        <span class=\"built_in\">update_height</span>(root-&gt;left);</span><br><span class=\"line\">        <span class=\"built_in\">update_height</span>(root-&gt;right);</span><br><span class=\"line\">        <span class=\"built_in\">update_height</span>(root);</span><br><span class=\"line\">        <span class=\"built_in\">update_height</span>(root-&gt;parent);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @brief 左右旋</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Node *<span class=\"title\">left_right_rotate</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先对root-&gt;left和root-&gt;left-&gt;right进行左单旋</span></span><br><span class=\"line\">        root-&gt;left = <span class=\"built_in\">left_rotate</span>(root-&gt;left);</span><br><span class=\"line\">        <span class=\"comment\">// 在对root和root-&gt;left进行右单旋</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">right_rotate</span>(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @brief 右左旋</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Node *<span class=\"title\">right_left_rotate</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先对root-&gt;right和root-&gt;right-&gt;left进行右单旋</span></span><br><span class=\"line\">        root-&gt;right = <span class=\"built_in\">right_rotate</span>(root-&gt;right);</span><br><span class=\"line\">        <span class=\"comment\">// 再对root和root-&gt;right进行左单旋</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">left_rotate</span>(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 平衡root节点</span></span><br><span class=\"line\">    <span class=\"function\">Node *<span class=\"title\">balance</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> balance_factor = <span class=\"built_in\">get_balance</span>(root);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">abs</span>(balance_factor) == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (balance_factor &lt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">// root节点的右子树高度 &gt; 左子树高度</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">get_balance</span>(root-&gt;right) == <span class=\"number\">1</span>) &#123; <span class=\"comment\">// root-&gt;right的左子树高度 &gt; 右子树高度，root节点符合RL失衡，执行左右双旋</span></span><br><span class=\"line\">                    root = <span class=\"built_in\">right_left_rotate</span>(root);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// root-&gt;right的右子树高度 &gt; 左子树高度，root节点符合RR失衡，执行左单旋</span></span><br><span class=\"line\">                    root = <span class=\"built_in\">left_rotate</span>(root);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// root节点的右子树高度 &lt; 左子树高度</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">get_balance</span>(root-&gt;left) == <span class=\"number\">1</span>) &#123; <span class=\"comment\">// root-&gt;left的左子树高度 &gt; 右子树高度，root节点符合LL失衡，执行右单旋</span></span><br><span class=\"line\">                    root = <span class=\"built_in\">right_rotate</span>(root);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// root-&gt;right的右子树高度 &gt; 左子树高度，root节点符合LR失衡，执行右左双旋</span></span><br><span class=\"line\">                    root = <span class=\"built_in\">left_right_rotate</span>(root);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">delete_tree</span><span class=\"params\">(AVLTree::Node *root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">delete_tree</span>(root-&gt;left);</span><br><span class=\"line\">        <span class=\"built_in\">delete_tree</span>(root-&gt;right);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;released node: %d\\n&quot;</span>, root-&gt;data);</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printInOrder</span><span class=\"params\">(AVLTree::Node *root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printInOrder</span>(root-&gt;left);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, root-&gt;data);</span><br><span class=\"line\">    <span class=\"built_in\">printInOrder</span>(root-&gt;right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    AVLTree avl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> *arr = <span class=\"keyword\">new</span> <span class=\"type\">int</span>[<span class=\"number\">12</span>]&#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">45</span>, <span class=\"number\">30</span>, <span class=\"number\">12</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>, <span class=\"number\">25</span>, <span class=\"number\">14</span>, <span class=\"number\">52</span>, <span class=\"number\">75</span>, <span class=\"number\">19</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">12</span>; ++i) &#123;</span><br><span class=\"line\">        avl.<span class=\"built_in\">insert_node</span>(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">12</span>; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (avl.<span class=\"built_in\">search</span>(arr[i])) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;find: %d\\n&quot;</span>, arr[i]);</span><br><span class=\"line\">            avl.<span class=\"built_in\">delete_node</span>(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">delete</span>[] arr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"二叉树","date":"2025-07-07T16:00:00.000Z","updated":"2025-07-08T16:00:00.000Z","_content":"\n### 特性：\n\n- 对于一个<mark>非空</mark>二叉树，其**$叶子节点数=度为2的节点数+1$**。\n- 非空二叉树的第k层最多有$2^k-1$个节点。（根节点处于第1层）\n- 高度为H的二叉树最多有$2^H-1$个节点。（高度=层数，根节点在第1层，叶子节点在第H层）（满二叉树）\n- 对**完全二叉树**从上到下，从左到右依次编号$1,2,3,...,n$，则有以下关系：\n  - 最后一个**分支节点**的编号为：$\\left\\lfloor n/2 \\right\\rfloor$。如果$i<\\left\\lfloor n/2\\right\\rfloor$，则节点`i`为**非叶子节点**，否则为**叶子节点**。\n  - 叶子节点只能出现在最后两层。\n  - 若存在度为`1`的节点，则最多只可能有一个。且该节点只有左孩子，没有右孩子。\n  - <mark>若总节点数`n`为奇数，则每个非叶子节点都有左右孩子。如果总节点数`n`为偶数，则编号最大的非叶子节点只有左孩子，没有右孩子。其余非叶子节点都有左右孩子</mark>。\n  - 当`i>1`时，节点`i`的双亲节点编号为：$\\left\\lfloor i/2\\right\\rfloor$。（如果`i==0`，那么节点`i`就是整个树的根节点。）\n","source":"_posts/数据结构/树/BinaryTree.md","raw":"---\ntitle: 二叉树\ndate: 2025-07-08\nupdated: 2025-07-09\ntags: [数据结构, 二叉树, C++, 树]\ncategories: 数据结构\n---\n\n### 特性：\n\n- 对于一个<mark>非空</mark>二叉树，其**$叶子节点数=度为2的节点数+1$**。\n- 非空二叉树的第k层最多有$2^k-1$个节点。（根节点处于第1层）\n- 高度为H的二叉树最多有$2^H-1$个节点。（高度=层数，根节点在第1层，叶子节点在第H层）（满二叉树）\n- 对**完全二叉树**从上到下，从左到右依次编号$1,2,3,...,n$，则有以下关系：\n  - 最后一个**分支节点**的编号为：$\\left\\lfloor n/2 \\right\\rfloor$。如果$i<\\left\\lfloor n/2\\right\\rfloor$，则节点`i`为**非叶子节点**，否则为**叶子节点**。\n  - 叶子节点只能出现在最后两层。\n  - 若存在度为`1`的节点，则最多只可能有一个。且该节点只有左孩子，没有右孩子。\n  - <mark>若总节点数`n`为奇数，则每个非叶子节点都有左右孩子。如果总节点数`n`为偶数，则编号最大的非叶子节点只有左孩子，没有右孩子。其余非叶子节点都有左右孩子</mark>。\n  - 当`i>1`时，节点`i`的双亲节点编号为：$\\left\\lfloor i/2\\right\\rfloor$。（如果`i==0`，那么节点`i`就是整个树的根节点。）\n","slug":"数据结构/树/BinaryTree","published":1,"comments":1,"layout":"post","photos":[],"_id":"cmfktk7f00029c04p7z8h2gcl","content":"<h3 id=\"特性：\">特性：</h3>\n<ul>\n<li>对于一个<mark>非空</mark>二叉树，其**<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E6%95%B0%3D%E5%BA%A6%E4%B8%BA2%E7%9A%84%E8%8A%82%E7%82%B9%E6%95%B0%2B1\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >**。</li>\n<li>非空二叉树的第k层最多有<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=2%5Ek-1\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >个节点。（根节点处于第1层）</li>\n<li>高度为H的二叉树最多有<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=2%5EH-1\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >个节点。（高度=层数，根节点在第1层，叶子节点在第H层）（满二叉树）</li>\n<li>对<strong>完全二叉树</strong>从上到下，从左到右依次编号<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=1%2C2%2C3%2C...%2Cn\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >，则有以下关系：\n<ul>\n<li>最后一个<strong>分支节点</strong>的编号为：<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=%5Cleft%5Clfloor%20n%2F2%20%5Cright%5Crfloor\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >。如果<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=i%3C%5Cleft%5Clfloor%20n%2F2%5Cright%5Crfloor\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >，则节点<code>i</code>为<strong>非叶子节点</strong>，否则为<strong>叶子节点</strong>。</li>\n<li>叶子节点只能出现在最后两层。</li>\n<li>若存在度为<code>1</code>的节点，则最多只可能有一个。且该节点只有左孩子，没有右孩子。</li>\n<li><mark>若总节点数<code>n</code>为奇数，则每个非叶子节点都有左右孩子。如果总节点数<code>n</code>为偶数，则编号最大的非叶子节点只有左孩子，没有右孩子。其余非叶子节点都有左右孩子</mark>。</li>\n<li>当<code>i&gt;1</code>时，节点<code>i</code>的双亲节点编号为：<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=%5Cleft%5Clfloor%20i%2F2%5Cright%5Crfloor\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >。（如果<code>i==0</code>，那么节点<code>i</code>就是整个树的根节点。）</li>\n</ul>\n</li>\n</ul>\n","secretKey":"bb4b2654cdc6db3765f42b6be1d6d7f766a6ffaa43ef879135e01e94cc29b0f8","iv":"8dca3c4a7c94d9e7000ec7cc0bc6b7cb","encryptedPassword":"19b676768981c7cb3fbcdf00c393773f","encryptedContent":"7a58f34c02a1e4498fbdab12979687e0c84c453fc64dc881a8caf3e453ba716c96f88da7918d07f85e4652378b423e517ab675df30449cdf5979ce738def34b2cd08e97893ef91aad3cb17742ce289bd6e15f73eb816f601364b0057bc67e9013d4a55daa2afae028058c715b2c2604f89525141a97971fe15575b5023317a5ccf7ddfd7e65b68ff9a752c00196b4076470e3bbe371899c959612ea9937207ad6e30ba00a5a840ab9d792c8d654e0108c4aa8a12b7f2e4e183abd2b14f72412eeab0c6ad17c1cb1efb851380df1198001c940e13737fd5e5715197e97b62fa1668091ea2b57249c094c5fbfb0b154ee2b8256abf0dca451e8fc2c149ccfaa481353fe27b6b4da20fa0c97a039824d755482580beb81002eee7513b4dd470ad5be7eeba950ebebe2236f66a50334460d2135e15eb3163fbf7184906cb6ff1a7911c1d653d7e6acbe147c3cbb89288e7dd318f954ee0b82d02f5ac714359510ed08ee6647399047800211ed1fd8462a0c5bb2fb4065ff0d9be52faa500cc115516ea93812c4a723197a87a54977d58fe351d2a42c6228df938a14b45c4f6c570783cd908bbf466a9beb6a4e9e40d1be9ff810e164115be74f8f43e1241a5f54bac2993cc58ea129d1a7bf529c72588f0df5688c320b9f9b95bc799f9ec7baa2dfd0bc7b4dea43b1e97cbd387a72045541995bc8115867e2e3548e94d200a4e6447e68323450dbb1e67732b7b7ad01db19d6ae8e54612c92ccf55012fd8f142d9479dc869895f8dec3080a6055ec9fb709872eb9cc70e4648e2562a2766b6becc7c4f30ef114669c87c4a2b0d7f2f9c782f9e349445bc83cf33587f23c19d32807f7b5ed782b7ecc9660b889bd1cc86e48c45f70a4449a6a454853dc7c43c6eb8318d47b141a763955ef39d3656662a4660c6e83877fee8fc3e28bde9a35430be63c9a941816e4d62e24f6a00d90606920a9a40f5d4a761177185f9678d7c6c1e9dd3c585fd04c0f8ac4b4895a23555b8179537a35192b7a0155c39b23b296939e298851d40d24006df0134c26e70590428d463143c26ae8adf59481cd254f16e7e344ebef163d3efa653dd4e95503fc7b9231268e4099b0512edbe3337eb87f34f675d78bc1b6b4ecb61ab763a0bee2c6ffebdaa452f7cc516294c6b2437cac701beba4083be998e07f9a438c1cc98984ee4520db6121768f5c06fe573e28fcd31a7946ee414a70d616d25c3b23c59a0723caf702afbd85dcb55a43592bd7a7fdac88b5c56040c0299ee94bd11d1b7c3840a55ba0318428c073344333af140f96ae658f6dfa844ac956d200d5c2dfe9ed4bda8a3a9dfbbea1390366e597e32d9d54a872860fc412d5a91338f866737c5ca24cd7a2bfef3336ea158809a32289932b8938d859f809bb363582e2de94bd299bfdd721c831c674677e31233e8666aa55e7d4ea2f0238bcf42868e39b33d3600d1a834431838f1f0a868f4dfd6358250b7ce78463a2aef65889eb896d8d2076b53fb9fc25d5b5f3f3a0d5b6a40d34eb69f432ab76362ef9d77d4e614991f02affbe4333ce3e048da1668188fa0859ace0e6dfad058cd0c9457d46b2479d08b7daaee124e6a1e97b5157e96aea07c5a25ed73b266e0d9a5ad5acbacf21f3d309486c628d11768083591883bc210e8ed8301506b654f04ee44bd25279736384e095ad6733f5fde0946740f427f9a78ea41fd84c8bb1bd3ec575f2a2001a8ae6c779ab17fbeb7e7cf48caf455e486029173860258d18733a33ae78b6eccddbdfed7415281af81bb304cbc6c4b41b1eb5dc62523466781650e3020edb74e2061d07857a03b87411fb9ed05aa0723931f4606ced4858d4d1d3e5e01fa3f34c86a595730f137adcf3c33af389df0cf71a0ad42828f5f662e869cffcb92498203739eb678d2cc52da4fa2008c640a9044dc7b88463ef173594bc6730a6d5baecc734a096a309c8d882b8b38c83fe4c9559f6fcab6fe677f98f2ab20aee146bb9ce6288af21ad4ebe8a1a6ae75b935bccfa1d83484a443e94da2063d0a76304b2a2a8904ddfcc76dfdc994b551a21ed88c310bdb326c0531a59d6dde72e37b673c18ffa71dd2df567e8fcdca4a74a46b7d0c6f94c4cc2e3a9257424b61dd35dd2eab29fa272d6fd991c558b604cc458cf5a6720c41c85d35e40a37b119e95230601cd5744d8f301e91857d2f46e04fac531922805693b69110714338d2b72ffa16517cae4d28484b3f51a1fdbbad1c3c9d3d34ce67efb132f563125ac396c7d8f304683adf81bb68eb4aaf151d2df6aefb84fbaf9a0787d2786717f899b9a72984a3fe2c7e82a56cd2290084d12c45875249e5193ad055679685a13d83202d98ad4d9d17d20cca0ddc33dfa7078deb614df3852f511a8c644ef7a492377607fdabafd89e9b919176d41cced335fdf51ed7293b6d5ee85bdc56d811e56b8f248c4521eee329b7afffd64ce98e176ce34f598e1997486e6f0bfafeb206fc89632f4962116ffb46462eef83f6fc449351359873917822dc2dcc367bb639fa8e8b4b1ca979d8c2dbf7c5b254ceeba47b83f580fd11fe89c4005e68a9796cd79a7d6af3b91b015a0859dfb9ca785825fabda1b8e095adb910778890ef11baf645df4f12e3fbfc4c5c2d923d179a1ddd648ff456b3a9146c801e13adb37b37a8c9359ae992befeb33610ad89abf8cbd16083093cad9810d5c8bf18fef62c388708cfbf6753592fdf5dc89d543788e5b7d8a3fb2de69eac3d79542b83546ad4c9492e09a1606f3f2f7c0765868e6697cf8d06398c382ec9fd695788963a7b20bd8dc07281eb2fc513480bc3e1b3e344daed520d7135890006a064a63288e6a2eed333fed33953957ca39c95276c73bc039248124dcc3b11e7576065e410eafed206d4dee27e1d1a4b3e8b1cdd1be754dba7a66cf333aa4a47f8fd7422a33851c9d2e9579a0cfbe9de88daa0a0d7bf46dcb56a85780142fd399f88fbb2f494c2fe35ac693a347f3dc4ecaef6d1a70b2f967e98e8b611e90baa1aec63f587a29d667a65440745062451596ea751f79c7d2e9a3cae531be48ca2f91521118ad57e494c815338b5d219ab170498329ac4937fd27bb956454fedb556deaa98638627cbfab461ea41738a41551598eaf7c1e18afddad538d4bfdf4ce1f4e9838c071e1dcfdcc2f265dad6667aabbe95b9d24e3348f545cc6b3c14c4f76e55d39d9fd3c4b135ab68b7d9137ae8a7ab53f00c74b120726835b7a3f970dd388e8535c69341765142154d38f1553f0abd0be447fd731af22d66c1d5f7ec1dd8156301bd1d655260cd23bb3516e916398faac17553bd8106663fb147fd97c5cedbb25df9039152dd30e6b5edfdba8d62eaf51e6e1ef596fabe69058bd744bfbf2fd52eff932ae57374ba5e7e1b0b6d594f87eec603141fce6db9f105320960b9b40fe39442e8dd812b16c8793c9543960fa092b0b928528f5ce805ae051022c346c109bd2c0b84190ad89652127e16ed6139db3bbf908c22c403be1ca2c23cfdb7e2fc82128b633bf965336e0c","excerpt":"","more":"<h3 id=\"特性：\">特性：</h3>\n<ul>\n<li>对于一个<mark>非空</mark>二叉树，其**<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E6%95%B0%3D%E5%BA%A6%E4%B8%BA2%E7%9A%84%E8%8A%82%E7%82%B9%E6%95%B0%2B1\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >**。</li>\n<li>非空二叉树的第k层最多有<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=2%5Ek-1\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >个节点。（根节点处于第1层）</li>\n<li>高度为H的二叉树最多有<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=2%5EH-1\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >个节点。（高度=层数，根节点在第1层，叶子节点在第H层）（满二叉树）</li>\n<li>对<strong>完全二叉树</strong>从上到下，从左到右依次编号<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=1%2C2%2C3%2C...%2Cn\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >，则有以下关系：\n<ul>\n<li>最后一个<strong>分支节点</strong>的编号为：<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=%5Cleft%5Clfloor%20n%2F2%20%5Cright%5Crfloor\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >。如果<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=i%3C%5Cleft%5Clfloor%20n%2F2%5Cright%5Crfloor\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >，则节点<code>i</code>为<strong>非叶子节点</strong>，否则为<strong>叶子节点</strong>。</li>\n<li>叶子节点只能出现在最后两层。</li>\n<li>若存在度为<code>1</code>的节点，则最多只可能有一个。且该节点只有左孩子，没有右孩子。</li>\n<li><mark>若总节点数<code>n</code>为奇数，则每个非叶子节点都有左右孩子。如果总节点数<code>n</code>为偶数，则编号最大的非叶子节点只有左孩子，没有右孩子。其余非叶子节点都有左右孩子</mark>。</li>\n<li>当<code>i&gt;1</code>时，节点<code>i</code>的双亲节点编号为：<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=%5Cleft%5Clfloor%20i%2F2%5Cright%5Crfloor\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >。（如果<code>i==0</code>，那么节点<code>i</code>就是整个树的根节点。）</li>\n</ul>\n</li>\n</ul>\n"},{"title":"完全二叉树","date":"2025-07-08T16:00:00.000Z","updated":"2025-07-12T16:00:00.000Z","_content":"\n## 完全二叉树\n\n### 基本概念\n\n完全二叉树：基于二叉树，要求除了最下层外，其余各层都是满节点。<mark>并且，最后一层的节点必须尽可能向左放</mark>。\n\n例：下面所有二叉树都<mark>不是</mark>完全二叉树：\n\n<img src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/image2a5cac1b30c8c3c2a29f6b9903c5dfcf.png\" alt=\"例1\" style=\"zoom:67%;\" />\n\n<img src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/image20250709221221457.png\" alt=\"例2\" style=\"zoom:67%;\" />\n\n<img src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageb7853ade89f82f3208931148ebeca351.png\" alt=\"例3\" style=\"zoom:67%;\" />\n\n### 特征\n\n- 叶子节点之可能在最下面的**两层**出现\n- 对任意结点，若其`右分支下的子孙最大层次为L`，则其`左分支下的子孙的最大层次必为L或L+1`。\n- 所有节点中，<mark>最多只有一个节点度为1</mark>（只有一个孩子）。\n\n### 实现\n\n方便起见，<mark>完全二叉树一般用数组实现</mark>而不用链表。\n\n<img src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250709232438563.png\" alt=\"例图\" style=\"zoom:67%;\" />\n\n对于用数组存储的完全二叉树，有以下特点：（**下标从0开始**）（根节点层数为1）\n\n1. 如果一个节点在数组中下标为`i`，则它在树中的层数为<mark> $\\left\\lfloor log_2{(i+1)} \\right\\rfloor$ </mark>（向下取整），它的左子节点在数组中对应的下标为：$2i+1$（如果存在），右子节点在数组中对应的下标为$2i+2$（如果存在）。\n2. 如果完全二叉树总共有`n (n>0)`个节点，那么树高：<mark> $h=\\left \\lfloor log_2{n} \\right \\rfloor+1$ </mark>（或者<mark>$\\left\\lceil log_2{(n+1)} \\right\\rceil$</mark>）。\n3. 如果完全二叉树树高`h`，那么这个完全二叉树最多拥有$2^h-1$个节点。\n\n如果**根节点下标从1开始**，那么第一条中，左子节点对应下标改为：<mark>$2i$</mark>，右子节点对应下标改为：<mark>$2i+1$</mark>。（相比于下标从0开始，直接-1）\n\n#### 用数组构建完全二叉树\n\n>  给定一个数组，用层序便利构建二叉树。然后输出它的中序遍历。\n>\n> 例如：<img src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250710180412848.png\" alt=\"image-20250710180412848\" style=\"zoom: 67%;\" />\n\nC++实现：\n\n```c++\n#include <iostream>\n#include <queue>\n/*\n * 两种方法：\n * 1. 递归\n * 2. 队列\n */\n\nstruct Node {\n    int data;\n    Node *left;\n    Node *right;\n    Node() {\n    }\n    Node(int data, Node *left, Node *right) {\n        this->data = data;\n        this->left = left;\n        this->right = right;\n    }\n\n    virtual void test() {\n        std::cout << \"test\" << std::endl;\n    }\n};\n\nvoid inorderPrintTree(Node *root) {\n    if (root == nullptr) {\n        return;\n    }\n    inorderPrintTree(root->left);\n    std::cout << root->data << \" \";\n    inorderPrintTree(root->right);\n}\n\nvoid destroyTree(Node *root) {\n    if (root == nullptr) {\n        return;\n    }\n    if (root->left != nullptr) {\n        destroyTree(root->left);\n    }\n    if (root->right != nullptr) {\n        destroyTree(root->right);\n    }\n    std::cout << \"destroyed node: \" << root->data << std::endl;\n    delete root;\n}\n\n/**\n * 非递归构建：使用栈\n */\nvoid unRecursion() {\n    int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    Node *root = new Node(arr[0], nullptr, nullptr);\n    Node *point = root;\n\n    std::queue<Node *> que;\n    que.push(point);\n    int index = 1;\n\n    // 构建完全二叉树\n    while (index < size) {\n        point = que.front();\n        que.pop();\n\n        if (index < size) {\n            point->left = new Node(arr[index++], nullptr, nullptr);\n            que.push(point->left);\n        }\n        if (index < size) {\n            point->right = new Node(arr[index++], nullptr, nullptr);\n            que.push(point->right);\n        }\n    }\n\n    // 中序遍历\n    inorderPrintTree(root);\n\n    destroyTree(root);\n}\n\n/**\n * 递归构建\n */\nvoid recursion(int arr[], int i, int n, Node *&root) {\n    if (i < n) {\n        root = new Node(arr[i], nullptr, nullptr);\n        recursion(arr, i * 2 + 1, n, root->left);\n        recursion(arr, i * 2 + 2, n, root->right);\n        return;\n    }\n    root = nullptr;\n}\n\nint main() {\n    // unRecursion();\t\t\t\t// 非递归\n\n    /*\n     * 递归\n     */\n    int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    Node *root = nullptr;\n\n    recursion(arr, 0, size, root);\n\n    inorderPrintTree(root);\n\n    destroyTree(root);\n\n    return 0;\n}\n```\n\n##### 非递归方法构建完全二叉树的思路：\n\n**使用队列保存已经构建好的部分的层序遍历顺序。**\n\n- 首先，构建根节点，然后根节点进入队列。\n- 循环：\n  - 如果队列不为空，从队列中取出节点元素。\n  - 构建该节点的左右子节点（如果存在的话）。并且将构建好的左子节点和右子节点分别入队。也就是将下一层的元素放入队列。\n  - 如果队列为空，跳出循环。\n\n##### 递归方法构建思路：\n\n- 传入节点数组。并且传入当前要构建的节点在数组中的下标。\n- 根据数组中的元素值构建当前节点。\n- 判断左右子节点：(假设完全二叉树根节点对应数组下标为1)\n  - 左子节点(`2i+1`)存在：递归调用函数进行构建\n  - 右子节点(`2i+2`)存在：递归调用函数进行构建\n- 返回当前构建好的节点的指针，便于将不同节点连接在一起。\n\n## 完全N叉树\n\n与完全二叉树类似：\n\n- 除了最后一层，其余各层已经满节点。\n- 最后一层的所有节点尽可能向左边放。\n\n### 由后续遍历构建完全N叉树\n\n给定一个大小为**M**的数组`arr[]` ，其中包含**完整 N 叉树**的后序遍历，任务是生成 N 叉树并打印其**前序遍历**。\n\n例图：\n\n![完全3叉树](https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250713220657917.png)\n\nC++实现：\n\n```cpp\n#include <iostream>\n#include <cmath>\n\n/*\n    根据后续遍历生成完全n叉树，然后输出它的前序遍历\n*/\n\ntemplate <class T>\nclass Node {\npublic:\n    Node(T data);\n\n    // 获取左边第一个子节点\n    Node *get_first_child() {\n        return first_child;\n    }\n\n    // 获取右边下一个兄弟节点\n    Node *get_next_sibling() {\n        return next_sibling;\n    }\n\n    void append_add_sibling(Node *sibling) {\n        if (next_sibling == nullptr) {\n            this->next_sibling = sibling;\n        } else {\n            next_sibling->append_add_sibling(sibling);\n        }\n    }\n\n    void add_child(Node *child) {\n        if (first_child == nullptr) {\n            first_child = child;\n        } else {\n            first_child->append_add_sibling(child);\n        }\n    }\n\n    T get_data() {\n        return this->data;\n    }\n\nprivate:\n    T data;\n    Node *first_child;\n    Node *next_sibling;\n};\n\ntemplate <class T>\nNode<T>::Node(T data) {\n    this->data = data;\n    first_child = nullptr;\n    next_sibling = nullptr;\n}\n\n/**\n * @brief 由后续遍历构造完全N叉树\n * @param post_order_arr 后续遍历数组\n * @param size 数组长度\n * @param k 等同于N叉树的N\n * @return 构造的k叉树的根节点指针\n */\ntemplate <typename T>\nNode<T> *construct_n_binary_tree(T *post_order_arr, int size, int k) {\n    // 构造当前树的根节点\n    Node<T> *root = new Node<T>(post_order_arr[size - 1]);\n    if (size == 1) {\n        // 说明该节点(rot)是叶子节点\n        return root;\n    }\n    // 求树高。根据完全N叉树的特性推导而来\n    int height_of_tree = ceil(log2(size * (k - 1) + 1) / log2(k)) - 1; // 向上取整\n    // 最后一层节点数\n    int nodes_in_last_level = size - (pow(k, height_of_tree) - 1) / (k - 1);\n\n    int tracker = 0;\n    while (tracker != (size - 1)) {\n        /**\n         * pow(k, height_of_tree - 1)： 树高 height_of_tree - 1 的情况下，理论最后一层满节点数量（根节点在第0层）\n         * nodes_in_last_level： 实际最后一层节点数量\n         */\n        int last_level_nodes = (pow(k, height_of_tree - 1) > nodes_in_last_level) ? nodes_in_last_level : pow(k, height_of_tree - 1);\n        /**\n         * （从左到右）以root的孩子为根节点的子树的节点数量\n         * (pow(k, height_of_tree - 1) - 1) / (k - 1): 树高 height_of_tree - 2 情况下，满k叉树的节点数量（注意：树高度+1==总层数）\n         * last_level_nodes：\n         */\n        int nodes_in_next_subtree = ((pow(k, height_of_tree - 1) - 1) / (k - 1)) + last_level_nodes;\n\n        root->add_child(construct_n_binary_tree(post_order_arr + tracker, nodes_in_next_subtree, k));\n        tracker += nodes_in_next_subtree;        // 已经构建的子树的节点数之和\n        nodes_in_last_level -= last_level_nodes; // 去掉已经构建的子树的最后一层的节点\n    }\n    return root;\n}\n\n// 前序遍历n叉树\ntemplate <typename T>\nvoid printPreOrder(Node<T> *root) {\n    if (root == nullptr) {\n        return;\n    }\n    std::cout << root->get_data() << \" \";\n    printPreOrder(root->get_first_child()); // 递归遍历root的左边第一个孩子时，也会将它的兄弟(root的第二, 第三,...第k个孩子)一块遍历\n    printPreOrder(root->get_next_sibling());\n}\n\n// 释放空间\ntemplate <typename T>\nvoid destroy_n_binary_tree(Node<T> *root) {\n    if (root == nullptr) {\n        return;\n    }\n    if (root->get_next_sibling() != nullptr) {\n        destroy_n_binary_tree(root->get_next_sibling());\n    }\n    if (root->get_first_child() != nullptr) {\n        destroy_n_binary_tree(root->get_first_child());\n    }\n    std::cout << \"deleted: \" << root->get_data() << std::endl;\n    delete root;\n}\n\nint main() {\n    int arr[] = {5, 6, 7, 2, 8, 9, 3, 4, 1};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    Node<int> *root = construct_n_binary_tree(arr, size, 3);\n\n    printPreOrder(root);\n\n    destroy_n_binary_tree(root);\n\n    return 0;\n}\n```\n\n正确输出：\n\n```cpp\n1 2 5 6 7 3 8 9 4\n```\n\n##### 由后续遍历构建完全N叉树的思路\n\n核心思路：递归。**难点：如何求得根节点的各个子节点所在子树的节点总数**。\n\n1. 传入要构建的树的后续遍历，以及总节点数。还有树的分叉数：N。\n2. 识别根节点。同时求得树高（推导数学公式）\n3. 循环：\n   1. 计算根节点的第`i`个孩子所在的子树所拥有的节点数（数学方法+逻辑推理）（$1\\leq i\\leq k$）（<mark>此处为了便于理解引入变量`i`，实际实现时循环中并不存在变量`i`</mark>）\n   2. 构建根节点的第`i`个孩子所在的子树（<mark>递归</mark>。传入后续遍历（通过原数组偏移量和节点数））。构建完成后挂载到根节点上。\n   3. 记录已经构建完成的子树的节点数之和（循环累加）\n   4. 如果：已经构建完成的节点树之和<mark>等于</mark>总节点数-1，（如果构建成功只能是等于，不能是大于），那么该树构建完成。\n4. 返回构建的根节点。\n","source":"_posts/数据结构/树/CompleteBinaryTree.md","raw":"---\ntitle: 完全二叉树\ndate: 2025-07-09\nupdated: 2025-07-13\ntags: [数据结构, 二叉树, C++, 树, 完全N叉树]\ncategories: 数据结构\n---\n\n## 完全二叉树\n\n### 基本概念\n\n完全二叉树：基于二叉树，要求除了最下层外，其余各层都是满节点。<mark>并且，最后一层的节点必须尽可能向左放</mark>。\n\n例：下面所有二叉树都<mark>不是</mark>完全二叉树：\n\n<img src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/image2a5cac1b30c8c3c2a29f6b9903c5dfcf.png\" alt=\"例1\" style=\"zoom:67%;\" />\n\n<img src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/image20250709221221457.png\" alt=\"例2\" style=\"zoom:67%;\" />\n\n<img src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageb7853ade89f82f3208931148ebeca351.png\" alt=\"例3\" style=\"zoom:67%;\" />\n\n### 特征\n\n- 叶子节点之可能在最下面的**两层**出现\n- 对任意结点，若其`右分支下的子孙最大层次为L`，则其`左分支下的子孙的最大层次必为L或L+1`。\n- 所有节点中，<mark>最多只有一个节点度为1</mark>（只有一个孩子）。\n\n### 实现\n\n方便起见，<mark>完全二叉树一般用数组实现</mark>而不用链表。\n\n<img src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250709232438563.png\" alt=\"例图\" style=\"zoom:67%;\" />\n\n对于用数组存储的完全二叉树，有以下特点：（**下标从0开始**）（根节点层数为1）\n\n1. 如果一个节点在数组中下标为`i`，则它在树中的层数为<mark> $\\left\\lfloor log_2{(i+1)} \\right\\rfloor$ </mark>（向下取整），它的左子节点在数组中对应的下标为：$2i+1$（如果存在），右子节点在数组中对应的下标为$2i+2$（如果存在）。\n2. 如果完全二叉树总共有`n (n>0)`个节点，那么树高：<mark> $h=\\left \\lfloor log_2{n} \\right \\rfloor+1$ </mark>（或者<mark>$\\left\\lceil log_2{(n+1)} \\right\\rceil$</mark>）。\n3. 如果完全二叉树树高`h`，那么这个完全二叉树最多拥有$2^h-1$个节点。\n\n如果**根节点下标从1开始**，那么第一条中，左子节点对应下标改为：<mark>$2i$</mark>，右子节点对应下标改为：<mark>$2i+1$</mark>。（相比于下标从0开始，直接-1）\n\n#### 用数组构建完全二叉树\n\n>  给定一个数组，用层序便利构建二叉树。然后输出它的中序遍历。\n>\n> 例如：<img src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250710180412848.png\" alt=\"image-20250710180412848\" style=\"zoom: 67%;\" />\n\nC++实现：\n\n```c++\n#include <iostream>\n#include <queue>\n/*\n * 两种方法：\n * 1. 递归\n * 2. 队列\n */\n\nstruct Node {\n    int data;\n    Node *left;\n    Node *right;\n    Node() {\n    }\n    Node(int data, Node *left, Node *right) {\n        this->data = data;\n        this->left = left;\n        this->right = right;\n    }\n\n    virtual void test() {\n        std::cout << \"test\" << std::endl;\n    }\n};\n\nvoid inorderPrintTree(Node *root) {\n    if (root == nullptr) {\n        return;\n    }\n    inorderPrintTree(root->left);\n    std::cout << root->data << \" \";\n    inorderPrintTree(root->right);\n}\n\nvoid destroyTree(Node *root) {\n    if (root == nullptr) {\n        return;\n    }\n    if (root->left != nullptr) {\n        destroyTree(root->left);\n    }\n    if (root->right != nullptr) {\n        destroyTree(root->right);\n    }\n    std::cout << \"destroyed node: \" << root->data << std::endl;\n    delete root;\n}\n\n/**\n * 非递归构建：使用栈\n */\nvoid unRecursion() {\n    int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    Node *root = new Node(arr[0], nullptr, nullptr);\n    Node *point = root;\n\n    std::queue<Node *> que;\n    que.push(point);\n    int index = 1;\n\n    // 构建完全二叉树\n    while (index < size) {\n        point = que.front();\n        que.pop();\n\n        if (index < size) {\n            point->left = new Node(arr[index++], nullptr, nullptr);\n            que.push(point->left);\n        }\n        if (index < size) {\n            point->right = new Node(arr[index++], nullptr, nullptr);\n            que.push(point->right);\n        }\n    }\n\n    // 中序遍历\n    inorderPrintTree(root);\n\n    destroyTree(root);\n}\n\n/**\n * 递归构建\n */\nvoid recursion(int arr[], int i, int n, Node *&root) {\n    if (i < n) {\n        root = new Node(arr[i], nullptr, nullptr);\n        recursion(arr, i * 2 + 1, n, root->left);\n        recursion(arr, i * 2 + 2, n, root->right);\n        return;\n    }\n    root = nullptr;\n}\n\nint main() {\n    // unRecursion();\t\t\t\t// 非递归\n\n    /*\n     * 递归\n     */\n    int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    Node *root = nullptr;\n\n    recursion(arr, 0, size, root);\n\n    inorderPrintTree(root);\n\n    destroyTree(root);\n\n    return 0;\n}\n```\n\n##### 非递归方法构建完全二叉树的思路：\n\n**使用队列保存已经构建好的部分的层序遍历顺序。**\n\n- 首先，构建根节点，然后根节点进入队列。\n- 循环：\n  - 如果队列不为空，从队列中取出节点元素。\n  - 构建该节点的左右子节点（如果存在的话）。并且将构建好的左子节点和右子节点分别入队。也就是将下一层的元素放入队列。\n  - 如果队列为空，跳出循环。\n\n##### 递归方法构建思路：\n\n- 传入节点数组。并且传入当前要构建的节点在数组中的下标。\n- 根据数组中的元素值构建当前节点。\n- 判断左右子节点：(假设完全二叉树根节点对应数组下标为1)\n  - 左子节点(`2i+1`)存在：递归调用函数进行构建\n  - 右子节点(`2i+2`)存在：递归调用函数进行构建\n- 返回当前构建好的节点的指针，便于将不同节点连接在一起。\n\n## 完全N叉树\n\n与完全二叉树类似：\n\n- 除了最后一层，其余各层已经满节点。\n- 最后一层的所有节点尽可能向左边放。\n\n### 由后续遍历构建完全N叉树\n\n给定一个大小为**M**的数组`arr[]` ，其中包含**完整 N 叉树**的后序遍历，任务是生成 N 叉树并打印其**前序遍历**。\n\n例图：\n\n![完全3叉树](https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250713220657917.png)\n\nC++实现：\n\n```cpp\n#include <iostream>\n#include <cmath>\n\n/*\n    根据后续遍历生成完全n叉树，然后输出它的前序遍历\n*/\n\ntemplate <class T>\nclass Node {\npublic:\n    Node(T data);\n\n    // 获取左边第一个子节点\n    Node *get_first_child() {\n        return first_child;\n    }\n\n    // 获取右边下一个兄弟节点\n    Node *get_next_sibling() {\n        return next_sibling;\n    }\n\n    void append_add_sibling(Node *sibling) {\n        if (next_sibling == nullptr) {\n            this->next_sibling = sibling;\n        } else {\n            next_sibling->append_add_sibling(sibling);\n        }\n    }\n\n    void add_child(Node *child) {\n        if (first_child == nullptr) {\n            first_child = child;\n        } else {\n            first_child->append_add_sibling(child);\n        }\n    }\n\n    T get_data() {\n        return this->data;\n    }\n\nprivate:\n    T data;\n    Node *first_child;\n    Node *next_sibling;\n};\n\ntemplate <class T>\nNode<T>::Node(T data) {\n    this->data = data;\n    first_child = nullptr;\n    next_sibling = nullptr;\n}\n\n/**\n * @brief 由后续遍历构造完全N叉树\n * @param post_order_arr 后续遍历数组\n * @param size 数组长度\n * @param k 等同于N叉树的N\n * @return 构造的k叉树的根节点指针\n */\ntemplate <typename T>\nNode<T> *construct_n_binary_tree(T *post_order_arr, int size, int k) {\n    // 构造当前树的根节点\n    Node<T> *root = new Node<T>(post_order_arr[size - 1]);\n    if (size == 1) {\n        // 说明该节点(rot)是叶子节点\n        return root;\n    }\n    // 求树高。根据完全N叉树的特性推导而来\n    int height_of_tree = ceil(log2(size * (k - 1) + 1) / log2(k)) - 1; // 向上取整\n    // 最后一层节点数\n    int nodes_in_last_level = size - (pow(k, height_of_tree) - 1) / (k - 1);\n\n    int tracker = 0;\n    while (tracker != (size - 1)) {\n        /**\n         * pow(k, height_of_tree - 1)： 树高 height_of_tree - 1 的情况下，理论最后一层满节点数量（根节点在第0层）\n         * nodes_in_last_level： 实际最后一层节点数量\n         */\n        int last_level_nodes = (pow(k, height_of_tree - 1) > nodes_in_last_level) ? nodes_in_last_level : pow(k, height_of_tree - 1);\n        /**\n         * （从左到右）以root的孩子为根节点的子树的节点数量\n         * (pow(k, height_of_tree - 1) - 1) / (k - 1): 树高 height_of_tree - 2 情况下，满k叉树的节点数量（注意：树高度+1==总层数）\n         * last_level_nodes：\n         */\n        int nodes_in_next_subtree = ((pow(k, height_of_tree - 1) - 1) / (k - 1)) + last_level_nodes;\n\n        root->add_child(construct_n_binary_tree(post_order_arr + tracker, nodes_in_next_subtree, k));\n        tracker += nodes_in_next_subtree;        // 已经构建的子树的节点数之和\n        nodes_in_last_level -= last_level_nodes; // 去掉已经构建的子树的最后一层的节点\n    }\n    return root;\n}\n\n// 前序遍历n叉树\ntemplate <typename T>\nvoid printPreOrder(Node<T> *root) {\n    if (root == nullptr) {\n        return;\n    }\n    std::cout << root->get_data() << \" \";\n    printPreOrder(root->get_first_child()); // 递归遍历root的左边第一个孩子时，也会将它的兄弟(root的第二, 第三,...第k个孩子)一块遍历\n    printPreOrder(root->get_next_sibling());\n}\n\n// 释放空间\ntemplate <typename T>\nvoid destroy_n_binary_tree(Node<T> *root) {\n    if (root == nullptr) {\n        return;\n    }\n    if (root->get_next_sibling() != nullptr) {\n        destroy_n_binary_tree(root->get_next_sibling());\n    }\n    if (root->get_first_child() != nullptr) {\n        destroy_n_binary_tree(root->get_first_child());\n    }\n    std::cout << \"deleted: \" << root->get_data() << std::endl;\n    delete root;\n}\n\nint main() {\n    int arr[] = {5, 6, 7, 2, 8, 9, 3, 4, 1};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    Node<int> *root = construct_n_binary_tree(arr, size, 3);\n\n    printPreOrder(root);\n\n    destroy_n_binary_tree(root);\n\n    return 0;\n}\n```\n\n正确输出：\n\n```cpp\n1 2 5 6 7 3 8 9 4\n```\n\n##### 由后续遍历构建完全N叉树的思路\n\n核心思路：递归。**难点：如何求得根节点的各个子节点所在子树的节点总数**。\n\n1. 传入要构建的树的后续遍历，以及总节点数。还有树的分叉数：N。\n2. 识别根节点。同时求得树高（推导数学公式）\n3. 循环：\n   1. 计算根节点的第`i`个孩子所在的子树所拥有的节点数（数学方法+逻辑推理）（$1\\leq i\\leq k$）（<mark>此处为了便于理解引入变量`i`，实际实现时循环中并不存在变量`i`</mark>）\n   2. 构建根节点的第`i`个孩子所在的子树（<mark>递归</mark>。传入后续遍历（通过原数组偏移量和节点数））。构建完成后挂载到根节点上。\n   3. 记录已经构建完成的子树的节点数之和（循环累加）\n   4. 如果：已经构建完成的节点树之和<mark>等于</mark>总节点数-1，（如果构建成功只能是等于，不能是大于），那么该树构建完成。\n4. 返回构建的根节点。\n","slug":"数据结构/树/CompleteBinaryTree","published":1,"comments":1,"layout":"post","photos":[],"_id":"cmfktk7f70045c04p5o9ibgam","content":"<h2 id=\"完全二叉树\">完全二叉树</h2>\n<h3 id=\"基本概念\">基本概念</h3>\n<p>完全二叉树：基于二叉树，要求除了最下层外，其余各层都是满节点。<mark>并且，最后一层的节点必须尽可能向左放</mark>。</p>\n<p>例：下面所有二叉树都<mark>不是</mark>完全二叉树：</p>\n<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/image2a5cac1b30c8c3c2a29f6b9903c5dfcf.png\"\n                         alt=\"例1\" style=\"zoom:67%;\" \n                 >\n<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/image20250709221221457.png\"\n                         alt=\"例2\" style=\"zoom:67%;\" \n                 >\n<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageb7853ade89f82f3208931148ebeca351.png\"\n                         alt=\"例3\" style=\"zoom:67%;\" \n                 >\n<h3 id=\"特征\">特征</h3>\n<ul>\n<li>叶子节点之可能在最下面的<strong>两层</strong>出现</li>\n<li>对任意结点，若其<code>右分支下的子孙最大层次为L</code>，则其<code>左分支下的子孙的最大层次必为L或L+1</code>。</li>\n<li>所有节点中，<mark>最多只有一个节点度为1</mark>（只有一个孩子）。</li>\n</ul>\n<h3 id=\"实现\">实现</h3>\n<p>方便起见，<mark>完全二叉树一般用数组实现</mark>而不用链表。</p>\n<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250709232438563.png\"\n                         alt=\"例图\" style=\"zoom:67%;\" \n                 >\n<p>对于用数组存储的完全二叉树，有以下特点：（<strong>下标从0开始</strong>）（根节点层数为1）</p>\n<ol>\n<li>如果一个节点在数组中下标为<code>i</code>，则它在树中的层数为<mark> <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=%5Cleft%5Clfloor%20log_2%7B%28i%2B1%29%7D%20%5Cright%5Crfloor\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 > </mark>（向下取整），它的左子节点在数组中对应的下标为：<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=2i%2B1\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >（如果存在），右子节点在数组中对应的下标为<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=2i%2B2\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >（如果存在）。</li>\n<li>如果完全二叉树总共有<code>n (n&gt;0)</code>个节点，那么树高：<mark> <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=h%3D%5Cleft%20%5Clfloor%20log_2%7Bn%7D%20%5Cright%20%5Crfloor%2B1\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 > </mark>（或者<mark><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=%5Cleft%5Clceil%20log_2%7B%28n%2B1%29%7D%20%5Cright%5Crceil\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 ></mark>）。</li>\n<li>如果完全二叉树树高<code>h</code>，那么这个完全二叉树最多拥有<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=2%5Eh-1\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >个节点。</li>\n</ol>\n<p>如果<strong>根节点下标从1开始</strong>，那么第一条中，左子节点对应下标改为：<mark><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=2i\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 ></mark>，右子节点对应下标改为：<mark><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=2i%2B1\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 ></mark>。（相比于下标从0开始，直接-1）</p>\n<h4 id=\"用数组构建完全二叉树\">用数组构建完全二叉树</h4>\n<blockquote>\n<p>给定一个数组，用层序便利构建二叉树。然后输出它的中序遍历。</p>\n<p>例如：<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250710180412848.png\"\n                         alt=\"image-20250710180412848\" style=\"zoom: 67%;\" \n                 ></p>\n</blockquote>\n<p>C++实现：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 两种方法：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 递归</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 队列</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    Node *left;</span><br><span class=\"line\">    Node *right;</span><br><span class=\"line\">    <span class=\"built_in\">Node</span>() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> data, Node *left, Node *right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;data = data;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;left = left;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;right = right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;test&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">inorderPrintTree</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">inorderPrintTree</span>(root-&gt;left);</span><br><span class=\"line\">    std::cout &lt;&lt; root-&gt;data &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">inorderPrintTree</span>(root-&gt;right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">destroyTree</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;left != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">destroyTree</span>(root-&gt;left);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;right != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">destroyTree</span>(root-&gt;right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;destroyed node: &quot;</span> &lt;&lt; root-&gt;data &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 非递归构建：使用栈</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">unRecursion</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> arr[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> size = <span class=\"built_in\">sizeof</span>(arr) / <span class=\"built_in\">sizeof</span>(arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    Node *root = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(arr[<span class=\"number\">0</span>], <span class=\"literal\">nullptr</span>, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">    Node *point = root;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::queue&lt;Node *&gt; que;</span><br><span class=\"line\">    que.<span class=\"built_in\">push</span>(point);</span><br><span class=\"line\">    <span class=\"type\">int</span> index = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构建完全二叉树</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (index &lt; size) &#123;</span><br><span class=\"line\">        point = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; size) &#123;</span><br><span class=\"line\">            point-&gt;left = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(arr[index++], <span class=\"literal\">nullptr</span>, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">            que.<span class=\"built_in\">push</span>(point-&gt;left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; size) &#123;</span><br><span class=\"line\">            point-&gt;right = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(arr[index++], <span class=\"literal\">nullptr</span>, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">            que.<span class=\"built_in\">push</span>(point-&gt;right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 中序遍历</span></span><br><span class=\"line\">    <span class=\"built_in\">inorderPrintTree</span>(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">destroyTree</span>(root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 递归构建</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">recursion</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> i, <span class=\"type\">int</span> n, Node *&amp;root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; n) &#123;</span><br><span class=\"line\">        root = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(arr[i], <span class=\"literal\">nullptr</span>, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">        <span class=\"built_in\">recursion</span>(arr, i * <span class=\"number\">2</span> + <span class=\"number\">1</span>, n, root-&gt;left);</span><br><span class=\"line\">        <span class=\"built_in\">recursion</span>(arr, i * <span class=\"number\">2</span> + <span class=\"number\">2</span>, n, root-&gt;right);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// unRecursion();\t\t\t\t// 非递归</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 递归</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> arr[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> size = <span class=\"built_in\">sizeof</span>(arr) / <span class=\"built_in\">sizeof</span>(arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    Node *root = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">recursion</span>(arr, <span class=\"number\">0</span>, size, root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">inorderPrintTree</span>(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">destroyTree</span>(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"非递归方法构建完全二叉树的思路：\">非递归方法构建完全二叉树的思路：</h5>\n<p><strong>使用队列保存已经构建好的部分的层序遍历顺序。</strong></p>\n<ul>\n<li>首先，构建根节点，然后根节点进入队列。</li>\n<li>循环：\n<ul>\n<li>如果队列不为空，从队列中取出节点元素。</li>\n<li>构建该节点的左右子节点（如果存在的话）。并且将构建好的左子节点和右子节点分别入队。也就是将下一层的元素放入队列。</li>\n<li>如果队列为空，跳出循环。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"递归方法构建思路：\">递归方法构建思路：</h5>\n<ul>\n<li>传入节点数组。并且传入当前要构建的节点在数组中的下标。</li>\n<li>根据数组中的元素值构建当前节点。</li>\n<li>判断左右子节点：(假设完全二叉树根节点对应数组下标为1)\n<ul>\n<li>左子节点(<code>2i+1</code>)存在：递归调用函数进行构建</li>\n<li>右子节点(<code>2i+2</code>)存在：递归调用函数进行构建</li>\n</ul>\n</li>\n<li>返回当前构建好的节点的指针，便于将不同节点连接在一起。</li>\n</ul>\n<h2 id=\"完全N叉树\">完全N叉树</h2>\n<p>与完全二叉树类似：</p>\n<ul>\n<li>除了最后一层，其余各层已经满节点。</li>\n<li>最后一层的所有节点尽可能向左边放。</li>\n</ul>\n<h3 id=\"由后续遍历构建完全N叉树\">由后续遍历构建完全N叉树</h3>\n<p>给定一个大小为<strong>M</strong>的数组<code>arr[]</code> ，其中包含<strong>完整 N 叉树</strong>的后序遍历，任务是生成 N 叉树并打印其<strong>前序遍历</strong>。</p>\n<p>例图：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250713220657917.png\"\n                        alt=\"完全3叉树\"\n                 ></p>\n<p>C++实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    根据后续遍历生成完全n叉树，然后输出它的前序遍历</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(T data);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取左边第一个子节点</span></span><br><span class=\"line\">    <span class=\"function\">Node *<span class=\"title\">get_first_child</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> first_child;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取右边下一个兄弟节点</span></span><br><span class=\"line\">    <span class=\"function\">Node *<span class=\"title\">get_next_sibling</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next_sibling;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">append_add_sibling</span><span class=\"params\">(Node *sibling)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (next_sibling == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;next_sibling = sibling;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            next_sibling-&gt;<span class=\"built_in\">append_add_sibling</span>(sibling);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add_child</span><span class=\"params\">(Node *child)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first_child == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            first_child = child;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            first_child-&gt;<span class=\"built_in\">append_add_sibling</span>(child);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">get_data</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    T data;</span><br><span class=\"line\">    Node *first_child;</span><br><span class=\"line\">    Node *next_sibling;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">Node&lt;T&gt;::<span class=\"built_in\">Node</span>(T data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;data = data;</span><br><span class=\"line\">    first_child = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    next_sibling = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief 由后续遍历构造完全N叉树</span></span><br><span class=\"line\"><span class=\"comment\"> * @param post_order_arr 后续遍历数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @param size 数组长度</span></span><br><span class=\"line\"><span class=\"comment\"> * @param k 等同于N叉树的N</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 构造的k叉树的根节点指针</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\">Node&lt;T&gt; *<span class=\"title\">construct_n_binary_tree</span><span class=\"params\">(T *post_order_arr, <span class=\"type\">int</span> size, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 构造当前树的根节点</span></span><br><span class=\"line\">    Node&lt;T&gt; *root = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>&lt;T&gt;(post_order_arr[size - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 说明该节点(rot)是叶子节点</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 求树高。根据完全N叉树的特性推导而来</span></span><br><span class=\"line\">    <span class=\"type\">int</span> height_of_tree = <span class=\"built_in\">ceil</span>(<span class=\"built_in\">log2</span>(size * (k - <span class=\"number\">1</span>) + <span class=\"number\">1</span>) / <span class=\"built_in\">log2</span>(k)) - <span class=\"number\">1</span>; <span class=\"comment\">// 向上取整</span></span><br><span class=\"line\">    <span class=\"comment\">// 最后一层节点数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> nodes_in_last_level = size - (<span class=\"built_in\">pow</span>(k, height_of_tree) - <span class=\"number\">1</span>) / (k - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> tracker = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tracker != (size - <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * pow(k, height_of_tree - 1)： 树高 height_of_tree - 1 的情况下，理论最后一层满节点数量（根节点在第0层）</span></span><br><span class=\"line\"><span class=\"comment\">         * nodes_in_last_level： 实际最后一层节点数量</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">int</span> last_level_nodes = (<span class=\"built_in\">pow</span>(k, height_of_tree - <span class=\"number\">1</span>) &gt; nodes_in_last_level) ? nodes_in_last_level : <span class=\"built_in\">pow</span>(k, height_of_tree - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * （从左到右）以root的孩子为根节点的子树的节点数量</span></span><br><span class=\"line\"><span class=\"comment\">         * (pow(k, height_of_tree - 1) - 1) / (k - 1): 树高 height_of_tree - 2 情况下，满k叉树的节点数量（注意：树高度+1==总层数）</span></span><br><span class=\"line\"><span class=\"comment\">         * last_level_nodes：</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">int</span> nodes_in_next_subtree = ((<span class=\"built_in\">pow</span>(k, height_of_tree - <span class=\"number\">1</span>) - <span class=\"number\">1</span>) / (k - <span class=\"number\">1</span>)) + last_level_nodes;</span><br><span class=\"line\"></span><br><span class=\"line\">        root-&gt;<span class=\"built_in\">add_child</span>(<span class=\"built_in\">construct_n_binary_tree</span>(post_order_arr + tracker, nodes_in_next_subtree, k));</span><br><span class=\"line\">        tracker += nodes_in_next_subtree;        <span class=\"comment\">// 已经构建的子树的节点数之和</span></span><br><span class=\"line\">        nodes_in_last_level -= last_level_nodes; <span class=\"comment\">// 去掉已经构建的子树的最后一层的节点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 前序遍历n叉树</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printPreOrder</span><span class=\"params\">(Node&lt;T&gt; *root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    std::cout &lt;&lt; root-&gt;<span class=\"built_in\">get_data</span>() &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printPreOrder</span>(root-&gt;<span class=\"built_in\">get_first_child</span>()); <span class=\"comment\">// 递归遍历root的左边第一个孩子时，也会将它的兄弟(root的第二, 第三,...第k个孩子)一块遍历</span></span><br><span class=\"line\">    <span class=\"built_in\">printPreOrder</span>(root-&gt;<span class=\"built_in\">get_next_sibling</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 释放空间</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">destroy_n_binary_tree</span><span class=\"params\">(Node&lt;T&gt; *root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;<span class=\"built_in\">get_next_sibling</span>() != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">destroy_n_binary_tree</span>(root-&gt;<span class=\"built_in\">get_next_sibling</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;<span class=\"built_in\">get_first_child</span>() != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">destroy_n_binary_tree</span>(root-&gt;<span class=\"built_in\">get_first_child</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;deleted: &quot;</span> &lt;&lt; root-&gt;<span class=\"built_in\">get_data</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> arr[] = &#123;<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> size = <span class=\"built_in\">sizeof</span>(arr) / <span class=\"built_in\">sizeof</span>(arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    Node&lt;<span class=\"type\">int</span>&gt; *root = <span class=\"built_in\">construct_n_binary_tree</span>(arr, size, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printPreOrder</span>(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">destroy_n_binary_tree</span>(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正确输出：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">3</span> <span class=\"number\">8</span> <span class=\"number\">9</span> <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"由后续遍历构建完全N叉树的思路\">由后续遍历构建完全N叉树的思路</h5>\n<p>核心思路：递归。<strong>难点：如何求得根节点的各个子节点所在子树的节点总数</strong>。</p>\n<ol>\n<li>传入要构建的树的后续遍历，以及总节点数。还有树的分叉数：N。</li>\n<li>识别根节点。同时求得树高（推导数学公式）</li>\n<li>循环：\n<ol>\n<li>计算根节点的第<code>i</code>个孩子所在的子树所拥有的节点数（数学方法+逻辑推理）（<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=1%5Cleq%20i%5Cleq%20k\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >）（<mark>此处为了便于理解引入变量<code>i</code>，实际实现时循环中并不存在变量<code>i</code></mark>）</li>\n<li>构建根节点的第<code>i</code>个孩子所在的子树（<mark>递归</mark>。传入后续遍历（通过原数组偏移量和节点数））。构建完成后挂载到根节点上。</li>\n<li>记录已经构建完成的子树的节点数之和（循环累加）</li>\n<li>如果：已经构建完成的节点树之和<mark>等于</mark>总节点数-1，（如果构建成功只能是等于，不能是大于），那么该树构建完成。</li>\n</ol>\n</li>\n<li>返回构建的根节点。</li>\n</ol>\n","secretKey":"b3a091d32c23caf0434cb7d5352de6ee4ddfa22d260ea3eba055cde9755b979c","iv":"d3ab561f57453f64896202093e7fd571","encryptedPassword":"f4150ded8051acbca38c08ebb00a5a7e","encryptedContent":"","excerpt":"","more":"<h2 id=\"完全二叉树\">完全二叉树</h2>\n<h3 id=\"基本概念\">基本概念</h3>\n<p>完全二叉树：基于二叉树，要求除了最下层外，其余各层都是满节点。<mark>并且，最后一层的节点必须尽可能向左放</mark>。</p>\n<p>例：下面所有二叉树都<mark>不是</mark>完全二叉树：</p>\n<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/image2a5cac1b30c8c3c2a29f6b9903c5dfcf.png\"\n                         alt=\"例1\" style=\"zoom:67%;\" \n                 >\n<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/image20250709221221457.png\"\n                         alt=\"例2\" style=\"zoom:67%;\" \n                 >\n<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageb7853ade89f82f3208931148ebeca351.png\"\n                         alt=\"例3\" style=\"zoom:67%;\" \n                 >\n<h3 id=\"特征\">特征</h3>\n<ul>\n<li>叶子节点之可能在最下面的<strong>两层</strong>出现</li>\n<li>对任意结点，若其<code>右分支下的子孙最大层次为L</code>，则其<code>左分支下的子孙的最大层次必为L或L+1</code>。</li>\n<li>所有节点中，<mark>最多只有一个节点度为1</mark>（只有一个孩子）。</li>\n</ul>\n<h3 id=\"实现\">实现</h3>\n<p>方便起见，<mark>完全二叉树一般用数组实现</mark>而不用链表。</p>\n<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250709232438563.png\"\n                         alt=\"例图\" style=\"zoom:67%;\" \n                 >\n<p>对于用数组存储的完全二叉树，有以下特点：（<strong>下标从0开始</strong>）（根节点层数为1）</p>\n<ol>\n<li>如果一个节点在数组中下标为<code>i</code>，则它在树中的层数为<mark> <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=%5Cleft%5Clfloor%20log_2%7B%28i%2B1%29%7D%20%5Cright%5Crfloor\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 > </mark>（向下取整），它的左子节点在数组中对应的下标为：<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=2i%2B1\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >（如果存在），右子节点在数组中对应的下标为<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=2i%2B2\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >（如果存在）。</li>\n<li>如果完全二叉树总共有<code>n (n&gt;0)</code>个节点，那么树高：<mark> <img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=h%3D%5Cleft%20%5Clfloor%20log_2%7Bn%7D%20%5Cright%20%5Crfloor%2B1\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 > </mark>（或者<mark><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=%5Cleft%5Clceil%20log_2%7B%28n%2B1%29%7D%20%5Cright%5Crceil\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 ></mark>）。</li>\n<li>如果完全二叉树树高<code>h</code>，那么这个完全二叉树最多拥有<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=2%5Eh-1\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >个节点。</li>\n</ol>\n<p>如果<strong>根节点下标从1开始</strong>，那么第一条中，左子节点对应下标改为：<mark><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=2i\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 ></mark>，右子节点对应下标改为：<mark><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=2i%2B1\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 ></mark>。（相比于下标从0开始，直接-1）</p>\n<h4 id=\"用数组构建完全二叉树\">用数组构建完全二叉树</h4>\n<blockquote>\n<p>给定一个数组，用层序便利构建二叉树。然后输出它的中序遍历。</p>\n<p>例如：<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250710180412848.png\"\n                         alt=\"image-20250710180412848\" style=\"zoom: 67%;\" \n                 ></p>\n</blockquote>\n<p>C++实现：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 两种方法：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 递归</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 队列</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    Node *left;</span><br><span class=\"line\">    Node *right;</span><br><span class=\"line\">    <span class=\"built_in\">Node</span>() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> data, Node *left, Node *right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;data = data;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;left = left;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;right = right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;test&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">inorderPrintTree</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">inorderPrintTree</span>(root-&gt;left);</span><br><span class=\"line\">    std::cout &lt;&lt; root-&gt;data &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">inorderPrintTree</span>(root-&gt;right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">destroyTree</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;left != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">destroyTree</span>(root-&gt;left);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;right != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">destroyTree</span>(root-&gt;right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;destroyed node: &quot;</span> &lt;&lt; root-&gt;data &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 非递归构建：使用栈</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">unRecursion</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> arr[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> size = <span class=\"built_in\">sizeof</span>(arr) / <span class=\"built_in\">sizeof</span>(arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    Node *root = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(arr[<span class=\"number\">0</span>], <span class=\"literal\">nullptr</span>, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">    Node *point = root;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::queue&lt;Node *&gt; que;</span><br><span class=\"line\">    que.<span class=\"built_in\">push</span>(point);</span><br><span class=\"line\">    <span class=\"type\">int</span> index = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构建完全二叉树</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (index &lt; size) &#123;</span><br><span class=\"line\">        point = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; size) &#123;</span><br><span class=\"line\">            point-&gt;left = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(arr[index++], <span class=\"literal\">nullptr</span>, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">            que.<span class=\"built_in\">push</span>(point-&gt;left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; size) &#123;</span><br><span class=\"line\">            point-&gt;right = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(arr[index++], <span class=\"literal\">nullptr</span>, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">            que.<span class=\"built_in\">push</span>(point-&gt;right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 中序遍历</span></span><br><span class=\"line\">    <span class=\"built_in\">inorderPrintTree</span>(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">destroyTree</span>(root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 递归构建</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">recursion</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> i, <span class=\"type\">int</span> n, Node *&amp;root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; n) &#123;</span><br><span class=\"line\">        root = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(arr[i], <span class=\"literal\">nullptr</span>, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">        <span class=\"built_in\">recursion</span>(arr, i * <span class=\"number\">2</span> + <span class=\"number\">1</span>, n, root-&gt;left);</span><br><span class=\"line\">        <span class=\"built_in\">recursion</span>(arr, i * <span class=\"number\">2</span> + <span class=\"number\">2</span>, n, root-&gt;right);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// unRecursion();\t\t\t\t// 非递归</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 递归</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> arr[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> size = <span class=\"built_in\">sizeof</span>(arr) / <span class=\"built_in\">sizeof</span>(arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    Node *root = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">recursion</span>(arr, <span class=\"number\">0</span>, size, root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">inorderPrintTree</span>(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">destroyTree</span>(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"非递归方法构建完全二叉树的思路：\">非递归方法构建完全二叉树的思路：</h5>\n<p><strong>使用队列保存已经构建好的部分的层序遍历顺序。</strong></p>\n<ul>\n<li>首先，构建根节点，然后根节点进入队列。</li>\n<li>循环：\n<ul>\n<li>如果队列不为空，从队列中取出节点元素。</li>\n<li>构建该节点的左右子节点（如果存在的话）。并且将构建好的左子节点和右子节点分别入队。也就是将下一层的元素放入队列。</li>\n<li>如果队列为空，跳出循环。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"递归方法构建思路：\">递归方法构建思路：</h5>\n<ul>\n<li>传入节点数组。并且传入当前要构建的节点在数组中的下标。</li>\n<li>根据数组中的元素值构建当前节点。</li>\n<li>判断左右子节点：(假设完全二叉树根节点对应数组下标为1)\n<ul>\n<li>左子节点(<code>2i+1</code>)存在：递归调用函数进行构建</li>\n<li>右子节点(<code>2i+2</code>)存在：递归调用函数进行构建</li>\n</ul>\n</li>\n<li>返回当前构建好的节点的指针，便于将不同节点连接在一起。</li>\n</ul>\n<h2 id=\"完全N叉树\">完全N叉树</h2>\n<p>与完全二叉树类似：</p>\n<ul>\n<li>除了最后一层，其余各层已经满节点。</li>\n<li>最后一层的所有节点尽可能向左边放。</li>\n</ul>\n<h3 id=\"由后续遍历构建完全N叉树\">由后续遍历构建完全N叉树</h3>\n<p>给定一个大小为<strong>M</strong>的数组<code>arr[]</code> ，其中包含<strong>完整 N 叉树</strong>的后序遍历，任务是生成 N 叉树并打印其<strong>前序遍历</strong>。</p>\n<p>例图：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250713220657917.png\"\n                        alt=\"完全3叉树\"\n                 ></p>\n<p>C++实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    根据后续遍历生成完全n叉树，然后输出它的前序遍历</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(T data);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取左边第一个子节点</span></span><br><span class=\"line\">    <span class=\"function\">Node *<span class=\"title\">get_first_child</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> first_child;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取右边下一个兄弟节点</span></span><br><span class=\"line\">    <span class=\"function\">Node *<span class=\"title\">get_next_sibling</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next_sibling;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">append_add_sibling</span><span class=\"params\">(Node *sibling)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (next_sibling == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;next_sibling = sibling;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            next_sibling-&gt;<span class=\"built_in\">append_add_sibling</span>(sibling);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add_child</span><span class=\"params\">(Node *child)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first_child == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            first_child = child;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            first_child-&gt;<span class=\"built_in\">append_add_sibling</span>(child);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">get_data</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    T data;</span><br><span class=\"line\">    Node *first_child;</span><br><span class=\"line\">    Node *next_sibling;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">Node&lt;T&gt;::<span class=\"built_in\">Node</span>(T data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;data = data;</span><br><span class=\"line\">    first_child = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    next_sibling = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief 由后续遍历构造完全N叉树</span></span><br><span class=\"line\"><span class=\"comment\"> * @param post_order_arr 后续遍历数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @param size 数组长度</span></span><br><span class=\"line\"><span class=\"comment\"> * @param k 等同于N叉树的N</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 构造的k叉树的根节点指针</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\">Node&lt;T&gt; *<span class=\"title\">construct_n_binary_tree</span><span class=\"params\">(T *post_order_arr, <span class=\"type\">int</span> size, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 构造当前树的根节点</span></span><br><span class=\"line\">    Node&lt;T&gt; *root = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>&lt;T&gt;(post_order_arr[size - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 说明该节点(rot)是叶子节点</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 求树高。根据完全N叉树的特性推导而来</span></span><br><span class=\"line\">    <span class=\"type\">int</span> height_of_tree = <span class=\"built_in\">ceil</span>(<span class=\"built_in\">log2</span>(size * (k - <span class=\"number\">1</span>) + <span class=\"number\">1</span>) / <span class=\"built_in\">log2</span>(k)) - <span class=\"number\">1</span>; <span class=\"comment\">// 向上取整</span></span><br><span class=\"line\">    <span class=\"comment\">// 最后一层节点数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> nodes_in_last_level = size - (<span class=\"built_in\">pow</span>(k, height_of_tree) - <span class=\"number\">1</span>) / (k - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> tracker = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tracker != (size - <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * pow(k, height_of_tree - 1)： 树高 height_of_tree - 1 的情况下，理论最后一层满节点数量（根节点在第0层）</span></span><br><span class=\"line\"><span class=\"comment\">         * nodes_in_last_level： 实际最后一层节点数量</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">int</span> last_level_nodes = (<span class=\"built_in\">pow</span>(k, height_of_tree - <span class=\"number\">1</span>) &gt; nodes_in_last_level) ? nodes_in_last_level : <span class=\"built_in\">pow</span>(k, height_of_tree - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * （从左到右）以root的孩子为根节点的子树的节点数量</span></span><br><span class=\"line\"><span class=\"comment\">         * (pow(k, height_of_tree - 1) - 1) / (k - 1): 树高 height_of_tree - 2 情况下，满k叉树的节点数量（注意：树高度+1==总层数）</span></span><br><span class=\"line\"><span class=\"comment\">         * last_level_nodes：</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">int</span> nodes_in_next_subtree = ((<span class=\"built_in\">pow</span>(k, height_of_tree - <span class=\"number\">1</span>) - <span class=\"number\">1</span>) / (k - <span class=\"number\">1</span>)) + last_level_nodes;</span><br><span class=\"line\"></span><br><span class=\"line\">        root-&gt;<span class=\"built_in\">add_child</span>(<span class=\"built_in\">construct_n_binary_tree</span>(post_order_arr + tracker, nodes_in_next_subtree, k));</span><br><span class=\"line\">        tracker += nodes_in_next_subtree;        <span class=\"comment\">// 已经构建的子树的节点数之和</span></span><br><span class=\"line\">        nodes_in_last_level -= last_level_nodes; <span class=\"comment\">// 去掉已经构建的子树的最后一层的节点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 前序遍历n叉树</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printPreOrder</span><span class=\"params\">(Node&lt;T&gt; *root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    std::cout &lt;&lt; root-&gt;<span class=\"built_in\">get_data</span>() &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printPreOrder</span>(root-&gt;<span class=\"built_in\">get_first_child</span>()); <span class=\"comment\">// 递归遍历root的左边第一个孩子时，也会将它的兄弟(root的第二, 第三,...第k个孩子)一块遍历</span></span><br><span class=\"line\">    <span class=\"built_in\">printPreOrder</span>(root-&gt;<span class=\"built_in\">get_next_sibling</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 释放空间</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">destroy_n_binary_tree</span><span class=\"params\">(Node&lt;T&gt; *root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;<span class=\"built_in\">get_next_sibling</span>() != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">destroy_n_binary_tree</span>(root-&gt;<span class=\"built_in\">get_next_sibling</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;<span class=\"built_in\">get_first_child</span>() != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">destroy_n_binary_tree</span>(root-&gt;<span class=\"built_in\">get_first_child</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;deleted: &quot;</span> &lt;&lt; root-&gt;<span class=\"built_in\">get_data</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> arr[] = &#123;<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> size = <span class=\"built_in\">sizeof</span>(arr) / <span class=\"built_in\">sizeof</span>(arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    Node&lt;<span class=\"type\">int</span>&gt; *root = <span class=\"built_in\">construct_n_binary_tree</span>(arr, size, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printPreOrder</span>(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">destroy_n_binary_tree</span>(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正确输出：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">3</span> <span class=\"number\">8</span> <span class=\"number\">9</span> <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"由后续遍历构建完全N叉树的思路\">由后续遍历构建完全N叉树的思路</h5>\n<p>核心思路：递归。<strong>难点：如何求得根节点的各个子节点所在子树的节点总数</strong>。</p>\n<ol>\n<li>传入要构建的树的后续遍历，以及总节点数。还有树的分叉数：N。</li>\n<li>识别根节点。同时求得树高（推导数学公式）</li>\n<li>循环：\n<ol>\n<li>计算根节点的第<code>i</code>个孩子所在的子树所拥有的节点数（数学方法+逻辑推理）（<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=1%5Cleq%20i%5Cleq%20k\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >）（<mark>此处为了便于理解引入变量<code>i</code>，实际实现时循环中并不存在变量<code>i</code></mark>）</li>\n<li>构建根节点的第<code>i</code>个孩子所在的子树（<mark>递归</mark>。传入后续遍历（通过原数组偏移量和节点数））。构建完成后挂载到根节点上。</li>\n<li>记录已经构建完成的子树的节点数之和（循环累加）</li>\n<li>如果：已经构建完成的节点树之和<mark>等于</mark>总节点数-1，（如果构建成功只能是等于，不能是大于），那么该树构建完成。</li>\n</ol>\n</li>\n<li>返回构建的根节点。</li>\n</ol>\n"},{"title":"满二叉树","date":"2025-07-12T16:00:00.000Z","updated":"2025-07-13T16:00:00.000Z","_content":"\n### 基本概念：\n\n满二叉树：**层数(高度)**为`H`，总节点数为$2^H-1$的二叉树。（根节点在第`1`层，所有叶子节点都在第`H`层）。\n\n> 此处认为`满二叉树 == 完美二叉树`。\n>\n> 有些地方存在另一种分类方法：完美(`prefect`)二叉树、完满(`full`)二叉树、完全(`complete`)二叉树。具体概念与上述满二叉树概念也有所区别，此处不做讨论。\n>\n> > 本文所讨论的满二叉树对应上面的完美(`prefect`)二叉树，而不对应完满(`full`)二叉树。\n> >\n> > 而上述完满(`full`)二叉树实际对应王道考研书中的**正则二叉树**。\n\n### 特点：\n\n- 第`i`层一定有$2^{i-1}$个节点。（根节点在第`1`层）\n- 前`i`层（`1 ~ i`层）节点数之和为$2^i-1$。\n\n### 由前序遍历构建满二叉树\n\n给定一个满二叉树的**前序遍历**数组，要求由该数组构建目标满二叉树，返回构建完成的满二叉树的根。然后输出该满二叉树的**中序遍历**。\n\n##### C++实现：\n\n**一般来说，构造二叉树不能只用前序遍历**，但这里给出了一个额外的条件，即该二叉树是满二叉树。我们可以利用这个额外的条件。\n\n对满二叉树来说：前序遍历中根之后的元素数量（假设为`n`）应该是偶数（2 * 一个子树中的节点数，因为它是满二叉树）。根据前序遍历的特点：对同一个根节点，它的左子树的前序遍历一定在它的右子树的前序遍历之前。那么我们就可以找到左子树的前序遍历和右子树的前序遍历。\n\n```cpp\n#include <iostream>\n\nstruct Node {\n    int data;\n    Node *left, *right;\n    Node(int val) {\n        data = val;\n        left = nullptr;\n        right = nullptr;\n    }\n};\n\n/**\n * @brief 由前序遍历构建满二叉树\n * @param preOrder 要构建的满二叉树的前序遍历\n * @param length 前序遍历的长度\n * @return 构建好的满二叉树的根节点\n */\nNode *creat_full_binary_tree(int *preOrder, int length) {\n    if (length == 0) {\n        return nullptr;\n    }\n    Node *root = new Node(preOrder[0]);\n    root->left = creat_full_binary_tree(preOrder + 1, (length - 1) / 2);\n    root->right = creat_full_binary_tree(preOrder + 1 + (length - 1) / 2, (length - 1) / 2);\n    return root;\n}\n\nvoid printInOrder(Node *root) {\n    if (root == nullptr) {\n        return;\n    }\n    printInOrder(root->left);\n    std::cout << root->data << \" \";\n    printInOrder(root->right);\n}\n\nvoid destroy_binary_tree(Node *root) {\n    if (root == nullptr) {\n        return;\n    }\n    destroy_binary_tree(root->left);\n    destroy_binary_tree(root->right);\n    std::cout << \"deleted: \" << root->data << std::endl;\n    delete root;\n}\n\nint main() {\n    int arr[] = {1, 2, 4, 5, 3, 6, 7};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    Node *root = creat_full_binary_tree(arr, size);\n    printInOrder(root);\n    destroy_binary_tree(root);\n\n    return 0;\n}\n```\n\n正确输出：\n\n```cpp\n4 2 5 1 6 3 7\n```\n\n","source":"_posts/数据结构/树/FullBinaryTree.md","raw":"---\ntitle: 满二叉树\ndate: 2025-07-13\nupdated: 2025-07-14\ntags: [数据结构, 二叉树, C++, 树]\ncategories: 数据结构\n---\n\n### 基本概念：\n\n满二叉树：**层数(高度)**为`H`，总节点数为$2^H-1$的二叉树。（根节点在第`1`层，所有叶子节点都在第`H`层）。\n\n> 此处认为`满二叉树 == 完美二叉树`。\n>\n> 有些地方存在另一种分类方法：完美(`prefect`)二叉树、完满(`full`)二叉树、完全(`complete`)二叉树。具体概念与上述满二叉树概念也有所区别，此处不做讨论。\n>\n> > 本文所讨论的满二叉树对应上面的完美(`prefect`)二叉树，而不对应完满(`full`)二叉树。\n> >\n> > 而上述完满(`full`)二叉树实际对应王道考研书中的**正则二叉树**。\n\n### 特点：\n\n- 第`i`层一定有$2^{i-1}$个节点。（根节点在第`1`层）\n- 前`i`层（`1 ~ i`层）节点数之和为$2^i-1$。\n\n### 由前序遍历构建满二叉树\n\n给定一个满二叉树的**前序遍历**数组，要求由该数组构建目标满二叉树，返回构建完成的满二叉树的根。然后输出该满二叉树的**中序遍历**。\n\n##### C++实现：\n\n**一般来说，构造二叉树不能只用前序遍历**，但这里给出了一个额外的条件，即该二叉树是满二叉树。我们可以利用这个额外的条件。\n\n对满二叉树来说：前序遍历中根之后的元素数量（假设为`n`）应该是偶数（2 * 一个子树中的节点数，因为它是满二叉树）。根据前序遍历的特点：对同一个根节点，它的左子树的前序遍历一定在它的右子树的前序遍历之前。那么我们就可以找到左子树的前序遍历和右子树的前序遍历。\n\n```cpp\n#include <iostream>\n\nstruct Node {\n    int data;\n    Node *left, *right;\n    Node(int val) {\n        data = val;\n        left = nullptr;\n        right = nullptr;\n    }\n};\n\n/**\n * @brief 由前序遍历构建满二叉树\n * @param preOrder 要构建的满二叉树的前序遍历\n * @param length 前序遍历的长度\n * @return 构建好的满二叉树的根节点\n */\nNode *creat_full_binary_tree(int *preOrder, int length) {\n    if (length == 0) {\n        return nullptr;\n    }\n    Node *root = new Node(preOrder[0]);\n    root->left = creat_full_binary_tree(preOrder + 1, (length - 1) / 2);\n    root->right = creat_full_binary_tree(preOrder + 1 + (length - 1) / 2, (length - 1) / 2);\n    return root;\n}\n\nvoid printInOrder(Node *root) {\n    if (root == nullptr) {\n        return;\n    }\n    printInOrder(root->left);\n    std::cout << root->data << \" \";\n    printInOrder(root->right);\n}\n\nvoid destroy_binary_tree(Node *root) {\n    if (root == nullptr) {\n        return;\n    }\n    destroy_binary_tree(root->left);\n    destroy_binary_tree(root->right);\n    std::cout << \"deleted: \" << root->data << std::endl;\n    delete root;\n}\n\nint main() {\n    int arr[] = {1, 2, 4, 5, 3, 6, 7};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    Node *root = creat_full_binary_tree(arr, size);\n    printInOrder(root);\n    destroy_binary_tree(root);\n\n    return 0;\n}\n```\n\n正确输出：\n\n```cpp\n4 2 5 1 6 3 7\n```\n\n","slug":"数据结构/树/FullBinaryTree","published":1,"comments":1,"layout":"post","photos":[],"_id":"cmfktk7f70046c04paog9d8pc","content":"<h3 id=\"基本概念：\">基本概念：</h3>\n<p>满二叉树：**层数(高度)**为<code>H</code>，总节点数为<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=2%5EH-1\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >的二叉树。（根节点在第<code>1</code>层，所有叶子节点都在第<code>H</code>层）。</p>\n<blockquote>\n<p>此处认为<code>满二叉树 == 完美二叉树</code>。</p>\n<p>有些地方存在另一种分类方法：完美(<code>prefect</code>)二叉树、完满(<code>full</code>)二叉树、完全(<code>complete</code>)二叉树。具体概念与上述满二叉树概念也有所区别，此处不做讨论。</p>\n<blockquote>\n<p>本文所讨论的满二叉树对应上面的完美(<code>prefect</code>)二叉树，而不对应完满(<code>full</code>)二叉树。</p>\n<p>而上述完满(<code>full</code>)二叉树实际对应王道考研书中的<strong>正则二叉树</strong>。</p>\n</blockquote>\n</blockquote>\n<h3 id=\"特点：\">特点：</h3>\n<ul>\n<li>第<code>i</code>层一定有<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=2%5E%7Bi-1%7D\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >个节点。（根节点在第<code>1</code>层）</li>\n<li>前<code>i</code>层（<code>1 ~ i</code>层）节点数之和为<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=2%5Ei-1\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >。</li>\n</ul>\n<h3 id=\"由前序遍历构建满二叉树\">由前序遍历构建满二叉树</h3>\n<p>给定一个满二叉树的<strong>前序遍历</strong>数组，要求由该数组构建目标满二叉树，返回构建完成的满二叉树的根。然后输出该满二叉树的<strong>中序遍历</strong>。</p>\n<h5 id=\"C-实现：\">C++实现：</h5>\n<p><strong>一般来说，构造二叉树不能只用前序遍历</strong>，但这里给出了一个额外的条件，即该二叉树是满二叉树。我们可以利用这个额外的条件。</p>\n<p>对满二叉树来说：前序遍历中根之后的元素数量（假设为<code>n</code>）应该是偶数（2 * 一个子树中的节点数，因为它是满二叉树）。根据前序遍历的特点：对同一个根节点，它的左子树的前序遍历一定在它的右子树的前序遍历之前。那么我们就可以找到左子树的前序遍历和右子树的前序遍历。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    Node *left, *right;</span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> val) &#123;</span><br><span class=\"line\">        data = val;</span><br><span class=\"line\">        left = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        right = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief 由前序遍历构建满二叉树</span></span><br><span class=\"line\"><span class=\"comment\"> * @param preOrder 要构建的满二叉树的前序遍历</span></span><br><span class=\"line\"><span class=\"comment\"> * @param length 前序遍历的长度</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 构建好的满二叉树的根节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">Node *<span class=\"title\">creat_full_binary_tree</span><span class=\"params\">(<span class=\"type\">int</span> *preOrder, <span class=\"type\">int</span> length)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Node *root = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(preOrder[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    root-&gt;left = <span class=\"built_in\">creat_full_binary_tree</span>(preOrder + <span class=\"number\">1</span>, (length - <span class=\"number\">1</span>) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    root-&gt;right = <span class=\"built_in\">creat_full_binary_tree</span>(preOrder + <span class=\"number\">1</span> + (length - <span class=\"number\">1</span>) / <span class=\"number\">2</span>, (length - <span class=\"number\">1</span>) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printInOrder</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printInOrder</span>(root-&gt;left);</span><br><span class=\"line\">    std::cout &lt;&lt; root-&gt;data &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printInOrder</span>(root-&gt;right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">destroy_binary_tree</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">destroy_binary_tree</span>(root-&gt;left);</span><br><span class=\"line\">    <span class=\"built_in\">destroy_binary_tree</span>(root-&gt;right);</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;deleted: &quot;</span> &lt;&lt; root-&gt;data &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> arr[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> size = <span class=\"built_in\">sizeof</span>(arr) / <span class=\"built_in\">sizeof</span>(arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    Node *root = <span class=\"built_in\">creat_full_binary_tree</span>(arr, size);</span><br><span class=\"line\">    <span class=\"built_in\">printInOrder</span>(root);</span><br><span class=\"line\">    <span class=\"built_in\">destroy_binary_tree</span>(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正确输出：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">2</span> <span class=\"number\">5</span> <span class=\"number\">1</span> <span class=\"number\">6</span> <span class=\"number\">3</span> <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n","secretKey":"93de1b0e774051232d31f36d9b593bb49a2ca328ab3413e35f533fb39ec82719","iv":"87cffe6737a5b1abe0be0125c18ed767","encryptedPassword":"8a3e1e82abf52f721fde246ea222621b","encryptedContent":"","excerpt":"","more":"<h3 id=\"基本概念：\">基本概念：</h3>\n<p>满二叉树：**层数(高度)**为<code>H</code>，总节点数为<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=2%5EH-1\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >的二叉树。（根节点在第<code>1</code>层，所有叶子节点都在第<code>H</code>层）。</p>\n<blockquote>\n<p>此处认为<code>满二叉树 == 完美二叉树</code>。</p>\n<p>有些地方存在另一种分类方法：完美(<code>prefect</code>)二叉树、完满(<code>full</code>)二叉树、完全(<code>complete</code>)二叉树。具体概念与上述满二叉树概念也有所区别，此处不做讨论。</p>\n<blockquote>\n<p>本文所讨论的满二叉树对应上面的完美(<code>prefect</code>)二叉树，而不对应完满(<code>full</code>)二叉树。</p>\n<p>而上述完满(<code>full</code>)二叉树实际对应王道考研书中的<strong>正则二叉树</strong>。</p>\n</blockquote>\n</blockquote>\n<h3 id=\"特点：\">特点：</h3>\n<ul>\n<li>第<code>i</code>层一定有<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=2%5E%7Bi-1%7D\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >个节点。（根节点在第<code>1</code>层）</li>\n<li>前<code>i</code>层（<code>1 ~ i</code>层）节点数之和为<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://math.now.sh?inline=2%5Ei-1\"\n                        style=\"filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;\"\n                 >。</li>\n</ul>\n<h3 id=\"由前序遍历构建满二叉树\">由前序遍历构建满二叉树</h3>\n<p>给定一个满二叉树的<strong>前序遍历</strong>数组，要求由该数组构建目标满二叉树，返回构建完成的满二叉树的根。然后输出该满二叉树的<strong>中序遍历</strong>。</p>\n<h5 id=\"C-实现：\">C++实现：</h5>\n<p><strong>一般来说，构造二叉树不能只用前序遍历</strong>，但这里给出了一个额外的条件，即该二叉树是满二叉树。我们可以利用这个额外的条件。</p>\n<p>对满二叉树来说：前序遍历中根之后的元素数量（假设为<code>n</code>）应该是偶数（2 * 一个子树中的节点数，因为它是满二叉树）。根据前序遍历的特点：对同一个根节点，它的左子树的前序遍历一定在它的右子树的前序遍历之前。那么我们就可以找到左子树的前序遍历和右子树的前序遍历。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    Node *left, *right;</span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> val) &#123;</span><br><span class=\"line\">        data = val;</span><br><span class=\"line\">        left = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        right = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief 由前序遍历构建满二叉树</span></span><br><span class=\"line\"><span class=\"comment\"> * @param preOrder 要构建的满二叉树的前序遍历</span></span><br><span class=\"line\"><span class=\"comment\"> * @param length 前序遍历的长度</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 构建好的满二叉树的根节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">Node *<span class=\"title\">creat_full_binary_tree</span><span class=\"params\">(<span class=\"type\">int</span> *preOrder, <span class=\"type\">int</span> length)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Node *root = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(preOrder[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    root-&gt;left = <span class=\"built_in\">creat_full_binary_tree</span>(preOrder + <span class=\"number\">1</span>, (length - <span class=\"number\">1</span>) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    root-&gt;right = <span class=\"built_in\">creat_full_binary_tree</span>(preOrder + <span class=\"number\">1</span> + (length - <span class=\"number\">1</span>) / <span class=\"number\">2</span>, (length - <span class=\"number\">1</span>) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printInOrder</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printInOrder</span>(root-&gt;left);</span><br><span class=\"line\">    std::cout &lt;&lt; root-&gt;data &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printInOrder</span>(root-&gt;right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">destroy_binary_tree</span><span class=\"params\">(Node *root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">destroy_binary_tree</span>(root-&gt;left);</span><br><span class=\"line\">    <span class=\"built_in\">destroy_binary_tree</span>(root-&gt;right);</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;deleted: &quot;</span> &lt;&lt; root-&gt;data &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> arr[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> size = <span class=\"built_in\">sizeof</span>(arr) / <span class=\"built_in\">sizeof</span>(arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    Node *root = <span class=\"built_in\">creat_full_binary_tree</span>(arr, size);</span><br><span class=\"line\">    <span class=\"built_in\">printInOrder</span>(root);</span><br><span class=\"line\">    <span class=\"built_in\">destroy_binary_tree</span>(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正确输出：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">2</span> <span class=\"number\">5</span> <span class=\"number\">1</span> <span class=\"number\">6</span> <span class=\"number\">3</span> <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n"},{"title":"红黑树","date":"2025-07-13T16:00:00.000Z","updated":"2025-07-14T16:00:00.000Z","_content":"\n### 概念\n\n> 一种自平衡的二叉搜索树。每个节点额外存储了一个 color 字段 (\"RED\" or \"BLACK\")，用于确保树在插入和删除时保持平衡。\n>\n> 红黑树是 4 阶 B 树（[2-3-4 树](https://oi-wiki.org/ds/2-3-4-tree/)）的变体。\n\n### 特点\n\n红黑树本身也是二叉搜索树，具有所有二叉搜索树的特点。\n\n**一棵合法的红黑树必须遵循以下性质**：\n\n1. <a name=\"性质1\">（节点颜色）所有节点为红色或黑色</a>。\n2. <a name=\"性质2\">（根节点）**根节点必须是黑色**</a>。\n3. <a name=\"性质3\">（叶子节点）`NIL` 节点（空叶子节点）都是黑色</a>。\n4. <a name=\"性质4\">（红色节点）红色节点的左右子节点都为黑色（从每个`NIL`节点到**根节点**的路径上不能有连续的两个红色节点）</a>。\n5. <a name=\"性质5\">（黑色节点）从<mark>任意节点</mark>到其所在子树的 `NIL` 节点的每条路径上的黑色节点数量相同（简称黑高）</a>。\n\n下图为一个合法的红黑树：\n\n![红黑树](https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250623201450979.png)\n\n### 扩展特点\n\n- 最长路径**不超过**最短路径的两倍。\n- 由上一特点可得：任一节点的左右子树的高度差不会超过**2倍**。\n\n> 对比平衡二叉树：平衡二叉树要求左右子树高度相差不超过1，而红黑树要求左右子树高度差不超过2倍。由此看来平衡二叉树对平衡的要求更严格，插入时进行的旋转操作更多。\n\n### 实现\n\n#### 插入\n\n插入的新节点默认是<mark>红色</mark>节点。因为如果对一个红黑树插入一个黑色节点，无论黑色节点插在哪里，都会违反红黑树基本特点中的[第`5`条](#性质5)（因为插入之前的红黑树肯定满足以上所有特点，但插入后一定会破坏第`5`条）。\n\n那么在插入红色节点的情况下，可能会违反基本特点中的[第`4`条特点](#性质4)（不能有两个连续的红色节点）。如果没有违反特点，则不需要调整。如果违反了特点，就需要进行旋转，分为三种情况：\n\n- 新插入的节点是根节点：直接将根节点变黑（只有在**插入之前树为空**的情况下才会发生）。\n\n- 新插入节点的**叔叔节点**（父节点的兄弟节点）是**红色**：\n  - 调整新插入的节点的**父亲、叔叔、爷爷**三个节点的颜色：红色变为黑色，黑色变为红色。\n  - 令爷爷节点当作新插入节点，重新判断（循环或者递归）。\n  \n- 新插入节点的**叔叔节点**是**黑色**：\n\n  - 判断`LL, LR, RR, RL`四种失衡类型，然后旋转。因为只有连续两个红色节点才需要旋转，所以可以确定新插入节点的父节点一定是红色的。据此判断失衡类型。\n\n    - `LL`：\n\n      ![LL情况-右旋](https://image-1258881983.cos.ap-beijing.myqcloud.com/image%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250727161732_25.jpg)\n\n    - `LR`：\n\n      ![LR情况-左右双旋](https://image-1258881983.cos.ap-beijing.myqcloud.com/image%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250727161726_23.jpg)\n\n    - `RR`：\n    \n      ![RR情况-左旋](https://image-1258881983.cos.ap-beijing.myqcloud.com/image%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250727161735_26.jpg)\n    \n    - `RL`：\n    \n      ![RL情况-右左双旋](https://image-1258881983.cos.ap-beijing.myqcloud.com/image%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250727161716_22.jpg)\n\n\n#### 删除\n\n删除操作是红黑树逻辑最复杂的操作，主要是删除黑色节点时，会导致被删除节点所在路径上的黑色节点数量减`1`，导致违反上述基本性质中的[第`5`条性质](#性质5)。而删除红色节点则相对简单。\n\n##### 删除的情况分类\n\n对被删除节点的情况进行分类。\n\n- ###### 被删除节点只有左孩子/只有右孩子\n\n  **此时被删除节点一定为黑色节点**，因为如果是红色节点，那么一定是左右子树都存在或者左右子树都不存在，否则就会违背上述[第`5`条性质](#性质5)。\n\n  确定了被删除节点一定为**黑色**后，可以推得：被删除节点的**仅有的孩子节点**一定是红色。因为被删除节点的其中一个子树是空的，那么剩下的那个非空的子树中一定不会存在黑色节点，否则就会违反基本性质中的[第5条性质](#性质5)。\n\n  具体情况和对应操作见下图：\n\n  ![image-20250728155640665](https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250728155640665.png)\n\n  可见，只需要将唯一的那个子节点向上提升，替代要删除的节点即可。\n\n- ###### 被删除节点左右孩子都有\n\n  可以转换为其他两种情况：用要删除的节点的右子树上的最小节点替换要删除的节点，然后删除右子树上的最小节点。如此递归，可转化为另外两种情况。\n\n- ###### 被删除节点没有孩子\n\n  - **被删除节点为黑色**：\n  \n    因为删除了黑色节点后，从该节点到根节点的路径上少了一个黑色节点，破坏了[第`5`条性质](#性质5)，所以需要观察兄弟节点和父亲节点颜色，分情况处理这缺失的一个黑色节点：\n  \n    - 兄弟节点为黑色：\n  \n      - 并且兄弟节点有一个与它<mark>方向一致</mark>的红色节点。父亲节点颜色随意:\n  \n        <mark>方向一致</mark>：指的是`brother`是`father`的左子节点并且`son`是`brother`的左子节点，或者`brother`是`father`的右子节点并且`son`是`brother`的右子节点。即：`father`、`brother`、`son`<三点共线>。\n  \n        > 此时执行**左旋**(`RR`情况下)或者**右旋**(`LL`情况下)。并且在旋转之前，先按步骤进行变色：son变为**黑色**，brother变为father的颜色，father变为黑色。\n  \n        ![兄黑同红子-红子变黑-兄变父色-父变黑色-外加单旋](https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250729193857476.png)\n  \n      - 并且兄弟节点有一个与它<mark>方向相反</mark>的红色节点，**同时兄弟节点没有与它<mark>方向一致</mark>的红色子节点**。父亲节点颜色随意：\n  \n        <mark>方向相反</mark>：参考方向一致。`father`、`brother`、`son`三点不共线，即认为是方向相反。\n  \n        > 先让兄弟节点son变为父亲节点father的颜色，再让父亲节点father颜色变黑。最后分析情况执行**左右双旋**或者**右左双旋**。\n  \n        ![兄黑反红子-兄变父色-父变黑色-外加双旋](https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250729193004686.png)\n  \n      - 并且**兄弟节点没有红色子节点**。**父亲**节点为<font style=\"background: white\" color=\"RED\">红色</font>：\n  \n        > 兄弟节点变红，父亲节点变黑。\n  \n        ![兄黑父红无红子-兄变红-父变黑](https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250729230437194.png)\n  \n      - 并且**兄弟节点没有红色子节点**。**父亲**节点为<font style=\"background: white\" color=\"BLACK\">黑色</font>：\n  \n        > 兄弟节点变为红色，双黑标记上移至父亲节点（将父亲节点当作被删除节点）。递归判断父亲节点的情况。\n  \n        ![兄黑父黑-兄变红-父变双黑-递归判断](https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250730001039457.png)\n  \n    - **兄弟**节点为<font style=\"background: white\" color=\"RED\">红色</font>：\n  \n      此时**兄弟节点没有红色子节点**，也不可能有红色子节点（[性质4](#性质4)）。同时**父亲**节点必定为<font style=\"background: white\" color=\"black\">黑色</font>（[性质4](#性质4)）。执行操作：\n  \n      > 兄弟节点变黑色，父亲节点变红色。然后左旋或者右旋父亲节点。（将父亲节点下移，兄弟节点上移）\n      \n      ![兄红父黑-先变色，再左旋或右旋](https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250729192538724.png)\n    \n  - **被删除节点为红色**：\n  \n    最简单的情况。直接删除该节点。（因为没有左右孩子，并且不影响红黑树基本性质，所以可以直接删除，不做任何额外操作）\n\n#### 查询\n\n查询思路与二叉搜索树相同。\n\n#### C++实现\n\n```cpp\n#include <iostream>\n\n\n```\n\n","source":"_posts/数据结构/树/RBTree.md","raw":"---\ntitle: 红黑树\ndate: 2025-07-14\nupdated: 2025-07-15\ntags: [数据结构, 红黑树, 二叉树, C++]\ncategories: 数据结构\n---\n\n### 概念\n\n> 一种自平衡的二叉搜索树。每个节点额外存储了一个 color 字段 (\"RED\" or \"BLACK\")，用于确保树在插入和删除时保持平衡。\n>\n> 红黑树是 4 阶 B 树（[2-3-4 树](https://oi-wiki.org/ds/2-3-4-tree/)）的变体。\n\n### 特点\n\n红黑树本身也是二叉搜索树，具有所有二叉搜索树的特点。\n\n**一棵合法的红黑树必须遵循以下性质**：\n\n1. <a name=\"性质1\">（节点颜色）所有节点为红色或黑色</a>。\n2. <a name=\"性质2\">（根节点）**根节点必须是黑色**</a>。\n3. <a name=\"性质3\">（叶子节点）`NIL` 节点（空叶子节点）都是黑色</a>。\n4. <a name=\"性质4\">（红色节点）红色节点的左右子节点都为黑色（从每个`NIL`节点到**根节点**的路径上不能有连续的两个红色节点）</a>。\n5. <a name=\"性质5\">（黑色节点）从<mark>任意节点</mark>到其所在子树的 `NIL` 节点的每条路径上的黑色节点数量相同（简称黑高）</a>。\n\n下图为一个合法的红黑树：\n\n![红黑树](https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250623201450979.png)\n\n### 扩展特点\n\n- 最长路径**不超过**最短路径的两倍。\n- 由上一特点可得：任一节点的左右子树的高度差不会超过**2倍**。\n\n> 对比平衡二叉树：平衡二叉树要求左右子树高度相差不超过1，而红黑树要求左右子树高度差不超过2倍。由此看来平衡二叉树对平衡的要求更严格，插入时进行的旋转操作更多。\n\n### 实现\n\n#### 插入\n\n插入的新节点默认是<mark>红色</mark>节点。因为如果对一个红黑树插入一个黑色节点，无论黑色节点插在哪里，都会违反红黑树基本特点中的[第`5`条](#性质5)（因为插入之前的红黑树肯定满足以上所有特点，但插入后一定会破坏第`5`条）。\n\n那么在插入红色节点的情况下，可能会违反基本特点中的[第`4`条特点](#性质4)（不能有两个连续的红色节点）。如果没有违反特点，则不需要调整。如果违反了特点，就需要进行旋转，分为三种情况：\n\n- 新插入的节点是根节点：直接将根节点变黑（只有在**插入之前树为空**的情况下才会发生）。\n\n- 新插入节点的**叔叔节点**（父节点的兄弟节点）是**红色**：\n  - 调整新插入的节点的**父亲、叔叔、爷爷**三个节点的颜色：红色变为黑色，黑色变为红色。\n  - 令爷爷节点当作新插入节点，重新判断（循环或者递归）。\n  \n- 新插入节点的**叔叔节点**是**黑色**：\n\n  - 判断`LL, LR, RR, RL`四种失衡类型，然后旋转。因为只有连续两个红色节点才需要旋转，所以可以确定新插入节点的父节点一定是红色的。据此判断失衡类型。\n\n    - `LL`：\n\n      ![LL情况-右旋](https://image-1258881983.cos.ap-beijing.myqcloud.com/image%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250727161732_25.jpg)\n\n    - `LR`：\n\n      ![LR情况-左右双旋](https://image-1258881983.cos.ap-beijing.myqcloud.com/image%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250727161726_23.jpg)\n\n    - `RR`：\n    \n      ![RR情况-左旋](https://image-1258881983.cos.ap-beijing.myqcloud.com/image%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250727161735_26.jpg)\n    \n    - `RL`：\n    \n      ![RL情况-右左双旋](https://image-1258881983.cos.ap-beijing.myqcloud.com/image%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250727161716_22.jpg)\n\n\n#### 删除\n\n删除操作是红黑树逻辑最复杂的操作，主要是删除黑色节点时，会导致被删除节点所在路径上的黑色节点数量减`1`，导致违反上述基本性质中的[第`5`条性质](#性质5)。而删除红色节点则相对简单。\n\n##### 删除的情况分类\n\n对被删除节点的情况进行分类。\n\n- ###### 被删除节点只有左孩子/只有右孩子\n\n  **此时被删除节点一定为黑色节点**，因为如果是红色节点，那么一定是左右子树都存在或者左右子树都不存在，否则就会违背上述[第`5`条性质](#性质5)。\n\n  确定了被删除节点一定为**黑色**后，可以推得：被删除节点的**仅有的孩子节点**一定是红色。因为被删除节点的其中一个子树是空的，那么剩下的那个非空的子树中一定不会存在黑色节点，否则就会违反基本性质中的[第5条性质](#性质5)。\n\n  具体情况和对应操作见下图：\n\n  ![image-20250728155640665](https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250728155640665.png)\n\n  可见，只需要将唯一的那个子节点向上提升，替代要删除的节点即可。\n\n- ###### 被删除节点左右孩子都有\n\n  可以转换为其他两种情况：用要删除的节点的右子树上的最小节点替换要删除的节点，然后删除右子树上的最小节点。如此递归，可转化为另外两种情况。\n\n- ###### 被删除节点没有孩子\n\n  - **被删除节点为黑色**：\n  \n    因为删除了黑色节点后，从该节点到根节点的路径上少了一个黑色节点，破坏了[第`5`条性质](#性质5)，所以需要观察兄弟节点和父亲节点颜色，分情况处理这缺失的一个黑色节点：\n  \n    - 兄弟节点为黑色：\n  \n      - 并且兄弟节点有一个与它<mark>方向一致</mark>的红色节点。父亲节点颜色随意:\n  \n        <mark>方向一致</mark>：指的是`brother`是`father`的左子节点并且`son`是`brother`的左子节点，或者`brother`是`father`的右子节点并且`son`是`brother`的右子节点。即：`father`、`brother`、`son`<三点共线>。\n  \n        > 此时执行**左旋**(`RR`情况下)或者**右旋**(`LL`情况下)。并且在旋转之前，先按步骤进行变色：son变为**黑色**，brother变为father的颜色，father变为黑色。\n  \n        ![兄黑同红子-红子变黑-兄变父色-父变黑色-外加单旋](https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250729193857476.png)\n  \n      - 并且兄弟节点有一个与它<mark>方向相反</mark>的红色节点，**同时兄弟节点没有与它<mark>方向一致</mark>的红色子节点**。父亲节点颜色随意：\n  \n        <mark>方向相反</mark>：参考方向一致。`father`、`brother`、`son`三点不共线，即认为是方向相反。\n  \n        > 先让兄弟节点son变为父亲节点father的颜色，再让父亲节点father颜色变黑。最后分析情况执行**左右双旋**或者**右左双旋**。\n  \n        ![兄黑反红子-兄变父色-父变黑色-外加双旋](https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250729193004686.png)\n  \n      - 并且**兄弟节点没有红色子节点**。**父亲**节点为<font style=\"background: white\" color=\"RED\">红色</font>：\n  \n        > 兄弟节点变红，父亲节点变黑。\n  \n        ![兄黑父红无红子-兄变红-父变黑](https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250729230437194.png)\n  \n      - 并且**兄弟节点没有红色子节点**。**父亲**节点为<font style=\"background: white\" color=\"BLACK\">黑色</font>：\n  \n        > 兄弟节点变为红色，双黑标记上移至父亲节点（将父亲节点当作被删除节点）。递归判断父亲节点的情况。\n  \n        ![兄黑父黑-兄变红-父变双黑-递归判断](https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250730001039457.png)\n  \n    - **兄弟**节点为<font style=\"background: white\" color=\"RED\">红色</font>：\n  \n      此时**兄弟节点没有红色子节点**，也不可能有红色子节点（[性质4](#性质4)）。同时**父亲**节点必定为<font style=\"background: white\" color=\"black\">黑色</font>（[性质4](#性质4)）。执行操作：\n  \n      > 兄弟节点变黑色，父亲节点变红色。然后左旋或者右旋父亲节点。（将父亲节点下移，兄弟节点上移）\n      \n      ![兄红父黑-先变色，再左旋或右旋](https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250729192538724.png)\n    \n  - **被删除节点为红色**：\n  \n    最简单的情况。直接删除该节点。（因为没有左右孩子，并且不影响红黑树基本性质，所以可以直接删除，不做任何额外操作）\n\n#### 查询\n\n查询思路与二叉搜索树相同。\n\n#### C++实现\n\n```cpp\n#include <iostream>\n\n\n```\n\n","slug":"数据结构/树/RBTree","published":1,"comments":1,"layout":"post","photos":[],"_id":"cmfktk7f80048c04pdus7erif","content":"<h3 id=\"概念\">概念</h3>\n<blockquote>\n<p>一种自平衡的二叉搜索树。每个节点额外存储了一个 color 字段 (“RED” or “BLACK”)，用于确保树在插入和删除时保持平衡。</p>\n<p>红黑树是 4 阶 B 树（<a class=\"link\"   href=\"https://oi-wiki.org/ds/2-3-4-tree/\" >2-3-4 树<i class=\"fas fa-external-link-alt\"></i></a>）的变体。</p>\n</blockquote>\n<h3 id=\"特点\">特点</h3>\n<p>红黑树本身也是二叉搜索树，具有所有二叉搜索树的特点。</p>\n<p><strong>一棵合法的红黑树必须遵循以下性质</strong>：</p>\n<ol>\n<li><a name=\"性质1\">（节点颜色）所有节点为红色或黑色</a>。</li>\n<li><a name=\"性质2\">（根节点）<strong>根节点必须是黑色</strong></a>。</li>\n<li><a name=\"性质3\">（叶子节点）<code>NIL</code> 节点（空叶子节点）都是黑色</a>。</li>\n<li><a name=\"性质4\">（红色节点）红色节点的左右子节点都为黑色（从每个<code>NIL</code>节点到<strong>根节点</strong>的路径上不能有连续的两个红色节点）</a>。</li>\n<li><a name=\"性质5\">（黑色节点）从<mark>任意节点</mark>到其所在子树的 <code>NIL</code> 节点的每条路径上的黑色节点数量相同（简称黑高）</a>。</li>\n</ol>\n<p>下图为一个合法的红黑树：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250623201450979.png\"\n                        alt=\"红黑树\"\n                 ></p>\n<h3 id=\"扩展特点\">扩展特点</h3>\n<ul>\n<li>最长路径<strong>不超过</strong>最短路径的两倍。</li>\n<li>由上一特点可得：任一节点的左右子树的高度差不会超过<strong>2倍</strong>。</li>\n</ul>\n<blockquote>\n<p>对比平衡二叉树：平衡二叉树要求左右子树高度相差不超过1，而红黑树要求左右子树高度差不超过2倍。由此看来平衡二叉树对平衡的要求更严格，插入时进行的旋转操作更多。</p>\n</blockquote>\n<h3 id=\"实现\">实现</h3>\n<h4 id=\"插入\">插入</h4>\n<p>插入的新节点默认是<mark>红色</mark>节点。因为如果对一个红黑树插入一个黑色节点，无论黑色节点插在哪里，都会违反红黑树基本特点中的<a href=\"#%E6%80%A7%E8%B4%A85\">第<code>5</code>条</a>（因为插入之前的红黑树肯定满足以上所有特点，但插入后一定会破坏第<code>5</code>条）。</p>\n<p>那么在插入红色节点的情况下，可能会违反基本特点中的<a href=\"#%E6%80%A7%E8%B4%A84\">第<code>4</code>条特点</a>（不能有两个连续的红色节点）。如果没有违反特点，则不需要调整。如果违反了特点，就需要进行旋转，分为三种情况：</p>\n<ul>\n<li>\n<p>新插入的节点是根节点：直接将根节点变黑（只有在<strong>插入之前树为空</strong>的情况下才会发生）。</p>\n</li>\n<li>\n<p>新插入节点的<strong>叔叔节点</strong>（父节点的兄弟节点）是<strong>红色</strong>：</p>\n<ul>\n<li>调整新插入的节点的<strong>父亲、叔叔、爷爷</strong>三个节点的颜色：红色变为黑色，黑色变为红色。</li>\n<li>令爷爷节点当作新插入节点，重新判断（循环或者递归）。</li>\n</ul>\n</li>\n<li>\n<p>新插入节点的<strong>叔叔节点</strong>是<strong>黑色</strong>：</p>\n<ul>\n<li>\n<p>判断<code>LL, LR, RR, RL</code>四种失衡类型，然后旋转。因为只有连续两个红色节点才需要旋转，所以可以确定新插入节点的父节点一定是红色的。据此判断失衡类型。</p>\n<ul>\n<li>\n<p><code>LL</code>：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/image%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250727161732_25.jpg\"\n                        alt=\"LL情况-右旋\"\n                 ></p>\n</li>\n<li>\n<p><code>LR</code>：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/image%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250727161726_23.jpg\"\n                        alt=\"LR情况-左右双旋\"\n                 ></p>\n</li>\n<li>\n<p><code>RR</code>：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/image%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250727161735_26.jpg\"\n                        alt=\"RR情况-左旋\"\n                 ></p>\n</li>\n<li>\n<p><code>RL</code>：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/image%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250727161716_22.jpg\"\n                        alt=\"RL情况-右左双旋\"\n                 ></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"删除\">删除</h4>\n<p>删除操作是红黑树逻辑最复杂的操作，主要是删除黑色节点时，会导致被删除节点所在路径上的黑色节点数量减<code>1</code>，导致违反上述基本性质中的<a href=\"#%E6%80%A7%E8%B4%A85\">第<code>5</code>条性质</a>。而删除红色节点则相对简单。</p>\n<h5 id=\"删除的情况分类\">删除的情况分类</h5>\n<p>对被删除节点的情况进行分类。</p>\n<ul>\n<li>\n<h6 id=\"被删除节点只有左孩子-只有右孩子\">被删除节点只有左孩子/只有右孩子</h6>\n<p><strong>此时被删除节点一定为黑色节点</strong>，因为如果是红色节点，那么一定是左右子树都存在或者左右子树都不存在，否则就会违背上述<a href=\"#%E6%80%A7%E8%B4%A85\">第<code>5</code>条性质</a>。</p>\n<p>确定了被删除节点一定为<strong>黑色</strong>后，可以推得：被删除节点的<strong>仅有的孩子节点</strong>一定是红色。因为被删除节点的其中一个子树是空的，那么剩下的那个非空的子树中一定不会存在黑色节点，否则就会违反基本性质中的<a href=\"#%E6%80%A7%E8%B4%A85\">第5条性质</a>。</p>\n<p>具体情况和对应操作见下图：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250728155640665.png\"\n                        alt=\"image-20250728155640665\"\n                 ></p>\n<p>可见，只需要将唯一的那个子节点向上提升，替代要删除的节点即可。</p>\n</li>\n<li>\n<h6 id=\"被删除节点左右孩子都有\">被删除节点左右孩子都有</h6>\n<p>可以转换为其他两种情况：用要删除的节点的右子树上的最小节点替换要删除的节点，然后删除右子树上的最小节点。如此递归，可转化为另外两种情况。</p>\n</li>\n<li>\n<h6 id=\"被删除节点没有孩子\">被删除节点没有孩子</h6>\n<ul>\n<li>\n<p><strong>被删除节点为黑色</strong>：</p>\n<p>因为删除了黑色节点后，从该节点到根节点的路径上少了一个黑色节点，破坏了<a href=\"#%E6%80%A7%E8%B4%A85\">第<code>5</code>条性质</a>，所以需要观察兄弟节点和父亲节点颜色，分情况处理这缺失的一个黑色节点：</p>\n<ul>\n<li>\n<p>兄弟节点为黑色：</p>\n<ul>\n<li>\n<p>并且兄弟节点有一个与它<mark>方向一致</mark>的红色节点。父亲节点颜色随意:</p>\n<p><mark>方向一致</mark>：指的是<code>brother</code>是<code>father</code>的左子节点并且<code>son</code>是<code>brother</code>的左子节点，或者<code>brother</code>是<code>father</code>的右子节点并且<code>son</code>是<code>brother</code>的右子节点。即：<code>father</code>、<code>brother</code>、<code>son</code>&lt;三点共线&gt;。</p>\n<blockquote>\n<p>此时执行<strong>左旋</strong>(<code>RR</code>情况下)或者<strong>右旋</strong>(<code>LL</code>情况下)。并且在旋转之前，先按步骤进行变色：son变为<strong>黑色</strong>，brother变为father的颜色，father变为黑色。</p>\n</blockquote>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250729193857476.png\"\n                        alt=\"兄黑同红子-红子变黑-兄变父色-父变黑色-外加单旋\"\n                 ></p>\n</li>\n<li>\n<p>并且兄弟节点有一个与它<mark>方向相反</mark>的红色节点，<strong>同时兄弟节点没有与它<mark>方向一致</mark>的红色子节点</strong>。父亲节点颜色随意：</p>\n<p><mark>方向相反</mark>：参考方向一致。<code>father</code>、<code>brother</code>、<code>son</code>三点不共线，即认为是方向相反。</p>\n<blockquote>\n<p>先让兄弟节点son变为父亲节点father的颜色，再让父亲节点father颜色变黑。最后分析情况执行<strong>左右双旋</strong>或者<strong>右左双旋</strong>。</p>\n</blockquote>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250729193004686.png\"\n                        alt=\"兄黑反红子-兄变父色-父变黑色-外加双旋\"\n                 ></p>\n</li>\n<li>\n<p>并且<strong>兄弟节点没有红色子节点</strong>。<strong>父亲</strong>节点为<font style=\"background: white\" color=\"RED\">红色</font>：</p>\n<blockquote>\n<p>兄弟节点变红，父亲节点变黑。</p>\n</blockquote>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250729230437194.png\"\n                        alt=\"兄黑父红无红子-兄变红-父变黑\"\n                 ></p>\n</li>\n<li>\n<p>并且<strong>兄弟节点没有红色子节点</strong>。<strong>父亲</strong>节点为<font style=\"background: white\" color=\"BLACK\">黑色</font>：</p>\n<blockquote>\n<p>兄弟节点变为红色，双黑标记上移至父亲节点（将父亲节点当作被删除节点）。递归判断父亲节点的情况。</p>\n</blockquote>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250730001039457.png\"\n                        alt=\"兄黑父黑-兄变红-父变双黑-递归判断\"\n                 ></p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>兄弟</strong>节点为<font style=\"background: white\" color=\"RED\">红色</font>：</p>\n<p>此时<strong>兄弟节点没有红色子节点</strong>，也不可能有红色子节点（<a href=\"#%E6%80%A7%E8%B4%A84\">性质4</a>）。同时<strong>父亲</strong>节点必定为<font style=\"background: white\" color=\"black\">黑色</font>（<a href=\"#%E6%80%A7%E8%B4%A84\">性质4</a>）。执行操作：</p>\n<blockquote>\n<p>兄弟节点变黑色，父亲节点变红色。然后左旋或者右旋父亲节点。（将父亲节点下移，兄弟节点上移）</p>\n</blockquote>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250729192538724.png\"\n                        alt=\"兄红父黑-先变色，再左旋或右旋\"\n                 ></p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>被删除节点为红色</strong>：</p>\n<p>最简单的情况。直接删除该节点。（因为没有左右孩子，并且不影响红黑树基本性质，所以可以直接删除，不做任何额外操作）</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"查询\">查询</h4>\n<p>查询思路与二叉搜索树相同。</p>\n<h4 id=\"C-实现\">C++实现</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","secretKey":"42ce743f23e8280d2260750504ec49f76a5e08f96caf8083731e4972d3a09396","iv":"f2428265d5f15373fd12cb3bb8cb74d1","encryptedPassword":"ee320710dfcca4bf5660c809c39a24c1","encryptedContent":"","excerpt":"","more":"<h3 id=\"概念\">概念</h3>\n<blockquote>\n<p>一种自平衡的二叉搜索树。每个节点额外存储了一个 color 字段 (“RED” or “BLACK”)，用于确保树在插入和删除时保持平衡。</p>\n<p>红黑树是 4 阶 B 树（<a class=\"link\"   href=\"https://oi-wiki.org/ds/2-3-4-tree/\" >2-3-4 树<i class=\"fas fa-external-link-alt\"></i></a>）的变体。</p>\n</blockquote>\n<h3 id=\"特点\">特点</h3>\n<p>红黑树本身也是二叉搜索树，具有所有二叉搜索树的特点。</p>\n<p><strong>一棵合法的红黑树必须遵循以下性质</strong>：</p>\n<ol>\n<li><a name=\"性质1\">（节点颜色）所有节点为红色或黑色</a>。</li>\n<li><a name=\"性质2\">（根节点）<strong>根节点必须是黑色</strong></a>。</li>\n<li><a name=\"性质3\">（叶子节点）<code>NIL</code> 节点（空叶子节点）都是黑色</a>。</li>\n<li><a name=\"性质4\">（红色节点）红色节点的左右子节点都为黑色（从每个<code>NIL</code>节点到<strong>根节点</strong>的路径上不能有连续的两个红色节点）</a>。</li>\n<li><a name=\"性质5\">（黑色节点）从<mark>任意节点</mark>到其所在子树的 <code>NIL</code> 节点的每条路径上的黑色节点数量相同（简称黑高）</a>。</li>\n</ol>\n<p>下图为一个合法的红黑树：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250623201450979.png\"\n                        alt=\"红黑树\"\n                 ></p>\n<h3 id=\"扩展特点\">扩展特点</h3>\n<ul>\n<li>最长路径<strong>不超过</strong>最短路径的两倍。</li>\n<li>由上一特点可得：任一节点的左右子树的高度差不会超过<strong>2倍</strong>。</li>\n</ul>\n<blockquote>\n<p>对比平衡二叉树：平衡二叉树要求左右子树高度相差不超过1，而红黑树要求左右子树高度差不超过2倍。由此看来平衡二叉树对平衡的要求更严格，插入时进行的旋转操作更多。</p>\n</blockquote>\n<h3 id=\"实现\">实现</h3>\n<h4 id=\"插入\">插入</h4>\n<p>插入的新节点默认是<mark>红色</mark>节点。因为如果对一个红黑树插入一个黑色节点，无论黑色节点插在哪里，都会违反红黑树基本特点中的<a href=\"#%E6%80%A7%E8%B4%A85\">第<code>5</code>条</a>（因为插入之前的红黑树肯定满足以上所有特点，但插入后一定会破坏第<code>5</code>条）。</p>\n<p>那么在插入红色节点的情况下，可能会违反基本特点中的<a href=\"#%E6%80%A7%E8%B4%A84\">第<code>4</code>条特点</a>（不能有两个连续的红色节点）。如果没有违反特点，则不需要调整。如果违反了特点，就需要进行旋转，分为三种情况：</p>\n<ul>\n<li>\n<p>新插入的节点是根节点：直接将根节点变黑（只有在<strong>插入之前树为空</strong>的情况下才会发生）。</p>\n</li>\n<li>\n<p>新插入节点的<strong>叔叔节点</strong>（父节点的兄弟节点）是<strong>红色</strong>：</p>\n<ul>\n<li>调整新插入的节点的<strong>父亲、叔叔、爷爷</strong>三个节点的颜色：红色变为黑色，黑色变为红色。</li>\n<li>令爷爷节点当作新插入节点，重新判断（循环或者递归）。</li>\n</ul>\n</li>\n<li>\n<p>新插入节点的<strong>叔叔节点</strong>是<strong>黑色</strong>：</p>\n<ul>\n<li>\n<p>判断<code>LL, LR, RR, RL</code>四种失衡类型，然后旋转。因为只有连续两个红色节点才需要旋转，所以可以确定新插入节点的父节点一定是红色的。据此判断失衡类型。</p>\n<ul>\n<li>\n<p><code>LL</code>：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/image%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250727161732_25.jpg\"\n                        alt=\"LL情况-右旋\"\n                 ></p>\n</li>\n<li>\n<p><code>LR</code>：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/image%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250727161726_23.jpg\"\n                        alt=\"LR情况-左右双旋\"\n                 ></p>\n</li>\n<li>\n<p><code>RR</code>：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/image%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250727161735_26.jpg\"\n                        alt=\"RR情况-左旋\"\n                 ></p>\n</li>\n<li>\n<p><code>RL</code>：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/image%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250727161716_22.jpg\"\n                        alt=\"RL情况-右左双旋\"\n                 ></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"删除\">删除</h4>\n<p>删除操作是红黑树逻辑最复杂的操作，主要是删除黑色节点时，会导致被删除节点所在路径上的黑色节点数量减<code>1</code>，导致违反上述基本性质中的<a href=\"#%E6%80%A7%E8%B4%A85\">第<code>5</code>条性质</a>。而删除红色节点则相对简单。</p>\n<h5 id=\"删除的情况分类\">删除的情况分类</h5>\n<p>对被删除节点的情况进行分类。</p>\n<ul>\n<li>\n<h6 id=\"被删除节点只有左孩子-只有右孩子\">被删除节点只有左孩子/只有右孩子</h6>\n<p><strong>此时被删除节点一定为黑色节点</strong>，因为如果是红色节点，那么一定是左右子树都存在或者左右子树都不存在，否则就会违背上述<a href=\"#%E6%80%A7%E8%B4%A85\">第<code>5</code>条性质</a>。</p>\n<p>确定了被删除节点一定为<strong>黑色</strong>后，可以推得：被删除节点的<strong>仅有的孩子节点</strong>一定是红色。因为被删除节点的其中一个子树是空的，那么剩下的那个非空的子树中一定不会存在黑色节点，否则就会违反基本性质中的<a href=\"#%E6%80%A7%E8%B4%A85\">第5条性质</a>。</p>\n<p>具体情况和对应操作见下图：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250728155640665.png\"\n                        alt=\"image-20250728155640665\"\n                 ></p>\n<p>可见，只需要将唯一的那个子节点向上提升，替代要删除的节点即可。</p>\n</li>\n<li>\n<h6 id=\"被删除节点左右孩子都有\">被删除节点左右孩子都有</h6>\n<p>可以转换为其他两种情况：用要删除的节点的右子树上的最小节点替换要删除的节点，然后删除右子树上的最小节点。如此递归，可转化为另外两种情况。</p>\n</li>\n<li>\n<h6 id=\"被删除节点没有孩子\">被删除节点没有孩子</h6>\n<ul>\n<li>\n<p><strong>被删除节点为黑色</strong>：</p>\n<p>因为删除了黑色节点后，从该节点到根节点的路径上少了一个黑色节点，破坏了<a href=\"#%E6%80%A7%E8%B4%A85\">第<code>5</code>条性质</a>，所以需要观察兄弟节点和父亲节点颜色，分情况处理这缺失的一个黑色节点：</p>\n<ul>\n<li>\n<p>兄弟节点为黑色：</p>\n<ul>\n<li>\n<p>并且兄弟节点有一个与它<mark>方向一致</mark>的红色节点。父亲节点颜色随意:</p>\n<p><mark>方向一致</mark>：指的是<code>brother</code>是<code>father</code>的左子节点并且<code>son</code>是<code>brother</code>的左子节点，或者<code>brother</code>是<code>father</code>的右子节点并且<code>son</code>是<code>brother</code>的右子节点。即：<code>father</code>、<code>brother</code>、<code>son</code>&lt;三点共线&gt;。</p>\n<blockquote>\n<p>此时执行<strong>左旋</strong>(<code>RR</code>情况下)或者<strong>右旋</strong>(<code>LL</code>情况下)。并且在旋转之前，先按步骤进行变色：son变为<strong>黑色</strong>，brother变为father的颜色，father变为黑色。</p>\n</blockquote>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250729193857476.png\"\n                        alt=\"兄黑同红子-红子变黑-兄变父色-父变黑色-外加单旋\"\n                 ></p>\n</li>\n<li>\n<p>并且兄弟节点有一个与它<mark>方向相反</mark>的红色节点，<strong>同时兄弟节点没有与它<mark>方向一致</mark>的红色子节点</strong>。父亲节点颜色随意：</p>\n<p><mark>方向相反</mark>：参考方向一致。<code>father</code>、<code>brother</code>、<code>son</code>三点不共线，即认为是方向相反。</p>\n<blockquote>\n<p>先让兄弟节点son变为父亲节点father的颜色，再让父亲节点father颜色变黑。最后分析情况执行<strong>左右双旋</strong>或者<strong>右左双旋</strong>。</p>\n</blockquote>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250729193004686.png\"\n                        alt=\"兄黑反红子-兄变父色-父变黑色-外加双旋\"\n                 ></p>\n</li>\n<li>\n<p>并且<strong>兄弟节点没有红色子节点</strong>。<strong>父亲</strong>节点为<font style=\"background: white\" color=\"RED\">红色</font>：</p>\n<blockquote>\n<p>兄弟节点变红，父亲节点变黑。</p>\n</blockquote>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250729230437194.png\"\n                        alt=\"兄黑父红无红子-兄变红-父变黑\"\n                 ></p>\n</li>\n<li>\n<p>并且<strong>兄弟节点没有红色子节点</strong>。<strong>父亲</strong>节点为<font style=\"background: white\" color=\"BLACK\">黑色</font>：</p>\n<blockquote>\n<p>兄弟节点变为红色，双黑标记上移至父亲节点（将父亲节点当作被删除节点）。递归判断父亲节点的情况。</p>\n</blockquote>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250730001039457.png\"\n                        alt=\"兄黑父黑-兄变红-父变双黑-递归判断\"\n                 ></p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>兄弟</strong>节点为<font style=\"background: white\" color=\"RED\">红色</font>：</p>\n<p>此时<strong>兄弟节点没有红色子节点</strong>，也不可能有红色子节点（<a href=\"#%E6%80%A7%E8%B4%A84\">性质4</a>）。同时<strong>父亲</strong>节点必定为<font style=\"background: white\" color=\"black\">黑色</font>（<a href=\"#%E6%80%A7%E8%B4%A84\">性质4</a>）。执行操作：</p>\n<blockquote>\n<p>兄弟节点变黑色，父亲节点变红色。然后左旋或者右旋父亲节点。（将父亲节点下移，兄弟节点上移）</p>\n</blockquote>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image-1258881983.cos.ap-beijing.myqcloud.com/imageimage-20250729192538724.png\"\n                        alt=\"兄红父黑-先变色，再左旋或右旋\"\n                 ></p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>被删除节点为红色</strong>：</p>\n<p>最简单的情况。直接删除该节点。（因为没有左右孩子，并且不影响红黑树基本性质，所以可以直接删除，不做任何额外操作）</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"查询\">查询</h4>\n<p>查询思路与二叉搜索树相同。</p>\n<h4 id=\"C-实现\">C++实现</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cmfktk7ef0003c04pbmt3ad4g","category_id":"cmfktk7eh0006c04p09hgezgw","_id":"cmfktk7em000hc04p8d1y0z6j"},{"post_id":"cmfktk7el000fc04p6m0vc6ct","category_id":"cmfktk7em000ic04pfp4mg6zx","_id":"cmfktk7ep000sc04p5zx3e36c"},{"post_id":"cmfktk7en000lc04p74gie9zd","category_id":"cmfktk7eo000nc04pbv3v4cf3","_id":"cmfktk7er000zc04pfov986g2"},{"post_id":"cmfktk7en000mc04phcxsd8t4","category_id":"cmfktk7eo000nc04pbv3v4cf3","_id":"cmfktk7es0014c04p1ggxdzyn"},{"post_id":"cmfktk7eo000qc04p4hqxast4","category_id":"cmfktk7er000yc04pex5y3q5b","_id":"cmfktk7eu001bc04p5dl96o7z"},{"post_id":"cmfktk7eo000rc04p1it1fd69","category_id":"cmfktk7es0016c04p9a0m1as2","_id":"cmfktk7ev001jc04pe86d7xmh"},{"post_id":"cmfktk7ep000tc04p2769htvp","category_id":"cmfktk7es0016c04p9a0m1as2","_id":"cmfktk7ew001pc04p9g6sar3o"},{"post_id":"cmfktk7eq000wc04pe5lucezb","category_id":"cmfktk7es0016c04p9a0m1as2","_id":"cmfktk7ex001vc04pfwzzc36m"},{"post_id":"cmfktk7ew001qc04pgpg4gdfx","category_id":"cmfktk7eh0006c04p09hgezgw","_id":"cmfktk7ey0021c04phrlucas3"},{"post_id":"cmfktk7er000xc04pcg4jc3ah","category_id":"cmfktk7es0016c04p9a0m1as2","_id":"cmfktk7ez0024c04pabx4b4rj"},{"post_id":"cmfktk7es0011c04p8bl4br3l","category_id":"cmfktk7ex001uc04pd2stckmi","_id":"cmfktk7f00028c04p5c483jng"},{"post_id":"cmfktk7es0013c04p5fq4888k","category_id":"cmfktk7ex001uc04pd2stckmi","_id":"cmfktk7f0002cc04pe55561jd"},{"post_id":"cmfktk7et0018c04pglume5ci","category_id":"cmfktk7ex001uc04pd2stckmi","_id":"cmfktk7f1002ec04pgjrocwwy"},{"post_id":"cmfktk7ey0020c04ph7xr536p","category_id":"cmfktk7f0002bc04p8juz965i","_id":"cmfktk7f1002lc04p9t164cp3"},{"post_id":"cmfktk7ey0023c04pcgwahehw","category_id":"cmfktk7f0002bc04p8juz965i","_id":"cmfktk7f2002qc04pd2y6bgaz"},{"post_id":"cmfktk7ez0026c04p8gsvbdad","category_id":"cmfktk7f0002bc04p8juz965i","_id":"cmfktk7f2002sc04pe4yncjoe"},{"post_id":"cmfktk7f00029c04p7z8h2gcl","category_id":"cmfktk7f0002bc04p8juz965i","_id":"cmfktk7f3002wc04p9gau3bvq"},{"post_id":"cmfktk7f70045c04p5o9ibgam","category_id":"cmfktk7f0002bc04p8juz965i","_id":"cmfktk7f8004ac04pdozl6hw0"},{"post_id":"cmfktk7f70046c04paog9d8pc","category_id":"cmfktk7f0002bc04p8juz965i","_id":"cmfktk7f8004cc04p4ppaf177"},{"post_id":"cmfktk7f80048c04pdus7erif","category_id":"cmfktk7f0002bc04p8juz965i","_id":"cmfktk7f9004fc04phigb3miw"}],"PostTag":[{"post_id":"cmfktk7ef0003c04pbmt3ad4g","tag_id":"cmfktk7ei0007c04pgruub6m1","_id":"cmfktk7el000ec04pbq3qcx39"},{"post_id":"cmfktk7el000fc04p6m0vc6ct","tag_id":"cmfktk7em000jc04p4l6b1oll","_id":"cmfktk7eo000pc04pe16takq5"},{"post_id":"cmfktk7en000lc04p74gie9zd","tag_id":"cmfktk7ei0007c04pgruub6m1","_id":"cmfktk7es0012c04p1v7c8356"},{"post_id":"cmfktk7en000lc04p74gie9zd","tag_id":"cmfktk7eo000oc04p7f4m10rn","_id":"cmfktk7es0015c04p7naxeix7"},{"post_id":"cmfktk7en000lc04p74gie9zd","tag_id":"cmfktk7ep000vc04p0stn53ld","_id":"cmfktk7et0019c04pbc9gctqh"},{"post_id":"cmfktk7en000mc04phcxsd8t4","tag_id":"cmfktk7ei0007c04pgruub6m1","_id":"cmfktk7eu001fc04pdtn3g7b9"},{"post_id":"cmfktk7en000mc04phcxsd8t4","tag_id":"cmfktk7er0010c04p4kqd1lgv","_id":"cmfktk7ev001hc04p48vucu6a"},{"post_id":"cmfktk7en000mc04phcxsd8t4","tag_id":"cmfktk7ep000vc04p0stn53ld","_id":"cmfktk7ev001mc04pgkxufoj4"},{"post_id":"cmfktk7eo000qc04p4hqxast4","tag_id":"cmfktk7eu001dc04p40xydt1r","_id":"cmfktk7ex001sc04pe0rachpe"},{"post_id":"cmfktk7eo000qc04p4hqxast4","tag_id":"cmfktk7ei0007c04pgruub6m1","_id":"cmfktk7ex001wc04p3vvu6vp7"},{"post_id":"cmfktk7eo000qc04p4hqxast4","tag_id":"cmfktk7ev001kc04p2gua18z4","_id":"cmfktk7ey001zc04pa2r079b8"},{"post_id":"cmfktk7eo000rc04p1it1fd69","tag_id":"cmfktk7ew001rc04p8vy26vuk","_id":"cmfktk7f1002fc04pcjmnbxvs"},{"post_id":"cmfktk7eo000rc04p1it1fd69","tag_id":"cmfktk7ey001yc04p4zgj1b68","_id":"cmfktk7f1002hc04pgwmwcz1o"},{"post_id":"cmfktk7eo000rc04p1it1fd69","tag_id":"cmfktk7ez0025c04p5vce2anj","_id":"cmfktk7f1002jc04p285o5igx"},{"post_id":"cmfktk7eo000rc04p1it1fd69","tag_id":"cmfktk7f0002ac04p2n5fb89w","_id":"cmfktk7f2002mc04pduksdgsr"},{"post_id":"cmfktk7ep000tc04p2769htvp","tag_id":"cmfktk7f1002dc04pchck1n7o","_id":"cmfktk7f2002oc04pczwu1bt8"},{"post_id":"cmfktk7eq000wc04pe5lucezb","tag_id":"cmfktk7ew001rc04p8vy26vuk","_id":"cmfktk7f2002tc04p9skbemrb"},{"post_id":"cmfktk7eq000wc04pe5lucezb","tag_id":"cmfktk7ey001yc04p4zgj1b68","_id":"cmfktk7f2002uc04pho27e4v6"},{"post_id":"cmfktk7er000xc04pcg4jc3ah","tag_id":"cmfktk7ey001yc04p4zgj1b68","_id":"cmfktk7f3002xc04p8mq567gj"},{"post_id":"cmfktk7er000xc04pcg4jc3ah","tag_id":"cmfktk7ei0007c04pgruub6m1","_id":"cmfktk7f3002yc04p8al8hj46"},{"post_id":"cmfktk7es0011c04p8bl4br3l","tag_id":"cmfktk7ez0025c04p5vce2anj","_id":"cmfktk7f30031c04p0l5bex9a"},{"post_id":"cmfktk7es0011c04p8bl4br3l","tag_id":"cmfktk7f3002zc04p2wtgagyu","_id":"cmfktk7f30032c04p5pqh2xii"},{"post_id":"cmfktk7es0011c04p8bl4br3l","tag_id":"cmfktk7ei0007c04pgruub6m1","_id":"cmfktk7f30034c04pg6ye7lgq"},{"post_id":"cmfktk7es0013c04p5fq4888k","tag_id":"cmfktk7ez0025c04p5vce2anj","_id":"cmfktk7f30036c04p1kha4kqs"},{"post_id":"cmfktk7es0013c04p5fq4888k","tag_id":"cmfktk7f30033c04p0n8o2ok7","_id":"cmfktk7f30037c04p044wgnno"},{"post_id":"cmfktk7et0018c04pglume5ci","tag_id":"cmfktk7ez0025c04p5vce2anj","_id":"cmfktk7f40039c04phiyua8yz"},{"post_id":"cmfktk7et0018c04pglume5ci","tag_id":"cmfktk7ei0007c04pgruub6m1","_id":"cmfktk7f4003ac04p2c1g1w58"},{"post_id":"cmfktk7ew001qc04pgpg4gdfx","tag_id":"cmfktk7ei0007c04pgruub6m1","_id":"cmfktk7f4003cc04p9djfe92q"},{"post_id":"cmfktk7ew001qc04pgpg4gdfx","tag_id":"cmfktk7f40038c04pcsgk7q3b","_id":"cmfktk7f4003dc04p0jsf94rs"},{"post_id":"cmfktk7ey0020c04ph7xr536p","tag_id":"cmfktk7f4003bc04pb4382whc","_id":"cmfktk7f4003hc04pbg131uey"},{"post_id":"cmfktk7ey0020c04ph7xr536p","tag_id":"cmfktk7f4003ec04p0rtzaibj","_id":"cmfktk7f5003ic04pgq8135sy"},{"post_id":"cmfktk7ey0020c04ph7xr536p","tag_id":"cmfktk7f4003fc04p9wvkatl4","_id":"cmfktk7f5003kc04p564s56fg"},{"post_id":"cmfktk7ey0020c04ph7xr536p","tag_id":"cmfktk7ei0007c04pgruub6m1","_id":"cmfktk7f5003lc04pgauubk12"},{"post_id":"cmfktk7ey0023c04pcgwahehw","tag_id":"cmfktk7f4003bc04pb4382whc","_id":"cmfktk7f5003oc04p11453fh9"},{"post_id":"cmfktk7ey0023c04pcgwahehw","tag_id":"cmfktk7f5003jc04p2sbb5w0e","_id":"cmfktk7f5003pc04p63k34xea"},{"post_id":"cmfktk7ey0023c04pcgwahehw","tag_id":"cmfktk7ei0007c04pgruub6m1","_id":"cmfktk7f5003rc04pclqqaupj"},{"post_id":"cmfktk7ey0023c04pcgwahehw","tag_id":"cmfktk7f5003mc04p3npc9pbx","_id":"cmfktk7f5003sc04p1c89gtpd"},{"post_id":"cmfktk7ez0026c04p8gsvbdad","tag_id":"cmfktk7f4003bc04pb4382whc","_id":"cmfktk7f6003vc04phw3t8ijp"},{"post_id":"cmfktk7ez0026c04p8gsvbdad","tag_id":"cmfktk7f5003jc04p2sbb5w0e","_id":"cmfktk7f6003wc04pfs26clyd"},{"post_id":"cmfktk7ez0026c04p8gsvbdad","tag_id":"cmfktk7ei0007c04pgruub6m1","_id":"cmfktk7f6003yc04paa5zg3vj"},{"post_id":"cmfktk7ez0026c04p8gsvbdad","tag_id":"cmfktk7f5003mc04p3npc9pbx","_id":"cmfktk7f6003zc04phjoe2qv3"},{"post_id":"cmfktk7f00029c04p7z8h2gcl","tag_id":"cmfktk7f4003bc04pb4382whc","_id":"cmfktk7f60041c04paihw5fwa"},{"post_id":"cmfktk7f00029c04p7z8h2gcl","tag_id":"cmfktk7f5003jc04p2sbb5w0e","_id":"cmfktk7f60042c04pewoz9gad"},{"post_id":"cmfktk7f00029c04p7z8h2gcl","tag_id":"cmfktk7ei0007c04pgruub6m1","_id":"cmfktk7f60043c04p6mv40kil"},{"post_id":"cmfktk7f00029c04p7z8h2gcl","tag_id":"cmfktk7f5003mc04p3npc9pbx","_id":"cmfktk7f60044c04pb0g5ekty"},{"post_id":"cmfktk7f70046c04paog9d8pc","tag_id":"cmfktk7f4003bc04pb4382whc","_id":"cmfktk7f80049c04pe6jk0hfm"},{"post_id":"cmfktk7f70046c04paog9d8pc","tag_id":"cmfktk7f5003jc04p2sbb5w0e","_id":"cmfktk7f8004bc04p6kosa4nu"},{"post_id":"cmfktk7f70046c04paog9d8pc","tag_id":"cmfktk7ei0007c04pgruub6m1","_id":"cmfktk7f9004ec04p1jaa3vm8"},{"post_id":"cmfktk7f70046c04paog9d8pc","tag_id":"cmfktk7f5003mc04p3npc9pbx","_id":"cmfktk7f9004gc04pbe83gsgn"},{"post_id":"cmfktk7f70045c04p5o9ibgam","tag_id":"cmfktk7f4003bc04pb4382whc","_id":"cmfktk7f9004hc04p2nmy37kv"},{"post_id":"cmfktk7f70045c04p5o9ibgam","tag_id":"cmfktk7f5003jc04p2sbb5w0e","_id":"cmfktk7f9004ic04pft2o6coj"},{"post_id":"cmfktk7f70045c04p5o9ibgam","tag_id":"cmfktk7ei0007c04pgruub6m1","_id":"cmfktk7f9004jc04p4jy5bj3r"},{"post_id":"cmfktk7f70045c04p5o9ibgam","tag_id":"cmfktk7f5003mc04p3npc9pbx","_id":"cmfktk7f9004kc04peiqkfi5c"},{"post_id":"cmfktk7f70045c04p5o9ibgam","tag_id":"cmfktk7f80047c04p4p9k3yjo","_id":"cmfktk7f9004lc04pchd8ha7a"},{"post_id":"cmfktk7f80048c04pdus7erif","tag_id":"cmfktk7f4003bc04pb4382whc","_id":"cmfktk7f9004mc04p9npf1dwk"},{"post_id":"cmfktk7f80048c04pdus7erif","tag_id":"cmfktk7f8004dc04p6b0raxrv","_id":"cmfktk7f9004nc04pdpeue4p4"},{"post_id":"cmfktk7f80048c04pdus7erif","tag_id":"cmfktk7f5003jc04p2sbb5w0e","_id":"cmfktk7f9004oc04p3mgieb0w"},{"post_id":"cmfktk7f80048c04pdus7erif","tag_id":"cmfktk7ei0007c04pgruub6m1","_id":"cmfktk7f9004pc04p9vpadj9n"}],"Tag":[{"name":"C++","_id":"cmfktk7ei0007c04pgruub6m1"},{"name":"测试","_id":"cmfktk7em000jc04p4l6b1oll"},{"name":"string","_id":"cmfktk7eo000oc04p7f4m10rn"},{"name":"实用代码","_id":"cmfktk7ep000vc04p0stn53ld"},{"name":"文件操作","_id":"cmfktk7er0010c04p4kqd1lgv"},{"name":"算法","_id":"cmfktk7eu001dc04p40xydt1r"},{"name":"排序","_id":"cmfktk7ev001kc04p2gua18z4"},{"name":"epoll","_id":"cmfktk7ew001rc04p8vy26vuk"},{"name":"socket","_id":"cmfktk7ey001yc04p4zgj1b68"},{"name":"Linux","_id":"cmfktk7ez0025c04p5vce2anj"},{"name":"IO多路复用","_id":"cmfktk7f0002ac04p2n5fb89w"},{"name":"网络协议","_id":"cmfktk7f1002dc04pchck1n7o"},{"name":"并发","_id":"cmfktk7f3002zc04p2wtgagyu"},{"name":"C","_id":"cmfktk7f30033c04p0n8o2ok7"},{"name":"对象模型","_id":"cmfktk7f40038c04pcsgk7q3b"},{"name":"数据结构","_id":"cmfktk7f4003bc04pb4382whc"},{"name":"堆","_id":"cmfktk7f4003ec04p0rtzaibj"},{"name":"优先级队列","_id":"cmfktk7f4003fc04p9wvkatl4"},{"name":"二叉树","_id":"cmfktk7f5003jc04p2sbb5w0e"},{"name":"树","_id":"cmfktk7f5003mc04p3npc9pbx"},{"name":"完全N叉树","_id":"cmfktk7f80047c04p4p9k3yjo"},{"name":"红黑树","_id":"cmfktk7f8004dc04p6b0raxrv"}]}}